
Echo_destroyer_richter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138b8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08013a80  08013a80  00023a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f44  08013f44  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08013f44  08013f44  00023f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f4c  08013f4c  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f4c  08013f4c  00023f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f50  08013f50  00023f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08013f54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  200000e4  08014038  000300e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08014038  0003066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b4f0  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000421f  00000000  00000000  0004b6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0004f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3b  00000000  00000000  00050cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025dfc  00000000  00000000  00051c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fda9  00000000  00000000  00077a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e275d  00000000  00000000  000977b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c08  00000000  00000000  00179f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0017fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000e1b  00000000  00000000  0017fb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  001809ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000e4 	.word	0x200000e4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08013a68 	.word	0x08013a68

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000e8 	.word	0x200000e8
 8000204:	08013a68 	.word	0x08013a68

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b970 	b.w	8000edc <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	460d      	mov	r5, r1
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	460f      	mov	r7, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14a      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c24:	428a      	cmp	r2, r1
 8000c26:	4694      	mov	ip, r2
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0xe2>
 8000c2a:	fab2 f382 	clz	r3, r2
 8000c2e:	b143      	cbz	r3, 8000c42 <__udivmoddi4+0x2e>
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	f1c3 0220 	rsb	r2, r3, #32
 8000c38:	409f      	lsls	r7, r3
 8000c3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	409c      	lsls	r4, r3
 8000c42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c46:	fa1f f58c 	uxth.w	r5, ip
 8000c4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4e:	0c22      	lsrs	r2, r4, #16
 8000c50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c58:	fb01 f005 	mul.w	r0, r1, r5
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x62>
 8000c60:	eb1c 0202 	adds.w	r2, ip, r2
 8000c64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c68:	f080 811c 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f240 8119 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c72:	3902      	subs	r1, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	b2a4      	uxth	r4, r4
 8000c7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c86:	fb00 f505 	mul.w	r5, r0, r5
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x90>
 8000c8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x294>
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x294>
 8000ca0:	4464      	add	r4, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca8:	1b64      	subs	r4, r4, r5
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11e      	cbz	r6, 8000cb6 <__udivmoddi4+0xa2>
 8000cae:	40dc      	lsrs	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0xbc>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80ed 	beq.w	8000e9e <__udivmoddi4+0x28a>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	d149      	bne.n	8000d6c <__udivmoddi4+0x158>
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	d302      	bcc.n	8000ce2 <__udivmoddi4+0xce>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	f200 80f8 	bhi.w	8000ed2 <__udivmoddi4+0x2be>
 8000ce2:	1a84      	subs	r4, r0, r2
 8000ce4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4617      	mov	r7, r2
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d0e2      	beq.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf4:	e7df      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xe6>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d14:	fb07 2015 	mls	r0, r7, r5, r2
 8000d18:	0c22      	lsrs	r2, r4, #16
 8000d1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1e:	fb0e f005 	mul.w	r0, lr, r5
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d26:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2b8>
 8000d36:	4645      	mov	r5, r8
 8000d38:	1a12      	subs	r2, r2, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d40:	fb07 2210 	mls	r2, r7, r0, r2
 8000d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x14e>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x14c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2c2>
 8000d60:	4610      	mov	r0, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6a:	e79f      	b.n	8000cac <__udivmoddi4+0x98>
 8000d6c:	f1c1 0720 	rsb	r7, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d82:	40fd      	lsrs	r5, r7
 8000d84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	fb09 5518 	mls	r5, r9, r8, r5
 8000d96:	0c1c      	lsrs	r4, r3, #16
 8000d98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	fa00 f001 	lsl.w	r0, r0, r1
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2b4>
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2b4>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4464      	add	r4, ip
 8000dc4:	1b64      	subs	r4, r4, r5
 8000dc6:	b29d      	uxth	r5, r3
 8000dc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2ac>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2ac>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	4464      	add	r4, ip
 8000dee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df2:	fba3 9502 	umull	r9, r5, r3, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46ae      	mov	lr, r5
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x29c>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x298>
 8000e04:	b156      	cbz	r6, 8000e1c <__udivmoddi4+0x208>
 8000e06:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e12:	40ca      	lsrs	r2, r1
 8000e14:	40cc      	lsrs	r4, r1
 8000e16:	4317      	orrs	r7, r2
 8000e18:	e9c6 7400 	strd	r7, r4, [r6]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	f1c3 0120 	rsb	r1, r3, #32
 8000e28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e30:	fa25 f101 	lsr.w	r1, r5, r1
 8000e34:	409d      	lsls	r5, r3
 8000e36:	432a      	orrs	r2, r5
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e44:	fb07 1510 	mls	r5, r7, r0, r1
 8000e48:	0c11      	lsrs	r1, r2, #16
 8000e4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e52:	428d      	cmp	r5, r1
 8000e54:	fa04 f403 	lsl.w	r4, r4, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x258>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e64:	428d      	cmp	r5, r1
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1b49      	subs	r1, r1, r5
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e74:	fb07 1115 	mls	r1, r7, r5, r1
 8000e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e80:	4291      	cmp	r1, r2
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x282>
 8000e84:	eb1c 0202 	adds.w	r2, ip, r2
 8000e88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2a8>
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2a8>
 8000e92:	3d02      	subs	r5, #2
 8000e94:	4462      	add	r2, ip
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0xfc>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	e6e6      	b.n	8000c76 <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x90>
 8000eac:	4548      	cmp	r0, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000ebc:	4645      	mov	r5, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x282>
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x258>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000ecc:	3d02      	subs	r5, #2
 8000ece:	4462      	add	r2, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e70a      	b.n	8000cec <__udivmoddi4+0xd8>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x14e>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <libSpeexAEC_Init>:
{
  return snprintf(version, 35, "ST AcousticEC v%d.%d.%d", (int)((LIB_VERSION >> 16) & 0xFFUL), (int)((LIB_VERSION >> 8) & 0xFFUL), (int)(LIB_VERSION & 0xFFUL));
}

uint32_t libSpeexAEC_Init(AcousticEC_Handler_t *pHandler)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
  InternalEchoType *echoInstance = (InternalEchoType *)(pHandler->pInternalMemory);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t ret = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]

  memset(pHandler->pInternalMemory, 0, pHandler->internal_memory_size);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6958      	ldr	r0, [r3, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	461a      	mov	r2, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	f011 f827 	bl	8011f50 <memset>

  echoInstance->preprocess_initialized = pHandler->preprocess_init;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000f0e:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548

  if (pHandler->ptr_primary_channels > 0)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	891b      	ldrh	r3, [r3, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <libSpeexAEC_Init+0x4a>
  {
    echoInstance->ptr_primary_channels = pHandler->ptr_primary_channels;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	891a      	ldrh	r2, [r3, #8]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000f24:	f8a3 2f3c 	strh.w	r2, [r3, #3900]	; 0xf3c
 8000f28:	e009      	b.n	8000f3e <libSpeexAEC_Init+0x5e>
  }
  else
  {
    echoInstance->ptr_primary_channels = 1;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000f30:	2201      	movs	r2, #1
 8000f32:	f8a3 2f3c 	strh.w	r2, [r3, #3900]	; 0xf3c
    ret |= ACOUSTIC_EC_PTR_CHANNELS_ERROR;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	61fb      	str	r3, [r7, #28]
  }

  if (pHandler->ptr_reference_channels > 0)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	895b      	ldrh	r3, [r3, #10]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d007      	beq.n	8000f56 <libSpeexAEC_Init+0x76>
  {
    echoInstance->ptr_reference_channels = pHandler->ptr_reference_channels;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	895a      	ldrh	r2, [r3, #10]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000f50:	f8a3 2f3e 	strh.w	r2, [r3, #3902]	; 0xf3e
 8000f54:	e009      	b.n	8000f6a <libSpeexAEC_Init+0x8a>
  }
  else
  {
    echoInstance->ptr_reference_channels = 1;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f8a3 2f3e 	strh.w	r2, [r3, #3902]	; 0xf3e
    ret |= ACOUSTIC_EC_PTR_CHANNELS_ERROR;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	61fb      	str	r3, [r7, #28]
  }

  if (pHandler->ptr_output_channels > 0)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	899b      	ldrh	r3, [r3, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <libSpeexAEC_Init+0xa2>
  {
    echoInstance->ptr_output_channels = pHandler->ptr_output_channels;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	899a      	ldrh	r2, [r3, #12]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000f7c:	f8a3 2f40 	strh.w	r2, [r3, #3904]	; 0xf40
 8000f80:	e009      	b.n	8000f96 <libSpeexAEC_Init+0xb6>
  }
  else
  {
    echoInstance->ptr_output_channels = 1;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f8a3 2f40 	strh.w	r2, [r3, #3904]	; 0xf40
    ret |= ACOUSTIC_EC_PTR_CHANNELS_ERROR;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	61fb      	str	r3, [r7, #28]
  }

  if (pHandler->tail_length > 0)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <libSpeexAEC_Init+0xce>
  {
    echoInstance->tail_length = pHandler->tail_length;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000fa8:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c
 8000fac:	e00a      	b.n	8000fc4 <libSpeexAEC_Init+0xe4>
  }
  else
  {
    echoInstance->tail_length = 512;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c
    ret |= ACOUSTIC_EC_TAIL_LENGTH_ERROR;
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
  }

  uint32_t byte_offset = sizeof(InternalEchoType);
 8000fc4:	f244 5350 	movw	r3, #17744	; 0x4550
 8000fc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pByte = (uint8_t *)pHandler->pInternalMemory;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint32_t n = (((echoInstance->tail_length + NN_MAX - 1) / NN_MAX) + 1) * NN_MAX * 2;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000fd6:	f8b3 354c 	ldrh.w	r3, [r3, #1356]	; 0x54c
 8000fda:	337f      	adds	r3, #127	; 0x7f
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	da00      	bge.n	8000fe2 <libSpeexAEC_Init+0x102>
 8000fe0:	337f      	adds	r3, #127	; 0x7f
 8000fe2:	11db      	asrs	r3, r3, #7
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	60fb      	str	r3, [r7, #12]

  /*CHECK MEMORY alloc*/
  echoInstance->st.X = (float *)(pByte + byte_offset);
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	441a      	add	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8c3 2848 	str.w	r2, [r3, #2120]	; 0x848
  byte_offset += n * sizeof(float);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
  echoInstance->st.W = (float *)(pByte + byte_offset);
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4413      	add	r3, r2
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800100c:	f8c2 3e4c 	str.w	r3, [r2, #3660]	; 0xe4c
  byte_offset += n * sizeof(float);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4413      	add	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
  echoInstance->st.foreground = (float *)(pByte + byte_offset);
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	4413      	add	r3, r2
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001026:	f8c2 3e50 	str.w	r3, [r2, #3664]	; 0xe50
  byte_offset += n * sizeof(float);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4413      	add	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
  echoInstance->st.prop = (float *)(pByte + byte_offset);
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4413      	add	r3, r2
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001040:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
  byte_offset += echoInstance->tail_length * sizeof(float);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800104a:	f8b3 354c 	ldrh.w	r3, [r3, #1356]	; 0x54c
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4413      	add	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]

  echoInstance->samples_count_output = ECHO_BUFF;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	f8a3 2f44 	strh.w	r2, [r3, #3908]	; 0xf44
  echoInstance->buffer_state = 0;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001068:	2200      	movs	r2, #0
 800106a:	f8a3 2546 	strh.w	r2, [r3, #1350]	; 0x546
  echoInstance->ECHO = 1;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001074:	2201      	movs	r2, #1
 8001076:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
  uint16_t sampleRate = FS;
 800107a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800107e:	817b      	strh	r3, [r7, #10]

  echoInstance->st.fft_table = &echoInstance->table;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 8001086:	3338      	adds	r3, #56	; 0x38
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800108e:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
  Echo_init(&echoInstance->st, NN, pHandler->tail_length, 1, 1);
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f103 000c 	add.w	r0, r3, #12
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	2301      	movs	r3, #1
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	f000 fd9f 	bl	8001be8 <Echo_init>
  Echo_ctrl(&echoInstance->st, SPEEX_ECHO_SET_SAMPLING_RATE, &sampleRate);
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	330c      	adds	r3, #12
 80010ae:	f107 020a 	add.w	r2, r7, #10
 80010b2:	2118      	movs	r1, #24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fceb 	bl	8003a90 <Echo_ctrl>
  libSpeexAEC_fft_init(&echoInstance->table, (int)NN_MAX * 2);
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 80010c0:	3338      	adds	r3, #56	; 0x38
 80010c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fa03 	bl	80014d2 <libSpeexAEC_fft_init>

  if (echoInstance->preprocess_initialized == 1)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010d2:	f893 3548 	ldrb.w	r3, [r3, #1352]	; 0x548
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d14a      	bne.n	8001170 <libSpeexAEC_Init+0x290>
  {
    echoInstance->PREPROCESS = 1;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549

    echoInstance->den = (SpeexPreprocessState *)(pByte + byte_offset);
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	441a      	add	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	605a      	str	r2, [r3, #4]
    byte_offset += sizeof(SpeexPreprocessState);
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 80010f6:	331c      	adds	r3, #28
 80010f8:	61bb      	str	r3, [r7, #24]
    echoInstance->table_den = (drft_lookup *)(pByte + byte_offset);
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	441a      	add	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	609a      	str	r2, [r3, #8]
    byte_offset += sizeof(drft_lookup);
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 800110a:	61bb      	str	r3, [r7, #24]
    echoInstance->filterBank = (FilterBank *)(pByte + byte_offset);
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	441a      	add	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]
    byte_offset += sizeof(FilterBank);
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	f603 0368 	addw	r3, r3, #2152	; 0x868
 800111c:	61bb      	str	r3, [r7, #24]

    libSpeexAEC_fft_init(echoInstance->table_den, (int)NN_MAX * 2);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f9d3 	bl	80014d2 <libSpeexAEC_fft_init>
    echoInstance->den->fft_lookup = echoInstance->table_den;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001138:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
    Preprocess_init(echoInstance->den, NN, sampleRate);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	897a      	ldrh	r2, [r7, #10]
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fabd 	bl	80046c4 <Preprocess_init>
    filterbank_new(echoInstance->filterBank, NB_BANDS, sampleRate, NN_MAX, 1);
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	897b      	ldrh	r3, [r7, #10]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001158:	2301      	movs	r3, #1
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	2118      	movs	r1, #24
 8001162:	f002 fdb1 	bl	8003cc8 <filterbank_new>
    echoInstance->den->bank = echoInstance->filterBank;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	611a      	str	r2, [r3, #16]
  }

  return (pHandler->internal_memory_size != byte_offset);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	429a      	cmp	r2, r3
 8001178:	bf14      	ite	ne
 800117a:	2301      	movne	r3, #1
 800117c:	2300      	moveq	r3, #0
 800117e:	b2db      	uxtb	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <libSpeexAEC_getMemorySize>:


uint32_t libSpeexAEC_getMemorySize(AcousticEC_Handler_t *pHandler)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  uint32_t byte_offset = sizeof(InternalEchoType);
 8001194:	f244 5350 	movw	r3, #17744	; 0x4550
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t n = (((pHandler->tail_length + NN_MAX - 1) / NN_MAX) + 1) * NN_MAX * 2;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	337f      	adds	r3, #127	; 0x7f
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da00      	bge.n	80011a6 <libSpeexAEC_getMemorySize+0x1e>
 80011a4:	337f      	adds	r3, #127	; 0x7f
 80011a6:	11db      	asrs	r3, r3, #7
 80011a8:	3301      	adds	r3, #1
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	60fb      	str	r3, [r7, #12]

  byte_offset += n * sizeof(float);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4413      	add	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
  byte_offset += n * sizeof(float);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	4413      	add	r3, r2
 80011c0:	617b      	str	r3, [r7, #20]
  byte_offset += n * sizeof(float);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4413      	add	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
  byte_offset += (pHandler->tail_length) * sizeof(float);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4413      	add	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]

  if (pHandler->preprocess_init == 1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d10c      	bne.n	80011fa <libSpeexAEC_getMemorySize+0x72>
  {
    byte_offset += sizeof(SpeexPreprocessState);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 80011e6:	331c      	adds	r3, #28
 80011e8:	617b      	str	r3, [r7, #20]
    byte_offset += sizeof(drft_lookup);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 80011f0:	617b      	str	r3, [r7, #20]
    byte_offset += sizeof(FilterBank);
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80011f8:	617b      	str	r3, [r7, #20]
  }

  pHandler->internal_memory_size = byte_offset;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	611a      	str	r2, [r3, #16]

  return ret;
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <libSpeexAEC_setConfig>:
/**
* @brief Library run function, performs audio analysis when all required data has been collected
* @retval 0 if everything is ok, 1 otherwise
*/
uint32_t libSpeexAEC_setConfig(AcousticEC_Handler_t *pHandler, AcousticEC_Config_t *pConfig)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  InternalEchoType *EchoInternal = (InternalEchoType *)(pHandler->pInternalMemory);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	60bb      	str	r3, [r7, #8]
  uint32_t ret = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]

  if (EchoInternal->preprocess_initialized == 1)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001228:	f893 3548 	ldrb.w	r3, [r3, #1352]	; 0x548
 800122c:	2b01      	cmp	r3, #1
 800122e:	d16d      	bne.n	800130c <libSpeexAEC_setConfig+0xfe>
  {
    /*PREPROCESS*/
    if ((pConfig->preprocess_state & ACOUSTIC_EC_PREPROCESS_ENABLE) != 0U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <libSpeexAEC_setConfig+0x3c>
    {
      EchoInternal->PREPROCESS = 1;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8001248:	e005      	b.n	8001256 <libSpeexAEC_setConfig+0x48>
    }
    else
    {
      EchoInternal->PREPROCESS = 0;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
    }

    /*AGC*/
    if ((pConfig->AGC_value > 0) && (pConfig->AGC_value < 32768))
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d019      	beq.n	8001292 <libSpeexAEC_setConfig+0x84>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001266:	d214      	bcs.n	8001292 <libSpeexAEC_setConfig+0x84>
    {
      EchoInternal->den->agc_enabled = 1;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001270:	461a      	mov	r2, r3
 8001272:	2301      	movs	r3, #1
 8001274:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
      EchoInternal->den->agc_level = pConfig->AGC_value;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	ee07 2a90 	vmov	s15, r2
 8001284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001288:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800128c:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
 8001290:	e018      	b.n	80012c4 <libSpeexAEC_setConfig+0xb6>
    }
    else if (pConfig->AGC_value == 0)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d108      	bne.n	80012ac <libSpeexAEC_setConfig+0x9e>
    {
      EchoInternal->den->agc_enabled = 0;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80012a2:	461a      	mov	r2, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
 80012aa:	e00b      	b.n	80012c4 <libSpeexAEC_setConfig+0xb6>
    }
    else
    {
      EchoInternal->den->agc_enabled = 0;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80012b4:	461a      	mov	r2, r3
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
      ret |= ACOUSTIC_EC_AEC_LEVEL_ERROR;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
    }

    EchoInternal->den->noise_suppress = pConfig->noise_suppress_default;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	68d2      	ldr	r2, [r2, #12]
 80012cc:	631a      	str	r2, [r3, #48]	; 0x30
    EchoInternal->den->echo_suppress = pConfig->echo_suppress_default;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	6912      	ldr	r2, [r2, #16]
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34
    EchoInternal->den->echo_suppress_active = pConfig->echo_suppress_active;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	6952      	ldr	r2, [r2, #20]
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38

    if (pConfig->residual_echo_remove == 1)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d108      	bne.n	80012fc <libSpeexAEC_setConfig+0xee>
    {
      Preprocess_setup(EchoInternal->den, SPEEX_PREPROCESS_SET_ECHO_STATE, &EchoInternal->st);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	6858      	ldr	r0, [r3, #4]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	330c      	adds	r3, #12
 80012f2:	461a      	mov	r2, r3
 80012f4:	2118      	movs	r1, #24
 80012f6:	f005 f833 	bl	8006360 <Preprocess_setup>
 80012fa:	e011      	b.n	8001320 <libSpeexAEC_setConfig+0x112>
    }
    else
    {
      Preprocess_setup(EchoInternal->den, SPEEX_PREPROCESS_SET_ECHO_STATE, 0);
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	2118      	movs	r1, #24
 8001304:	4618      	mov	r0, r3
 8001306:	f005 f82b 	bl	8006360 <Preprocess_setup>
 800130a:	e009      	b.n	8001320 <libSpeexAEC_setConfig+0x112>
    }
  }
  else
  {
    /*PREPROCESS*/
    if ((pConfig->preprocess_state & ACOUSTIC_EC_PREPROCESS_ENABLE) != 0U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <libSpeexAEC_setConfig+0x112>
    {
      ret |= ACOUSTIC_EC_PREPROCESS_ERROR;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001320:	68fb      	ldr	r3, [r7, #12]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <libSpeexAEC_Process>:
  }
  return ret;
}

uint32_t libSpeexAEC_Process(AcousticEC_Handler_t *pHandler)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b088      	sub	sp, #32
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  InternalEchoType *echoInstance = (InternalEchoType *)(pHandler->pInternalMemory);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	617b      	str	r3, [r7, #20]
  uint32_t ret = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t ECHO = echoInstance->ECHO;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001342:	f893 354a 	ldrb.w	r3, [r3, #1354]	; 0x54a
 8001346:	73fb      	strb	r3, [r7, #15]
  uint8_t PREPROCESS = echoInstance->PREPROCESS;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800134e:	f893 3549 	ldrb.w	r3, [r3, #1353]	; 0x549
 8001352:	73bb      	strb	r3, [r7, #14]

  if (echoInstance->buffer_state == 1)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800135a:	f8b3 3546 	ldrh.w	r3, [r3, #1350]	; 0x546
 800135e:	2b01      	cmp	r3, #1
 8001360:	d15a      	bne.n	8001418 <libSpeexAEC_Process+0xee>
  {
    echoInstance->buffer_state = 0;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001368:	2200      	movs	r2, #0
 800136a:	f8a3 2546 	strh.w	r2, [r3, #1350]	; 0x546
    if (((PREPROCESS && ECHO) == 0)  || ((PREPROCESS >= 1) && (ECHO == 0)))
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <libSpeexAEC_Process+0x54>
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <libSpeexAEC_Process+0x54>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <libSpeexAEC_Process+0x56>
 800137e:	2300      	movs	r3, #0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <libSpeexAEC_Process+0x66>
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d020      	beq.n	80013cc <libSpeexAEC_Process+0xa2>
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d11d      	bne.n	80013cc <libSpeexAEC_Process+0xa2>
    {
      uint32_t i = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
      for (i = 0; i < ECHO_BUFF; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	e015      	b.n	80013c6 <libSpeexAEC_Process+0x9c>
      {
        echoInstance->e_buf[ECHO_BUFF + i] = echoInstance->dir1_buf[i];
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f503 53fd 	add.w	r3, r3, #8096	; 0x1fa0
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	f501 5306 	add.w	r3, r1, #8576	; 0x2180
 80013b6:	3320      	adds	r3, #32
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	4602      	mov	r2, r0
 80013be:	80da      	strh	r2, [r3, #6]
      for (i = 0; i < ECHO_BUFF; i++)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3301      	adds	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2b7f      	cmp	r3, #127	; 0x7f
 80013ca:	d9e6      	bls.n	800139a <libSpeexAEC_Process+0x70>
      }
    }
    if (ECHO)
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <libSpeexAEC_Process+0xce>
    {
      Echo_cancellation(&echoInstance->st, echoInstance->dir1_buf, echoInstance->dir2_buf, echoInstance->e_buf + ECHO_BUFF);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f103 000c 	add.w	r0, r3, #12
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f503 517d 	add.w	r1, r3, #16192	; 0x3f40
 80013de:	3106      	adds	r1, #6
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f503 4282 	add.w	r2, r3, #16640	; 0x4100
 80013e6:	3246      	adds	r2, #70	; 0x46
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 80013ee:	3346      	adds	r3, #70	; 0x46
 80013f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013f4:	f000 ff18 	bl	8002228 <Echo_cancellation>
    }
    if (PREPROCESS)
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d064      	beq.n	80014c8 <libSpeexAEC_Process+0x19e>
    {
      Preprocess(echoInstance->den, echoInstance->e_buf + ECHO_BUFF);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8001408:	3346      	adds	r3, #70	; 0x46
 800140a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f004 f875 	bl	8005500 <Preprocess>
 8001416:	e057      	b.n	80014c8 <libSpeexAEC_Process+0x19e>
    }
  }
  else if (echoInstance->buffer_state == 2)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800141e:	f8b3 3546 	ldrh.w	r3, [r3, #1350]	; 0x546
 8001422:	2b02      	cmp	r3, #2
 8001424:	d150      	bne.n	80014c8 <libSpeexAEC_Process+0x19e>
  {
    echoInstance->buffer_state = 0;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800142c:	2200      	movs	r2, #0
 800142e:	f8a3 2546 	strh.w	r2, [r3, #1350]	; 0x546
    if ((ECHO == 0) || ((PREPROCESS >= 1) && (ECHO == 0)))
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <libSpeexAEC_Process+0x11a>
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d01f      	beq.n	800147e <libSpeexAEC_Process+0x154>
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d11c      	bne.n	800147e <libSpeexAEC_Process+0x154>
    {
      uint32_t i = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
      for (i = 0; i < ECHO_BUFF; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	e014      	b.n	8001478 <libSpeexAEC_Process+0x14e>
      {
        echoInstance->e_buf[i] = echoInstance->dir1_buf[i + ECHO_BUFF];
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	3380      	adds	r3, #128	; 0x80
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	f503 53fd 	add.w	r3, r3, #8096	; 0x1fa0
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8001468:	3320      	adds	r3, #32
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	460a      	mov	r2, r1
 8001470:	80da      	strh	r2, [r3, #6]
      for (i = 0; i < ECHO_BUFF; i++)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3301      	adds	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b7f      	cmp	r3, #127	; 0x7f
 800147c:	d9e7      	bls.n	800144e <libSpeexAEC_Process+0x124>
      }
    }
    if (ECHO)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d014      	beq.n	80014ae <libSpeexAEC_Process+0x184>
    {
      Echo_cancellation(&echoInstance->st, echoInstance->dir1_buf + ECHO_BUFF, echoInstance->dir2_buf + ECHO_BUFF, echoInstance->e_buf);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f103 000c 	add.w	r0, r3, #12
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f503 537d 	add.w	r3, r3, #16192	; 0x3f40
 8001490:	3306      	adds	r3, #6
 8001492:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800149c:	3346      	adds	r3, #70	; 0x46
 800149e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 80014a8:	3346      	adds	r3, #70	; 0x46
 80014aa:	f000 febd 	bl	8002228 <Echo_cancellation>
    }
    if (PREPROCESS)
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d009      	beq.n	80014c8 <libSpeexAEC_Process+0x19e>
    {
      Preprocess(echoInstance->den, echoInstance->e_buf);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 80014be:	3346      	adds	r3, #70	; 0x46
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f004 f81c 	bl	8005500 <Preprocess>
  }
  else
  {
    /* do nothing: MISRAC */
  }
  return ret;
 80014c8:	693b      	ldr	r3, [r7, #16]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <libSpeexAEC_fft_init>:
  }
  return ret;
}

void libSpeexAEC_fft_init(drft_lookup *table, int32_t size)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  drft_init(table, size);
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f009 faa4 	bl	800aa2c <drft_init>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <libSpeexAEC_fft>:

void libSpeexAEC_fft(drft_lookup *table, float32_t *in, float32_t *out)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  int32_t i;
  float32_t scale = 1.0f / ((float32_t)(table->n));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150c:	edc7 7a04 	vstr	s15, [r7, #16]
  for (i = 0; i < table->n; i++)
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e012      	b.n	800153c <libSpeexAEC_fft+0x50>
  {
    out[i] = scale * in[i];
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	4413      	add	r3, r2
 800151e:	ed93 7a00 	vldr	s14, [r3]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	edd7 7a04 	vldr	s15, [r7, #16]
 800152e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001532:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < table->n; i++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	429a      	cmp	r2, r3
 8001544:	dbe7      	blt.n	8001516 <libSpeexAEC_fft+0x2a>
  }
  drft_forward(table, out);
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f009 fa2f 	bl	800a9ac <drft_forward>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <libSpeexAEC_ifft>:

void libSpeexAEC_ifft(drft_lookup *table, float32_t *in, float32_t *out)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  int32_t i;
  for (i = 0; i < table->n; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e00c      	b.n	8001582 <libSpeexAEC_ifft+0x2c>
  {
    out[i] = in[i];
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	441a      	add	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	440b      	add	r3, r1
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < table->n; i++)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbed      	blt.n	8001568 <libSpeexAEC_ifft+0x12>
  }
  drft_backward(table, out);
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f009 fa2c 	bl	800a9ec <drft_backward>
}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <AcousticEC_Init>:
* @retval 0 if everything is fine.
*         different from 0 if erroneous parameters have been passed to the Init function and the default value has been used.
*         The specific error can be recognized by checking the relative bit in the returned word.
*/
uint32_t AcousticEC_Init(AcousticEC_Handler_t *pHandler)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return libSpeexAEC_Init(pHandler);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fc9b 	bl	8000ee0 <libSpeexAEC_Init>
 80015aa:	4603      	mov	r3, r0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <AcousticEC_Process>:
* @brief  Library run function, performs audio analysis when all required data has been collected.
* @param  pHandler: pointer to the handler of the current SpeexAEC instance running
* @retval 0 if everything is ok, 1 otherwise.
*/
uint32_t AcousticEC_Process(AcousticEC_Handler_t *pHandler)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return libSpeexAEC_Process(pHandler);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff feb4 	bl	800132a <libSpeexAEC_Process>
 80015c2:	4603      	mov	r3, r0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <AcousticEC_setConfig>:
* @param  pHandler: AcousticEC_Handler_t filled with desired parameters.
* @param  pConfig: pointer to the dynamic parameters handler that will be filled with the current library configuration.
* @retval 0 if everything is ok, 1 otherwise.
*/
uint32_t AcousticEC_setConfig(AcousticEC_Handler_t *pHandler, AcousticEC_Config_t *pConfig)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  return libSpeexAEC_setConfig(pHandler, pConfig);
 80015d6:	6839      	ldr	r1, [r7, #0]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fe18 	bl	800120e <libSpeexAEC_setConfig>
 80015de:	4603      	mov	r3, r0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <AcousticEC_getMemorySize>:
*         right amount of memory needed by the library, depending on the specific static parameters adopted.
* @param  pHandler: AcousticEC_Handler_t filled with desired parameters.
* @retval 0 if everything is fine.
*/
uint32_t AcousticEC_getMemorySize(AcousticEC_Handler_t *pHandler)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return libSpeexAEC_getMemorySize(pHandler);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fdc9 	bl	8001188 <libSpeexAEC_getMemorySize>
 80015f6:	4603      	mov	r3, r0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <my_sqrt>:
#define spx_exp expf
#define spx_cos_norm(x) (cosf((.5f*M_PI)*(x)))
#define spx_atan atanf

static inline float32_t my_sqrt(float32_t a)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	ed87 0a01 	vstr	s0, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001614:	edd7 7a05 	vldr	s15, [r7, #20]
 8001618:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001620:	db09      	blt.n	8001636 <my_sqrt+0x36>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001622:	ed97 0a05 	vldr	s0, [r7, #20]
 8001626:	f010 ff3d 	bl	80124a4 <sqrtf>
 800162a:	eef0 7a40 	vmov.f32	s15, s0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001634:	e004      	b.n	8001640 <my_sqrt+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800163e:	bf00      	nop
  float32_t b;
  (void)arm_sqrt_f32(a, &b);
  return b;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	ee07 3a90 	vmov	s15, r3
}
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <filter_dc_notch16>:

#define chan 0
#define speak 0

static inline void filter_dc_notch16(const spx_int16_t *in, spx_word16_t radius, spx_word16_t *out, int len, spx_mem_t *mem, int stride)
{
 8001650:	b480      	push	{r7}
 8001652:	b08b      	sub	sp, #44	; 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	6178      	str	r0, [r7, #20]
 8001658:	ed87 0a04 	vstr	s0, [r7, #16]
 800165c:	60f9      	str	r1, [r7, #12]
 800165e:	60ba      	str	r2, [r7, #8]
 8001660:	607b      	str	r3, [r7, #4]
  int i;
  spx_word16_t den2;
  #ifdef FIXED_POINT
  den2 = MULT16_16_Q15(radius, radius) + MULT16_16_Q15(QCONST16(.7, 15), MULT16_16_Q15(32767 - radius, 32767 - radius));
  #else
  den2 = radius * radius + 0.7f * (1 - radius) * (1 - radius);
 8001662:	edd7 7a04 	vldr	s15, [r7, #16]
 8001666:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800166a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800166e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001672:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001676:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001748 <filter_dc_notch16+0xf8>
 800167a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800167e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001682:	edd7 7a04 	vldr	s15, [r7, #16]
 8001686:	ee76 7a67 	vsub.f32	s15, s12, s15
 800168a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	edc7 7a08 	vstr	s15, [r7, #32]
  #endif
  for (i = 0; i < len; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
 800169a:	e049      	b.n	8001730 <filter_dc_notch16+0xe0>
  {
    spx_word16_t vin = in[i * stride];
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4413      	add	r3, r2
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b6:	edc7 7a07 	vstr	s15, [r7, #28]
    spx_word32_t vout = mem[0] + SHL32(EXTEND32(vin), 15);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80016c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c8:	edc7 7a06 	vstr	s15, [r7, #24]
    #ifdef FIXED_POINT
    mem[0] = mem[1] + SHL32(SHL32(-EXTEND32(vin), 15) + MULT16_32_Q15(radius, vout), 1);
    #else
    mem[0] = mem[1] + 2 * (-vin + radius * vout);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3304      	adds	r3, #4
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	edd7 6a04 	vldr	s13, [r7, #16]
 80016d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80016e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	edc3 7a00 	vstr	s15, [r3]
    #endif
    mem[1] = SHL32(EXTEND32(vin), 15) - MULT16_32_Q15(den2, vout);
 80016f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80016fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80016fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	ed97 7a07 	vldr	s14, [r7, #28]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	edc3 7a00 	vstr	s15, [r3]
    out[i] = SATURATE32(PSHR32(MULT16_32_Q15(radius, vout), 15), 32767);
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	ed97 7a04 	vldr	s14, [r7, #16]
 800171e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < len; i++)
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	3301      	adds	r3, #1
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbb1      	blt.n	800169c <filter_dc_notch16+0x4c>
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	3f333333 	.word	0x3f333333

0800174c <mdf_inner_prod>:

/* This inner product is slightly different from the codec version because of fixed-point */
static inline spx_word32_t mdf_inner_prod(const spx_word16_t *x, const spx_word16_t *y, int32_t len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  spx_word32_t sum = 0.0f;
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f010 fae6 	bl	8011d38 <arm_dot_prod_f32>
  return sum;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	ee07 3a90 	vmov	s15, r3
}
 8001772:	eeb0 0a67 	vmov.f32	s0, s15
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <power_spectrum>:

/** Compute power spectrum of a half-complex (packed) vector */
static inline void power_spectrum(const spx_word16_t *X, spx_word32_t *ps, int32_t N)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  ps[0] += X[0] * X[0];
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	edd3 6a00 	vldr	s13, [r3]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	edc3 7a00 	vstr	s15, [r3]
  arm_cmplx_mag_squared_f32((float32_t *)&X[1], &ps[1], ((uint32_t)N / 2U) - 1U);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1d18      	adds	r0, r3, #4
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1d19      	adds	r1, r3, #4
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	3b01      	subs	r3, #1
 80017b6:	461a      	mov	r2, r3
 80017b8:	f010 f9f4 	bl	8011ba4 <arm_cmplx_mag_squared_f32>
  ps[(N / 2) - 1] += X[N - 1] * X[N - 1];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0fda      	lsrs	r2, r3, #31
 80017c0:	4413      	add	r3, r2
 80017c2:	105b      	asrs	r3, r3, #1
 80017c4:	4619      	mov	r1, r3
 80017c6:	460b      	mov	r3, r1
 80017c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017cc:	3b01      	subs	r3, #1
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	4413      	add	r3, r2
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017de:	3b01      	subs	r3, #1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4413      	add	r3, r2
 80017e6:	edd3 6a00 	vldr	s13, [r3]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017f0:	3b01      	subs	r3, #1
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001800:	460b      	mov	r3, r1
 8001802:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001806:	3b01      	subs	r3, #1
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	edc3 7a00 	vstr	s15, [r3]
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <power_spectrum_accum>:

/** Compute power spectrum of a half-complex (packed) vector and accumulate */
static inline void power_spectrum_accum(const spx_word16_t *X, spx_word32_t *ps, int32_t N)
{
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  int32_t i;
  int32_t j = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
  ps[0] += MULT16_16(X[0], X[0]);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	edd3 6a00 	vldr	s13, [r3]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < (N - 1); i += 2)
 800184e:	2301      	movs	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e033      	b.n	80018bc <power_spectrum_accum+0x9e>
  {
    ps[j] +=  MULT16_16(X[i], X[i]) + MULT16_16(X[i + 1], X[i + 1]);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	4413      	add	r3, r2
 800185c:	ed93 7a00 	vldr	s14, [r3]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	edd3 6a00 	vldr	s13, [r3]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4413      	add	r3, r2
 8001886:	ed93 6a00 	vldr	s12, [r3]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ee66 7a27 	vmul.f32	s15, s12, s15
 800189c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	4413      	add	r3, r2
 80018a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ac:	edc3 7a00 	vstr	s15, [r3]
    j++;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3301      	adds	r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
  for (i = 1; i < (N - 1); i += 2)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3302      	adds	r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbc6      	blt.n	8001854 <power_spectrum_accum+0x36>
  }

  if (i < N)
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	da1b      	bge.n	8001906 <power_spectrum_accum+0xe8>
  {
    ps[j] += MULT16_16(X[i], X[i]);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	4413      	add	r3, r2
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	edd3 6a00 	vldr	s13, [r3]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	4413      	add	r3, r2
 80018fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001902:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001906:	bf00      	nop
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <spectral_mul_accum>:
  acc[N - 1] = PSHR32(tmp1, WEIGHT_SHIFT);
}

#else
static inline void spectral_mul_accum(const spx_word16_t *X, const spx_word32_t *Y, spx_word16_t *acc, int32_t N, int32_t M) // N=256, M=1
{
 8001912:	b590      	push	{r4, r7, lr}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	603b      	str	r3, [r7, #0]
  //UNUSED(M);
  acc[0] = X[0] * Y[0];
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	edc3 7a00 	vstr	s15, [r3]
  arm_cmplx_mult_cmplx_f32((float32_t *)&X[1], (float32_t *)&Y[1], &acc[1], (N / 2) - 1);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1d18      	adds	r0, r3, #4
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1d19      	adds	r1, r3, #4
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1d1c      	adds	r4, r3, #4
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	0fda      	lsrs	r2, r3, #31
 8001946:	4413      	add	r3, r2
 8001948:	105b      	asrs	r3, r3, #1
 800194a:	3b01      	subs	r3, #1
 800194c:	4622      	mov	r2, r4
 800194e:	f010 f85f 	bl	8011a10 <arm_cmplx_mult_cmplx_f32>
  acc[(N / 2) - 1] = X[(N / 2) - 1] * Y[(N / 2) - 1];
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	0fda      	lsrs	r2, r3, #31
 8001956:	4413      	add	r3, r2
 8001958:	105b      	asrs	r3, r3, #1
 800195a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800195e:	3b01      	subs	r3, #1
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	0fda      	lsrs	r2, r3, #31
 800196e:	4413      	add	r3, r2
 8001970:	105b      	asrs	r3, r3, #1
 8001972:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001976:	3b01      	subs	r3, #1
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	4413      	add	r3, r2
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	0fda      	lsrs	r2, r3, #31
 8001986:	4413      	add	r3, r2
 8001988:	105b      	asrs	r3, r3, #1
 800198a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800198e:	3b01      	subs	r3, #1
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199a:	edc3 7a00 	vstr	s15, [r3]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}

080019a6 <weighted_spectral_mul_conj>:
#define spectral_mul_accum16 spectral_mul_accum
#endif

/** Compute weighted cross-power spectrum of a half-complex (packed) vector with conjugate */
static inline void weighted_spectral_mul_conj(const spx_float_t *w, const spx_float_t p, const spx_word16_t *X, const spx_word16_t *Y, spx_word32_t *prod, int32_t N)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b08b      	sub	sp, #44	; 0x2c
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6178      	str	r0, [r7, #20]
 80019ae:	ed87 0a04 	vstr	s0, [r7, #16]
 80019b2:	60f9      	str	r1, [r7, #12]
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	607b      	str	r3, [r7, #4]
  int32_t i;
  int32_t j = 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	623b      	str	r3, [r7, #32]
  spx_float_t W;
  W = FLOAT_AMULT(p, w[0]);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	edc7 7a07 	vstr	s15, [r7, #28]
  prod[0] = FLOAT_MUL32(W, MULT16_16(X[0], Y[0]));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	ed93 7a00 	vldr	s14, [r3]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019de:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < (N - 1); i += 2)
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
 80019f0:	e068      	b.n	8001ac4 <weighted_spectral_mul_conj+0x11e>
  {
    W = FLOAT_AMULT(p, w[j]);
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4413      	add	r3, r2
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a06:	edc7 7a07 	vstr	s15, [r7, #28]
    prod[i] = FLOAT_MUL32(W, MAC16_16(MULT16_16(X[i], Y[i]), X[i + 1], Y[i + 1])); //W*(X[i]*Y[i] + X[i+1]*Y[i+1])
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	ed93 7a00 	vldr	s14, [r3]
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	3301      	adds	r3, #1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	edd3 6a00 	vldr	s13, [r3]
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	3301      	adds	r3, #1
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
    prod[i + 1] = FLOAT_MUL32(W, MAC16_16(MULT16_16(-X[i + 1], Y[i]), X[i], Y[i + 1])); //W*(X[i]*Y[i+1]-X[i+1]*Y[i] )
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eeb1 7a67 	vneg.f32	s14, s15
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4413      	add	r3, r2
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	edd3 6a00 	vldr	s13, [r3]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	3301      	adds	r3, #1
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	4413      	add	r3, r2
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	edc3 7a00 	vstr	s15, [r3]
    j++;
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	3301      	adds	r3, #1
 8001abc:	623b      	str	r3, [r7, #32]
  for (i = 1; i < (N - 1); i += 2)
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aca:	429a      	cmp	r2, r3
 8001acc:	db91      	blt.n	80019f2 <weighted_spectral_mul_conj+0x4c>
  }
  W = FLOAT_AMULT(p, w[j]);
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	edc7 7a07 	vstr	s15, [r7, #28]

  if (i < N)
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aea:	429a      	cmp	r2, r3
 8001aec:	da17      	bge.n	8001b1e <weighted_spectral_mul_conj+0x178>
  {
    prod[i] = FLOAT_MUL32(W, MULT16_16(X[i], Y[i]));
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	4413      	add	r3, r2
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1a:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	372c      	adds	r7, #44	; 0x2c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <mdf_adjust_prop>:

static inline void mdf_adjust_prop(const spx_word32_t *W, int32_t N, int32_t M, int32_t P, spx_word16_t *prop)  //N=256 ,M=P=1
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  //UNUSED(P);
  //UNUSED(M);
  spx_word16_t max_sum = 1.0f;
 8001b3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b3e:	61fb      	str	r3, [r7, #28]
  spx_word32_t prop_sum = 1.0f;
 8001b40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b44:	61bb      	str	r3, [r7, #24]
  spx_word32_t tmp = 1.0f;
 8001b46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b4a:	617b      	str	r3, [r7, #20]
  arm_dot_prod_f32((float32_t *)W, (float32_t *)W, N, &tmp);
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	68f9      	ldr	r1, [r7, #12]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f010 f8ef 	bl	8011d38 <arm_dot_prod_f32>
  prop[0] = spx_sqrt(tmp);
 8001b5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b62:	f7ff fd4d 	bl	8001600 <my_sqrt>
 8001b66:	eef0 7a40 	vmov.f32	s15, s0
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
  if (prop[0] > max_sum)
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	d502      	bpl.n	8001b8a <mdf_adjust_prop+0x5e>
  {
    max_sum = prop[0];
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61fb      	str	r3, [r7, #28]
  }
  prop[0] += (0.1f * max_sum);
 8001b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b94:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001bdc <mdf_adjust_prop+0xb0>
 8001b98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	edc3 7a00 	vstr	s15, [r3]
  prop_sum += prop[0];
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb4:	edc7 7a06 	vstr	s15, [r7, #24]
  prop[0] = (0.99f * prop[0]) / prop_sum;
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001be0 <mdf_adjust_prop+0xb4>
 8001bc2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001bc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	3dcccccd 	.word	0x3dcccccd
 8001be0:	3f7d70a4 	.word	0x3f7d70a4
 8001be4:	00000000 	.word	0x00000000

08001be8 <Echo_init>:
  fwrite(out, sizeof(spx_int16_t), len, oFile);
}
#endif

void Echo_init(SpeexEchoState *st, int frame_size, int filter_length, int nb_mic, int nb_speakers)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  int32_t i, N, M, C, K;
  st->K = nb_speakers;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bfa:	621a      	str	r2, [r3, #32]
  st->C = nb_mic;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	61da      	str	r2, [r3, #28]
  C = st->C;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  K = st->K;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	623b      	str	r3, [r7, #32]
  rFile = fopen("aec_rec.sw", "wb");
  pFile = fopen("aec_play.sw", "wb");
  oFile = fopen("aec_out.sw", "wb");
  #endif

  st->frame_size = frame_size;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	601a      	str	r2, [r3, #0]
  st->window_size = 2 * frame_size;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	005a      	lsls	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
  N = st->window_size;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	61fb      	str	r3, [r7, #28]
  st->M = (filter_length + st->frame_size - 1) / frame_size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	609a      	str	r2, [r3, #8]
  M = st->M;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
  st->cancel_count = 0;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  st->sum_adapt = 0.0f;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
  st->saturated = 0;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  st->screwed_up = 0;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  /* This is the default sampling rate */
  st->sampling_rate = 16000;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
  st->spec_average = DIV32_16(SHL32(EXTEND32(st->frame_size), 15), st->sampling_rate);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  #ifdef FIXED_POINT
  st->beta0 = DIV32_16(SHL32(EXTEND32(st->frame_size), 16), st->sampling_rate);
  st->beta_max = DIV32_16(SHL32(EXTEND32(st->frame_size), 14), st->sampling_rate);
  #else
  st->beta0 = (2.0f * (float32_t)st->frame_size) / (float32_t)st->sampling_rate;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	ee07 3a90 	vmov	s15, r3
 8001c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  st->beta_max = (.5f * (float32_t)st->frame_size) / (float32_t)st->sampling_rate;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cb6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  #endif
  st->leak_estimate = 0.0f;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38

  for (i = 0; i < N; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cdc:	e041      	b.n	8001d62 <Echo_init+0x17a>
  {
    st->window[i] = 0.5f - (0.5f * cosf(2.0f * M_PI * (float32_t)i / (float32_t)N));
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce8:	ee17 0a90 	vmov	r0, s15
 8001cec:	f7fe fbf0 	bl	80004d0 <__aeabi_f2d>
 8001cf0:	a3ad      	add	r3, pc, #692	; (adr r3, 8001fa8 <Echo_init+0x3c0>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc43 	bl	8000580 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4614      	mov	r4, r2
 8001d00:	461d      	mov	r5, r3
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0c:	ee17 0a90 	vmov	r0, s15
 8001d10:	f7fe fbde 	bl	80004d0 <__aeabi_f2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4620      	mov	r0, r4
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	f7fe fd5a 	bl	80007d4 <__aeabi_ddiv>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff0c 	bl	8000b44 <__aeabi_d2f>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	ee00 3a10 	vmov	s0, r3
 8001d32:	f010 fbd5 	bl	80124e0 <cosf>
 8001d36:	eef0 7a40 	vmov.f32	s15, s0
 8001d3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	f603 339e 	addw	r3, r3, #2974	; 0xb9e
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	3304      	adds	r3, #4
 8001d58:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < N; i++)
 8001d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5e:	3301      	adds	r3, #1
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbb9      	blt.n	8001cde <Echo_init+0xf6>
  }
  for (i = 0; i <= st->frame_size; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6e:	e00c      	b.n	8001d8a <Echo_init+0x1a2>
  {
    st->power_1[i] = FLOAT_ONE;
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	f603 0316 	addw	r3, r3, #2070	; 0x816
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d82:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= st->frame_size; i++)
 8001d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d86:	3301      	adds	r3, #1
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dded      	ble.n	8001d70 <Echo_init+0x188>
  }
  for (i = 0; i < (N * M * K * C); i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	e00d      	b.n	8001db6 <Echo_init+0x1ce>
  {
    st->W[i] = 0.0f;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da0:	f8d3 2e40 	ldr.w	r2, [r3, #3648]	; 0xe40
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (N * M * K * C); i++)
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	3301      	adds	r3, #1
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	6a3a      	ldr	r2, [r7, #32]
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbe4      	blt.n	8001d9a <Echo_init+0x1b2>
  }

  spx_word32_t sum = 0.0f;
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Ratio of ~10 between adaptation rate of first and last block */
  spx_word16_t decay = SHR32(spx_exp(NEG16(DIV32_16(QCONST16(2.4, 11), M))), 1);
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de0:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001f90 <Echo_init+0x3a8>
 8001de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de8:	eef1 7a67 	vneg.f32	s15, s15
 8001dec:	eeb0 0a67 	vmov.f32	s0, s15
 8001df0:	f010 fa9c 	bl	801232c <expf>
 8001df4:	ed87 0a05 	vstr	s0, [r7, #20]
  st->prop[0] = QCONST16(.7f, 15);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001dfe:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8001e02:	4a64      	ldr	r2, [pc, #400]	; (8001f94 <Echo_init+0x3ac>)
 8001e04:	601a      	str	r2, [r3, #0]
  sum = EXTEND32(st->prop[0]);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001e0c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 1; i < M; i++)
 8001e14:	2301      	movs	r3, #1
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e18:	e02d      	b.n	8001e76 <Echo_init+0x28e>
  {
    st->prop[i] = MULT16_16_Q15(st->prop[i - 1], decay);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001e20:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001e3a:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
    sum = ADD32(sum, EXTEND32(st->prop[i]));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001e56:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (i = 1; i < M; i++)
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e72:	3301      	adds	r3, #1
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dbcd      	blt.n	8001e1a <Echo_init+0x232>
  }
  for (i = M - 1; i >= 0; i--)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e84:	e01e      	b.n	8001ec4 <Echo_init+0x2dc>
  {
    st->prop[i] = DIV32(MULT16_16(QCONST16(.8f, 15), st->prop[i]), sum);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001e8c:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001f98 <Echo_init+0x3b0>
 8001e9e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001ea8:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
 8001eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eba:	edc3 7a00 	vstr	s15, [r3]
  for (i = M - 1; i >= 0; i--)
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dadd      	bge.n	8001e86 <Echo_init+0x29e>
  }

  st->preemph = QCONST16(.9f, 15);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <Echo_init+0x3b4>)
 8001ed4:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
  if (st->sampling_rate < 12000)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	dc07      	bgt.n	8001ef4 <Echo_init+0x30c>
  {
    st->notch_radius = QCONST16(.9f, 15);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <Echo_init+0x3b4>)
 8001eee:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
 8001ef2:	e014      	b.n	8001f1e <Echo_init+0x336>
  }
  else if (st->sampling_rate < 24000)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001efc:	4293      	cmp	r3, r2
 8001efe:	dc07      	bgt.n	8001f10 <Echo_init+0x328>
  {
    st->notch_radius = QCONST16(.982f, 15);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <Echo_init+0x3b8>)
 8001f0a:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
 8001f0e:	e006      	b.n	8001f1e <Echo_init+0x336>
  }
  else
  {
    st->notch_radius = QCONST16(.992f, 15);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <Echo_init+0x3bc>)
 8001f1a:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  }
  st->adapted = 0;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  st->Pey = FLOAT_ONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f2a:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 8001f2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f32:	601a      	str	r2, [r3, #0]
  st->Pyy = FLOAT_ONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f3a:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 8001f3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f42:	601a      	str	r2, [r3, #0]

  #ifdef TWO_PATH
  st->Davg1 = 0.0f;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
  st->Davg2 = 0.0f;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5a:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
  st->Dvar1 = FLOAT_ZERO;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6a:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
  st->Dvar2 = FLOAT_ZERO;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7a:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
  #endif
}
 8001f84:	bf00      	nop
 8001f86:	3730      	adds	r7, #48	; 0x30
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8c:	f3af 8000 	nop.w
 8001f90:	4019999a 	.word	0x4019999a
 8001f94:	3f333333 	.word	0x3f333333
 8001f98:	3f4ccccd 	.word	0x3f4ccccd
 8001f9c:	3f666666 	.word	0x3f666666
 8001fa0:	3f7b645a 	.word	0x3f7b645a
 8001fa4:	3f7df3b6 	.word	0x3f7df3b6
 8001fa8:	54442d18 	.word	0x54442d18
 8001fac:	401921fb 	.word	0x401921fb

08001fb0 <Echo_state_reset>:

/** Resets echo canceller state */
static void Echo_state_reset(SpeexEchoState *st)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  int32_t i, M, N, C, K;
  st->cancel_count = 0;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  st->screwed_up = 0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  N = st->window_size;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	61bb      	str	r3, [r7, #24]
  M = st->M;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	617b      	str	r3, [r7, #20]
  C = st->C;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	613b      	str	r3, [r7, #16]
  K = st->K;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (N * M); i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	e00d      	b.n	8001ffe <Echo_state_reset+0x4e>
  {
    st->W[i] = 0.0f;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe8:	f8d3 2e40 	ldr.w	r2, [r3, #3648]	; 0xe40
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (N * M); i++)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbea      	blt.n	8001fe2 <Echo_state_reset+0x32>
  }
  #ifdef TWO_PATH
  for (i = 0; i < (N * M); i++)
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	e00d      	b.n	800202e <Echo_state_reset+0x7e>
  {
    st->foreground[i] = 0.0f;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002018:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	; 0xe44
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (N * M); i++)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3301      	adds	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	429a      	cmp	r2, r3
 800203a:	dbea      	blt.n	8002012 <Echo_state_reset+0x62>
  }
  #endif
  for (i = 0; i < (N * (M + 1)); i++)
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	e00b      	b.n	800205a <Echo_state_reset+0xaa>
  {
    st->X[i] = 0.0f;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (N * (M + 1)); i++)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbeb      	blt.n	8002042 <Echo_state_reset+0x92>
  }
  for (i = 0; i <= st->frame_size; i++)
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e028      	b.n	80020c2 <Echo_state_reset+0x112>
  {
    st->power[i] = 0.0f;
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f203 7396 	addw	r3, r3, #1942	; 0x796
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    st->power_1[i] = FLOAT_ONE;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f603 0316 	addw	r3, r3, #2070	; 0x816
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002094:	601a      	str	r2, [r3, #0]
    st->Eh[i] = 0.0f;
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f603 239a 	addw	r3, r3, #2714	; 0xa9a
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3304      	adds	r3, #4
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    st->Yh[i] = 0.0f;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= st->frame_size; i++)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	3301      	adds	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	ddd1      	ble.n	8002070 <Echo_state_reset+0xc0>
  }
  for (i = 0; i < st->frame_size; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e00b      	b.n	80020ea <Echo_state_reset+0x13a>
  {
    st->last_y[i] = 0.0f;
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < st->frame_size; i++)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbee      	blt.n	80020d2 <Echo_state_reset+0x122>
  }
  for (i = 0; i < (N * C); i++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	e00b      	b.n	8002112 <Echo_state_reset+0x162>
  {
    st->E[i] = 0.0f;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (N * C); i++)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbec      	blt.n	80020fa <Echo_state_reset+0x14a>
  }
  for (i = 0; i < (N * K); i++)
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	e00c      	b.n	8002140 <Echo_state_reset+0x190>
  {
    st->x[i] = 0.0f;
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (N * K); i++)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	429a      	cmp	r2, r3
 800214c:	dbeb      	blt.n	8002126 <Echo_state_reset+0x176>
  }
  for (i = 0; i < (2 * C); i++)
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e00b      	b.n	800216c <Echo_state_reset+0x1bc>
  {
    st->notch_mem[i] = 0.0f;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f603 43a6 	addw	r3, r3, #3238	; 0xca6
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (2 * C); i++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	429a      	cmp	r2, r3
 8002174:	dbee      	blt.n	8002154 <Echo_state_reset+0x1a4>
  }
  st->memD = 0.0f;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800217c:	461a      	mov	r2, r3
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
  st->memE = 0.0f;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800218c:	461a      	mov	r2, r3
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
  st->memX = 0.0f;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800219c:	461a      	mov	r2, r3
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284

  st->saturated = 0;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  st->adapted = 0;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  st->sum_adapt = 0.0f;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
  st->Pey = FLOAT_ONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80021c0:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 80021c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021c8:	601a      	str	r2, [r3, #0]
  st->Pyy = FLOAT_ONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80021d0:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 80021d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021d8:	601a      	str	r2, [r3, #0]
  #ifdef TWO_PATH
  st->Davg1 = 0.0f;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e0:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
  st->Davg2 = 0.0f;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
  st->Dvar1 = FLOAT_ZERO;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
  st->Dvar2 = FLOAT_ZERO;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002210:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
  #endif
}
 800221a:	bf00      	nop
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <Echo_cancellation>:

/** Performs echo cancellation on a frame */
void Echo_cancellation(SpeexEchoState *st, const spx_int16_t *in, const spx_int16_t *far_end, spx_int16_t *out)
{
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b0a2      	sub	sp, #136	; 0x88
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  spx_word32_t Dbf;
  int32_t update_foreground;
  #endif
  spx_word32_t Sey;
  spx_word16_t ss, ss_1;
  spx_float_t Pey = FLOAT_ONE, Pyy = FLOAT_ONE;
 8002236:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800223a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800223c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002240:	66bb      	str	r3, [r7, #104]	; 0x68
  spx_float_t alpha, alpha_1;
  spx_word16_t RER;
  spx_word32_t tmp32;

  N = ECHO_BUFF * 2;    /*window_size*/
 8002242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002246:	653b      	str	r3, [r7, #80]	; 0x50
  M = st->M;      /*M*/
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	64fb      	str	r3, [r7, #76]	; 0x4c
  C = 1;            /*C*/
 800224e:	2301      	movs	r3, #1
 8002250:	64bb      	str	r3, [r7, #72]	; 0x48

  st->cancel_count++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	60da      	str	r2, [r3, #12]
  #ifdef FIXED_POINT
  ss = DIV32_16(11469, M);
  ss_1 = SUB16(32767, ss);
  #else
  ss = .35f / (float32_t)M;
 800225c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002266:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80024d0 <Echo_cancellation+0x2a8>
 800226a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  ss_1 = 1.0f - ss;
 8002272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002276:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800227a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  #endif

  /* Apply a notch filter to make sure DC doesn't end up causing problems */
  filter_dc_notch16(in, st->notch_radius, st->input, st->frame_size, st->notch_mem, C);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002288:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f503 6104 	add.w	r1, r3, #2112	; 0x840
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f503 534a 	add.w	r3, r3, #12928	; 0x3280
 800229c:	3318      	adds	r3, #24
 800229e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022a0:	9200      	str	r2, [sp, #0]
 80022a2:	4602      	mov	r2, r0
 80022a4:	eeb0 0a67 	vmov.f32	s0, s15
 80022a8:	68b8      	ldr	r0, [r7, #8]
 80022aa:	f7ff f9d1 	bl	8001650 <filter_dc_notch16>
  /* Copy input data to buffer and apply pre-emphasis */
  /* Copy input data to buffer */
  for (i = 0; i < st->frame_size; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022b2:	e02e      	b.n	8002312 <Echo_cancellation+0xea>
  {
    /* FIXME: This core has chan1ged a bit, need to merge properly */
    tmp32 = SUB32(EXTEND32(st->input[i]), EXTEND32(MULT16_16_P15(st->preemph, st->memD)));
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022b8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	ed93 7a00 	vldr	s14, [r3]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80022ca:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80022d4:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 80022d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      {
        st->saturated = 1;
      }
    }
    #endif
    st->memD = st->input[i];
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80022f8:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    st->input[i] = EXTRACT16(tmp32);
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002300:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800230a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < st->frame_size; i++)
 800230c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800230e:	3301      	adds	r3, #1
 8002310:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002318:	429a      	cmp	r2, r3
 800231a:	dbcb      	blt.n	80022b4 <Echo_cancellation+0x8c>
  }

  for (i = 0; i < st->frame_size; i++)
 800231c:	2300      	movs	r3, #0
 800231e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002320:	e04a      	b.n	80023b8 <Echo_cancellation+0x190>
  {
    st->x[i] = st->x[i + st->frame_size];
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002328:	4413      	add	r3, r2
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3304      	adds	r3, #4
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800233c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3304      	adds	r3, #4
 8002346:	601a      	str	r2, [r3, #0]
    tmp32 = SUB32(EXTEND32(far_end[i]), EXTEND32(MULT16_16_P15(st->preemph, st->memX)));
 8002348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002362:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800236c:	edd3 7aa1 	vldr	s15, [r3, #644]	; 0x284
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002378:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    {
      tmp32 = -32767;
      st->saturated = M + 1;
    }
    #endif
    st->x[i + st->frame_size] = EXTRACT16(tmp32);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002382:	4413      	add	r3, r2
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3304      	adds	r3, #4
 8002390:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002392:	601a      	str	r2, [r3, #0]
    st->memX = far_end[i];
 8002394:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80023ae:	edc3 7aa1 	vstr	s15, [r3, #644]	; 0x284
  for (i = 0; i < st->frame_size; i++)
 80023b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023b4:	3301      	adds	r3, #1
 80023b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbaf      	blt.n	8002322 <Echo_cancellation+0xfa>
  }

  /* Shift memory: this could be optimized eventually*/
  for (j = M - 1; j >= 0; j--)
 80023c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c4:	3b01      	subs	r3, #1
 80023c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80023c8:	e025      	b.n	8002416 <Echo_cancellation+0x1ee>
  {
    for (i = 0; i < N; i++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023ce:	e01b      	b.n	8002408 <Echo_cancellation+0x1e0>
    {
      st->X[(j + 1)*N + i] = st->X[j * N + i];
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 80023d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80023da:	fb03 f101 	mul.w	r1, r3, r1
 80023de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023e0:	440b      	add	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f8d3 183c 	ldr.w	r1, [r3, #2108]	; 0x83c
 80023ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ee:	3301      	adds	r3, #1
 80023f0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023f2:	fb03 f000 	mul.w	r0, r3, r0
 80023f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f8:	4403      	add	r3, r0
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N; i++)
 8002402:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002404:	3301      	adds	r3, #1
 8002406:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002408:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800240a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800240c:	429a      	cmp	r2, r3
 800240e:	dbdf      	blt.n	80023d0 <Echo_cancellation+0x1a8>
  for (j = M - 1; j >= 0; j--)
 8002410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002412:	3b01      	subs	r3, #1
 8002414:	67bb      	str	r3, [r7, #120]	; 0x78
 8002416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002418:	2b00      	cmp	r3, #0
 800241a:	dad6      	bge.n	80023ca <Echo_cancellation+0x1a2>
    }
  }

  /* Convert x (echo input) to frequency domain */
  libSpeexAEC_fft(st->fft_table, st->x, &st->X[0]);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002422:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f203 413c 	addw	r1, r3, #1084	; 0x43c
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
 8002432:	461a      	mov	r2, r3
 8002434:	f7ff f85a 	bl	80014ec <libSpeexAEC_fft>
  Sxx = 0.0f;
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
  Sxx += mdf_inner_prod(st->x + st->frame_size, st->x + st->frame_size, st->frame_size);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	18d0      	adds	r0, r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	18d1      	adds	r1, r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	f7ff f974 	bl	800174c <mdf_inner_prod>
 8002464:	eeb0 7a40 	vmov.f32	s14, s0
 8002468:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800246c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002470:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  power_spectrum_accum(st->X, st->Xf, N);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f8d3 083c 	ldr.w	r0, [r3, #2108]	; 0x83c
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8002480:	3328      	adds	r3, #40	; 0x28
 8002482:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002484:	4619      	mov	r1, r3
 8002486:	f7ff f9ca 	bl	800181e <power_spectrum_accum>
  Sff = 0.0f;
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38

  #ifdef TWO_PATH
  /* Compute foreground filter */
  spectral_mul_accum16(st->X, st->foreground, st->Y, N, M);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f8d3 083c 	ldr.w	r0, [r3, #2108]	; 0x83c
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249c:	f8d3 1e44 	ldr.w	r1, [r3, #3652]	; 0xe44
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f503 5292 	add.w	r2, r3, #4672	; 0x1240
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ac:	f7ff fa31 	bl	8001912 <spectral_mul_accum>
  libSpeexAEC_ifft(st->fft_table, st->Y, st->e);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80024b6:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f503 5192 	add.w	r1, r3, #4672	; 0x1240
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	333c      	adds	r3, #60	; 0x3c
 80024c4:	461a      	mov	r2, r3
 80024c6:	f7ff f846 	bl	8001556 <libSpeexAEC_ifft>
  for (i = 0; i < st->frame_size; i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024ce:	e021      	b.n	8002514 <Echo_cancellation+0x2ec>
 80024d0:	3eb33333 	.word	0x3eb33333
  {
    st->e[i] = SUB16(st->input[i], st->e[i + st->frame_size]);
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024ea:	4413      	add	r3, r2
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	330e      	adds	r3, #14
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3304      	adds	r3, #4
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002502:	330e      	adds	r3, #14
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < st->frame_size; i++)
 800250e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002510:	3301      	adds	r3, #1
 8002512:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800251a:	429a      	cmp	r2, r3
 800251c:	dbda      	blt.n	80024d4 <Echo_cancellation+0x2ac>
  }
  Sff += mdf_inner_prod(st->e, st->e, st->frame_size);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	f7ff f90c 	bl	800174c <mdf_inner_prod>
 8002534:	eeb0 7a40 	vmov.f32	s14, s0
 8002538:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800253c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002540:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  #endif

  /* Adjust proportional adaption rate */
  if (st->adapted == 1)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10f      	bne.n	800256c <Echo_cancellation+0x344>
  {
    mdf_adjust_prop(st->W, N, M, 1, st->prop);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002552:	f8d3 0e40 	ldr.w	r0, [r3, #3648]	; 0xe40
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800255c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2301      	movs	r3, #1
 8002564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002568:	f7ff fae0 	bl	8001b2c <mdf_adjust_prop>
  }
  /* Compute weight gradient */
  if (st->saturated == 0)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d161      	bne.n	8002638 <Echo_cancellation+0x410>
  {
    for (j = M - 1; j >= 0; j--)
 8002574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002576:	3b01      	subs	r3, #1
 8002578:	67bb      	str	r3, [r7, #120]	; 0x78
 800257a:	e059      	b.n	8002630 <Echo_cancellation+0x408>
    {
      weighted_spectral_mul_conj(st->power_1, FLOAT_SHL(PSEUDOFLOAT(st->prop[j]), -15), &st->X[(j + 1)*N], st->E, st->PHI, N);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f503 5001 	add.w	r0, r3, #8256	; 0x2040
 8002582:	301c      	adds	r0, #28
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800258a:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
 800258e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 800259e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a0:	3301      	adds	r3, #1
 80025a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	18d1      	adds	r1, r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f503 52b2 	add.w	r2, r3, #5696	; 0x1640
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f503 54d2 	add.w	r4, r3, #6720	; 0x1a40
 80025b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4623      	mov	r3, r4
 80025be:	eeb0 0a67 	vmov.f32	s0, s15
 80025c2:	f7ff f9f0 	bl	80019a6 <weighted_spectral_mul_conj>
      for (i = 0; i < N; i++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025ca:	e02a      	b.n	8002622 <Echo_cancellation+0x3fa>
      {
        st->W[j * N + i] += st->PHI[i];
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d2:	f8d3 2e40 	ldr.w	r2, [r3, #3648]	; 0xe40
 80025d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80025da:	fb03 f101 	mul.w	r1, r3, r1
 80025de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025e0:	440b      	add	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ee:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002600:	f8d3 2e40 	ldr.w	r2, [r3, #3648]	; 0xe40
 8002604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002606:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002608:	fb03 f101 	mul.w	r1, r3, r1
 800260c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800260e:	440b      	add	r3, r1
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002618:	edc3 7a00 	vstr	s15, [r3]
      for (i = 0; i < N; i++)
 800261c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800261e:	3301      	adds	r3, #1
 8002620:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002622:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002626:	429a      	cmp	r2, r3
 8002628:	dbd0      	blt.n	80025cc <Echo_cancellation+0x3a4>
    for (j = M - 1; j >= 0; j--)
 800262a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800262c:	3b01      	subs	r3, #1
 800262e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002632:	2b00      	cmp	r3, #0
 8002634:	daa2      	bge.n	800257c <Echo_cancellation+0x354>
 8002636:	e004      	b.n	8002642 <Echo_cancellation+0x41a>
      }
    }
  }
  else
  {
    st->saturated--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	615a      	str	r2, [r3, #20]
  }
  /* FIXME: MC conversion required */
  /* Update weight to prevent circular convolution (MDF / AUMDF) */
  for (j = 0; j < M; j++)
 8002642:	2300      	movs	r3, #0
 8002644:	67bb      	str	r3, [r7, #120]	; 0x78
 8002646:	e055      	b.n	80026f4 <Echo_cancellation+0x4cc>
  {
    /* This is a variant of the Alternatively Updated MDF (AUMDF) */
    /* Remove the "if" to make this an MDF filter */
    if ((j == 0) || (st->cancel_count % (M - 1) == j - 1))
 8002648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <Echo_cancellation+0x440>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002654:	3a01      	subs	r2, #1
 8002656:	fb93 f1f2 	sdiv	r1, r3, r2
 800265a:	fb01 f202 	mul.w	r2, r1, r2
 800265e:	1a9a      	subs	r2, r3, r2
 8002660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002662:	3b01      	subs	r3, #1
 8002664:	429a      	cmp	r2, r3
 8002666:	d142      	bne.n	80026ee <Echo_cancellation+0x4c6>
      for (i = 0; i < N; i++)
      {
        st->W[j * N + i] -= SHL32(EXTEND32(st->wtmp2[i]), 16 + NORMALIZE_SCALEDOWN - NORMALIZE_SCALEUP - 1);
      }
      #else
      libSpeexAEC_ifft(st->fft_table, &st->W[j * N], st->wtmp);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800266e:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	f8d3 2e40 	ldr.w	r2, [r3, #3648]	; 0xe40
 800267c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	18d1      	adds	r1, r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800268e:	3320      	adds	r3, #32
 8002690:	461a      	mov	r2, r3
 8002692:	f7fe ff60 	bl	8001556 <libSpeexAEC_ifft>
      for (i = st->frame_size; i < N; i++)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800269c:	e00b      	b.n	80026b6 <Echo_cancellation+0x48e>
      {
        st->wtmp[i] = 0;
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026a2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
      for (i = st->frame_size; i < N; i++)
 80026b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b2:	3301      	adds	r3, #1
 80026b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ba:	429a      	cmp	r2, r3
 80026bc:	dbef      	blt.n	800269e <Echo_cancellation+0x476>
      }
      libSpeexAEC_fft(st->fft_table, st->wtmp, &st->W[j * N]);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80026c4:	f8d3 4280 	ldr.w	r4, [r3, #640]	; 0x280
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80026ce:	3320      	adds	r3, #32
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026d6:	f8d2 1e40 	ldr.w	r1, [r2, #3648]	; 0xe40
 80026da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80026dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80026de:	fb00 f202 	mul.w	r2, r0, r2
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	440a      	add	r2, r1
 80026e6:	4619      	mov	r1, r3
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7fe feff 	bl	80014ec <libSpeexAEC_fft>
  for (j = 0; j < M; j++)
 80026ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f0:	3301      	adds	r3, #1
 80026f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80026f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80026f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dba5      	blt.n	8002648 <Echo_cancellation+0x420>
      #endif
    }
  }
  /* So we can use power_spectrum_accum */
  for (i = 0; i <= st->frame_size; i++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002700:	e01e      	b.n	8002740 <Echo_cancellation+0x518>
  {
    st->Rf[i] = 0.0f;
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002706:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
    st->Yf[i] = 0.0f;
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002718:	f603 1398 	addw	r3, r3, #2456	; 0x998
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3304      	adds	r3, #4
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    st->Xf[i] = 0.0f;
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800272c:	f603 231a 	addw	r3, r3, #2586	; 0xa1a
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= st->frame_size; i++)
 800273a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800273c:	3301      	adds	r3, #1
 800273e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002746:	429a      	cmp	r2, r3
 8002748:	dddb      	ble.n	8002702 <Echo_cancellation+0x4da>
  }

  #ifdef TWO_PATH
  Dbf = 0.0f;
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
  See = 0.0f;
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	677b      	str	r3, [r7, #116]	; 0x74
  /* Difference in response, this is used to estimate the variance of our residual power estimate */
  spectral_mul_accum(st->X, st->W, st->Y, N, M);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f8d3 083c 	ldr.w	r0, [r3, #2108]	; 0x83c
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002762:	f8d3 1e40 	ldr.w	r1, [r3, #3648]	; 0xe40
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f503 5292 	add.w	r2, r3, #4672	; 0x1240
 800276c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002772:	f7ff f8ce 	bl	8001912 <spectral_mul_accum>
  libSpeexAEC_ifft(st->fft_table, st->Y, st->y);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800277c:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f503 5192 	add.w	r1, r3, #4672	; 0x1240
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800278c:	461a      	mov	r2, r3
 800278e:	f7fe fee2 	bl	8001556 <libSpeexAEC_ifft>
  for (i = 0; i < st->frame_size; i++)
 8002792:	2300      	movs	r3, #0
 8002794:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002796:	e022      	b.n	80027de <Echo_cancellation+0x5b6>
  {
    st->e[i] = (st->e[i + st->frame_size] - st->y[i + st->frame_size]);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800279e:	4413      	add	r3, r2
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	330e      	adds	r3, #14
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	ed93 7a00 	vldr	s14, [r3]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027b4:	4413      	add	r3, r2
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027cc:	330e      	adds	r3, #14
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	3304      	adds	r3, #4
 80027d4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < st->frame_size; i++)
 80027d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027da:	3301      	adds	r3, #1
 80027dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027e4:	429a      	cmp	r2, r3
 80027e6:	dbd7      	blt.n	8002798 <Echo_cancellation+0x570>
  }
  Dbf += 10.0f + mdf_inner_prod(st->e, st->e, st->frame_size);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	f7fe ffa7 	bl	800174c <mdf_inner_prod>
 80027fe:	eef0 7a40 	vmov.f32	s15, s0
 8002802:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800280a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800280e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002812:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  for (i = 0; i < st->frame_size; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	67fb      	str	r3, [r7, #124]	; 0x7c
 800281a:	e01f      	b.n	800285c <Echo_cancellation+0x634>
  {
    st->e[i] = (st->input[i] - st->y[i + st->frame_size]);
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002820:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	ed93 7a00 	vldr	s14, [r3]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002832:	4413      	add	r3, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800284a:	330e      	adds	r3, #14
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < st->frame_size; i++)
 8002856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002858:	3301      	adds	r3, #1
 800285a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002862:	429a      	cmp	r2, r3
 8002864:	dbda      	blt.n	800281c <Echo_cancellation+0x5f4>
  }
  See += mdf_inner_prod(st->e, st->e, st->frame_size);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	f7fe ff68 	bl	800174c <mdf_inner_prod>
 800287c:	eeb0 7a40 	vmov.f32	s14, s0
 8002880:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002884:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002888:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
  #endif

  #ifdef TWO_PATH
  /* Logic for updating the foreground filter */
  /* For two time windows, compute the mean of the energy difference, as well as the variance */
  st->Davg1 = (.6f * st->Davg1) + (.4f * (Sff - See));
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002892:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002b54 <Echo_cancellation+0x92c>
 800289e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028a2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80028a6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80028aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028ae:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8002b58 <Echo_cancellation+0x930>
 80028b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c0:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 80028c4:	edc3 7a00 	vstr	s15, [r3]
  st->Davg2 = (.85f * st->Davg2) + (.15f * (Sff - See));
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ce:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 80028d2:	edd3 7a00 	vldr	s15, [r3]
 80028d6:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8002b5c <Echo_cancellation+0x934>
 80028da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028de:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80028e2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80028e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028ea:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8002b60 <Echo_cancellation+0x938>
 80028ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fc:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002900:	edc3 7a00 	vstr	s15, [r3]
  st->Dvar1 = (.36f * st->Dvar1) + (.16f * Sff * Dbf);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290a:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002b64 <Echo_cancellation+0x93c>
 8002916:	ee27 7a87 	vmul.f32	s14, s15, s14
 800291a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800291e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8002b68 <Echo_cancellation+0x940>
 8002922:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002926:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800292a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002938:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 800293c:	edc3 7a00 	vstr	s15, [r3]
  st->Dvar2 = (.7225f * st->Dvar2) + (.0225f * Sff * Dbf);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002946:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002b6c <Echo_cancellation+0x944>
 8002952:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002956:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800295a:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002b70 <Echo_cancellation+0x948>
 800295e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002962:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002974:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8002978:	edc3 7a00 	vstr	s15, [r3]

  update_foreground = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	673b      	str	r3, [r7, #112]	; 0x70
  /* Check if we have a statistically significant reduction in the residual echo */
  /* Note that this is *not* Gaussian, so we need to be careful about the longer tail */
  if (((Sff - See)*ABS32(Sff - See)) > (Sff * Dbf))
 8002980:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002984:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800298c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002990:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002994:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a0:	d508      	bpl.n	80029b4 <Echo_cancellation+0x78c>
 80029a2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80029a6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80029aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029ae:	eef1 7a67 	vneg.f32	s15, s15
 80029b2:	e005      	b.n	80029c0 <Echo_cancellation+0x798>
 80029b4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80029b8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80029bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029c4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80029c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d8:	dd02      	ble.n	80029e0 <Echo_cancellation+0x7b8>
  {
    update_foreground = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	673b      	str	r3, [r7, #112]	; 0x70
 80029de:	e072      	b.n	8002ac6 <Echo_cancellation+0x89e>
  }
  else if (FLOAT_GT(FLOAT_MUL32U(st->Davg1, ABS32(st->Davg1)), FLOAT_MULT(VAR1_UPDATE, (st->Dvar1))))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e6:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f4:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a04:	d509      	bpl.n	8002a1a <Echo_cancellation+0x7f2>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0c:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	eef1 7a67 	vneg.f32	s15, s15
 8002a18:	e006      	b.n	8002a28 <Echo_cancellation+0x800>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a20:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a32:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8002a36:	edd3 6a00 	vldr	s13, [r3]
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <Echo_cancellation+0x94c>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4c:	dd02      	ble.n	8002a54 <Echo_cancellation+0x82c>
  {
    update_foreground = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	673b      	str	r3, [r7, #112]	; 0x70
 8002a52:	e038      	b.n	8002ac6 <Echo_cancellation+0x89e>
  }
  else if (FLOAT_GT(FLOAT_MUL32U(st->Davg2, ABS32(st->Davg2)), FLOAT_MULT(VAR2_UPDATE, (st->Dvar2))))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5a:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a68:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	d509      	bpl.n	8002a8e <Echo_cancellation+0x866>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a80:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	eef1 7a67 	vneg.f32	s15, s15
 8002a8c:	e006      	b.n	8002a9c <Echo_cancellation+0x874>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a94:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa6:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8002aaa:	edd3 6a00 	vldr	s13, [r3]
 8002aae:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <Echo_cancellation+0x950>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac0:	dd01      	ble.n	8002ac6 <Echo_cancellation+0x89e>
  {
    update_foreground = 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	673b      	str	r3, [r7, #112]	; 0x70
  {
    /**/
  }

  /* Do we update? */
  if (update_foreground == 1)
 8002ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	f040 809c 	bne.w	8002c06 <Echo_cancellation+0x9de>
  {
    st->Davg1 = 0.0f;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad4:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    st->Davg2 = 0.0f;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae4:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
    st->Dvar1 = FLOAT_ZERO;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af4:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
    st->Dvar2 = FLOAT_ZERO;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b04:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
    /* Copy background filter to foreground filter */
    for (i = 0; i < N * M; i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b12:	e014      	b.n	8002b3e <Echo_cancellation+0x916>
    {
      st->foreground[i] = EXTRACT16(PSHR32(st->W[i], 16));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1a:	f8d3 2e40 	ldr.w	r2, [r3, #3648]	; 0xe40
 8002b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2a:	f8d3 1e44 	ldr.w	r1, [r3, #3652]	; 0xe44
 8002b2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N * M; i++)
 8002b38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	dbe3      	blt.n	8002b14 <Echo_cancellation+0x8ec>
    }
    /* Apply a smooth transition so as to not introduce blocking artifacts */
    for (i = 0; i < st->frame_size; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b50:	e053      	b.n	8002bfa <Echo_cancellation+0x9d2>
 8002b52:	bf00      	nop
 8002b54:	3f19999a 	.word	0x3f19999a
 8002b58:	3ecccccd 	.word	0x3ecccccd
 8002b5c:	3f59999a 	.word	0x3f59999a
 8002b60:	3e19999a 	.word	0x3e19999a
 8002b64:	3eb851ec 	.word	0x3eb851ec
 8002b68:	3e23d70a 	.word	0x3e23d70a
 8002b6c:	3f38f5c3 	.word	0x3f38f5c3
 8002b70:	3cb851ec 	.word	0x3cb851ec
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000004 	.word	0x20000004
    {
      st->e[i + st->frame_size] = MULT16_16_Q15(st->window[i + st->frame_size], st->e[i + st->frame_size]) + MULT16_16_Q15(st->window[i], st->y[i + st->frame_size]);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b82:	4413      	add	r3, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	f603 339e 	addw	r3, r3, #2974	; 0xb9e
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3304      	adds	r3, #4
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b9a:	4413      	add	r3, r2
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	330e      	adds	r3, #14
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bb2:	f603 339e 	addw	r3, r3, #2974	; 0xb9e
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	edd3 6a00 	vldr	s13, [r3]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc6:	4413      	add	r3, r2
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002be0:	4413      	add	r3, r2
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	330e      	adds	r3, #14
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < st->frame_size; i++)
 8002bf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbbb      	blt.n	8002b7c <Echo_cancellation+0x954>
 8002c04:	e139      	b.n	8002e7a <Echo_cancellation+0xc52>
    }
  }
  else
  {
    int32_t reset_background = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	65fb      	str	r3, [r7, #92]	; 0x5c
    /* Otherwise, check if the background filter is significantly worse */
    if (FLOAT_GT(FLOAT_MUL32U(NEG32(SUB32(Sff, See)), ABS32(SUB32(Sff, See))), FLOAT_MULT(VAR_BACKTRACK, FLOAT_MUL32U(Sff, Dbf))))
 8002c0a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c0e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c16:	eeb1 7a67 	vneg.f32	s14, s15
 8002c1a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002c1e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002c22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	d508      	bpl.n	8002c42 <Echo_cancellation+0xa1a>
 8002c30:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002c34:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002c38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c3c:	eef1 7a67 	vneg.f32	s15, s15
 8002c40:	e005      	b.n	8002c4e <Echo_cancellation+0xa26>
 8002c42:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002c46:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002c4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c52:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002c56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c5e:	4bbc      	ldr	r3, [pc, #752]	; (8002f50 <Echo_cancellation+0xd28>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c70:	dd01      	ble.n	8002c76 <Echo_cancellation+0xa4e>
    {
      reset_background = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    if (FLOAT_GT(FLOAT_MUL32U(NEG32(st->Davg1), ABS32(st->Davg1)), FLOAT_MULT(VAR_BACKTRACK, st->Dvar1)))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7c:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	eeb1 7a67 	vneg.f32	s14, s15
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8e:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	d509      	bpl.n	8002cb4 <Echo_cancellation+0xa8c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca6:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	eef1 7a67 	vneg.f32	s15, s15
 8002cb2:	e006      	b.n	8002cc2 <Echo_cancellation+0xa9a>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cba:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ccc:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8002cd0:	edd3 6a00 	vldr	s13, [r3]
 8002cd4:	4b9e      	ldr	r3, [pc, #632]	; (8002f50 <Echo_cancellation+0xd28>)
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	dd01      	ble.n	8002cec <Echo_cancellation+0xac4>
    {
      reset_background = 1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    if (FLOAT_GT(FLOAT_MUL32U(NEG32(st->Davg2), ABS32(st->Davg2)), FLOAT_MULT(VAR_BACKTRACK, st->Dvar2)))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf2:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	eeb1 7a67 	vneg.f32	s14, s15
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d04:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	d509      	bpl.n	8002d2a <Echo_cancellation+0xb02>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1c:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	eef1 7a67 	vneg.f32	s15, s15
 8002d28:	e006      	b.n	8002d38 <Echo_cancellation+0xb10>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d30:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d42:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8002d46:	edd3 6a00 	vldr	s13, [r3]
 8002d4a:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <Echo_cancellation+0xd28>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	dd01      	ble.n	8002d62 <Echo_cancellation+0xb3a>
    {
      reset_background = 1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    if (reset_background == 1)
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	f040 8088 	bne.w	8002e7a <Echo_cancellation+0xc52>
    {
      /* Copy foreground filter to background filter */
      for (i = 0; i < N * M; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d6e:	e014      	b.n	8002d9a <Echo_cancellation+0xb72>
      {
        st->W[i] = SHL32(EXTEND32(st->foreground[i]), 16);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d76:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	; 0xe44
 8002d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	441a      	add	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d86:	f8d3 1e40 	ldr.w	r1, [r3, #3648]	; 0xe40
 8002d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	601a      	str	r2, [r3, #0]
      for (i = 0; i < N * M; i++)
 8002d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d96:	3301      	adds	r3, #1
 8002d98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002da4:	429a      	cmp	r2, r3
 8002da6:	dbe3      	blt.n	8002d70 <Echo_cancellation+0xb48>
      }
      /* We also need to copy the output so as to get correct adaptation */
      for (i = 0; i < st->frame_size; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dac:	e016      	b.n	8002ddc <Echo_cancellation+0xbb4>
      {
        st->y[i + st->frame_size] = st->e[i + st->frame_size];
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dbc:	440b      	add	r3, r1
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	320e      	adds	r2, #14
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	440a      	add	r2, r1
 8002dc6:	3204      	adds	r2, #4
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	601a      	str	r2, [r3, #0]
      for (i = 0; i < st->frame_size; i++)
 8002dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd8:	3301      	adds	r3, #1
 8002dda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002de2:	429a      	cmp	r2, r3
 8002de4:	dbe3      	blt.n	8002dae <Echo_cancellation+0xb86>
      }
      for (i = 0; i < st->frame_size; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dea:	e01f      	b.n	8002e2c <Echo_cancellation+0xc04>
      {
        st->e[i] = SUB16(st->input[i], st->y[i + st->frame_size]);
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	ed93 7a00 	vldr	s14, [r3]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e02:	4413      	add	r3, r2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e1a:	330e      	adds	r3, #14
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	edc3 7a00 	vstr	s15, [r3]
      for (i = 0; i < st->frame_size; i++)
 8002e26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e28:	3301      	adds	r3, #1
 8002e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e32:	429a      	cmp	r2, r3
 8002e34:	dbda      	blt.n	8002dec <Echo_cancellation+0xbc4>
      }
      See = Sff;
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	677b      	str	r3, [r7, #116]	; 0x74
      st->Davg1 = 0.0f;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e40:	f603 6348 	addw	r3, r3, #3656	; 0xe48
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
      st->Davg2 = 0.0f;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e50:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
      st->Dvar1 = FLOAT_ZERO;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e60:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
      st->Dvar2 = FLOAT_ZERO;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e70:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
    }
  }
  #endif

  Sey = 0.0f;
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
  Syy = 0.0f;
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  Sdd = 0.0f;
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Compute error signal (for the output with de-emphasis) */
  for (i = 0; i < st->frame_size; i++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e90:	e089      	b.n	8002fa6 <Echo_cancellation+0xd7e>
  {
    spx_word32_t tmp_out;
    #ifdef TWO_PATH
    tmp_out = SUB32(EXTEND32(st->input[i]), EXTEND32(st->e[i + st->frame_size]));
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	ed93 7a00 	vldr	s14, [r3]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ea8:	4413      	add	r3, r2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	330e      	adds	r3, #14
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ebc:	edc7 7a04 	vstr	s15, [r7, #16]
    #else
    tmp_out = SUB32(EXTEND32(st->input[i]), EXTEND32(st->y[i + st->frame_size]));
    #endif
    tmp_out = ADD32(tmp_out, EXTEND32(MULT16_16_P15(st->preemph, st->memE)));
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002ec6:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002ed0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8002ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee0:	edc7 7a04 	vstr	s15, [r7, #16]
    /* This is an arbitrary test for saturation in the microphone signal */
    if ((in[i * C] <= -32000) || (in[i * C] >= 32000))
 8002ee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef6:	f513 4ffa 	cmn.w	r3, #32000	; 0x7d00
 8002efa:	dd0b      	ble.n	8002f14 <Echo_cancellation+0xcec>
 8002efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002f12:	db06      	blt.n	8002f22 <Echo_cancellation+0xcfa>
    {
      if (st->saturated == 0)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <Echo_cancellation+0xcfa>
      {
        st->saturated = 1;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	615a      	str	r2, [r3, #20]
      }
    }
    out[i * C] = WORD2INT(tmp_out);
 8002f22:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f26:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002f54 <Echo_cancellation+0xd2c>
 8002f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	d501      	bpl.n	8002f38 <Echo_cancellation+0xd10>
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <Echo_cancellation+0xd30>)
 8002f36:	e024      	b.n	8002f82 <Echo_cancellation+0xd5a>
 8002f38:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002f5c <Echo_cancellation+0xd34>
 8002f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	dd0a      	ble.n	8002f60 <Echo_cancellation+0xd38>
 8002f4a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f4e:	e018      	b.n	8002f82 <Echo_cancellation+0xd5a>
 8002f50:	20000008 	.word	0x20000008
 8002f54:	c6ffff00 	.word	0xc6ffff00
 8002f58:	ffff8000 	.word	0xffff8000
 8002f5c:	46fffd00 	.word	0x46fffd00
 8002f60:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f70:	f00f fbda 	bl	8012728 <floorf>
 8002f74:	eef0 7a40 	vmov.f32	s15, s0
 8002f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f7c:	ee17 3a90 	vmov	r3, s15
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002f84:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002f86:	fb01 f202 	mul.w	r2, r1, r2
 8002f8a:	0052      	lsls	r2, r2, #1
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	440a      	add	r2, r1
 8002f90:	8013      	strh	r3, [r2, #0]
    st->memE = tmp_out;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002f98:	461a      	mov	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
  for (i = 0; i < st->frame_size; i++)
 8002fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fac:	429a      	cmp	r2, r3
 8002fae:	f6ff af70 	blt.w	8002e92 <Echo_cancellation+0xc6a>
  #ifdef DUMP_ECHO_CANCEL_DATA
  dump_audio(in, far_end, out, st->frame_size);
  #endif

  /* Compute error signal (filter update version) */
  for (i = 0; i < st->frame_size; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fb6:	e01c      	b.n	8002ff2 <Echo_cancellation+0xdca>
  {
    st->e[i + st->frame_size] = st->e[i];
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fbe:	4413      	add	r3, r2
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fc4:	320e      	adds	r2, #14
 8002fc6:	0092      	lsls	r2, r2, #2
 8002fc8:	440a      	add	r2, r1
 8002fca:	3204      	adds	r2, #4
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	330e      	adds	r3, #14
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	601a      	str	r2, [r3, #0]
    st->e[i] = 0.0f;
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fde:	330e      	adds	r3, #14
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
  for (i = 0; i < st->frame_size; i++)
 8002fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fee:	3301      	adds	r3, #1
 8002ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	dbdd      	blt.n	8002fb8 <Echo_cancellation+0xd90>
  }

  /* Compute a bunch of correlations */
  /* FIXME: bad merge */
  Sey += mdf_inner_prod(st->e + st->frame_size, st->y + st->frame_size, st->frame_size);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	18d0      	adds	r0, r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f503 6224 	add.w	r2, r3, #2624	; 0xa40
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	18d1      	adds	r1, r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f7fe fb95 	bl	800174c <mdf_inner_prod>
 8003022:	eeb0 7a40 	vmov.f32	s14, s0
 8003026:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800302a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800302e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  Syy += mdf_inner_prod(st->y + st->frame_size, st->y + st->frame_size, st->frame_size);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f503 6224 	add.w	r2, r3, #2624	; 0xa40
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	18d0      	adds	r0, r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f503 6224 	add.w	r2, r3, #2624	; 0xa40
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	18d1      	adds	r1, r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f7fe fb7a 	bl	800174c <mdf_inner_prod>
 8003058:	eeb0 7a40 	vmov.f32	s14, s0
 800305c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003060:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003064:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  Sdd += mdf_inner_prod(st->input, st->input, st->frame_size);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f503 6004 	add.w	r0, r3, #2112	; 0x840
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f503 6104 	add.w	r1, r3, #2112	; 0x840
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	f7fe fb67 	bl	800174c <mdf_inner_prod>
 800307e:	eeb0 7a40 	vmov.f32	s14, s0
 8003082:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800308a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  /* Convert error to frequency domain */
  libSpeexAEC_fft(st->fft_table, st->e, st->E);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003094:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f503 53b2 	add.w	r3, r3, #5696	; 0x1640
 80030a4:	461a      	mov	r2, r3
 80030a6:	f7fe fa21 	bl	80014ec <libSpeexAEC_fft>
  for (i = 0; i < st->frame_size; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030ae:	e00b      	b.n	80030c8 <Echo_cancellation+0xea0>
  {
    st->y[i] = 0.0f;
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030b4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < st->frame_size; i++)
 80030c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030c4:	3301      	adds	r3, #1
 80030c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	dbee      	blt.n	80030b0 <Echo_cancellation+0xe88>
  }
  libSpeexAEC_fft(st->fft_table, st->y, st->Y);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80030d8:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f503 6124 	add.w	r1, r3, #2624	; 0xa40
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 80030e8:	461a      	mov	r2, r3
 80030ea:	f7fe f9ff 	bl	80014ec <libSpeexAEC_fft>

  /* Compute power spectrum of echo (X), error (E) and filter response (Y) */
  power_spectrum_accum(st->E, st->Rf, N);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f503 50b2 	add.w	r0, r3, #5696	; 0x1640
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80030fa:	3320      	adds	r3, #32
 80030fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fe fb8d 	bl	800181e <power_spectrum_accum>
  power_spectrum_accum(st->Y, st->Yf, N);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f503 5092 	add.w	r0, r3, #4672	; 0x1240
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 8003110:	3324      	adds	r3, #36	; 0x24
 8003112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003114:	4619      	mov	r1, r3
 8003116:	f7fe fb82 	bl	800181e <power_spectrum_accum>

  /* Do some sanity check */
  if ((Syy < 0) || (Sxx < 0) || (See < 0)
 800311a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800311e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	d44f      	bmi.n	80031c8 <Echo_cancellation+0xfa0>
 8003128:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800312c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003134:	d448      	bmi.n	80031c8 <Echo_cancellation+0xfa0>
 8003136:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800313a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003142:	d441      	bmi.n	80031c8 <Echo_cancellation+0xfa0>
    #ifndef FIXED_POINT
      || (Sff >= N * 1e9) || (Syy >= N * 1e9) || (Sxx >= N * 1e9)
 8003144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003146:	f7fd f9c3 	bl	80004d0 <__aeabi_f2d>
 800314a:	4604      	mov	r4, r0
 800314c:	460d      	mov	r5, r1
 800314e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003150:	f7fd f9ac 	bl	80004ac <__aeabi_i2d>
 8003154:	a37c      	add	r3, pc, #496	; (adr r3, 8003348 <Echo_cancellation+0x1120>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd fa11 	bl	8000580 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4620      	mov	r0, r4
 8003164:	4629      	mov	r1, r5
 8003166:	f7fd fc91 	bl	8000a8c <__aeabi_dcmpge>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d12b      	bne.n	80031c8 <Echo_cancellation+0xfa0>
 8003170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003172:	f7fd f9ad 	bl	80004d0 <__aeabi_f2d>
 8003176:	4604      	mov	r4, r0
 8003178:	460d      	mov	r5, r1
 800317a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800317c:	f7fd f996 	bl	80004ac <__aeabi_i2d>
 8003180:	a371      	add	r3, pc, #452	; (adr r3, 8003348 <Echo_cancellation+0x1120>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7fd f9fb 	bl	8000580 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd fc7b 	bl	8000a8c <__aeabi_dcmpge>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d115      	bne.n	80031c8 <Echo_cancellation+0xfa0>
 800319c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800319e:	f7fd f997 	bl	80004d0 <__aeabi_f2d>
 80031a2:	4604      	mov	r4, r0
 80031a4:	460d      	mov	r5, r1
 80031a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80031a8:	f7fd f980 	bl	80004ac <__aeabi_i2d>
 80031ac:	a366      	add	r3, pc, #408	; (adr r3, 8003348 <Echo_cancellation+0x1120>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd f9e5 	bl	8000580 <__aeabi_dmul>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	f7fd fc65 	bl	8000a8c <__aeabi_dcmpge>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01a      	beq.n	80031fe <Echo_cancellation+0xfd6>
    #endif
     )
  {
    /* Things have gone really bad */
    st->screwed_up += 50;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	619a      	str	r2, [r3, #24]
    for (i = 0; i < (st->frame_size * C); i++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031d8:	e008      	b.n	80031ec <Echo_cancellation+0xfc4>
    {
      out[i] = 0;
 80031da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	2200      	movs	r2, #0
 80031e4:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < (st->frame_size * C); i++)
 80031e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031e8:	3301      	adds	r3, #1
 80031ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dbee      	blt.n	80031da <Echo_cancellation+0xfb2>
  if ((Syy < 0) || (Sxx < 0) || (See < 0)
 80031fc:	e01c      	b.n	8003238 <Echo_cancellation+0x1010>
    }
  }
  else if (SHR32(Sff, 2) > ADD32(Sdd, SHR32(MULT16_16(N, 10000), 6)))
 80031fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003208:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003340 <Echo_cancellation+0x1118>
 800320c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003210:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800321c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	dd05      	ble.n	8003232 <Echo_cancellation+0x100a>
  {
    /* AEC seems to add lots of echo instead of removing it, let's see if it will improve */
    st->screwed_up++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	619a      	str	r2, [r3, #24]
 8003230:	e002      	b.n	8003238 <Echo_cancellation+0x1010>
  }
  else
  {
    /* Everything's fine */
    st->screwed_up = 0;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	619a      	str	r2, [r3, #24]
  }
  if (st->screwed_up >= 50)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b31      	cmp	r3, #49	; 0x31
 800323e:	dd03      	ble.n	8003248 <Echo_cancellation+0x1020>
  {
    Echo_state_reset(st);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7fe feb5 	bl	8001fb0 <Echo_state_reset>
      {
        st->last_y[st->frame_size + i] = (float32_t)in[i] - (float32_t)out[i];
      }
    }
  }
}
 8003246:	e3bc      	b.n	80039c2 <Echo_cancellation+0x179a>
    See = MAX32(See, SHR32(MULT16_16(N, 100), 6));
 8003248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003252:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003344 <Echo_cancellation+0x111c>
 8003256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800325e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	dd02      	ble.n	800326e <Echo_cancellation+0x1046>
 8003268:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800326c:	e008      	b.n	8003280 <Echo_cancellation+0x1058>
 800326e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003278:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003344 <Echo_cancellation+0x111c>
 800327c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003280:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    Sxx += mdf_inner_prod(st->x + st->frame_size, st->x + st->frame_size, st->frame_size);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	18d0      	adds	r0, r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	18d1      	adds	r1, r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	f7fe fa51 	bl	800174c <mdf_inner_prod>
 80032aa:	eeb0 7a40 	vmov.f32	s14, s0
 80032ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80032b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    power_spectrum_accum(st->X, st->Xf, N);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8d3 083c 	ldr.w	r0, [r3, #2108]	; 0x83c
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 80032c6:	3328      	adds	r3, #40	; 0x28
 80032c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032ca:	4619      	mov	r1, r3
 80032cc:	f7fe faa7 	bl	800181e <power_spectrum_accum>
    for (j = 0; j <= st->frame_size; j++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80032d4:	e028      	b.n	8003328 <Echo_cancellation+0x1100>
      st->power[j] = MULT16_32_Q15(ss_1, st->power[j]) + 1.0f + MULT16_32_Q15(ss, st->Xf[j]);
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032da:	f203 7396 	addw	r3, r3, #1942	; 0x796
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	ed93 7a00 	vldr	s14, [r3]
 80032e6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fa:	f603 231a 	addw	r3, r3, #2586	; 0xa1a
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	edd3 6a00 	vldr	s13, [r3]
 8003306:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800330a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800330e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003316:	f203 7396 	addw	r3, r3, #1942	; 0x796
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0; j <= st->frame_size; j++)
 8003322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003324:	3301      	adds	r3, #1
 8003326:	67bb      	str	r3, [r7, #120]	; 0x78
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800332e:	429a      	cmp	r2, r3
 8003330:	ddd1      	ble.n	80032d6 <Echo_cancellation+0x10ae>
    for (j = st->frame_size; j >= 0; j--)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	67bb      	str	r3, [r7, #120]	; 0x78
 8003338:	e0a4      	b.n	8003484 <Echo_cancellation+0x125c>
 800333a:	bf00      	nop
 800333c:	f3af 8000 	nop.w
 8003340:	461c4000 	.word	0x461c4000
 8003344:	42c80000 	.word	0x42c80000
 8003348:	00000000 	.word	0x00000000
 800334c:	41cdcd65 	.word	0x41cdcd65
 8003350:	3ba3d70a 	.word	0x3ba3d70a
 8003354:	467ffc00 	.word	0x467ffc00
      Eh = PSEUDOFLOAT(st->Rf[j] - st->Eh[j]);
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335c:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	ed93 7a00 	vldr	s14, [r3]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800336c:	f603 239a 	addw	r3, r3, #2714	; 0xa9a
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337e:	edc7 7a06 	vstr	s15, [r7, #24]
      Yh = PSEUDOFLOAT(st->Yf[j] - st->Yh[j]);
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003386:	f603 1398 	addw	r3, r3, #2456	; 0x998
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	3304      	adds	r3, #4
 8003390:	ed93 7a00 	vldr	s14, [r3]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003398:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a8:	edc7 7a05 	vstr	s15, [r7, #20]
      Pey = FLOAT_ADD(Pey, FLOAT_MULT(Eh, Yh));
 80033ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80033b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80033b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b8:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80033bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
      Pyy = FLOAT_ADD(Pyy, FLOAT_MULT(Yh, Yh));
 80033c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80033c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033cc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80033d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
      st->Eh[j] = ((1.0f - st->spec_average) * st->Eh[j]) + (st->spec_average * st->Rf[j]);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ea:	f603 239a 	addw	r3, r3, #2714	; 0xa9a
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003406:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341e:	f603 239a 	addw	r3, r3, #2714	; 0xa9a
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	edc3 7a00 	vstr	s15, [r3]
      st->Yh[j] = ((1.0f - st->spec_average) * st->Yh[j]) + (st->spec_average * st->Yf[j]);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003436:	ee37 7a67 	vsub.f32	s14, s14, s15
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800343e:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	edd3 7a00 	vldr	s15, [r3]
 800344a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003458:	f603 1398 	addw	r3, r3, #2456	; 0x998
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003472:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	edc3 7a00 	vstr	s15, [r3]
    for (j = st->frame_size; j >= 0; j--)
 800347e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003480:	3b01      	subs	r3, #1
 8003482:	67bb      	str	r3, [r7, #120]	; 0x78
 8003484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003486:	2b00      	cmp	r3, #0
 8003488:	f6bf af66 	bge.w	8003358 <Echo_cancellation+0x1130>
    Pyy = FLOAT_SQRT(Pyy);
 800348c:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8003490:	f7fe f8b6 	bl	8001600 <my_sqrt>
 8003494:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
    Pey = FLOAT_DIVU(Pey, Pyy);
 8003498:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800349c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80034a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    tmp32 = MULT16_32_Q15(st->beta0, Syy);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80034ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    if (tmp32 > MULT16_32_Q15(st->beta_max, See))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80034c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80034c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80034cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	dd08      	ble.n	80034e8 <Echo_cancellation+0x12c0>
      tmp32 = MULT16_32_Q15(st->beta_max, See);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80034dc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80034e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    alpha = FLOAT_DIV32(tmp32, See);
 80034e8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80034ec:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80034f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    alpha_1 = FLOAT_SUB(FLOAT_ONE, alpha);
 80034f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003504:	edc7 7a08 	vstr	s15, [r7, #32]
    st->Pey = FLOAT_ADD(FLOAT_MULT(alpha_1, st->Pey), FLOAT_MULT(alpha, Pey));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800350e:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 8003512:	ed93 7a00 	vldr	s14, [r3]
 8003516:	edd7 7a08 	vldr	s15, [r7, #32]
 800351a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800351e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003522:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003534:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 8003538:	edc3 7a00 	vstr	s15, [r3]
    st->Pyy = FLOAT_ADD(FLOAT_MULT(alpha_1, st->Pyy), FLOAT_MULT(alpha, Pyy));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003542:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 8003546:	ed93 7a00 	vldr	s14, [r3]
 800354a:	edd7 7a08 	vldr	s15, [r7, #32]
 800354e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003552:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003556:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800355a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003568:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 800356c:	edc3 7a00 	vstr	s15, [r3]
    if (FLOAT_LT(st->Pyy, FLOAT_ONE))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003576:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358a:	d507      	bpl.n	800359c <Echo_cancellation+0x1374>
      st->Pyy = FLOAT_ONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003592:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 8003596:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800359a:	601a      	str	r2, [r3, #0]
    if (FLOAT_LT(st->Pey, FLOAT_MULT(MIN_LEAK, st->Pyy)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035a2:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 80035a6:	ed93 7a00 	vldr	s14, [r3]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035b0:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 80035b4:	edd3 7a00 	vldr	s15, [r3]
 80035b8:	ed5f 6a9b 	vldr	s13, [pc, #-620]	; 8003350 <Echo_cancellation+0x1128>
 80035bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c8:	d511      	bpl.n	80035ee <Echo_cancellation+0x13c6>
      st->Pey = FLOAT_MULT(MIN_LEAK, st->Pyy);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035d0:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ed1f 7aa3 	vldr	s14, [pc, #-652]	; 8003350 <Echo_cancellation+0x1128>
 80035dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035e6:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 80035ea:	edc3 7a00 	vstr	s15, [r3]
    if (FLOAT_GT(st->Pey, st->Pyy))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035f4:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003602:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	dd0b      	ble.n	800362c <Echo_cancellation+0x1404>
      st->Pey = st->Pyy;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800361a:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003626:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 800362a:	601a      	str	r2, [r3, #0]
    st->leak_estimate = FLOAT_EXTRACT16(FLOAT_SHL(FLOAT_DIVU(st->Pey, st->Pyy), 14));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003632:	f603 6374 	addw	r3, r3, #3700	; 0xe74
 8003636:	edd3 6a00 	vldr	s13, [r3]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003640:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 8003644:	ed93 7a00 	vldr	s14, [r3]
 8003648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    if (st->leak_estimate > 16383.0f)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003658:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 8003354 <Echo_cancellation+0x112c>
 800365c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	dd03      	ble.n	800366e <Echo_cancellation+0x1446>
      st->leak_estimate = 32767.0f;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4abb      	ldr	r2, [pc, #748]	; (8003958 <Echo_cancellation+0x1730>)
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
 800366c:	e003      	b.n	8003676 <Echo_cancellation+0x144e>
      st->leak_estimate = SHL16(st->leak_estimate, 1);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
    RER = ((.0001f * Sxx) + (3.0f * MULT16_32_Q15(st->leak_estimate, Syy))) / See;
 8003676:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800367a:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 800395c <Echo_cancellation+0x1734>
 800367e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8003688:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800368c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003690:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003694:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003698:	ee77 6a27 	vadd.f32	s13, s14, s15
 800369c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80036a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    if (RER < (Sey * Sey / (1.0f + (See * Syy))))
 80036a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80036ac:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80036b0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80036b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80036cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	d511      	bpl.n	80036fa <Echo_cancellation+0x14d2>
      RER = Sey * Sey / (1.0f + (See * Syy));
 80036d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80036da:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80036de:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80036e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    if (RER > 0.5f)
 80036fa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80036fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	dd02      	ble.n	8003712 <Echo_cancellation+0x14ea>
      RER = .5f;
 800370c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003710:	667b      	str	r3, [r7, #100]	; 0x64
    if ((st->adapted != 1) && (st->sum_adapt > SHL32(EXTEND32(M), 15)) && (MULT16_32_Q15(st->leak_estimate, Syy) > MULT16_32_Q15(QCONST16(.03f, 15), Syy)))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d021      	beq.n	800375e <Echo_cancellation+0x1536>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	dd14      	ble.n	800375e <Echo_cancellation+0x1536>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800373a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800373e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003742:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003746:	eddf 6a86 	vldr	s13, [pc, #536]	; 8003960 <Echo_cancellation+0x1738>
 800374a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800374e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	dd02      	ble.n	800375e <Echo_cancellation+0x1536>
      st->adapted = 1;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	611a      	str	r2, [r3, #16]
    if (st->adapted == 1)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d16f      	bne.n	8003846 <Echo_cancellation+0x161e>
      for (i = 0; i <= st->frame_size; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800376a:	e066      	b.n	800383a <Echo_cancellation+0x1612>
        r = MULT16_32_Q15(st->leak_estimate, SHL32(st->Yf[i], 3));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003776:	f603 1398 	addw	r3, r3, #2456	; 0x998
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003788:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        e = SHL32(st->Rf[i], 3) + 1.0f;
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003790:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	edd3 7a00 	vldr	s15, [r3]
 800379c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037a4:	edc7 7a07 	vstr	s15, [r7, #28]
        if (r > (0.5f * e))
 80037a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80037ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80037b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	dd07      	ble.n	80037d2 <Echo_cancellation+0x15aa>
          r = 0.5f * e;
 80037c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80037c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ce:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        r = MULT16_32_Q15(QCONST16(0.7f, 15), r) + MULT16_32_Q15(QCONST16(0.3f, 15), (spx_word32_t)(MULT16_32_Q15(RER, e)));
 80037d2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80037d6:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003964 <Echo_cancellation+0x173c>
 80037da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037de:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80037e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80037e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003968 <Echo_cancellation+0x1740>
 80037ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        st->power_1[i] = FLOAT_SHL(FLOAT_DIV32_FLOAT(r, FLOAT_MUL32U(e, st->power[i] + 10.0f)), WEIGHT_SHIFT + 16);
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037fe:	f203 7396 	addw	r3, r3, #1942	; 0x796
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800380e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003812:	edd7 7a07 	vldr	s15, [r7, #28]
 8003816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800381a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800381e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003826:	f603 0316 	addw	r3, r3, #2070	; 0x816
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	3304      	adds	r3, #4
 8003830:	edc3 7a00 	vstr	s15, [r3]
      for (i = 0; i <= st->frame_size; i++)
 8003834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003836:	3301      	adds	r3, #1
 8003838:	67fb      	str	r3, [r7, #124]	; 0x7c
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003840:	429a      	cmp	r2, r3
 8003842:	dd93      	ble.n	800376c <Echo_cancellation+0x1544>
 8003844:	e065      	b.n	8003912 <Echo_cancellation+0x16ea>
      spx_word16_t adapt_rate = 0.0f;
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	657b      	str	r3, [r7, #84]	; 0x54
      if (Sxx > SHR32(MULT16_16(N, 1000), 6))
 800384c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003856:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800396c <Echo_cancellation+0x1744>
 800385a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800385e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	dd24      	ble.n	80038b6 <Echo_cancellation+0x168e>
        tmp32 = MULT16_32_Q15(QCONST16(.25f, 15), Sxx);
 800386c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003870:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003878:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        if (tmp32 > (.25f * See))
 800387c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003880:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003888:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800388c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003894:	dd07      	ble.n	80038a6 <Echo_cancellation+0x167e>
          tmp32 = .25f * See;
 8003896:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800389a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800389e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        adapt_rate = FLOAT_EXTRACT16(FLOAT_SHL(FLOAT_DIV32(tmp32, See), 15));
 80038a6:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80038aa:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80038ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      for (i = 0; i <= st->frame_size; i++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038ba:	e01b      	b.n	80038f4 <Echo_cancellation+0x16cc>
        st->power_1[i] = FLOAT_SHL(FLOAT_DIV32(EXTEND32(adapt_rate), ADD32(st->power[i], 10.0f)), WEIGHT_SHIFT + 1);
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038c0:	f203 7396 	addw	r3, r3, #1942	; 0x796
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80038d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038d4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80038d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038e0:	f603 0316 	addw	r3, r3, #2070	; 0x816
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	3304      	adds	r3, #4
 80038ea:	edc3 7a00 	vstr	s15, [r3]
      for (i = 0; i <= st->frame_size; i++)
 80038ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f0:	3301      	adds	r3, #1
 80038f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80038fa:	429a      	cmp	r2, r3
 80038fc:	ddde      	ble.n	80038bc <Echo_cancellation+0x1694>
      st->sum_adapt = ADD32(st->sum_adapt, adapt_rate);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003904:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    for (i = 0; i < st->frame_size; i++)
 8003912:	2300      	movs	r3, #0
 8003914:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003916:	e013      	b.n	8003940 <Echo_cancellation+0x1718>
      st->last_y[i] = st->last_y[st->frame_size + i];
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800391e:	4413      	add	r3, r2
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003930:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	601a      	str	r2, [r3, #0]
    for (i = 0; i < st->frame_size; i++)
 800393a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800393c:	3301      	adds	r3, #1
 800393e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003946:	429a      	cmp	r2, r3
 8003948:	dbe6      	blt.n	8003918 <Echo_cancellation+0x16f0>
    if (st->adapted == 1)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d137      	bne.n	80039c2 <Echo_cancellation+0x179a>
      for (i = 0; i < st->frame_size; i++)
 8003952:	2300      	movs	r3, #0
 8003954:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003956:	e02f      	b.n	80039b8 <Echo_cancellation+0x1790>
 8003958:	46fffe00 	.word	0x46fffe00
 800395c:	38d1b717 	.word	0x38d1b717
 8003960:	3cf5c28f 	.word	0x3cf5c28f
 8003964:	3f333333 	.word	0x3f333333
 8003968:	3e99999a 	.word	0x3e99999a
 800396c:	447a0000 	.word	0x447a0000
        st->last_y[st->frame_size + i] = (float32_t)in[i] - (float32_t)out[i];
 8003970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	4413      	add	r3, r2
 8003978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	4413      	add	r3, r2
 800398c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003990:	ee07 3a90 	vmov	s15, r3
 8003994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800399e:	4413      	add	r3, r2
 80039a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	edc3 7a00 	vstr	s15, [r3]
      for (i = 0; i < st->frame_size; i++)
 80039b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039b4:	3301      	adds	r3, #1
 80039b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80039be:	429a      	cmp	r2, r3
 80039c0:	dbd6      	blt.n	8003970 <Echo_cancellation+0x1748>
}
 80039c2:	bf00      	nop
 80039c4:	3780      	adds	r7, #128	; 0x80
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ca:	bf00      	nop

080039cc <Echo_get_residual>:

/* Compute spectrum of estimated echo for use in an echo post-filter */
void Echo_get_residual(SpeexEchoState *st, spx_word32_t *residual_echo, int len)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  //UNUSED(len);
  int32_t i;
  spx_word16_t leak2;
  int32_t N;
  N = st->window_size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	617b      	str	r3, [r7, #20]
  /* Apply hanning window (should pre-compute it)*/
  arm_mult_f32(st->window, st->last_y, st->y, (uint32_t)N);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f503 5039 	add.w	r0, r3, #11840	; 0x2e40
 80039e4:	303c      	adds	r0, #60	; 0x3c
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f503 6164 	add.w	r1, r3, #3648	; 0xe40
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f503 6224 	add.w	r2, r3, #2624	; 0xa40
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f00e f946 	bl	8011c84 <arm_mult_f32>
  /* Compute power spectrum of the echo */
  libSpeexAEC_fft(st->fft_table, st->y, st->Y);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80039fe:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f503 6124 	add.w	r1, r3, #2624	; 0xa40
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f7fd fd6c 	bl	80014ec <libSpeexAEC_fft>
  power_spectrum(st->Y, residual_echo, N);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd feac 	bl	800177c <power_spectrum>

  if (st->leak_estimate > 0.5f)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003a2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	dd03      	ble.n	8003a40 <Echo_get_residual+0x74>
  {
    leak2 = 1.0f;
 8003a38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	e006      	b.n	8003a4e <Echo_get_residual+0x82>
  }
  else
  {
    leak2 = 2.0f * st->leak_estimate;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003a46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a4a:	edc7 7a06 	vstr	s15, [r7, #24]
  }

  /* Estimate residual echo */
  for (i = 0; i <= st->frame_size; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	e012      	b.n	8003a7a <Echo_get_residual+0xae>
  {
    residual_echo[i] = MULT16_32_Q15(leak2, residual_echo[i]);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	ed93 7a00 	vldr	s14, [r3]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4413      	add	r3, r2
 8003a68:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a70:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i <= st->frame_size; i++)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	3301      	adds	r3, #1
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	dde7      	ble.n	8003a54 <Echo_get_residual+0x88>
  }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <Echo_ctrl>:

int Echo_ctrl(SpeexEchoState *st, int request, void *ptr)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08c      	sub	sp, #48	; 0x30
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  switch (request)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3b03      	subs	r3, #3
 8003aa4:	2b1a      	cmp	r3, #26
 8003aa6:	f200 80fe 	bhi.w	8003ca6 <Echo_ctrl+0x216>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <Echo_ctrl+0x20>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003b1d 	.word	0x08003b1d
 8003ab4:	08003ca7 	.word	0x08003ca7
 8003ab8:	08003ca7 	.word	0x08003ca7
 8003abc:	08003ca7 	.word	0x08003ca7
 8003ac0:	08003ca7 	.word	0x08003ca7
 8003ac4:	08003ca7 	.word	0x08003ca7
 8003ac8:	08003ca7 	.word	0x08003ca7
 8003acc:	08003ca7 	.word	0x08003ca7
 8003ad0:	08003ca7 	.word	0x08003ca7
 8003ad4:	08003ca7 	.word	0x08003ca7
 8003ad8:	08003ca7 	.word	0x08003ca7
 8003adc:	08003ca7 	.word	0x08003ca7
 8003ae0:	08003ca7 	.word	0x08003ca7
 8003ae4:	08003ca7 	.word	0x08003ca7
 8003ae8:	08003ca7 	.word	0x08003ca7
 8003aec:	08003ca7 	.word	0x08003ca7
 8003af0:	08003ca7 	.word	0x08003ca7
 8003af4:	08003ca7 	.word	0x08003ca7
 8003af8:	08003ca7 	.word	0x08003ca7
 8003afc:	08003ca7 	.word	0x08003ca7
 8003b00:	08003ca7 	.word	0x08003ca7
 8003b04:	08003b27 	.word	0x08003b27
 8003b08:	08003be9 	.word	0x08003be9
 8003b0c:	08003ca7 	.word	0x08003ca7
 8003b10:	08003bf3 	.word	0x08003bf3
 8003b14:	08003ca7 	.word	0x08003ca7
 8003b18:	08003c05 	.word	0x08003c05
  {
    case SPEEX_ECHO_GET_FRAME_SIZE:
      (*(int *)ptr) = st->frame_size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	601a      	str	r2, [r3, #0]
      break;
 8003b24:	e0c3      	b.n	8003cae <Echo_ctrl+0x21e>
    case SPEEX_ECHO_SET_SAMPLING_RATE:
      st->sampling_rate = (*(int *)ptr);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
      st->spec_average = DIV32_16(SHL32(EXTEND32(st->frame_size), 15), st->sampling_rate);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      #ifdef FIXED_POINT
      st->beta0 = DIV32_16(SHL32(EXTEND32(st->frame_size), 16), st->sampling_rate);
      st->beta_max = DIV32_16(SHL32(EXTEND32(st->frame_size), 14), st->sampling_rate);
      #else
      st->beta0 = (2.0f * st->frame_size) / st->sampling_rate;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	ee07 3a90 	vmov	s15, r3
 8003b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b5c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      st->beta_max = (.5f * st->frame_size) / st->sampling_rate;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b86:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
      #endif
      if (st->sampling_rate < 12000)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f642 62df 	movw	r2, #11999	; 0x2edf
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	dc07      	bgt.n	8003bbc <Echo_ctrl+0x12c>
      {
        st->notch_radius = QCONST16(.9f, 15);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4b40      	ldr	r3, [pc, #256]	; (8003cb8 <Echo_ctrl+0x228>)
 8003bb6:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
      }
      else
      {
        st->notch_radius = QCONST16(.992f, 15);
      }
      break;
 8003bba:	e078      	b.n	8003cae <Echo_ctrl+0x21e>
      else if (st->sampling_rate < 24000)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	dc07      	bgt.n	8003bd8 <Echo_ctrl+0x148>
        st->notch_radius = QCONST16(.982f, 15);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <Echo_ctrl+0x22c>)
 8003bd2:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
      break;
 8003bd6:	e06a      	b.n	8003cae <Echo_ctrl+0x21e>
        st->notch_radius = QCONST16(.992f, 15);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <Echo_ctrl+0x230>)
 8003be2:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
      break;
 8003be6:	e062      	b.n	8003cae <Echo_ctrl+0x21e>
    case SPEEX_ECHO_GET_SAMPLING_RATE:
      (*(int *)ptr) = st->sampling_rate;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]
      break;
 8003bf0:	e05d      	b.n	8003cae <Echo_ctrl+0x21e>
    case SPEEX_ECHO_GET_IMPULSE_RESPONSE_SIZE:
      /*FIXME: Implement this for multiple channels */
      *((spx_int32_t *)ptr) = st->M * st->frame_size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	fb03 f202 	mul.w	r2, r3, r2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
      break;
 8003c02:	e054      	b.n	8003cae <Echo_ctrl+0x21e>
    case SPEEX_ECHO_GET_IMPULSE_RESPONSE:
    {
      int M = st->M, N = st->window_size, n = st->frame_size, i, j;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	61bb      	str	r3, [r7, #24]
      spx_int32_t *filt = (spx_int32_t *) ptr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	617b      	str	r3, [r7, #20]
      for (j = 0; j < M; j++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e03d      	b.n	8003c9c <Echo_ctrl+0x20c>
        {
          st->wtmp2[i] = EXTRACT16(PSHR32(st->W[j * N + i], 16 + NORMALIZE_SCALEDOWN));
        }
        libSpeexAEC_ifft((drft_lookup *)(st->fft_table), st->wtmp2, st->wtmp);
        #else
        libSpeexAEC_ifft((drft_lookup *)st->fft_table, &st->W[j * N], st->wtmp);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003c26:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c30:	f8d3 2e40 	ldr.w	r2, [r3, #3648]	; 0xe40
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	69f9      	ldr	r1, [r7, #28]
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	18d1      	adds	r1, r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8003c46:	3320      	adds	r3, #32
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f7fd fc84 	bl	8001556 <libSpeexAEC_ifft>
        #endif
        for (i = 0; i < n; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c52:	e01c      	b.n	8003c8e <Echo_ctrl+0x1fe>
        {
          filt[j * n + i] = (spx_int32_t)PSHR32(MULT16_16(32767, st->wtmp[i]), WEIGHT_SHIFT - NORMALIZE_SCALEDOWN);
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003cc4 <Echo_ctrl+0x234>
 8003c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	fb03 f202 	mul.w	r2, r3, r2
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c82:	ee17 2a90 	vmov	r2, s15
 8003c86:	601a      	str	r2, [r3, #0]
        for (i = 0; i < n; i++)
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	dbde      	blt.n	8003c54 <Echo_ctrl+0x1c4>
      for (j = 0; j < M; j++)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	3301      	adds	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	dbbd      	blt.n	8003c20 <Echo_ctrl+0x190>
        }
      }
    }
    break;
 8003ca4:	e003      	b.n	8003cae <Echo_ctrl+0x21e>
    default:
      ret = -1;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003cac:	bf00      	nop
  }
  return ret;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3730      	adds	r7, #48	; 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	3f666666 	.word	0x3f666666
 8003cbc:	3f7b645a 	.word	0x3f7b645a
 8003cc0:	3f7df3b6 	.word	0x3f7df3b6
 8003cc4:	46fffe00 	.word	0x46fffe00

08003cc8 <filterbank_new>:
#define toBARK(n)   ((13.1f*atan(.00074f*(n))) + (2.24f*atan((n)*(n)*1.85e-8f)) + (1e-4f*(n)))
#define toMEL(n)    (2595.f*log10(1.f+(n)/700.f))


void filterbank_new(FilterBank *bank, int32_t banks, spx_word32_t sampling, int32_t len, int32_t type)
{
 8003cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ccc:	b090      	sub	sp, #64	; 0x40
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6178      	str	r0, [r7, #20]
 8003cd2:	6139      	str	r1, [r7, #16]
 8003cd4:	ed87 0a03 	vstr	s0, [r7, #12]
 8003cd8:	60ba      	str	r2, [r7, #8]
 8003cda:	607b      	str	r3, [r7, #4]
  int32_t id1;
  int32_t id2;
  spx_word32_t df;
  spx_word32_t max_mel, mel_interval;

  df = DIV32(SHL32(sampling, 15), MULT16_16(2, len));
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ce6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003cea:	edd7 6a03 	vldr	s13, [r7, #12]
 8003cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  max_mel = (float32_t)(toBARK((float64_t)(EXTRACT16((float64_t)sampling / 2.0f))));
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7fc fbea 	bl	80004d0 <__aeabi_f2d>
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d04:	f7fc fd66 	bl	80007d4 <__aeabi_ddiv>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	a3ff      	add	r3, pc, #1020	; (adr r3, 8004110 <filterbank_new+0x448>)
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f7fc fc33 	bl	8000580 <__aeabi_dmul>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	ec43 2b17 	vmov	d7, r2, r3
 8003d22:	eeb0 0a47 	vmov.f32	s0, s14
 8003d26:	eef0 0a67 	vmov.f32	s1, s15
 8003d2a:	f00e f955 	bl	8011fd8 <atan>
 8003d2e:	ec51 0b10 	vmov	r0, r1, d0
 8003d32:	a3f9      	add	r3, pc, #996	; (adr r3, 8004118 <filterbank_new+0x450>)
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f7fc fc22 	bl	8000580 <__aeabi_dmul>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4614      	mov	r4, r2
 8003d42:	461d      	mov	r5, r3
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7fc fbc3 	bl	80004d0 <__aeabi_f2d>
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d52:	f7fc fd3f 	bl	80007d4 <__aeabi_ddiv>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	4699      	mov	r9, r3
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7fc fbb6 	bl	80004d0 <__aeabi_f2d>
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d6c:	f7fc fd32 	bl	80007d4 <__aeabi_ddiv>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4640      	mov	r0, r8
 8003d76:	4649      	mov	r1, r9
 8003d78:	f7fc fc02 	bl	8000580 <__aeabi_dmul>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	a3e6      	add	r3, pc, #920	; (adr r3, 8004120 <filterbank_new+0x458>)
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f7fc fbf9 	bl	8000580 <__aeabi_dmul>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	ec43 2b17 	vmov	d7, r2, r3
 8003d96:	eeb0 0a47 	vmov.f32	s0, s14
 8003d9a:	eef0 0a67 	vmov.f32	s1, s15
 8003d9e:	f00e f91b 	bl	8011fd8 <atan>
 8003da2:	ec51 0b10 	vmov	r0, r1, d0
 8003da6:	a3e0      	add	r3, pc, #896	; (adr r3, 8004128 <filterbank_new+0x460>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fbe8 	bl	8000580 <__aeabi_dmul>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4620      	mov	r0, r4
 8003db6:	4629      	mov	r1, r5
 8003db8:	f7fc fa2c 	bl	8000214 <__adddf3>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	461d      	mov	r5, r3
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7fc fb83 	bl	80004d0 <__aeabi_f2d>
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dd2:	f7fc fcff 	bl	80007d4 <__aeabi_ddiv>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	a3d4      	add	r3, pc, #848	; (adr r3, 8004130 <filterbank_new+0x468>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fbcc 	bl	8000580 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4620      	mov	r0, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	f7fc fa10 	bl	8000214 <__adddf3>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f7fc fea2 	bl	8000b44 <__aeabi_d2f>
 8003e00:	4603      	mov	r3, r0
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  mel_interval = PDIV32(max_mel, (float32_t)banks - 1.0f);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e12:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003e16:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  bank->nb_banks = banks;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	f8c3 2860 	str.w	r2, [r3, #2144]	; 0x860
  bank->len = len;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	f8c3 2864 	str.w	r2, [r3, #2148]	; 0x864

  for (i = 0; i < len; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e36:	e0de      	b.n	8003ff6 <filterbank_new+0x32e>
  {
    spx_word16_t curr_freq;
    spx_word32_t mel;
    spx_word16_t val;
    curr_freq = EXTRACT16(MULT16_32_P15((float32_t)i, df));
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e42:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mel = (float32_t)(toBARK((float64_t)curr_freq));
 8003e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e50:	f7fc fb3e 	bl	80004d0 <__aeabi_f2d>
 8003e54:	a3ae      	add	r3, pc, #696	; (adr r3, 8004110 <filterbank_new+0x448>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f7fc fb91 	bl	8000580 <__aeabi_dmul>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	ec43 2b17 	vmov	d7, r2, r3
 8003e66:	eeb0 0a47 	vmov.f32	s0, s14
 8003e6a:	eef0 0a67 	vmov.f32	s1, s15
 8003e6e:	f00e f8b3 	bl	8011fd8 <atan>
 8003e72:	ec51 0b10 	vmov	r0, r1, d0
 8003e76:	a3a8      	add	r3, pc, #672	; (adr r3, 8004118 <filterbank_new+0x450>)
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f7fc fb80 	bl	8000580 <__aeabi_dmul>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4690      	mov	r8, r2
 8003e86:	4699      	mov	r9, r3
 8003e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e8a:	f7fc fb21 	bl	80004d0 <__aeabi_f2d>
 8003e8e:	4604      	mov	r4, r0
 8003e90:	460d      	mov	r5, r1
 8003e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e94:	f7fc fb1c 	bl	80004d0 <__aeabi_f2d>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f7fc fb6e 	bl	8000580 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	a39c      	add	r3, pc, #624	; (adr r3, 8004120 <filterbank_new+0x458>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f7fc fb65 	bl	8000580 <__aeabi_dmul>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	ec43 2b17 	vmov	d7, r2, r3
 8003ebe:	eeb0 0a47 	vmov.f32	s0, s14
 8003ec2:	eef0 0a67 	vmov.f32	s1, s15
 8003ec6:	f00e f887 	bl	8011fd8 <atan>
 8003eca:	ec51 0b10 	vmov	r0, r1, d0
 8003ece:	a396      	add	r3, pc, #600	; (adr r3, 8004128 <filterbank_new+0x460>)
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f7fc fb54 	bl	8000580 <__aeabi_dmul>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4640      	mov	r0, r8
 8003ede:	4649      	mov	r1, r9
 8003ee0:	f7fc f998 	bl	8000214 <__adddf3>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4614      	mov	r4, r2
 8003eea:	461d      	mov	r5, r3
 8003eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eee:	f7fc faef 	bl	80004d0 <__aeabi_f2d>
 8003ef2:	a38f      	add	r3, pc, #572	; (adr r3, 8004130 <filterbank_new+0x468>)
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f7fc fb42 	bl	8000580 <__aeabi_dmul>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4620      	mov	r0, r4
 8003f02:	4629      	mov	r1, r5
 8003f04:	f7fc f986 	bl	8000214 <__adddf3>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f7fc fe18 	bl	8000b44 <__aeabi_d2f>
 8003f14:	4603      	mov	r3, r0
 8003f16:	623b      	str	r3, [r7, #32]

    if (mel > max_mel)
 8003f18:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f28:	dc6b      	bgt.n	8004002 <filterbank_new+0x33a>
    {
      break;
    }
    id1 = (int32_t)(floor((float64_t)mel / (float64_t)mel_interval));
 8003f2a:	6a38      	ldr	r0, [r7, #32]
 8003f2c:	f7fc fad0 	bl	80004d0 <__aeabi_f2d>
 8003f30:	4604      	mov	r4, r0
 8003f32:	460d      	mov	r5, r1
 8003f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f36:	f7fc facb 	bl	80004d0 <__aeabi_f2d>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc fc47 	bl	80007d4 <__aeabi_ddiv>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	ec43 2b17 	vmov	d7, r2, r3
 8003f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f52:	eef0 0a67 	vmov.f32	s1, s15
 8003f56:	f00e fb67 	bl	8012628 <floor>
 8003f5a:	ec53 2b10 	vmov	r2, r3, d0
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	f7fc fda7 	bl	8000ab4 <__aeabi_d2iz>
 8003f66:	4603      	mov	r3, r0
 8003f68:	63bb      	str	r3, [r7, #56]	; 0x38

    if (id1 > (banks - 2))
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f70:	429a      	cmp	r2, r3
 8003f72:	db06      	blt.n	8003f82 <filterbank_new+0x2ba>
    {
      id1 = banks - 2;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	3b02      	subs	r3, #2
 8003f78:	63bb      	str	r3, [r7, #56]	; 0x38
      val = Q15_ONE;
 8003f7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f80:	e012      	b.n	8003fa8 <filterbank_new+0x2e0>
    }
    else
    {
      val = DIV32_16(mel - ((float32_t)id1 * mel_interval), EXTRACT16(PSHR32(mel_interval, 15)));
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f94:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f9c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    }

    id2 = id1 + 1;
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	3301      	adds	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
    bank->bank_left[i] = id1;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    bank->filter_left[i] = SUB16(Q15_ONE, val);
 8003fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fbc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	edc3 7a00 	vstr	s15, [r3]
    bank->bank_right[i] = id2;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fd8:	3280      	adds	r2, #128	; 0x80
 8003fda:	69f9      	ldr	r1, [r7, #28]
 8003fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    bank->filter_right[i] = val;
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fee:	601a      	str	r2, [r3, #0]
  for (i = 0; i < len; i++)
 8003ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	f6ff af1c 	blt.w	8003e38 <filterbank_new+0x170>
 8004000:	e000      	b.n	8004004 <filterbank_new+0x33c>
      break;
 8004002:	bf00      	nop
  }

  for (i = 0; i < bank->nb_banks; i++)
 8004004:	2300      	movs	r3, #0
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004008:	e00b      	b.n	8004022 <filterbank_new+0x35a>
  {
    bank->scaling[i] = 0.0f;
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < bank->nb_banks; i++)
 800401c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401e:	3301      	adds	r3, #1
 8004020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f8d3 3860 	ldr.w	r3, [r3, #2144]	; 0x860
 8004028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800402a:	429a      	cmp	r2, r3
 800402c:	dbed      	blt.n	800400a <filterbank_new+0x342>
  }

  for (i = 0; i < bank->len; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004032:	e041      	b.n	80040b8 <filterbank_new+0x3f0>
  {
    int32_t id = bank->bank_left[i];
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800403c:	61bb      	str	r3, [r7, #24]
    bank->scaling[id] += bank->filter_left[i];
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	ed93 7a00 	vldr	s14, [r3]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	edc3 7a00 	vstr	s15, [r3]
    id = bank->bank_right[i];
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004076:	3280      	adds	r2, #128	; 0x80
 8004078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407c:	61bb      	str	r3, [r7, #24]
    bank->scaling[id] += bank->filter_right[i];
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	ed93 7a00 	vldr	s14, [r3]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	edd3 7a00 	vldr	s15, [r3]
 800409e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < bank->len; i++)
 80040b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b4:	3301      	adds	r3, #1
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f8d3 3864 	ldr.w	r3, [r3, #2148]	; 0x864
 80040be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	dbb7      	blt.n	8004034 <filterbank_new+0x36c>
  }

  for (i = 0; i < bank->nb_banks; i++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c8:	e016      	b.n	80040f8 <filterbank_new+0x430>
  {
    bank->scaling[i] = Q15_ONE / (bank->scaling[i]);
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	ed93 7a00 	vldr	s14, [r3]
 80040da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < bank->nb_banks; i++)
 80040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f4:	3301      	adds	r3, #1
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f8d3 3860 	ldr.w	r3, [r3, #2144]	; 0x860
 80040fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004100:	429a      	cmp	r2, r3
 8004102:	dbe2      	blt.n	80040ca <filterbank_new+0x402>
  }
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3740      	adds	r7, #64	; 0x40
 800410a:	46bd      	mov	sp, r7
 800410c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004110:	e0000000 	.word	0xe0000000
 8004114:	3f483f91 	.word	0x3f483f91
 8004118:	40000000 	.word	0x40000000
 800411c:	402a3333 	.word	0x402a3333
 8004120:	c0000000 	.word	0xc0000000
 8004124:	3e53dd3d 	.word	0x3e53dd3d
 8004128:	20000000 	.word	0x20000000
 800412c:	4001eb85 	.word	0x4001eb85
 8004130:	e0000000 	.word	0xe0000000
 8004134:	3f1a36e2 	.word	0x3f1a36e2

08004138 <filterbank_compute_bank32>:

void filterbank_compute_bank32(FilterBank *bank, spx_word32_t *ps, spx_word32_t *mel)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  int32_t i;
  for (i = 0; i < bank->nb_banks; i++)
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e009      	b.n	800415e <filterbank_compute_bank32+0x26>
  {
    mel[i] = 0.0f;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
  for (i = 0; i < bank->nb_banks; i++)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	3301      	adds	r3, #1
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f8d3 3860 	ldr.w	r3, [r3, #2144]	; 0x860
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	429a      	cmp	r2, r3
 8004168:	dbef      	blt.n	800414a <filterbank_compute_bank32+0x12>
  }

  for (i = 0; i < bank->len; i++)
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e049      	b.n	8004204 <filterbank_compute_bank32+0xcc>
  {
    int32_t id;
    id = bank->bank_left[i];
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004178:	613b      	str	r3, [r7, #16]
    mel[id] += MULT16_32_P15(bank->filter_left[i], ps[i]);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	ed93 7a00 	vldr	s14, [r3]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	edd3 6a00 	vldr	s13, [r3]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4413      	add	r3, r2
 800419e:	edd3 7a00 	vldr	s15, [r3]
 80041a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b2:	edc3 7a00 	vstr	s15, [r3]
    id = bank->bank_right[i];
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	3280      	adds	r2, #128	; 0x80
 80041bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c0:	613b      	str	r3, [r7, #16]
    mel[id] += MULT16_32_P15(bank->filter_right[i], ps[i]);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	ed93 7a00 	vldr	s14, [r3]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	edd3 6a00 	vldr	s13, [r3]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4413      	add	r3, r2
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041fa:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < bank->len; i++)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	3301      	adds	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f8d3 3864 	ldr.w	r3, [r3, #2148]	; 0x864
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	dbaf      	blt.n	8004170 <filterbank_compute_bank32+0x38>
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <filterbank_compute_psd16>:

void filterbank_compute_psd16(FilterBank *bank, spx_word16_t *mel, spx_word16_t *ps)
{
 800421e:	b480      	push	{r7}
 8004220:	b089      	sub	sp, #36	; 0x24
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  int32_t i;
  for (i = 0; i < bank->len; i++)
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e03b      	b.n	80042a8 <filterbank_compute_psd16+0x8a>
  {
    spx_word32_t tmp;
    int32_t id1, id2;
    id1 = bank->bank_left[i];
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004238:	61bb      	str	r3, [r7, #24]
    id2 = bank->bank_right[i];
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	3280      	adds	r2, #128	; 0x80
 8004240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004244:	617b      	str	r3, [r7, #20]
    tmp = MULT16_16(mel[id1], bank->filter_left[i]);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4413      	add	r3, r2
 800424e:	ed93 7a00 	vldr	s14, [r3]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	edd3 7a00 	vldr	s15, [r3]
 8004262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004266:	edc7 7a04 	vstr	s15, [r7, #16]
    tmp += MULT16_16(mel[id2], bank->filter_right[i]);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4413      	add	r3, r2
 8004272:	ed93 7a00 	vldr	s14, [r3]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428a:	ed97 7a04 	vldr	s14, [r7, #16]
 800428e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004292:	edc7 7a04 	vstr	s15, [r7, #16]
    ps[i] = EXTRACT16(PSHR32(tmp, 15));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < bank->len; i++)
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3301      	adds	r3, #1
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8d3 3864 	ldr.w	r3, [r3, #2148]	; 0x864
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	dbbd      	blt.n	8004230 <filterbank_compute_psd16+0x12>
  }
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3724      	adds	r7, #36	; 0x24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <my_sqrt>:
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	ed87 0a01 	vstr	s0, [r7, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	613b      	str	r3, [r7, #16]
    if (in >= 0.0f)
 80042d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	db09      	blt.n	80042f8 <my_sqrt+0x36>
      *pOut = __builtin_sqrtf(in);
 80042e4:	ed97 0a05 	vldr	s0, [r7, #20]
 80042e8:	f00e f8dc 	bl	80124a4 <sqrtf>
 80042ec:	eef0 7a40 	vmov.f32	s15, s0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80042f6:	e004      	b.n	8004302 <my_sqrt+0x40>
      *pOut = 0.0f;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004300:	bf00      	nop
  return b;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	ee07 3a90 	vmov	s15, r3
}
 8004308:	eeb0 0a67 	vmov.f32	s0, s15
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	0000      	movs	r0, r0
 8004314:	0000      	movs	r0, r0
	...

08004318 <conj_window>:
#define EXPOUT_SCALING_1 1.f

#endif

static void conj_window(spx_word16_t *w, int32_t len)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	ed2d 8b02 	vpush	{d8}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  int32_t i;
  for (i = 0; i < len; i++)
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e0b0      	b.n	800448e <conj_window+0x176>
  {
    spx_word16_t tmp;
    #ifdef FIXED_POINT
    spx_word16_t x = DIV32_16(MULT16_16(32767, i), len);
    #else
    spx_word16_t x = DIV32_16(MULT16_16(QCONST16(4.f, 13), i), len);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004336:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800433a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800434c:	edc7 7a03 	vstr	s15, [r7, #12]
    #endif
    int32_t inv = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]
    if (x < QCONST16(1.f, 13))
 8004354:	edd7 7a03 	vldr	s15, [r7, #12]
 8004358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800435c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	d433      	bmi.n	80043ce <conj_window+0xb6>
    {
    }
    else if (x < QCONST16(2.f, 13))
 8004366:	edd7 7a03 	vldr	s15, [r7, #12]
 800436a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800436e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004376:	d50a      	bpl.n	800438e <conj_window+0x76>
    {
      x = QCONST16(2.f, 13) - x;
 8004378:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800437c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004384:	edc7 7a03 	vstr	s15, [r7, #12]
      inv = 1;
 8004388:	2301      	movs	r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	e01f      	b.n	80043ce <conj_window+0xb6>
    }
    else if (x < QCONST16(3.f, 13))
 800438e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004392:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439e:	d50a      	bpl.n	80043b6 <conj_window+0x9e>
    {
      x = x - QCONST16(2.f, 13);
 80043a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80043a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043ac:	edc7 7a03 	vstr	s15, [r7, #12]
      inv = 1;
 80043b0:	2301      	movs	r3, #1
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	e00b      	b.n	80043ce <conj_window+0xb6>
    }
    else
    {
      x = QCONST16(2.f, 13) - x + QCONST16(2.f, 13); /* 4 - x */
 80043b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80043be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ca:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    x = MULT16_16_Q14(QCONST16(1.271903f, 14), x);
 80043ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80044b0 <conj_window+0x198>
 80043d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043da:	edc7 7a03 	vstr	s15, [r7, #12]
    tmp = SQR16_Q15(QCONST16(0.5f, 15.0f) - MULT16_16_P15(QCONST16(0.5f, 15.0f), spx_cos_norm(SHL32(EXTEND32(x), 2))));
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7fc f876 	bl	80004d0 <__aeabi_f2d>
 80043e4:	a330      	add	r3, pc, #192	; (adr r3, 80044a8 <conj_window+0x190>)
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fc f8c9 	bl	8000580 <__aeabi_dmul>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	f7fc fba5 	bl	8000b44 <__aeabi_d2f>
 80043fa:	4603      	mov	r3, r0
 80043fc:	ee00 3a10 	vmov	s0, r3
 8004400:	f00e f86e 	bl	80124e0 <cosf>
 8004404:	eef0 7a40 	vmov.f32	s15, s0
 8004408:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800440c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004410:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004414:	ee37 8a67 	vsub.f32	s16, s14, s15
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7fc f859 	bl	80004d0 <__aeabi_f2d>
 800441e:	a322      	add	r3, pc, #136	; (adr r3, 80044a8 <conj_window+0x190>)
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f7fc f8ac 	bl	8000580 <__aeabi_dmul>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	f7fc fb88 	bl	8000b44 <__aeabi_d2f>
 8004434:	4603      	mov	r3, r0
 8004436:	ee00 3a10 	vmov	s0, r3
 800443a:	f00e f851 	bl	80124e0 <cosf>
 800443e:	eef0 7a40 	vmov.f32	s15, s0
 8004442:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800444e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004452:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004456:	edc7 7a04 	vstr	s15, [r7, #16]
    if (inv == 1)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <conj_window+0x158>
    {
      tmp = SUB16(Q15_ONE, tmp);
 8004460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004464:	edd7 7a04 	vldr	s15, [r7, #16]
 8004468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800446c:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    w[i] = spx_sqrt(SHL32(EXTEND32(tmp), 15));
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	18d4      	adds	r4, r2, r3
 8004478:	ed97 0a04 	vldr	s0, [r7, #16]
 800447c:	f7ff ff21 	bl	80042c2 <my_sqrt>
 8004480:	eef0 7a40 	vmov.f32	s15, s0
 8004484:	edc4 7a00 	vstr	s15, [r4]
  for (i = 0; i < len; i++)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	3301      	adds	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	f6ff af4a 	blt.w	800432c <conj_window+0x14>
  }
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	ecbd 8b02 	vpop	{d8}
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	bf00      	nop
 80044a8:	54442d18 	.word	0x54442d18
 80044ac:	3ff921fb 	.word	0x3ff921fb
 80044b0:	3fa2cdb8 	.word	0x3fa2cdb8

080044b4 <hypergeom_gain>:
y = gamma(1.25)^2 * M(-.25;1;-x) / sqrt(x)
which multiplied by xi/(1+xi) is the optimal gain
in the loudness domain ( sqrt[amplitude] )
*/
static inline spx_word32_t hypergeom_gain(spx_word32_t xx)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	ed2d 8b02 	vpush	{d8}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	ed87 0a01 	vstr	s0, [r7, #4]
    1.94811f, 2.07038f, 2.18638f, 2.29688f, 2.40255f, 2.50391f, 2.60144f,
    2.69551f, 2.78647f, 2.87458f, 2.96015f, 3.04333f, 3.12431f, 3.20326f
  };
  spx_word32_t ret;

  x = EXPIN_SCALING_1 * xx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	61bb      	str	r3, [r7, #24]
  integer = floorf(2.0f * x);
 80044c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80044ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044ce:	eeb0 0a67 	vmov.f32	s0, s15
 80044d2:	f00e f929 	bl	8012728 <floorf>
 80044d6:	ed87 0a05 	vstr	s0, [r7, #20]
  ind = (int)integer;
 80044da:	edd7 7a05 	vldr	s15, [r7, #20]
 80044de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044e2:	ee17 3a90 	vmov	r3, s15
 80044e6:	613b      	str	r3, [r7, #16]
  if (ind < 0)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	da03      	bge.n	80044f6 <hypergeom_gain+0x42>
  {
    ret = FRAC_SCALING;
 80044ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e044      	b.n	8004580 <hypergeom_gain+0xcc>
  }
  else if (ind > 19)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b13      	cmp	r3, #19
 80044fa:	dd0c      	ble.n	8004516 <hypergeom_gain+0x62>
  {
    ret = FRAC_SCALING * (1.0f + 0.1296f / x);
 80044fc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004594 <hypergeom_gain+0xe0>
 8004500:	ed97 7a06 	vldr	s14, [r7, #24]
 8004504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800450c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004510:	edc7 7a07 	vstr	s15, [r7, #28]
 8004514:	e034      	b.n	8004580 <hypergeom_gain+0xcc>
  }
  else
  {
    frac = (2.0f * x) - integer;
 8004516:	edd7 7a06 	vldr	s15, [r7, #24]
 800451a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800451e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004526:	edc7 7a03 	vstr	s15, [r7, #12]
    ret = FRAC_SCALING * (((1.0f - frac) * table[ind]) + (frac * table[ind + 1])) / spx_sqrt(x + 0.0001f);
 800452a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800452e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004536:	4a18      	ldr	r2, [pc, #96]	; (8004598 <hypergeom_gain+0xe4>)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	edd3 7a00 	vldr	s15, [r3]
 8004542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3301      	adds	r3, #1
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <hypergeom_gain+0xe4>)
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	edd3 6a00 	vldr	s13, [r3]
 8004554:	edd7 7a03 	vldr	s15, [r7, #12]
 8004558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800455c:	ee37 8a27 	vadd.f32	s16, s14, s15
 8004560:	edd7 7a06 	vldr	s15, [r7, #24]
 8004564:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800459c <hypergeom_gain+0xe8>
 8004568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800456c:	eeb0 0a67 	vmov.f32	s0, s15
 8004570:	f7ff fea7 	bl	80042c2 <my_sqrt>
 8004574:	eeb0 7a40 	vmov.f32	s14, s0
 8004578:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800457c:	edc7 7a07 	vstr	s15, [r7, #28]
  }
  return ret;
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	ee07 3a90 	vmov	s15, r3
}
 8004586:	eeb0 0a67 	vmov.f32	s0, s15
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	ecbd 8b02 	vpop	{d8}
 8004592:	bd80      	pop	{r7, pc}
 8004594:	3e04b5dd 	.word	0x3e04b5dd
 8004598:	08013a88 	.word	0x08013a88
 800459c:	38d1b717 	.word	0x38d1b717

080045a0 <qcurve>:

static inline spx_word16_t qcurve(spx_word16_t x)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	ed87 0a01 	vstr	s0, [r7, #4]
  return 1.f / (1.f + (.15f / (SNR_SCALING_1 * x)));
 80045aa:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80045d8 <qcurve+0x38>
 80045ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80045b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045c6:	eef0 7a66 	vmov.f32	s15, s13
}
 80045ca:	eeb0 0a67 	vmov.f32	s0, s15
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	3e19999a 	.word	0x3e19999a

080045dc <compute_gain_floor>:

static void compute_gain_floor(float32_t noise_suppress, float32_t effective_echo_suppress, spx_word32_t *noise, spx_word32_t *echo, spx_word16_t *gain_floor, int32_t len)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	ed2d 8b02 	vpush	{d8}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	ed87 0a05 	vstr	s0, [r7, #20]
 80045ea:	edc7 0a04 	vstr	s1, [r7, #16]
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  int32_t i;
  float32_t echo_floor;
  float32_t noise_floor;

  noise_floor = expf(.2302585f * noise_suppress);
 80045f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80045fa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80046c0 <compute_gain_floor+0xe4>
 80045fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004602:	eeb0 0a67 	vmov.f32	s0, s15
 8004606:	f00d fe91 	bl	801232c <expf>
 800460a:	ed87 0a08 	vstr	s0, [r7, #32]
  echo_floor = expf(.2302585f * effective_echo_suppress);
 800460e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004612:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80046c0 <compute_gain_floor+0xe4>
 8004616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800461a:	eeb0 0a67 	vmov.f32	s0, s15
 800461e:	f00d fe85 	bl	801232c <expf>
 8004622:	ed87 0a07 	vstr	s0, [r7, #28]

  /* Compute the gain floor based on different floors for the background noise and residual echo */
  for (i = 0; i < len; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	e03e      	b.n	80046aa <compute_gain_floor+0xce>
  {
    gain_floor[i] = FRAC_SCALING * sqrtf(noise_floor * PSHR32(noise[i], NOISE_SHIFT) + echo_floor * echo[i]) / sqrtf(1 + PSHR32(noise[i], NOISE_SHIFT) + echo[i]);
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	ed93 7a00 	vldr	s14, [r3]
 8004638:	edd7 7a08 	vldr	s15, [r7, #32]
 800463c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	4413      	add	r3, r2
 8004648:	edd3 6a00 	vldr	s13, [r3]
 800464c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004658:	eeb0 0a67 	vmov.f32	s0, s15
 800465c:	f00d ff22 	bl	80124a4 <sqrtf>
 8004660:	eeb0 8a40 	vmov.f32	s16, s0
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	edd3 7a00 	vldr	s15, [r3]
 8004670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004674:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	4413      	add	r3, r2
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004688:	eeb0 0a67 	vmov.f32	s0, s15
 800468c:	f00d ff0a 	bl	80124a4 <sqrtf>
 8004690:	eeb0 7a40 	vmov.f32	s14, s0
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	4413      	add	r3, r2
 800469c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80046a0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < len; i++)
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	3301      	adds	r3, #1
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	dbbc      	blt.n	800462c <compute_gain_floor+0x50>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	ecbd 8b02 	vpop	{d8}
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	3e6bc8e2 	.word	0x3e6bc8e2

080046c4 <Preprocess_init>:

#endif

void Preprocess_init(SpeexPreprocessState *st, int frame_size, int sampling_rate)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	ed2d 8b02 	vpush	{d8}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  int32_t i;
  int32_t N, N3, N4, M;

  // SpeexPreprocessState *st = (SpeexPreprocessState *)speex_alloc(sizeof(SpeexPreprocessState));
  st->frame_size = frame_size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	601a      	str	r2, [r3, #0]
  if (st->ps_size < 3 * st->frame_size / 4)
  {
    st->ps_size = st->ps_size * 3 / 2;
  }
  #else
  st->ps_size = st->frame_size;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	605a      	str	r2, [r3, #4]
  #endif

  N = st->ps_size;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	623b      	str	r3, [r7, #32]
  N3 = (2 * N) - st->frame_size;
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	005a      	lsls	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	61fb      	str	r3, [r7, #28]
  N4 = st->frame_size - N3;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	61bb      	str	r3, [r7, #24]

  st->sampling_rate = sampling_rate;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	609a      	str	r2, [r3, #8]
  st->denoise_enabled = 1;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]
  st->dereverb_enabled = 0;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	61da      	str	r2, [r3, #28]
  st->reverb_decay = 0.0f;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	621a      	str	r2, [r3, #32]
  st->reverb_level = 0.0f;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	625a      	str	r2, [r3, #36]	; 0x24
  st->noise_suppress = NOISE_SUPPRESS_DEFAULT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f06f 020e 	mvn.w	r2, #14
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
  st->echo_suppress = ECHO_SUPPRESS_DEFAULT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f06f 0227 	mvn.w	r2, #39	; 0x27
 800472e:	635a      	str	r2, [r3, #52]	; 0x34
  st->echo_suppress_active = ECHO_SUPPRESS_ACTIVE_DEFAULT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f06f 020e 	mvn.w	r2, #14
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
  st->speech_prob_start = SPEECH_PROB_START_DEFAULT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a68      	ldr	r2, [pc, #416]	; (80048dc <Preprocess_init+0x218>)
 800473c:	629a      	str	r2, [r3, #40]	; 0x28
  st->speech_prob_continue = SPEECH_PROB_CONTINUE_DEFAULT;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a67      	ldr	r2, [pc, #412]	; (80048e0 <Preprocess_init+0x21c>)
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c
  st->echo_state = NULL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	63da      	str	r2, [r3, #60]	; 0x3c
  st->nbands = NB_BANDS;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2218      	movs	r2, #24
 800474e:	60da      	str	r2, [r3, #12]

  M = st->nbands;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	617b      	str	r3, [r7, #20]

  conj_window(st->window, 2 * N3);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f603 7264 	addw	r2, r3, #3940	; 0xf64
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7ff fdd8 	bl	8004318 <conj_window>
  for (i = 2 * N3; i < (2 * st->ps_size); i++)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	e00f      	b.n	8004790 <Preprocess_init+0xcc>
  {
    if (i < (2 * NN_MAX))
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	2bff      	cmp	r3, #255	; 0xff
 8004774:	dc09      	bgt.n	800478a <Preprocess_init+0xc6>
    {
      st->window[i] = Q15_ONE;
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	3304      	adds	r3, #4
 8004784:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004788:	601a      	str	r2, [r3, #0]
  for (i = 2 * N3; i < (2 * st->ps_size); i++)
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	3301      	adds	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004798:	429a      	cmp	r2, r3
 800479a:	dbe9      	blt.n	8004770 <Preprocess_init+0xac>
    }
  }

  if (N4 > 0)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	dd2b      	ble.n	80047fa <Preprocess_init+0x136>
  {
    for (i = N3 - 1; i >= 0; i--)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e024      	b.n	80047f4 <Preprocess_init+0x130>
    {
      st->window[i + N3 + N4] = st->window[i + N3];
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	441a      	add	r2, r3
 80047b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4419      	add	r1, r3
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	440b      	add	r3, r1
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	f502 7276 	add.w	r2, r2, #984	; 0x3d8
 80047c0:	0092      	lsls	r2, r2, #2
 80047c2:	440a      	add	r2, r1
 80047c4:	3204      	adds	r2, #4
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	3304      	adds	r3, #4
 80047d4:	601a      	str	r2, [r3, #0]
      st->window[i + N3] = 1.0f;
 80047d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	3304      	adds	r3, #4
 80047e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047ec:	601a      	str	r2, [r3, #0]
    for (i = N3 - 1; i >= 0; i--)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3b01      	subs	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dad7      	bge.n	80047aa <Preprocess_init+0xe6>
    }
  }
  // st->window = window_denoiser;
  for (i = 0; i < (N + M); i++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	e034      	b.n	800486a <Preprocess_init+0x1a6>
  {
    st->noise[i] = QCONST32(1.f, NOISE_SHIFT);
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	3304      	adds	r3, #4
 800480e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004812:	601a      	str	r2, [r3, #0]
    // st->reverb_estimate[i]=0;
    st->old_ps[i] = 1.0f;
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	3304      	adds	r3, #4
 8004822:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004826:	601a      	str	r2, [r3, #0]
    st->gain[i] = Q15_ONE;
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800483a:	601a      	str	r2, [r3, #0]
    st->post[i] = SHL16(1.0f, SNR_SHIFT);
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	3304      	adds	r3, #4
 800484a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800484e:	601a      	str	r2, [r3, #0]
    st->prior[i] = SHL16(1.0f, SNR_SHIFT);
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	3304      	adds	r3, #4
 800485e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004862:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (N + M); i++)
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	3301      	adds	r3, #1
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4413      	add	r3, r2
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	429a      	cmp	r2, r3
 8004874:	dbc4      	blt.n	8004800 <Preprocess_init+0x13c>
  }

  for (i = 0; i < N; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	e00a      	b.n	8004892 <Preprocess_init+0x1ce>
  {
    st->update_prob[i] = 1;
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	2201      	movs	r2, #1
 800488a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < N; i++)
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	3301      	adds	r3, #1
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	429a      	cmp	r2, r3
 8004898:	dbf0      	blt.n	800487c <Preprocess_init+0x1b8>
  }

  for (i = 0; i < N3; i++)
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	e016      	b.n	80048ce <Preprocess_init+0x20a>
  {
    st->inbuf[i] = 0.0f;
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	3304      	adds	r3, #4
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
    st->outbuf[i] = 0.0f;
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	3304      	adds	r3, #4
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < N3; i++)
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	3301      	adds	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
 80048ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	dbe4      	blt.n	80048a0 <Preprocess_init+0x1dc>
  }
  #ifndef FIXED_POINT
  for (i = 0; i < N; i++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	e094      	b.n	8004a06 <Preprocess_init+0x342>
 80048dc:	3eb33333 	.word	0x3eb33333
 80048e0:	3e4ccccd 	.word	0x3e4ccccd
 80048e4:	467a0000 	.word	0x467a0000
 80048e8:	3eb33333 	.word	0x3eb33333
 80048ec:	456d8000 	.word	0x456d8000
 80048f0:	495bba00 	.word	0x495bba00
 80048f4:	3f3ae148 	.word	0x3f3ae148
 80048f8:	3c23d70a 	.word	0x3c23d70a
  {
    float ff = ((float)i) * 0.5f * sampling_rate / ((float)N);
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004906:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800490a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004918:	ee67 6a27 	vmul.f32	s13, s14, s15
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492a:	edc7 7a04 	vstr	s15, [r7, #16]
    st->loudness_weight[i] = .35f - .35f * ff / 16000.f + .73f * expf(-.5f * (ff - 3800) * (ff - 3800) / 9e5f);
 800492e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004932:	ed1f 7a13 	vldr	s14, [pc, #-76]	; 80048e8 <Preprocess_init+0x224>
 8004936:	ee27 7a87 	vmul.f32	s14, s15, s14
 800493a:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 80048e4 <Preprocess_init+0x220>
 800493e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004942:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 80048e8 <Preprocess_init+0x224>
 8004946:	ee37 8a67 	vsub.f32	s16, s14, s15
 800494a:	edd7 7a04 	vldr	s15, [r7, #16]
 800494e:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 80048ec <Preprocess_init+0x228>
 8004952:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004956:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800495a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800495e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004962:	ed5f 6a1e 	vldr	s13, [pc, #-120]	; 80048ec <Preprocess_init+0x228>
 8004966:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800496a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496e:	ed5f 6a20 	vldr	s13, [pc, #-128]	; 80048f0 <Preprocess_init+0x22c>
 8004972:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004976:	eeb0 0a47 	vmov.f32	s0, s14
 800497a:	f00d fcd7 	bl	801232c <expf>
 800497e:	eef0 7a40 	vmov.f32	s15, s0
 8004982:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 80048f4 <Preprocess_init+0x230>
 8004986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800498a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f603 439c 	addw	r3, r3, #3228	; 0xc9c
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	edc3 7a00 	vstr	s15, [r3]
    if (st->loudness_weight[i] < .01f)
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f603 439c 	addw	r3, r3, #3228	; 0xc9c
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 80048f8 <Preprocess_init+0x234>
 80049b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	d507      	bpl.n	80049cc <Preprocess_init+0x308>
    {
      st->loudness_weight[i] = .01f;
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	f603 439c 	addw	r3, r3, #3228	; 0xc9c
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	4a51      	ldr	r2, [pc, #324]	; (8004b10 <Preprocess_init+0x44c>)
 80049ca:	601a      	str	r2, [r3, #0]
    }
    st->loudness_weight[i] *= st->loudness_weight[i];
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	f603 439c 	addw	r3, r3, #3228	; 0xc9c
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	ed93 7a00 	vldr	s14, [r3]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	f603 439c 	addw	r3, r3, #3228	; 0xc9c
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	edd3 7a00 	vldr	s15, [r3]
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	f603 439c 	addw	r3, r3, #3228	; 0xc9c
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < N; i++)
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	3301      	adds	r3, #1
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	f6ff af76 	blt.w	80048fc <Preprocess_init+0x238>
  }
  // st->loudness = pow(AMP_SCALE*st->agc_level,LOUDNESS_EXP);
  st->loudness = 1e-15f;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004a16:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8004a1a:	4a3e      	ldr	r2, [pc, #248]	; (8004b14 <Preprocess_init+0x450>)
 8004a1c:	601a      	str	r2, [r3, #0]
  st->agc_gain = 1.0f;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004a24:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8004a28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a2c:	601a      	str	r2, [r3, #0]
  st->max_gain = 30.0f;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004a34:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8004a38:	4a37      	ldr	r2, [pc, #220]	; (8004b18 <Preprocess_init+0x454>)
 8004a3a:	601a      	str	r2, [r3, #0]
  st->max_increase_step = expf(0.11513f * 12.f * (float32_t)st->frame_size / (float32_t)st->sampling_rate);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a48:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004b1c <Preprocess_init+0x458>
 8004a4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	ee07 3a90 	vmov	s15, r3
 8004a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a60:	eeb0 0a66 	vmov.f32	s0, s13
 8004a64:	f00d fc62 	bl	801232c <expf>
 8004a68:	eef0 7a40 	vmov.f32	s15, s0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004a72:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8004a76:	edc3 7a00 	vstr	s15, [r3]
  st->max_decrease_step = expf(-0.11513f * 40.f * (float32_t)st->frame_size / (float32_t)st->sampling_rate);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a86:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b20 <Preprocess_init+0x45c>
 8004a8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a9e:	eeb0 0a66 	vmov.f32	s0, s13
 8004aa2:	f00d fc43 	bl	801232c <expf>
 8004aa6:	eef0 7a40 	vmov.f32	s15, s0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004ab0:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004ab4:	edc3 7a00 	vstr	s15, [r3]
  st->prev_loudness = 1.0f;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004abe:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8004ac2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004ac6:	601a      	str	r2, [r3, #0]
  st->init_max = 1.0f;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004ace:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8004ad2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004ad6:	601a      	str	r2, [r3, #0]
  #endif
  st->was_speech = 0;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f8c2 3490 	str.w	r3, [r2, #1168]	; 0x490
  st->nb_adapt = 0;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004aec:	461a      	mov	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c2 348c 	str.w	r3, [r2, #1164]	; 0x48c
  st->min_count = 0;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004afa:	461a      	mov	r2, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c2 3494 	str.w	r3, [r2, #1172]	; 0x494
}
 8004b02:	bf00      	nop
 8004b04:	3728      	adds	r7, #40	; 0x28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	ecbd 8b02 	vpop	{d8}
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	3c23d70a 	.word	0x3c23d70a
 8004b14:	26901d7d 	.word	0x26901d7d
 8004b18:	41f00000 	.word	0x41f00000
 8004b1c:	3fb0d6f5 	.word	0x3fb0d6f5
 8004b20:	c0935dcc 	.word	0xc0935dcc

08004b24 <simple_agc>:

/* FIXME: The AGC doesn't work yet with fixed-point*/
#ifndef FIXED_POINT
static void simple_agc(SpeexPreprocessState *st, spx_word16_t Pframe, spx_word16_t *ft)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	ed2d 8b02 	vpush	{d8}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b34:	6079      	str	r1, [r7, #4]
  int i;
  int N = st->ps_size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	61bb      	str	r3, [r7, #24]
  float target_gain;
  float loudness = 1.f;
 8004b3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004b40:	61fb      	str	r3, [r7, #28]
  float rate;

  for (i = 2; i < N; i++)
 8004b42:	2302      	movs	r3, #2
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
 8004b46:	e024      	b.n	8004b92 <simple_agc+0x6e>
  {
    loudness += 2.f * N * st->ps[i] * st->loudness_weight[i];
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b52:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	3304      	adds	r3, #4
 8004b64:	edd3 7a00 	vldr	s15, [r3]
 8004b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	f603 439c 	addw	r3, r3, #3228	; 0xc9c
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	edd3 7a00 	vldr	s15, [r3]
 8004b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b80:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b88:	edc7 7a07 	vstr	s15, [r7, #28]
  for (i = 2; i < N; i++)
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	3301      	adds	r3, #1
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
 8004b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	dbd6      	blt.n	8004b48 <simple_agc+0x24>
  }
  loudness = sqrtf(loudness);
 8004b9a:	ed97 0a07 	vldr	s0, [r7, #28]
 8004b9e:	f00d fc81 	bl	80124a4 <sqrtf>
 8004ba2:	ed87 0a07 	vstr	s0, [r7, #28]

  /*if (loudness < 2*pow(st->loudness, 1.0/LOUDNESS_EXP) && loudness*2 > pow(st->loudness, 1.0/LOUDNESS_EXP))*/
  if (Pframe > .3f)
 8004ba6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004baa:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8004ed4 <simple_agc+0x3b0>
 8004bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb6:	f340 8084 	ble.w	8004cc2 <simple_agc+0x19e>
  {
    // rate=2.0f*Pframe*Pframe/(1+st->nb_loudness_adapt);
    rate = .03f * Pframe * Pframe;
 8004bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bbe:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8004ed8 <simple_agc+0x3b4>
 8004bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a05 	vstr	s15, [r7, #20]
    st->loudness = (1 - rate) * st->loudness + (rate) * powf(AMP_SCALE * loudness, LOUDNESS_EXP);
 8004bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004be4:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8004be8:	edd3 7a00 	vldr	s15, [r3]
 8004bec:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bf4:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8004edc <simple_agc+0x3b8>
 8004bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bfc:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004c00:	eeb0 0a67 	vmov.f32	s0, s15
 8004c04:	f00d fbf6 	bl	80123f4 <powf>
 8004c08:	eeb0 7a40 	vmov.f32	s14, s0
 8004c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c14:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004c1e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8004c22:	edc3 7a00 	vstr	s15, [r3]
    st->loudness_accum = (1 - rate) * st->loudness_accum + rate;
 8004c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004c38:	edd3 7a9b 	vldr	s15, [r3, #620]	; 0x26c
 8004c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004c4e:	edc3 7a9b 	vstr	s15, [r3, #620]	; 0x26c
    if ((st->init_max < st->max_gain) && (st->nb_adapt > 20))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004c58:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8004c5c:	ed93 7a00 	vldr	s14, [r3]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004c66:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8004c6a:	edd3 7a00 	vldr	s15, [r3]
 8004c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c76:	d524      	bpl.n	8004cc2 <simple_agc+0x19e>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004c7e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8004c82:	2b14      	cmp	r3, #20
 8004c84:	dd1d      	ble.n	8004cc2 <simple_agc+0x19e>
    {
      st->init_max *= 1.f + .1f * Pframe * Pframe;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004c8c:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8004c90:	ed93 7a00 	vldr	s14, [r3]
 8004c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c98:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004ee0 <simple_agc+0x3bc>
 8004c9c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004cba:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8004cbe:	edc3 7a00 	vstr	s15, [r3]
    }
  }

  target_gain = AMP_SCALE * st->agc_level * powf(st->loudness / (1e-4f + st->loudness_accum), -1.0f / LOUDNESS_EXP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004cc8:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8004ccc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004edc <simple_agc+0x3b8>
 8004cd0:	ee27 8a87 	vmul.f32	s16, s15, s14
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004cda:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8004cde:	ed93 7a00 	vldr	s14, [r3]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004ce8:	edd3 7a9b 	vldr	s15, [r3, #620]	; 0x26c
 8004cec:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8004ee4 <simple_agc+0x3c0>
 8004cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cf8:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8004ee8 <simple_agc+0x3c4>
 8004cfc:	eeb0 0a66 	vmov.f32	s0, s13
 8004d00:	f00d fb78 	bl	80123f4 <powf>
 8004d04:	eef0 7a40 	vmov.f32	s15, s0
 8004d08:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004d0c:	edc7 7a08 	vstr	s15, [r7, #32]

  if (((Pframe > .5f) && (st->nb_adapt > 20)) || (target_gain < st->agc_gain))
 8004d10:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d20:	dd06      	ble.n	8004d30 <simple_agc+0x20c>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004d28:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8004d2c:	2b14      	cmp	r3, #20
 8004d2e:	dc0e      	bgt.n	8004d4e <simple_agc+0x22a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004d36:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8004d3a:	edd3 7a00 	vldr	s15, [r3]
 8004d3e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	f140 8095 	bpl.w	8004e78 <simple_agc+0x354>
  {
    if (target_gain > st->max_increase_step * st->agc_gain)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004d54:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8004d58:	ed93 7a00 	vldr	s14, [r3]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004d62:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8004d66:	edd3 7a00 	vldr	s15, [r3]
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7a:	dd11      	ble.n	8004da0 <simple_agc+0x27c>
    {
      target_gain = st->max_increase_step * st->agc_gain;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004d82:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8004d86:	ed93 7a00 	vldr	s14, [r3]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004d90:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8004d94:	edd3 7a00 	vldr	s15, [r3]
 8004d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9c:	edc7 7a08 	vstr	s15, [r7, #32]
    }
    if ((target_gain < st->max_decrease_step * st->agc_gain) && (loudness < 10 * st->prev_loudness))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004da6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004daa:	ed93 7a00 	vldr	s14, [r3]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004db4:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8004db8:	edd3 7a00 	vldr	s15, [r3]
 8004dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc0:	ed97 7a08 	vldr	s14, [r7, #32]
 8004dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	d523      	bpl.n	8004e16 <simple_agc+0x2f2>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004dd4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8004dd8:	edd3 7a00 	vldr	s15, [r3]
 8004ddc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004de4:	ed97 7a07 	vldr	s14, [r7, #28]
 8004de8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df0:	d511      	bpl.n	8004e16 <simple_agc+0x2f2>
    {
      target_gain = st->max_decrease_step * st->agc_gain;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004df8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8004dfc:	ed93 7a00 	vldr	s14, [r3]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004e06:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a08 	vstr	s15, [r7, #32]
    }
    if (target_gain > st->max_gain)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004e1c:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8004e20:	edd3 7a00 	vldr	s15, [r3]
 8004e24:	ed97 7a08 	vldr	s14, [r7, #32]
 8004e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e30:	dd06      	ble.n	8004e40 <simple_agc+0x31c>
    {
      target_gain = st->max_gain;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004e38:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	623b      	str	r3, [r7, #32]
    }
    if (target_gain > st->init_max)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004e46:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8004e4a:	edd3 7a00 	vldr	s15, [r3]
 8004e4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5a:	dd06      	ble.n	8004e6a <simple_agc+0x346>
    {
      target_gain = st->init_max;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004e62:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	623b      	str	r3, [r7, #32]
    }

    st->agc_gain = target_gain;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004e70:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	601a      	str	r2, [r3, #0]
  }

  for (i = 0; i < 2 * N; i++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7c:	e017      	b.n	8004eae <simple_agc+0x38a>
  {
    ft[i] *= st->agc_gain;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4413      	add	r3, r2
 8004e86:	ed93 7a00 	vldr	s14, [r3]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004e90:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8004e94:	edd3 7a00 	vldr	s15, [r3]
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 2 * N; i++)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	3301      	adds	r3, #1
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	dbe2      	blt.n	8004e7e <simple_agc+0x35a>
  }
  st->prev_loudness = loudness;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004ebe:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	ecbd 8b02 	vpop	{d8}
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	3e99999a 	.word	0x3e99999a
 8004ed8:	3cf5c28f 	.word	0x3cf5c28f
 8004edc:	3a83126f 	.word	0x3a83126f
 8004ee0:	3dcccccd 	.word	0x3dcccccd
 8004ee4:	38d1b717 	.word	0x38d1b717
 8004ee8:	be4ccccd 	.word	0xbe4ccccd

08004eec <Preprocess_analize>:
#endif

static void Preprocess_analize(SpeexPreprocessState *st, spx_int16_t *x)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  int i;
  int N = st->ps_size;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	61bb      	str	r3, [r7, #24]
  int N3 = 2 * N - st->frame_size;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	005a      	lsls	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	617b      	str	r3, [r7, #20]
  int N4 = st->frame_size - N3;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	613b      	str	r3, [r7, #16]
  spx_word32_t *ps = st->ps;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8004f18:	60fb      	str	r3, [r7, #12]

  /* 'Build' input frame */
  for (i = 0; i < N3; i++)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	e011      	b.n	8004f44 <Preprocess_analize+0x58>
  {
    st->frame[i] = st->inbuf[i];
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	3310      	adds	r3, #16
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < N3; i++)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3301      	adds	r3, #1
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	dbe9      	blt.n	8004f20 <Preprocess_analize+0x34>
  }

  for (i = 0; i < st->frame_size; i++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e016      	b.n	8004f80 <Preprocess_analize+0x94>
  {
    st->frame[N3 + i] = x[i];
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	ee07 1a90 	vmov	s15, r1
 8004f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	3310      	adds	r3, #16
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	3304      	adds	r3, #4
 8004f76:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < st->frame_size; i++)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	dbe3      	blt.n	8004f52 <Preprocess_analize+0x66>
  }

  /* Update inbuf */
  for (i = 0; i < N3; i++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	e017      	b.n	8004fc0 <Preprocess_analize+0xd4>
  {
    st->inbuf[i] = x[N4 + i];
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < N3; i++)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbe3      	blt.n	8004f90 <Preprocess_analize+0xa4>
  }

  /* Windowing */
  for (i = 0; i < 2 * N; i++)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e01d      	b.n	800500a <Preprocess_analize+0x11e>
  {
    st->frame[i] = MULT16_16_Q15(st->frame[i], st->window[i]);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	3310      	adds	r3, #16
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3304      	adds	r3, #4
 8004fda:	ed93 7a00 	vldr	s14, [r3]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	3304      	adds	r3, #4
 8004fec:	edd3 7a00 	vldr	s15, [r3]
 8004ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3304      	adds	r3, #4
 8005000:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 2 * N; i++)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	429a      	cmp	r2, r3
 8005012:	dbdc      	blt.n	8004fce <Preprocess_analize+0xe2>
    }
  }
  #endif

  /* Perform FFT */
  libSpeexAEC_fft((st->fft_lookup), st->frame, st->ft);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800501a:	f8d3 0498 	ldr.w	r0, [r3, #1176]	; 0x498
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800502a:	461a      	mov	r2, r3
 800502c:	f7fc fa5e 	bl	80014ec <libSpeexAEC_fft>

  /* Power spectrum */
  ps[0] = MULT16_16(st->ft[0], st->ft[0]);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005036:	ed93 7a00 	vldr	s14, [r3]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005040:	edd3 7a00 	vldr	s15, [r3]
 8005044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < N; i++)
 800504e:	2301      	movs	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	e038      	b.n	80050c6 <Preprocess_analize+0x1da>
  {
    ps[i] = MULT16_16(st->ft[2 * i - 1], st->ft[2 * i - 1]) + MULT16_16(st->ft[2 * i], st->ft[2 * i]);
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	3b01      	subs	r3, #1
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	3304      	adds	r3, #4
 8005066:	ed93 7a00 	vldr	s14, [r3]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	3b01      	subs	r3, #1
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	3304      	adds	r3, #4
 800507c:	edd3 7a00 	vldr	s15, [r3]
 8005080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	3304      	adds	r3, #4
 8005094:	edd3 6a00 	vldr	s13, [r3]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	3304      	adds	r3, #4
 80050a8:	edd3 7a00 	vldr	s15, [r3]
 80050ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050bc:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < N; i++)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	dbc2      	blt.n	8005054 <Preprocess_analize+0x168>
  }

  for (i = 0; i < N; i++)
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e012      	b.n	80050fa <Preprocess_analize+0x20e>
  {
    st->ps[i] = PSHR32(st->ps[i], 2 * st->frame_shift);
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	3304      	adds	r3, #4
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3304      	adds	r3, #4
 80050f2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < N; i++)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	429a      	cmp	r2, r3
 8005100:	dbe8      	blt.n	80050d4 <Preprocess_analize+0x1e8>
  }

  filterbank_compute_bank32(st->bank, ps, ps + N);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6918      	ldr	r0, [r3, #16]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	461a      	mov	r2, r3
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	f7ff f811 	bl	8004138 <filterbank_compute_bank32>
}
 8005116:	bf00      	nop
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <update_noise_prob>:

static void update_noise_prob(SpeexPreprocessState *st)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  int32_t i;
  int32_t min_range;
  int32_t N = st->ps_size;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	60fb      	str	r3, [r7, #12]

  for (i = 1; i < (N - 1); i++)
 800512e:	2301      	movs	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e047      	b.n	80051c4 <update_noise_prob+0xa4>
  {
    st->S[i] =  MULT16_32_Q15(QCONST16(.8f, 15), st->S[i]) + MULT16_32_Q15(QCONST16(.05f, 15), st->ps[i - 1])
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	3304      	adds	r3, #4
 8005142:	edd3 7a00 	vldr	s15, [r3]
 8005146:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8005444 <update_noise_prob+0x324>
 800514a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3b01      	subs	r3, #1
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	3304      	adds	r3, #4
 800515e:	edd3 7a00 	vldr	s15, [r3]
 8005162:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8005448 <update_noise_prob+0x328>
 8005166:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800516a:	ee37 7a27 	vadd.f32	s14, s14, s15
                + MULT16_32_Q15(QCONST16(.1f, 15), st->ps[i]) + MULT16_32_Q15(QCONST16(.05f, 15), st->ps[i + 1]);
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	3304      	adds	r3, #4
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	eddf 6ab2 	vldr	s13, [pc, #712]	; 800544c <update_noise_prob+0x32c>
 8005184:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3301      	adds	r3, #1
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	3304      	adds	r3, #4
 800519c:	edd3 7a00 	vldr	s15, [r3]
 80051a0:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8005448 <update_noise_prob+0x328>
 80051a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051a8:	ee77 7a27 	vadd.f32	s15, s14, s15
    st->S[i] =  MULT16_32_Q15(QCONST16(.8f, 15), st->S[i]) + MULT16_32_Q15(QCONST16(.05f, 15), st->ps[i - 1])
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	3304      	adds	r3, #4
 80051ba:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < (N - 1); i++)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	3301      	adds	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	dbb2      	blt.n	8005134 <update_noise_prob+0x14>
  }
  st->S[0] =  MULT16_32_Q15(QCONST16(.8f, 15), st->S[0]) + MULT16_32_Q15(QCONST16(.2f, 15), st->ps[0]);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d4:	f603 7344 	addw	r3, r3, #3908	; 0xf44
 80051d8:	edd3 7a00 	vldr	s15, [r3]
 80051dc:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8005444 <update_noise_prob+0x324>
 80051e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f603 0344 	addw	r3, r3, #2116	; 0x844
 80051ea:	edd3 7a00 	vldr	s15, [r3]
 80051ee:	eddf 6a98 	vldr	s13, [pc, #608]	; 8005450 <update_noise_prob+0x330>
 80051f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005200:	f603 7344 	addw	r3, r3, #3908	; 0xf44
 8005204:	edc3 7a00 	vstr	s15, [r3]
  st->S[N - 1] =  MULT16_32_Q15(QCONST16(.8f, 15), st->S[N - 1]) + MULT16_32_Q15(QCONST16(.2f, 15), st->ps[N - 1]);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3b01      	subs	r3, #1
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	3304      	adds	r3, #4
 8005218:	edd3 7a00 	vldr	s15, [r3]
 800521c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8005444 <update_noise_prob+0x324>
 8005220:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b01      	subs	r3, #1
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	3304      	adds	r3, #4
 8005234:	edd3 7a00 	vldr	s15, [r3]
 8005238:	eddf 6a85 	vldr	s13, [pc, #532]	; 8005450 <update_noise_prob+0x330>
 800523c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b01      	subs	r3, #1
 8005244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	edc3 7a00 	vstr	s15, [r3]

  if (st->nb_adapt == 1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800525e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d11d      	bne.n	80052a2 <update_noise_prob+0x182>
  {
    for (i = 0; i < N; i++)
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e016      	b.n	800529a <update_noise_prob+0x17a>
    {
      st->Smin[i] = 0.0f;
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	3304      	adds	r3, #4
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
      st->Stmp[i] = 0.0f;
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	3304      	adds	r3, #4
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N; i++)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3301      	adds	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	dbe4      	blt.n	800526c <update_noise_prob+0x14c>
    }
  }

  if (st->nb_adapt < 100)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80052a8:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80052ac:	2b63      	cmp	r3, #99	; 0x63
 80052ae:	dc02      	bgt.n	80052b6 <update_noise_prob+0x196>
  {
    min_range = 15;
 80052b0:	230f      	movs	r3, #15
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	e019      	b.n	80052ea <update_noise_prob+0x1ca>
  }
  else if (st->nb_adapt < 1000)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80052bc:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80052c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c4:	da02      	bge.n	80052cc <update_noise_prob+0x1ac>
  {
    min_range = 50;
 80052c6:	2332      	movs	r3, #50	; 0x32
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	e00e      	b.n	80052ea <update_noise_prob+0x1ca>
  }
  else if (st->nb_adapt < 10000)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80052d2:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80052d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80052da:	4293      	cmp	r3, r2
 80052dc:	dc02      	bgt.n	80052e4 <update_noise_prob+0x1c4>
  {
    min_range = 150;
 80052de:	2396      	movs	r3, #150	; 0x96
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e002      	b.n	80052ea <update_noise_prob+0x1ca>
  }
  else
  {
    min_range = 300;
 80052e4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80052e8:	613b      	str	r3, [r7, #16]
  }
  if (st->min_count > min_range)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80052f0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	da51      	bge.n	800539e <update_noise_prob+0x27e>
  {
    st->min_count = 0;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005300:	461a      	mov	r2, r3
 8005302:	2300      	movs	r3, #0
 8005304:	f8c2 3494 	str.w	r3, [r2, #1172]	; 0x494
    for (i = 0; i < N; i++)
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e042      	b.n	8005394 <update_noise_prob+0x274>
    {
      st->Smin[i] = MIN32(st->Stmp[i], st->S[i]);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	3304      	adds	r3, #4
 800531c:	ed93 7a00 	vldr	s14, [r3]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	3304      	adds	r3, #4
 800532e:	edd3 7a00 	vldr	s15, [r3]
 8005332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533a:	d508      	bpl.n	800534e <update_noise_prob+0x22e>
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	3304      	adds	r3, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	e007      	b.n	800535e <update_noise_prob+0x23e>
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	3304      	adds	r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	f502 6205 	add.w	r2, r2, #2128	; 0x850
 8005366:	0092      	lsls	r2, r2, #2
 8005368:	440a      	add	r2, r1
 800536a:	3204      	adds	r2, #4
 800536c:	6013      	str	r3, [r2, #0]
      st->Stmp[i] = st->S[i];
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	3304      	adds	r3, #4
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	3304      	adds	r3, #4
 800538c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N; i++)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	3301      	adds	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	429a      	cmp	r2, r3
 800539a:	dbb8      	blt.n	800530e <update_noise_prob+0x1ee>
 800539c:	e073      	b.n	8005486 <update_noise_prob+0x366>
    }
  }
  else
  {
    for (i = 0; i < N; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e06c      	b.n	800547e <update_noise_prob+0x35e>
    {
      st->Smin[i] = MIN32(st->Smin[i], st->S[i]);
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	3304      	adds	r3, #4
 80053b2:	ed93 7a00 	vldr	s14, [r3]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	3304      	adds	r3, #4
 80053c4:	edd3 7a00 	vldr	s15, [r3]
 80053c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	d508      	bpl.n	80053e4 <update_noise_prob+0x2c4>
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	3304      	adds	r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	e007      	b.n	80053f4 <update_noise_prob+0x2d4>
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	3304      	adds	r3, #4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	f502 6205 	add.w	r2, r2, #2128	; 0x850
 80053fc:	0092      	lsls	r2, r2, #2
 80053fe:	440a      	add	r2, r1
 8005400:	3204      	adds	r2, #4
 8005402:	6013      	str	r3, [r2, #0]
      st->Stmp[i] = MIN32(st->Stmp[i], st->S[i]);
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	3304      	adds	r3, #4
 8005412:	ed93 7a00 	vldr	s14, [r3]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	3304      	adds	r3, #4
 8005424:	edd3 7a00 	vldr	s15, [r3]
 8005428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	d512      	bpl.n	8005458 <update_noise_prob+0x338>
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f503 630d 	add.w	r3, r3, #2256	; 0x8d0
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	3304      	adds	r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	e011      	b.n	8005468 <update_noise_prob+0x348>
 8005444:	3f4ccccd 	.word	0x3f4ccccd
 8005448:	3d4ccccd 	.word	0x3d4ccccd
 800544c:	3dcccccd 	.word	0x3dcccccd
 8005450:	3e4ccccd 	.word	0x3e4ccccd
 8005454:	3ecccccd 	.word	0x3ecccccd
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	3304      	adds	r3, #4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	f502 620d 	add.w	r2, r2, #2256	; 0x8d0
 8005470:	0092      	lsls	r2, r2, #2
 8005472:	440a      	add	r2, r1
 8005474:	3204      	adds	r2, #4
 8005476:	6013      	str	r3, [r2, #0]
    for (i = 0; i < N; i++)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3301      	adds	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	db8e      	blt.n	80053a4 <update_noise_prob+0x284>
    }
  }
  for (i = 0; i < N; i++)
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e02e      	b.n	80054ea <update_noise_prob+0x3ca>
  {
    if (MULT16_32_Q15(QCONST16(.4f, 15), st->S[i]) > st->Smin[i])
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	3304      	adds	r3, #4
 800549a:	edd3 7a00 	vldr	s15, [r3]
 800549e:	ed1f 7a13 	vldr	s14, [pc, #-76]	; 8005454 <update_noise_prob+0x334>
 80054a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	3304      	adds	r3, #4
 80054b4:	edd3 7a00 	vldr	s15, [r3]
 80054b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c0:	dd08      	ble.n	80054d4 <update_noise_prob+0x3b4>
    {
      st->update_prob[i] = 1;
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	2201      	movs	r2, #1
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e007      	b.n	80054e4 <update_noise_prob+0x3c4>
    }
    else
    {
      st->update_prob[i] = 0;
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	2200      	movs	r2, #0
 80054e2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < N; i++)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3301      	adds	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	dbcc      	blt.n	800548c <update_noise_prob+0x36c>
    }
  }
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <Preprocess>:

#define NOISE_OVERCOMPENS 1.

int Preprocess(SpeexPreprocessState *st, spx_int16_t *x)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	ed2d 8b02 	vpush	{d8}
 8005506:	b098      	sub	sp, #96	; 0x60
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  int32_t i;
  int32_t M;
  int32_t N = st->ps_size;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t N3 = (2 * N) - st->frame_size;
 8005514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005516:	005a      	lsls	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
  int32_t N4 = st->frame_size - N3;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	64bb      	str	r3, [r7, #72]	; 0x48
  spx_word32_t *ps = st->ps;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8005530:	647b      	str	r3, [r7, #68]	; 0x44
  spx_word32_t Zframe;
  spx_word16_t Pframe;
  spx_word16_t beta, beta_1;
  spx_word16_t effective_echo_suppress;

  st->nb_adapt++;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005538:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800553c:	3301      	adds	r3, #1
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8005544:	f8c2 348c 	str.w	r3, [r2, #1164]	; 0x48c
  if (st->nb_adapt > 20000)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800554e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8005552:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005556:	4293      	cmp	r3, r2
 8005558:	dd07      	ble.n	800556a <Preprocess+0x6a>
  {
    st->nb_adapt = 20000;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005560:	461a      	mov	r2, r3
 8005562:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005566:	f8c2 348c 	str.w	r3, [r2, #1164]	; 0x48c
  }
  st->min_count++;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005570:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8005574:	3301      	adds	r3, #1
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800557c:	f8c2 3494 	str.w	r3, [r2, #1172]	; 0x494

  beta = MAX16(QCONST16(.03f, 15), DIV32_16(Q15_ONE, st->nb_adapt));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005586:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800559a:	ed9f 7abc 	vldr	s14, [pc, #752]	; 800588c <Preprocess+0x38c>
 800559e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a6:	d502      	bpl.n	80055ae <Preprocess+0xae>
 80055a8:	eddf 7ab8 	vldr	s15, [pc, #736]	; 800588c <Preprocess+0x38c>
 80055ac:	e00c      	b.n	80055c8 <Preprocess+0xc8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80055b4:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  beta_1 = Q15_ONE - beta;
 80055cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055d0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80055d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  M = st->nbands;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Deal with residual echo if provided */
  if (st->echo_state != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80a5 	beq.w	8005736 <Preprocess+0x236>
  {
    Echo_get_residual(st->echo_state, st->residual_echo, N);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 80055f6:	3304      	adds	r3, #4
 80055f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055fa:	4619      	mov	r1, r3
 80055fc:	f7fe f9e6 	bl	80039cc <Echo_get_residual>

    /* If there are NaNs or ridiculous values, it'll show up in the DC and we just reset everything to zero */
    if (!((st->residual_echo[0] >= 0.0f) && (st->residual_echo[0] < ((float32_t)N * 1e9f))))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005606:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 800560a:	edd3 7a00 	vldr	s15, [r3]
 800560e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005616:	bfac      	ite	ge
 8005618:	2301      	movge	r3, #1
 800561a:	2300      	movlt	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f083 0301 	eor.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11c      	bne.n	8005662 <Preprocess+0x162>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800562e:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8005632:	ed93 7a00 	vldr	s14, [r3]
 8005636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005638:	ee07 3a90 	vmov	s15, r3
 800563c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005640:	eddf 6a93 	vldr	s13, [pc, #588]	; 8005890 <Preprocess+0x390>
 8005644:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005650:	bf4c      	ite	mi
 8005652:	2301      	movmi	r3, #1
 8005654:	2300      	movpl	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f083 0301 	eor.w	r3, r3, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d013      	beq.n	800568a <Preprocess+0x18a>
    {
      for (i = 0; i < N; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005666:	e00c      	b.n	8005682 <Preprocess+0x182>
      {
        st->residual_echo[i] = 0.0f;
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
      for (i = 0; i < N; i++)
 800567c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800567e:	3301      	adds	r3, #1
 8005680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005682:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005686:	429a      	cmp	r2, r3
 8005688:	dbee      	blt.n	8005668 <Preprocess+0x168>
      }
    }

    for (i = 0; i < N; i++)
 800568a:	2300      	movs	r3, #0
 800568c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800568e:	e03d      	b.n	800570c <Preprocess+0x20c>
    {
      st->echo_noise[i] = MAX32(MULT16_32_Q15(QCONST16(.6f, 15), st->echo_noise[i]), st->residual_echo[i]);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005694:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	3304      	adds	r3, #4
 800569e:	edd3 7a00 	vldr	s15, [r3]
 80056a2:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8005894 <Preprocess+0x394>
 80056a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	3304      	adds	r3, #4
 80056b8:	edd3 7a00 	vldr	s15, [r3]
 80056bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c4:	dd0d      	ble.n	80056e2 <Preprocess+0x1e2>
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ca:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	3304      	adds	r3, #4
 80056d4:	edd3 7a00 	vldr	s15, [r3]
 80056d8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8005894 <Preprocess+0x394>
 80056dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056e0:	e008      	b.n	80056f4 <Preprocess+0x1f4>
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	3304      	adds	r3, #4
 80056f0:	edd3 7a00 	vldr	s15, [r3]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f8:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	3304      	adds	r3, #4
 8005702:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < N; i++)
 8005706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005708:	3301      	adds	r3, #1
 800570a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800570c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	429a      	cmp	r2, r3
 8005712:	dbbd      	blt.n	8005690 <Preprocess+0x190>
    }

    filterbank_compute_bank32(st->bank, st->echo_noise, st->echo_noise + N); //OPTIMIZE
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6918      	ldr	r0, [r3, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f503 5126 	add.w	r1, r3, #10624	; 0x2980
 800571e:	3124      	adds	r1, #36	; 0x24
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8005726:	3324      	adds	r3, #36	; 0x24
 8005728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	4413      	add	r3, r2
 800572e:	461a      	mov	r2, r3
 8005730:	f7fe fd02 	bl	8004138 <filterbank_compute_bank32>
 8005734:	e015      	b.n	8005762 <Preprocess+0x262>
  }
  else
  {
    for (i = 0; i < (N + M); i++)
 8005736:	2300      	movs	r3, #0
 8005738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800573a:	e00c      	b.n	8005756 <Preprocess+0x256>
    {
      st->echo_noise[i] = 0.0f;
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005740:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	3304      	adds	r3, #4
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < (N + M); i++)
 8005750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005752:	3301      	adds	r3, #1
 8005754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005756:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	4413      	add	r3, r2
 800575c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800575e:	429a      	cmp	r2, r3
 8005760:	dbec      	blt.n	800573c <Preprocess+0x23c>
    }
  }

  Preprocess_analize((SpeexPreprocessState *)st, x); //SOME OPTIMIZATION USING ARM, STILL TO BE OPTIMIZED (libSpeexAEC_fft)
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fbc1 	bl	8004eec <Preprocess_analize>
  update_noise_prob((SpeexPreprocessState *)st); //OPTIMIZE
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fcd8 	bl	8005120 <update_noise_prob>

  /* Update the noise estimate for the frequencies where it can be */
  for (i = 0; i < N; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005774:	e06b      	b.n	800584e <Preprocess+0x34e>
  {
    if ((st->update_prob[i] == 0) || (st->ps[i] < PSHR32(st->noise[i], NOISE_SHIFT)))
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577a:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d016      	beq.n	80057b6 <Preprocess+0x2b6>
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	3304      	adds	r3, #4
 8005796:	ed93 7a00 	vldr	s14, [r3]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800579e:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	edd3 7a00 	vldr	s15, [r3]
 80057ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b4:	d548      	bpl.n	8005848 <Preprocess+0x348>
    {
      st->noise[i] = MAX32(EXTEND32(0), MULT16_32_Q15(beta_1, st->noise[i]) + MULT16_32_Q15(beta, SHL32(st->ps[i], NOISE_SHIFT)));
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ba:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	3304      	adds	r3, #4
 80057c4:	ed93 7a00 	vldr	s14, [r3]
 80057c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80057cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	3304      	adds	r3, #4
 80057de:	edd3 6a00 	vldr	s13, [r3]
 80057e2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80057e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f6:	d502      	bpl.n	80057fe <Preprocess+0x2fe>
 80057f8:	eddf 7a27 	vldr	s15, [pc, #156]	; 8005898 <Preprocess+0x398>
 80057fc:	e01b      	b.n	8005836 <Preprocess+0x336>
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005802:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	3304      	adds	r3, #4
 800580c:	ed93 7a00 	vldr	s14, [r3]
 8005810:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	3304      	adds	r3, #4
 8005826:	edd3 6a00 	vldr	s13, [r3]
 800582a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800582e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583a:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	3304      	adds	r3, #4
 8005844:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < N; i++)
 8005848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584a:	3301      	adds	r3, #1
 800584c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800584e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005852:	429a      	cmp	r2, r3
 8005854:	db8f      	blt.n	8005776 <Preprocess+0x276>
    }
  }

  filterbank_compute_bank32(st->bank, st->noise, st->noise + N); //OPTIMIZE
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6918      	ldr	r0, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f503 519b 	add.w	r1, r3, #4960	; 0x1360
 8005860:	3104      	adds	r1, #4
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005868:	3304      	adds	r3, #4
 800586a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	4413      	add	r3, r2
 8005870:	461a      	mov	r2, r3
 8005872:	f7fe fc61 	bl	8004138 <filterbank_compute_bank32>


  /* Special case for first frame */
  if (st->nb_adapt == 1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800587c:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d123      	bne.n	80058cc <Preprocess+0x3cc>
  {
    for (i = 0; i < (N + M); i++)
 8005884:	2300      	movs	r3, #0
 8005886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005888:	e01a      	b.n	80058c0 <Preprocess+0x3c0>
 800588a:	bf00      	nop
 800588c:	3cf5c28f 	.word	0x3cf5c28f
 8005890:	4e6e6b28 	.word	0x4e6e6b28
 8005894:	3f19999a 	.word	0x3f19999a
 8005898:	00000000 	.word	0x00000000
 800589c:	42c80000 	.word	0x42c80000
    {
      st->old_ps[i] = ps[i];
 80058a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a6:	4413      	add	r3, r2
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ae:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	3304      	adds	r3, #4
 80058b8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < (N + M); i++)
 80058ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058bc:	3301      	adds	r3, #1
 80058be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	4413      	add	r3, r2
 80058c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058c8:	429a      	cmp	r2, r3
 80058ca:	dbe9      	blt.n	80058a0 <Preprocess+0x3a0>
    }
  }

  /* Compute a posteriori SNR */
  for (i = 0; i < (N + M); i++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d0:	e0f1      	b.n	8005ab6 <Preprocess+0x5b6>
  {
    spx_word16_t gamma;
    /* Total noise estimate including residual echo and reverberation */
    spx_word32_t tot_noise = 1.0f + st->noise[i] + st->echo_noise[i];
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d6:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	3304      	adds	r3, #4
 80058e0:	edd3 7a00 	vldr	s15, [r3]
 80058e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f0:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	3304      	adds	r3, #4
 80058fa:	edd3 7a00 	vldr	s15, [r3]
 80058fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005902:	edc7 7a03 	vstr	s15, [r7, #12]

    /* A posteriori SNR = ps/noise - 1*/
    st->post[i] = (ps[i] / tot_noise) - 1.0f;
 8005906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800590c:	4413      	add	r3, r2
 800590e:	edd3 6a00 	vldr	s13, [r3]
 8005912:	ed97 7a03 	vldr	s14, [r7, #12]
 8005916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800591e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005926:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	edc3 7a00 	vstr	s15, [r3]
    st->post[i] = MIN16(st->post[i], 100.0f);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005938:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	3304      	adds	r3, #4
 8005942:	edd3 7a00 	vldr	s15, [r3]
 8005946:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 800589c <Preprocess+0x39c>
 800594a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800594e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005952:	d508      	bpl.n	8005966 <Preprocess+0x466>
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005958:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	3304      	adds	r3, #4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	e000      	b.n	8005968 <Preprocess+0x468>
 8005966:	4bab      	ldr	r3, [pc, #684]	; (8005c14 <Preprocess+0x714>)
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800596c:	f502 62e7 	add.w	r2, r2, #1848	; 0x738
 8005970:	0092      	lsls	r2, r2, #2
 8005972:	440a      	add	r2, r1
 8005974:	3204      	adds	r2, #4
 8005976:	6013      	str	r3, [r2, #0]

    /* Computing update gamma = .1 + .9*(old/(old+noise))^2 */
    gamma = 0.1f + (0.89f * SQR16_Q15((st->old_ps[i] / (st->old_ps[i] + tot_noise))));
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800597c:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	3304      	adds	r3, #4
 8005986:	edd3 6a00 	vldr	s13, [r3]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800598e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	3304      	adds	r3, #4
 8005998:	ed93 7a00 	vldr	s14, [r3]
 800599c:	edd7 7a03 	vldr	s15, [r7, #12]
 80059a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ac:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	3304      	adds	r3, #4
 80059b6:	ed93 6a00 	vldr	s12, [r3]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059be:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	edd3 6a00 	vldr	s13, [r3]
 80059cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80059d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80059d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80059d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059dc:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8005c18 <Preprocess+0x718>
 80059e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059e4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8005c34 <Preprocess+0x734>
 80059e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059ec:	edc7 7a02 	vstr	s15, [r7, #8]

    /* A priori SNR update = gamma*max(0,post) + (1-gamma)*old/noise */
    st->prior[i] = (gamma * (MAX16(0.0f, st->post[i]))) + ((1.0f - gamma) * (st->old_ps[i] / tot_noise));
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f4:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	3304      	adds	r3, #4
 80059fe:	edd3 7a00 	vldr	s15, [r3]
 8005a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0a:	d502      	bpl.n	8005a12 <Preprocess+0x512>
 8005a0c:	eddf 7a83 	vldr	s15, [pc, #524]	; 8005c1c <Preprocess+0x71c>
 8005a10:	e008      	b.n	8005a24 <Preprocess+0x524>
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a16:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3304      	adds	r3, #4
 8005a20:	edd3 7a00 	vldr	s15, [r3]
 8005a24:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a34:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3c:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	3304      	adds	r3, #4
 8005a46:	edd3 5a00 	vldr	s11, [r3]
 8005a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a5e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	3304      	adds	r3, #4
 8005a68:	edc3 7a00 	vstr	s15, [r3]
    st->prior[i] = MIN16(st->prior[i], 100.0f);
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a70:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	3304      	adds	r3, #4
 8005a7a:	edd3 7a00 	vldr	s15, [r3]
 8005a7e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005c20 <Preprocess+0x720>
 8005a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8a:	d508      	bpl.n	8005a9e <Preprocess+0x59e>
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a90:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	3304      	adds	r3, #4
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	e000      	b.n	8005aa0 <Preprocess+0x5a0>
 8005a9e:	4b5d      	ldr	r3, [pc, #372]	; (8005c14 <Preprocess+0x714>)
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aa4:	f502 62d4 	add.w	r2, r2, #1696	; 0x6a0
 8005aa8:	0092      	lsls	r2, r2, #2
 8005aaa:	440a      	add	r2, r1
 8005aac:	3204      	adds	r2, #4
 8005aae:	6013      	str	r3, [r2, #0]
  for (i = 0; i < (N + M); i++)
 8005ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	4413      	add	r3, r2
 8005abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	f6ff af07 	blt.w	80058d2 <Preprocess+0x3d2>
  }

  /* Recursive average of the a priori SNR. A bit smoothed for the psd components */
  st->zeta[0] = (0.7f * st->zeta[0]) + (0.3f * st->prior[0]);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005aca:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8005ace:	edd3 7a00 	vldr	s15, [r3]
 8005ad2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8005c24 <Preprocess+0x724>
 8005ad6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae0:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 8005ae4:	edd3 7a00 	vldr	s15, [r3]
 8005ae8:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c28 <Preprocess+0x728>
 8005aec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005afa:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8005afe:	edc3 7a00 	vstr	s15, [r3]

  for (i = 1; i < (N - 1); i++)
 8005b02:	2301      	movs	r3, #1
 8005b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b06:	e047      	b.n	8005b98 <Preprocess+0x698>
  {
    st->zeta[i] = (0.7f * st->zeta[i]) + (0.15f * st->prior[i]) + (0.75f * st->prior[i - 1]) + (0.75f * st->prior[i + 1]);
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b0c:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	edd3 7a00 	vldr	s15, [r3]
 8005b1a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005c24 <Preprocess+0x724>
 8005b1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b26:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3304      	adds	r3, #4
 8005b30:	edd3 7a00 	vldr	s15, [r3]
 8005b34:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c2c <Preprocess+0x72c>
 8005b38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b42:	3b01      	subs	r3, #1
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3304      	adds	r3, #4
 8005b50:	edd3 7a00 	vldr	s15, [r3]
 8005b54:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 8005b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b62:	3301      	adds	r3, #1
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	3304      	adds	r3, #4
 8005b70:	edd3 7a00 	vldr	s15, [r3]
 8005b74:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 8005b78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b84:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < (N - 1); i++)
 8005b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b94:	3301      	adds	r3, #1
 8005b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	dbb2      	blt.n	8005b08 <Preprocess+0x608>
  }

  for (i = N - 1; i < (N + M); i++)
 8005ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ba8:	e027      	b.n	8005bfa <Preprocess+0x6fa>
  {
    st->zeta[i] = (0.7f * st->zeta[i]) + (0.3f * st->prior[i]);
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bae:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	edd3 7a00 	vldr	s15, [r3]
 8005bbc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005c24 <Preprocess+0x724>
 8005bc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc8:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	edd3 7a00 	vldr	s15, [r3]
 8005bd6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005c28 <Preprocess+0x728>
 8005bda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005be6:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	3304      	adds	r3, #4
 8005bf0:	edc3 7a00 	vstr	s15, [r3]
  for (i = N - 1; i < (N + M); i++)
 8005bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	4413      	add	r3, r2
 8005c00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c02:	429a      	cmp	r2, r3
 8005c04:	dbd1      	blt.n	8005baa <Preprocess+0x6aa>
  }

  /* Speech probability of presence for the entire frame is based on the average filterbank a priori SNR */
  Zframe = 0.0f;
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  for (i = N; i < (N + M); i++)
 8005c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c10:	e02a      	b.n	8005c68 <Preprocess+0x768>
 8005c12:	bf00      	nop
 8005c14:	42c80000 	.word	0x42c80000
 8005c18:	3f63d70a 	.word	0x3f63d70a
 8005c1c:	00000000 	.word	0x00000000
 8005c20:	42c80000 	.word	0x42c80000
 8005c24:	3f333333 	.word	0x3f333333
 8005c28:	3e99999a 	.word	0x3e99999a
 8005c2c:	3e19999a 	.word	0x3e19999a
 8005c30:	3f6624dd 	.word	0x3f6624dd
 8005c34:	3dcccccd 	.word	0x3dcccccd
 8005c38:	3e4ccccd 	.word	0x3e4ccccd
 8005c3c:	3f4ccccd 	.word	0x3f4ccccd
 8005c40:	3e4bc6a8 	.word	0x3e4bc6a8
  {
    Zframe = (Zframe + st->zeta[i]);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c48:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	3304      	adds	r3, #4
 8005c52:	edd3 7a00 	vldr	s15, [r3]
 8005c56:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  for (i = N; i < (N + M); i++)
 8005c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c64:	3301      	adds	r3, #1
 8005c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	4413      	add	r3, r2
 8005c6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	dbe7      	blt.n	8005c44 <Preprocess+0x744>
  }
  Pframe = 0.1f + (0.899f * qcurve(Zframe / (float32_t)st->nbands));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c80:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005c88:	eeb0 0a66 	vmov.f32	s0, s13
 8005c8c:	f7fe fc88 	bl	80045a0 <qcurve>
 8005c90:	eef0 7a40 	vmov.f32	s15, s0
 8005c94:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8005c30 <Preprocess+0x730>
 8005c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c9c:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 8005c34 <Preprocess+0x734>
 8005ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ca4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  effective_echo_suppress = ((1.0f - Pframe) * (float32_t)st->echo_suppress) + (Pframe * (float32_t)st->echo_suppress_active);
 8005ca8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005cb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb8:	ee07 3a90 	vmov	s15, r3
 8005cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005cd0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cdc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  compute_gain_floor((float32_t)st->noise_suppress, effective_echo_suppress, st->noise + N, st->echo_noise + N, st->gain_floor + N, M); //OPTIMIZED REMOVING M (24) SQRTs
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cf6:	0092      	lsls	r2, r2, #2
 8005cf8:	1898      	adds	r0, r3, r2
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
 8005d00:	3324      	adds	r3, #36	; 0x24
 8005d02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d04:	0092      	lsls	r2, r2, #2
 8005d06:	1899      	adds	r1, r3, r2
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f603 5204 	addw	r2, r3, #3332	; 0xd04
 8005d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8005d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d1e:	f7fe fc5d 	bl	80045dc <compute_gain_floor>

  /* Compute Ephraim & Malah gain speech probability of presence for each critical band (Bark scale)
  Technically this is actually wrong because the EM gaim assumes a slightly different probability
  distribution */
  for (i = N; i < (N + M); i++)
 8005d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d26:	e0e7      	b.n	8005ef8 <Preprocess+0x9f8>
    /* a priority probability of speech presence based on Bark sub-band alone */
    spx_word16_t P1;
    /* Speech absence a priori probability (considering sub-band and frame) */
    spx_word16_t q;

    prior_ratio = PDIV32_16(SHL32(EXTEND32(st->prior[i]), 15), ADD16(st->prior[i], SHL32(1, SNR_SHIFT)));
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d2c:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	3304      	adds	r3, #4
 8005d36:	edd3 6a00 	vldr	s13, [r3]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d3e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	3304      	adds	r3, #4
 8005d48:	edd3 7a00 	vldr	s15, [r3]
 8005d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d58:	edc7 7a08 	vstr	s15, [r7, #32]
    theta = MULT16_32_P15(prior_ratio, QCONST32(1.f, EXPIN_SHIFT) + SHL32(EXTEND32(st->post[i]), EXPIN_SHIFT - SNR_SHIFT));
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d60:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	3304      	adds	r3, #4
 8005d6a:	edd3 7a00 	vldr	s15, [r3]
 8005d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d76:	ed97 7a08 	vldr	s14, [r7, #32]
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a07 	vstr	s15, [r7, #28]

    MM = hypergeom_gain(theta);  //REMOVED LOOKUP TABLE FROM FLASH
 8005d82:	ed97 0a07 	vldr	s0, [r7, #28]
 8005d86:	f7fe fb95 	bl	80044b4 <hypergeom_gain>
 8005d8a:	ed87 0a06 	vstr	s0, [r7, #24]
    /* Gain with bound */
    st->gain[i] = EXTRACT16(MIN32(Q15_ONE, MULT16_32_Q15(prior_ratio, MM)));
 8005d8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8005d92:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da6:	dd02      	ble.n	8005dae <Preprocess+0x8ae>
 8005da8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005dac:	e005      	b.n	8005dba <Preprocess+0x8ba>
 8005dae:	ed97 7a08 	vldr	s14, [r7, #32]
 8005db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dbe:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	edc3 7a00 	vstr	s15, [r3]
    /* Save old Bark power spectrum */
    st->old_ps[i] = MULT16_32_P15(QCONST16(.2f, 15), st->old_ps[i]) + MULT16_32_P15(MULT16_16_P15(QCONST16(.8f, 15), SQR16_Q15(st->gain[i])), ps[i]);
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd0:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3304      	adds	r3, #4
 8005dda:	edd3 7a00 	vldr	s15, [r3]
 8005dde:	ed1f 7a6a 	vldr	s14, [pc, #-424]	; 8005c38 <Preprocess+0x738>
 8005de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dea:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	3304      	adds	r3, #4
 8005df4:	edd3 6a00 	vldr	s13, [r3]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dfc:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	3304      	adds	r3, #4
 8005e06:	edd3 7a00 	vldr	s15, [r3]
 8005e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e0e:	ed5f 6a75 	vldr	s13, [pc, #-468]	; 8005c3c <Preprocess+0x73c>
 8005e12:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e1c:	4413      	add	r3, r2
 8005e1e:	edd3 7a00 	vldr	s15, [r3]
 8005e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e2e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	3304      	adds	r3, #4
 8005e38:	edc3 7a00 	vstr	s15, [r3]

    P1 = QCONST16(.199f, 15) + MULT16_16_Q15(QCONST16(.8f, 15), qcurve(st->zeta[i]));
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e40:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	3304      	adds	r3, #4
 8005e4a:	edd3 7a00 	vldr	s15, [r3]
 8005e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e52:	f7fe fba5 	bl	80045a0 <qcurve>
 8005e56:	eef0 7a40 	vmov.f32	s15, s0
 8005e5a:	ed1f 7a88 	vldr	s14, [pc, #-544]	; 8005c3c <Preprocess+0x73c>
 8005e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e62:	ed1f 7a89 	vldr	s14, [pc, #-548]	; 8005c40 <Preprocess+0x740>
 8005e66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e6a:	edc7 7a05 	vstr	s15, [r7, #20]
    q = Q15_ONE - MULT16_16_Q15(Pframe, P1);
 8005e6e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005e72:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e82:	edc7 7a04 	vstr	s15, [r7, #16]

    st->gain2[i] = 1.0f / (1.f + ((q / (1.f - q)) * (1.0f + st->prior[i]) * expf(-theta)));
 8005e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e92:	edd7 6a04 	vldr	s13, [r7, #16]
 8005e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	edd3 7a00 	vldr	s15, [r3]
 8005eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb4:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005eb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ebc:	eef1 7a67 	vneg.f32	s15, s15
 8005ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ec4:	f00c fa32 	bl	801232c <expf>
 8005ec8:	eef0 7a40 	vmov.f32	s15, s0
 8005ecc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	3304      	adds	r3, #4
 8005eee:	edc3 7a00 	vstr	s15, [r3]
  for (i = N; i < (N + M); i++)
 8005ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	4413      	add	r3, r2
 8005efe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f00:	429a      	cmp	r2, r3
 8005f02:	f6ff af11 	blt.w	8005d28 <Preprocess+0x828>
  }

  /* Convert the EM gains and speech prob to linear frequency */ //440us
  filterbank_compute_psd16(st->bank, st->gain2 + N, st->gain2);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6918      	ldr	r0, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f603 22a4 	addw	r2, r3, #2724	; 0xaa4
 8005f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	18d1      	adds	r1, r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f7fe f97e 	bl	800421e <filterbank_compute_psd16>
  filterbank_compute_psd16(st->bank, st->gain + N, st->gain);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6918      	ldr	r0, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	1899      	adds	r1, r3, r2
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f7fe f96e 	bl	800421e <filterbank_compute_psd16>

  /* Use linear gain resolution */
  for (i = N; i < (N + M); i++)
 8005f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f46:	e076      	b.n	8006036 <Preprocess+0xb36>
  {
    spx_word16_t tmp;
    spx_word16_t p = st->gain2[i];
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	3304      	adds	r3, #4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	62bb      	str	r3, [r7, #40]	; 0x28
    st->gain[i] = MAX16(st->gain[i], st->gain_floor[i]);// CHECKING THIS RESULT WE CAN PERFORM 1 SQRT LESS IN THE NEXT INSTRUCTION
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f5e:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	3304      	adds	r3, #4
 8005f68:	ed93 7a00 	vldr	s14, [r3]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f70:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	3304      	adds	r3, #4
 8005f7a:	edd3 7a00 	vldr	s15, [r3]
 8005f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f86:	dd08      	ble.n	8005f9a <Preprocess+0xa9a>
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f8c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	3304      	adds	r3, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	e007      	b.n	8005faa <Preprocess+0xaaa>
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f9e:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fae:	f502 62c1 	add.w	r2, r2, #1544	; 0x608
 8005fb2:	0092      	lsls	r2, r2, #2
 8005fb4:	440a      	add	r2, r1
 8005fb6:	3204      	adds	r2, #4
 8005fb8:	6013      	str	r3, [r2, #0]
    tmp = (p * spx_sqrt(st->gain[i])) + ((1.0f - p) * spx_sqrt(st->gain_floor[i]));
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fbe:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	edd3 7a00 	vldr	s15, [r3]
 8005fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd0:	f7fe f977 	bl	80042c2 <my_sqrt>
 8005fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8005fd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005fdc:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005fe8:	ee77 8a67 	vsub.f32	s17, s14, s15
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff0:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	edd3 7a00 	vldr	s15, [r3]
 8005ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8006002:	f7fe f95e 	bl	80042c2 <my_sqrt>
 8006006:	eef0 7a40 	vmov.f32	s15, s0
 800600a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800600e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006012:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    st->gain2[i] = SQR16_Q15(tmp);
 8006016:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800601a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006022:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	3304      	adds	r3, #4
 800602c:	edc3 7a00 	vstr	s15, [r3]
  for (i = N; i < (N + M); i++)
 8006030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006032:	3301      	adds	r3, #1
 8006034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006036:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	4413      	add	r3, r2
 800603c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800603e:	429a      	cmp	r2, r3
 8006040:	db82      	blt.n	8005f48 <Preprocess+0xa48>
  }

  filterbank_compute_psd16(st->bank, st->gain2 + N, st->gain2);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6918      	ldr	r0, [r3, #16]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f603 22a4 	addw	r2, r3, #2724	; 0xaa4
 800604c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	18d1      	adds	r1, r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 8006058:	461a      	mov	r2, r3
 800605a:	f7fe f8e0 	bl	800421e <filterbank_compute_psd16>

  /* Apply computed gain */ //180us
  for (i = 1; i < N; i++)
 800605e:	2301      	movs	r3, #1
 8006060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006062:	e042      	b.n	80060ea <Preprocess+0xbea>
  {
    st->ft[(2 * i) - 1] = MULT16_16_P15(st->gain2[i], st->ft[(2 * i) - 1]);
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006068:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	3304      	adds	r3, #4
 8006072:	ed93 7a00 	vldr	s14, [r3]
 8006076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	3b01      	subs	r3, #1
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	3304      	adds	r3, #4
 8006088:	edd3 7a00 	vldr	s15, [r3]
 800608c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	3b01      	subs	r3, #1
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	3304      	adds	r3, #4
 80060a2:	edc3 7a00 	vstr	s15, [r3]
    st->ft[2 * i] = MULT16_16_P15(st->gain2[i], st->ft[2 * i]);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	3304      	adds	r3, #4
 80060b4:	ed93 7a00 	vldr	s14, [r3]
 80060b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	3304      	adds	r3, #4
 80060c8:	edd3 7a00 	vldr	s15, [r3]
 80060cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	3304      	adds	r3, #4
 80060e0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < N; i++)
 80060e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e6:	3301      	adds	r3, #1
 80060e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ee:	429a      	cmp	r2, r3
 80060f0:	dbb8      	blt.n	8006064 <Preprocess+0xb64>
  }
  st->ft[0] = MULT16_16_P15(st->gain2[0], st->ft[0]);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 80060f8:	ed93 7a00 	vldr	s14, [r3]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8006102:	edd3 7a00 	vldr	s15, [r3]
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8006110:	edc3 7a00 	vstr	s15, [r3]
  st->ft[(2 * N) - 1] = MULT16_16_P15(st->gain2[N - 1], st->ft[(2 * N) - 1]);
 8006114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006116:	3b01      	subs	r3, #1
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	3304      	adds	r3, #4
 8006124:	ed93 7a00 	vldr	s14, [r3]
 8006128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	3b01      	subs	r3, #1
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	3304      	adds	r3, #4
 800613a:	edd3 7a00 	vldr	s15, [r3]
 800613e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	3b01      	subs	r3, #1
 8006144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	3304      	adds	r3, #4
 8006154:	edc3 7a00 	vstr	s15, [r3]

  //  AGC RELATED
  if (st->agc_enabled)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800615e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <Preprocess+0xc78>
  {
    simple_agc(st, Pframe, st->ft);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800616c:	4619      	mov	r1, r3
 800616e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fe fcd6 	bl	8004b24 <simple_agc>
  }

  /* Inverse FFT with 1/N scaling */
  libSpeexAEC_ifft(st->fft_lookup, st->ft, st->frame);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800617e:	f8d3 0498 	ldr.w	r0, [r3, #1176]	; 0x498
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f203 4144 	addw	r1, r3, #1092	; 0x444
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3344      	adds	r3, #68	; 0x44
 800618c:	461a      	mov	r2, r3
 800618e:	f7fb f9e2 	bl	8001556 <libSpeexAEC_ifft>

  //  AGC RELATED
  if (st->agc_enabled)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006198:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800619c:	2b00      	cmp	r3, #0
 800619e:	d05a      	beq.n	8006256 <Preprocess+0xd56>
  {
    float max_sample = 0;
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	657b      	str	r3, [r7, #84]	; 0x54
    for (i = 0; i < 2 * N; i++)
 80061a6:	2300      	movs	r3, #0
 80061a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061aa:	e01f      	b.n	80061ec <Preprocess+0xcec>
    {
      if (fabsf(st->frame[i]) > max_sample)
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b0:	3310      	adds	r3, #16
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	3304      	adds	r3, #4
 80061b8:	edd3 7a00 	vldr	s15, [r3]
 80061bc:	eef0 7ae7 	vabs.f32	s15, s15
 80061c0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80061c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061cc:	d50b      	bpl.n	80061e6 <Preprocess+0xce6>
      {
        max_sample = fabsf(st->frame[i]);
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d2:	3310      	adds	r3, #16
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	3304      	adds	r3, #4
 80061da:	edd3 7a00 	vldr	s15, [r3]
 80061de:	eef0 7ae7 	vabs.f32	s15, s15
 80061e2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    for (i = 0; i < 2 * N; i++)
 80061e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e8:	3301      	adds	r3, #1
 80061ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061f2:	429a      	cmp	r2, r3
 80061f4:	dbda      	blt.n	80061ac <Preprocess+0xcac>
      }
    }
    if (max_sample > 28000.f)
 80061f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80061fa:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800635c <Preprocess+0xe5c>
 80061fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006206:	dd26      	ble.n	8006256 <Preprocess+0xd56>
    {
      float damp = 28000.f / max_sample;
 8006208:	eddf 6a54 	vldr	s13, [pc, #336]	; 800635c <Preprocess+0xe5c>
 800620c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006214:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      for (i = 0; i < 2 * N; i++)
 8006218:	2300      	movs	r3, #0
 800621a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800621c:	e016      	b.n	800624c <Preprocess+0xd4c>
      {
        st->frame[i] *= damp;
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006222:	3310      	adds	r3, #16
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	3304      	adds	r3, #4
 800622a:	ed93 7a00 	vldr	s14, [r3]
 800622e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623a:	3310      	adds	r3, #16
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	3304      	adds	r3, #4
 8006242:	edc3 7a00 	vstr	s15, [r3]
      for (i = 0; i < 2 * N; i++)
 8006246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006248:	3301      	adds	r3, #1
 800624a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800624c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006252:	429a      	cmp	r2, r3
 8006254:	dbe3      	blt.n	800621e <Preprocess+0xd1e>
      }
    }
  }

  /* Synthesis window (for WOLA) */
  arm_mult_f32((float32_t *)st->window, st->frame, st->frame, (uint32_t)N * 2U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f603 7064 	addw	r0, r3, #3940	; 0xf64
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8006268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	f00b fd0a 	bl	8011c84 <arm_mult_f32>

  /* Perform overlap and add */
  for (i = 0; i < N3; i++)
 8006270:	2300      	movs	r3, #0
 8006272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006274:	e027      	b.n	80062c6 <Preprocess+0xdc6>
  {
    x[i] = (spx_int16_t)st->outbuf[i] + (spx_int16_t)st->frame[i];
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800627a:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	3304      	adds	r3, #4
 8006284:	edd3 7a00 	vldr	s15, [r3]
 8006288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800628c:	ee17 3a90 	vmov	r3, s15
 8006290:	b21b      	sxth	r3, r3
 8006292:	b29a      	uxth	r2, r3
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006298:	3310      	adds	r3, #16
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	3304      	adds	r3, #4
 80062a0:	edd3 7a00 	vldr	s15, [r3]
 80062a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062a8:	ee17 3a90 	vmov	r3, s15
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	4413      	add	r3, r2
 80062b2:	b299      	uxth	r1, r3
 80062b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	4413      	add	r3, r2
 80062bc:	b20a      	sxth	r2, r1
 80062be:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < N3; i++)
 80062c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c2:	3301      	adds	r3, #1
 80062c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ca:	429a      	cmp	r2, r3
 80062cc:	dbd3      	blt.n	8006276 <Preprocess+0xd76>
  }
  for (i = 0; i < N4; i++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d2:	e018      	b.n	8006306 <Preprocess+0xe06>
  {
    x[N3 + i] = (spx_int16_t)(st->frame[N3 + i]);
 80062d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d8:	4413      	add	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	3310      	adds	r3, #16
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	3304      	adds	r3, #4
 80062e4:	edd3 7a00 	vldr	s15, [r3]
 80062e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ec:	4413      	add	r3, r2
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	4413      	add	r3, r2
 80062f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062f8:	ee17 2a90 	vmov	r2, s15
 80062fc:	b212      	sxth	r2, r2
 80062fe:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < N4; i++)
 8006300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006302:	3301      	adds	r3, #1
 8006304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006306:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630a:	429a      	cmp	r2, r3
 800630c:	dbe2      	blt.n	80062d4 <Preprocess+0xdd4>
  }

  /* Update outbuf */
  for (i = 0; i < N3; i++)
 800630e:	2300      	movs	r3, #0
 8006310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006312:	e014      	b.n	800633e <Preprocess+0xe3e>
  {
    st->outbuf[i] = st->frame[st->frame_size + i];
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631a:	4413      	add	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	3310      	adds	r3, #16
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	3304      	adds	r3, #4
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800632c:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	3304      	adds	r3, #4
 8006336:	601a      	str	r2, [r3, #0]
  for (i = 0; i < N3; i++)
 8006338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800633a:	3301      	adds	r3, #1
 800633c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800633e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006342:	429a      	cmp	r2, r3
 8006344:	dbe6      	blt.n	8006314 <Preprocess+0xe14>
  }

  /* FIXME: This VAD is a kludge */
  st->speech_prob = Pframe;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800634a:	641a      	str	r2, [r3, #64]	; 0x40

  return 1;
 800634c:	2301      	movs	r3, #1
}
 800634e:	4618      	mov	r0, r3
 8006350:	3760      	adds	r7, #96	; 0x60
 8006352:	46bd      	mov	sp, r7
 8006354:	ecbd 8b02 	vpop	{d8}
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	46dac000 	.word	0x46dac000

08006360 <Preprocess_setup>:

int Preprocess_setup(SpeexPreprocessState *state, int request, void *ptr)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  spx_int32_t *ptr_int32 = (spx_int32_t *)ptr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	61fb      	str	r3, [r7, #28]
  float *ptr_float = (float *)ptr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	61bb      	str	r3, [r7, #24]
  int ret = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  SpeexPreprocessState *st;
  st = (SpeexPreprocessState *)state;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	617b      	str	r3, [r7, #20]
  switch (request)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b2f      	cmp	r3, #47	; 0x2f
 8006380:	f200 8310 	bhi.w	80069a4 <Preprocess_setup+0x644>
 8006384:	a201      	add	r2, pc, #4	; (adr r2, 800638c <Preprocess_setup+0x2c>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	0800644d 	.word	0x0800644d
 8006390:	08006457 	.word	0x08006457
 8006394:	08006461 	.word	0x08006461
 8006398:	08006471 	.word	0x08006471
 800639c:	080066cf 	.word	0x080066cf
 80063a0:	080066d9 	.word	0x080066d9
 80063a4:	08006481 	.word	0x08006481
 80063a8:	080064e3 	.word	0x080064e3
 80063ac:	080066e3 	.word	0x080066e3
 80063b0:	080066ed 	.word	0x080066ed
 80063b4:	080069ad 	.word	0x080069ad
 80063b8:	080069ad 	.word	0x080069ad
 80063bc:	080069ad 	.word	0x080069ad
 80063c0:	080069ad 	.word	0x080069ad
 80063c4:	080066f7 	.word	0x080066f7
 80063c8:	0800672b 	.word	0x0800672b
 80063cc:	08006747 	.word	0x08006747
 80063d0:	0800677b 	.word	0x0800677b
 80063d4:	08006797 	.word	0x08006797
 80063d8:	080067a9 	.word	0x080067a9
 80063dc:	080067b3 	.word	0x080067b3
 80063e0:	080067dd 	.word	0x080067dd
 80063e4:	080067e7 	.word	0x080067e7
 80063e8:	080067f9 	.word	0x080067f9
 80063ec:	08006803 	.word	0x08006803
 80063f0:	0800680b 	.word	0x0800680b
 80063f4:	080064f3 	.word	0x080064f3
 80063f8:	08006543 	.word	0x08006543
 80063fc:	080065a7 	.word	0x080065a7
 8006400:	080065f7 	.word	0x080065f7
 8006404:	0800665b 	.word	0x0800665b
 8006408:	0800668b 	.word	0x0800668b
 800640c:	080069a5 	.word	0x080069a5
 8006410:	08006815 	.word	0x08006815
 8006414:	080069a5 	.word	0x080069a5
 8006418:	08006841 	.word	0x08006841
 800641c:	080069a5 	.word	0x080069a5
 8006420:	08006885 	.word	0x08006885
 8006424:	080069a5 	.word	0x080069a5
 8006428:	0800688f 	.word	0x0800688f
 800642c:	080069a5 	.word	0x080069a5
 8006430:	08006885 	.word	0x08006885
 8006434:	080069a5 	.word	0x080069a5
 8006438:	080068cb 	.word	0x080068cb
 800643c:	080069a5 	.word	0x080069a5
 8006440:	08006907 	.word	0x08006907
 8006444:	08006923 	.word	0x08006923
 8006448:	0800698d 	.word	0x0800698d
  {
    case SPEEX_PREPROCESS_SET_DENOISE:
      st->denoise_enabled = *ptr_int32;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	615a      	str	r2, [r3, #20]
      break;
 8006454:	e2ab      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_DENOISE:
      *ptr_int32 = st->denoise_enabled;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	601a      	str	r2, [r3, #0]
      break;
 800645e:	e2a6      	b.n	80069ae <Preprocess_setup+0x64e>

      #ifndef FIXED_POINT
    case SPEEX_PREPROCESS_SET_AGC:
      st->agc_enabled = *ptr_int32;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800646a:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
      break;
 800646e:	e29e      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_AGC:
      *ptr_int32 = st->agc_enabled;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006476:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	601a      	str	r2, [r3, #0]
      break;
 800647e:	e296      	b.n	80069ae <Preprocess_setup+0x64e>

      #ifndef DISABLE_FLOAT_API
    case SPEEX_PREPROCESS_SET_AGC_LEVEL:
      st->agc_level = *ptr_float;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800648a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      if (st->agc_level < 1)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006494:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8006498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800649c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a4:	d507      	bpl.n	80064b6 <Preprocess_setup+0x156>
      {
        st->agc_level = 1;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064ac:	461a      	mov	r2, r3
 80064ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80064b2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      }
      if (st->agc_level > 32768)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064bc:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 80064c0:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80067c4 <Preprocess_setup+0x464>
 80064c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064cc:	dc00      	bgt.n	80064d0 <Preprocess_setup+0x170>
      {
        st->agc_level = 32768;
      }
      break;
 80064ce:	e26e      	b.n	80069ae <Preprocess_setup+0x64e>
        st->agc_level = 32768;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064d6:	461a      	mov	r2, r3
 80064d8:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 80064dc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      break;
 80064e0:	e265      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_AGC_LEVEL:
      *ptr_float = st->agc_level;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064e8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	601a      	str	r2, [r3, #0]
      break;
 80064f0:	e25d      	b.n	80069ae <Preprocess_setup+0x64e>
      #endif /* #ifndef DISABLE_FLOAT_API */

    case SPEEX_PREPROCESS_SET_AGC_INCREMENT:
      st->max_increase_step = expf(0.11513f * (*ptr_int32) * st->frame_size / st->sampling_rate);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064fe:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80067c8 <Preprocess_setup+0x468>
 8006502:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006522:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006526:	eeb0 0a66 	vmov.f32	s0, s13
 800652a:	f00b feff 	bl	801232c <expf>
 800652e:	eef0 7a40 	vmov.f32	s15, s0
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006538:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800653c:	edc3 7a00 	vstr	s15, [r3]
      break;
 8006540:	e235      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_AGC_INCREMENT:
      *ptr_int32 = (spx_int32_t)floorf(.5f + 8.6858f * logf(st->max_increase_step) * st->sampling_rate / st->frame_size);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006548:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 800654c:	edd3 7a00 	vldr	s15, [r3]
 8006550:	eeb0 0a67 	vmov.f32	s0, s15
 8006554:	f00b ff20 	bl	8012398 <logf>
 8006558:	eef0 7a40 	vmov.f32	s15, s0
 800655c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80067d0 <Preprocess_setup+0x470>
 8006560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	ee07 3a90 	vmov	s15, r3
 800656c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006570:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006584:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800658c:	eeb0 0a67 	vmov.f32	s0, s15
 8006590:	f00c f8ca 	bl	8012728 <floorf>
 8006594:	eef0 7a40 	vmov.f32	s15, s0
 8006598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800659c:	ee17 2a90 	vmov	r2, s15
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	601a      	str	r2, [r3, #0]
      break;
 80065a4:	e203      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_SET_AGC_DECREMENT:
      st->max_decrease_step = expf(0.11513f * (*ptr_int32) * st->frame_size / st->sampling_rate);
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065b2:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80067c8 <Preprocess_setup+0x468>
 80065b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065da:	eeb0 0a66 	vmov.f32	s0, s13
 80065de:	f00b fea5 	bl	801232c <expf>
 80065e2:	eef0 7a40 	vmov.f32	s15, s0
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065ec:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80065f0:	edc3 7a00 	vstr	s15, [r3]
      break;
 80065f4:	e1db      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_AGC_DECREMENT:
      *ptr_int32 = (spx_int32_t)floorf(.5f + 8.6858f * logf(st->max_decrease_step) * st->sampling_rate / st->frame_size);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065fc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8006600:	edd3 7a00 	vldr	s15, [r3]
 8006604:	eeb0 0a67 	vmov.f32	s0, s15
 8006608:	f00b fec6 	bl	8012398 <logf>
 800660c:	eef0 7a40 	vmov.f32	s15, s0
 8006610:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80067d0 <Preprocess_setup+0x470>
 8006614:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006624:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006638:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800663c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006640:	eeb0 0a67 	vmov.f32	s0, s15
 8006644:	f00c f870 	bl	8012728 <floorf>
 8006648:	eef0 7a40 	vmov.f32	s15, s0
 800664c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006650:	ee17 2a90 	vmov	r2, s15
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	601a      	str	r2, [r3, #0]
      break;
 8006658:	e1a9      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_SET_AGC_MAX_GAIN:
      st->max_gain = expf(0.11513f * (*ptr_int32));
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006666:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80067c8 <Preprocess_setup+0x468>
 800666a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800666e:	eeb0 0a67 	vmov.f32	s0, s15
 8006672:	f00b fe5b 	bl	801232c <expf>
 8006676:	eef0 7a40 	vmov.f32	s15, s0
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006680:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8006684:	edc3 7a00 	vstr	s15, [r3]
      break;
 8006688:	e191      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_AGC_MAX_GAIN:
      *ptr_int32 = (spx_int32_t)floorf(.5f + 8.6858f * logf(st->max_gain));
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006690:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8006694:	edd3 7a00 	vldr	s15, [r3]
 8006698:	eeb0 0a67 	vmov.f32	s0, s15
 800669c:	f00b fe7c 	bl	8012398 <logf>
 80066a0:	eef0 7a40 	vmov.f32	s15, s0
 80066a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80067d0 <Preprocess_setup+0x470>
 80066a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80066b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066b4:	eeb0 0a67 	vmov.f32	s0, s15
 80066b8:	f00c f836 	bl	8012728 <floorf>
 80066bc:	eef0 7a40 	vmov.f32	s15, s0
 80066c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066c4:	ee17 2a90 	vmov	r2, s15
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	601a      	str	r2, [r3, #0]
      break;
 80066cc:	e16f      	b.n	80069ae <Preprocess_setup+0x64e>
      #endif

    case SPEEX_PREPROCESS_SET_VAD:
      st->vad_enabled = *ptr_int32;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	619a      	str	r2, [r3, #24]
      break;
 80066d6:	e16a      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_VAD:
      *ptr_int32 = st->vad_enabled;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	601a      	str	r2, [r3, #0]
      break;
 80066e0:	e165      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_SET_DEREVERB:
      st->dereverb_enabled = *ptr_int32;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	61da      	str	r2, [r3, #28]
      break;
 80066ea:	e160      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_DEREVERB:
      (*(spx_int32_t *)ptr) = st->dereverb_enabled;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]
      break;
 80066f4:	e15b      	b.n	80069ae <Preprocess_setup+0x64e>
      /* FIXME: Re-enable when de-reverberation is actually enabled again */
      // *ptr_float = st->reverb_decay;
      break;

    case SPEEX_PREPROCESS_SET_PROB_START:
      *ptr_int32 = MIN32FIXED(100, MAX32FIXED(0, *ptr_int32));
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b64      	cmp	r3, #100	; 0x64
 80066fc:	dc04      	bgt.n	8006708 <Preprocess_setup+0x3a8>
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006706:	e000      	b.n	800670a <Preprocess_setup+0x3aa>
 8006708:	2364      	movs	r3, #100	; 0x64
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	6013      	str	r3, [r2, #0]
      st->speech_prob_start = DIV32_16(MULT16_16(Q15ONE, *ptr_int32), 100);
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800671a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80067d4 <Preprocess_setup+0x474>
 800671e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      break;
 8006728:	e141      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_PROB_START:
      *ptr_int32 = (spx_int32_t)MULT16_16_Q15(st->speech_prob_start, 100);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006730:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80067d4 <Preprocess_setup+0x474>
 8006734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800673c:	ee17 2a90 	vmov	r2, s15
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	601a      	str	r2, [r3, #0]
      break;
 8006744:	e133      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_SET_PROB_CONTINUE:
      *ptr_int32 = MIN32FIXED(100, MAX32FIXED(0, *ptr_int32));
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b64      	cmp	r3, #100	; 0x64
 800674c:	dc04      	bgt.n	8006758 <Preprocess_setup+0x3f8>
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006756:	e000      	b.n	800675a <Preprocess_setup+0x3fa>
 8006758:	2364      	movs	r3, #100	; 0x64
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	6013      	str	r3, [r2, #0]
      st->speech_prob_continue = DIV32_16(MULT16_16(Q15ONE, *ptr_int32), 100);
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800676a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80067d4 <Preprocess_setup+0x474>
 800676e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      break;
 8006778:	e119      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_PROB_CONTINUE:
      *ptr_int32 = (spx_int32_t)MULT16_16_Q15(st->speech_prob_continue, 100);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006780:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80067d4 <Preprocess_setup+0x474>
 8006784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800678c:	ee17 2a90 	vmov	r2, s15
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	601a      	str	r2, [r3, #0]
      break;
 8006794:	e10b      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_SET_NOISE_SUPPRESS:
      st->noise_suppress = -ABS(*ptr_int32);
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	bfb8      	it	lt
 800679e:	425b      	neglt	r3, r3
 80067a0:	425a      	negs	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
      break;
 80067a6:	e102      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_NOISE_SUPPRESS:
      *ptr_int32 = st->noise_suppress;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	601a      	str	r2, [r3, #0]
      break;
 80067b0:	e0fd      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_SET_ECHO_SUPPRESS:
      st->echo_suppress = -ABS(*ptr_int32);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bfb8      	it	lt
 80067ba:	425b      	neglt	r3, r3
 80067bc:	425a      	negs	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 80067c2:	e0f4      	b.n	80069ae <Preprocess_setup+0x64e>
 80067c4:	47000000 	.word	0x47000000
 80067c8:	3debc947 	.word	0x3debc947
 80067cc:	3e4ccccd 	.word	0x3e4ccccd
 80067d0:	410af909 	.word	0x410af909
 80067d4:	42c80000 	.word	0x42c80000
 80067d8:	47000000 	.word	0x47000000

    case SPEEX_PREPROCESS_GET_ECHO_SUPPRESS:
      *ptr_int32 = st->echo_suppress;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	601a      	str	r2, [r3, #0]
      break;
 80067e4:	e0e3      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_SET_ECHO_SUPPRESS_ACTIVE:
      st->echo_suppress_active = -ABS(*ptr_int32);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bfb8      	it	lt
 80067ee:	425b      	neglt	r3, r3
 80067f0:	425a      	negs	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 80067f6:	e0da      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_ECHO_SUPPRESS_ACTIVE:
      *ptr_int32 = st->echo_suppress_active;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	601a      	str	r2, [r3, #0]
      break;
 8006800:	e0d5      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_SET_ECHO_STATE:
      st->echo_state = (SpeexEchoState *)ptr;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8006808:	e0d1      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_ECHO_STATE:
      (*(SpeexEchoState **)ptr) = (SpeexEchoState *)st->echo_state;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	601a      	str	r2, [r3, #0]
      break;
 8006812:	e0cc      	b.n	80069ae <Preprocess_setup+0x64e>

      #ifndef FIXED_POINT
    case SPEEX_PREPROCESS_GET_AGC_LOUDNESS:
      *ptr_int32 = (spx_int32_t)powf(st->loudness, 1.0f / LOUDNESS_EXP);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800681a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800681e:	edd3 7a00 	vldr	s15, [r3]
 8006822:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 80067cc <Preprocess_setup+0x46c>
 8006826:	eeb0 0a67 	vmov.f32	s0, s15
 800682a:	f00b fde3 	bl	80123f4 <powf>
 800682e:	eef0 7a40 	vmov.f32	s15, s0
 8006832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006836:	ee17 2a90 	vmov	r2, s15
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	601a      	str	r2, [r3, #0]
      break;
 800683e:	e0b6      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_AGC_GAIN:
      *ptr_int32 = (spx_int32_t)floorf(.5f + 8.6858f * logf(st->agc_gain));
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006846:	f203 4374 	addw	r3, r3, #1140	; 0x474
 800684a:	edd3 7a00 	vldr	s15, [r3]
 800684e:	eeb0 0a67 	vmov.f32	s0, s15
 8006852:	f00b fda1 	bl	8012398 <logf>
 8006856:	eef0 7a40 	vmov.f32	s15, s0
 800685a:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 80067d0 <Preprocess_setup+0x470>
 800685e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006862:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006866:	ee77 7a87 	vadd.f32	s15, s15, s14
 800686a:	eeb0 0a67 	vmov.f32	s0, s15
 800686e:	f00b ff5b 	bl	8012728 <floorf>
 8006872:	eef0 7a40 	vmov.f32	s15, s0
 8006876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800687a:	ee17 2a90 	vmov	r2, s15
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	601a      	str	r2, [r3, #0]
      break;
 8006882:	e094      	b.n	80069ae <Preprocess_setup+0x64e>
      #endif

    case SPEEX_PREPROCESS_GET_PSD_SIZE:
    case SPEEX_PREPROCESS_GET_NOISE_PSD_SIZE:
      *ptr_int32 = st->ps_size;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	601a      	str	r2, [r3, #0]
      break;
 800688c:	e08f      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_PSD:
      for (i = 0; i < st->ps_size; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	e014      	b.n	80068be <Preprocess_setup+0x55e>
      {
        ptr_int32[i] = (spx_int32_t) st->ps[i];
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	3304      	adds	r3, #4
 80068a2:	edd3 7a00 	vldr	s15, [r3]
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068b2:	ee17 2a90 	vmov	r2, s15
 80068b6:	601a      	str	r2, [r3, #0]
      for (i = 0; i < st->ps_size; i++)
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	3301      	adds	r3, #1
 80068bc:	623b      	str	r3, [r7, #32]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	6a3a      	ldr	r2, [r7, #32]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	dbe5      	blt.n	8006894 <Preprocess_setup+0x534>
      }
      break;
 80068c8:	e071      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_NOISE_PSD:
      for (i = 0; i < st->ps_size; i++)
 80068ca:	2300      	movs	r3, #0
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	e014      	b.n	80068fa <Preprocess_setup+0x59a>
      {
        ptr_int32[i] = (spx_int32_t) PSHR32(st->noise[i], NOISE_SHIFT);
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	3304      	adds	r3, #4
 80068de:	edd3 7a00 	vldr	s15, [r3]
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068ee:	ee17 2a90 	vmov	r2, s15
 80068f2:	601a      	str	r2, [r3, #0]
      for (i = 0; i < st->ps_size; i++)
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	3301      	adds	r3, #1
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	6a3a      	ldr	r2, [r7, #32]
 8006900:	429a      	cmp	r2, r3
 8006902:	dbe5      	blt.n	80068d0 <Preprocess_setup+0x570>
      }
      break;
 8006904:	e053      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_PROB:
      *ptr_int32 = (spx_int32_t)MULT16_16_Q15(st->speech_prob, 100);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800690c:	ed1f 7a4f 	vldr	s14, [pc, #-316]	; 80067d4 <Preprocess_setup+0x474>
 8006910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006918:	ee17 2a90 	vmov	r2, s15
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	601a      	str	r2, [r3, #0]
      break;
 8006920:	e045      	b.n	80069ae <Preprocess_setup+0x64e>

      #ifndef FIXED_POINT
    case SPEEX_PREPROCESS_SET_AGC_TARGET:
      st->agc_level = (*(spx_int32_t *)ptr);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006934:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
      if (st->agc_level < 1)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800693e:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8006942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800694a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800694e:	d507      	bpl.n	8006960 <Preprocess_setup+0x600>
      {
        st->agc_level = 1;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006956:	461a      	mov	r2, r3
 8006958:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800695c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      }
      if (st->agc_level > 32768)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006966:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 800696a:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 80067d8 <Preprocess_setup+0x478>
 800696e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006976:	dc00      	bgt.n	800697a <Preprocess_setup+0x61a>
      {
        st->agc_level = 32768;
      }
      break;
 8006978:	e019      	b.n	80069ae <Preprocess_setup+0x64e>
        st->agc_level = 32768;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006980:	461a      	mov	r2, r3
 8006982:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8006986:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      break;
 800698a:	e010      	b.n	80069ae <Preprocess_setup+0x64e>

    case SPEEX_PREPROCESS_GET_AGC_TARGET:
      (*(spx_int32_t *)ptr) = (spx_int32_t)st->agc_level;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006992:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8006996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800699a:	ee17 2a90 	vmov	r2, s15
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
      break;
 80069a2:	e004      	b.n	80069ae <Preprocess_setup+0x64e>
      #endif

    default:
      ret = -1;
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069aa:	e000      	b.n	80069ae <Preprocess_setup+0x64e>
      break;
 80069ac:	bf00      	nop
  }
  return ret;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3728      	adds	r7, #40	; 0x28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <drfti1>:

#include "defines_ec.h"


static void drfti1(int n, float *wa, int32_t *ifac)
{
 80069b8:	b590      	push	{r4, r7, lr}
 80069ba:	b09b      	sub	sp, #108	; 0x6c
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  static int ntryh[4] = { 4, 2, 3, 5 };
  static float tpi = 6.28318530717958648f;
  float arg, argh, argld, fi;
  int ntry = 0, i, j = -1;
 80069c4:	2300      	movs	r3, #0
 80069c6:	663b      	str	r3, [r7, #96]	; 0x60
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295
 80069cc:	65bb      	str	r3, [r7, #88]	; 0x58
  int k1, l1, l2, ib;
  int ld, ii, ip, is, nq, nr;
  int ido, ipm, nfm1;
  int nl = n;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	643b      	str	r3, [r7, #64]	; 0x40
  int nf = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c

L101:
  j++;
 80069d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069d8:	3301      	adds	r3, #1
 80069da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (j < 4)
 80069dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069de:	2b03      	cmp	r3, #3
 80069e0:	dc05      	bgt.n	80069ee <drfti1+0x36>
  {
    ntry = ntryh[j];
 80069e2:	4a77      	ldr	r2, [pc, #476]	; (8006bc0 <drfti1+0x208>)
 80069e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ea:	663b      	str	r3, [r7, #96]	; 0x60
 80069ec:	e002      	b.n	80069f4 <drfti1+0x3c>
  }
  else
  {
    ntry += 2;
 80069ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069f0:	3302      	adds	r3, #2
 80069f2:	663b      	str	r3, [r7, #96]	; 0x60
  }

L104:
  nq = nl / ntry;
 80069f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80069fc:	63bb      	str	r3, [r7, #56]	; 0x38
  nr = nl - ntry * nq;
 80069fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34
  if (nr != 0) { goto L101; }
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d000      	beq.n	8006a14 <drfti1+0x5c>
 8006a12:	e7e0      	b.n	80069d6 <drfti1+0x1e>

  nf++;
 8006a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a16:	3301      	adds	r3, #1
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  ifac[nf + 1] = ntry;
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4413      	add	r3, r2
 8006a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a26:	601a      	str	r2, [r3, #0]
  nl = nq;
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	643b      	str	r3, [r7, #64]	; 0x40
  if (ntry != 2) { goto L107; }
 8006a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d121      	bne.n	8006a76 <drfti1+0xbe>
  if (nf == 1) { goto L107; }
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d020      	beq.n	8006a7a <drfti1+0xc2>

  for (i = 1; i < nf; i++)
 8006a38:	2301      	movs	r3, #1
 8006a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a3c:	e012      	b.n	8006a64 <drfti1+0xac>
  {
    ib = nf - i + 1;
 8006a3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	3301      	adds	r3, #1
 8006a46:	633b      	str	r3, [r7, #48]	; 0x30
    ifac[ib + 1] = ifac[ib];
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	441a      	add	r2, r3
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	3301      	adds	r3, #1
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	440b      	add	r3, r1
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	601a      	str	r2, [r3, #0]
  for (i = 1; i < nf; i++)
 8006a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a60:	3301      	adds	r3, #1
 8006a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	dbe8      	blt.n	8006a3e <drfti1+0x86>
  }
  ifac[2] = 2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	2202      	movs	r2, #2
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e002      	b.n	8006a7c <drfti1+0xc4>
  if (ntry != 2) { goto L107; }
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <drfti1+0xc4>
  if (nf == 1) { goto L107; }
 8006a7a:	bf00      	nop

L107:
  if (nl != 1) { goto L104; }
 8006a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d000      	beq.n	8006a84 <drfti1+0xcc>
 8006a82:	e7b7      	b.n	80069f4 <drfti1+0x3c>
  ifac[0] = n;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	601a      	str	r2, [r3, #0]
  ifac[1] = nf;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a90:	601a      	str	r2, [r3, #0]
  argh = tpi / n;
 8006a92:	4b4c      	ldr	r3, [pc, #304]	; (8006bc4 <drfti1+0x20c>)
 8006a94:	edd3 6a00 	vldr	s13, [r3]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aa6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  is = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	647b      	str	r3, [r7, #68]	; 0x44
  nfm1 = nf - 1;
 8006aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  l1 = 1;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	653b      	str	r3, [r7, #80]	; 0x50

  if (nfm1 == 0) { return; }
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d07c      	beq.n	8006bb8 <drfti1+0x200>

  for (k1 = 0; k1 < nfm1; k1++)
 8006abe:	2300      	movs	r3, #0
 8006ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac2:	e074      	b.n	8006bae <drfti1+0x1f6>
  {
    ip = ifac[k1 + 2];
 8006ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac6:	3302      	adds	r3, #2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
    ld = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
    l2 = l1 * ip;
 8006ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	623b      	str	r3, [r7, #32]
    ido = n / l2;
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ae8:	61fb      	str	r3, [r7, #28]
    ipm = ip - 1;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	3b01      	subs	r3, #1
 8006aee:	61bb      	str	r3, [r7, #24]

    for (j = 0; j < ipm; j++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006af4:	e052      	b.n	8006b9c <drfti1+0x1e4>
    {
      ld += l1;
 8006af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006afa:	4413      	add	r3, r2
 8006afc:	64fb      	str	r3, [r7, #76]	; 0x4c
      i = is;
 8006afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b00:	65fb      	str	r3, [r7, #92]	; 0x5c
      argld = (float)ld * argh;
 8006b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b0c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b14:	edc7 7a05 	vstr	s15, [r7, #20]
      fi = 0.f;
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	667b      	str	r3, [r7, #100]	; 0x64
      for (ii = 2; ii < ido; ii += 2)
 8006b1e:	2302      	movs	r3, #2
 8006b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b22:	e030      	b.n	8006b86 <drfti1+0x1ce>
      {
        fi += 1.f;
 8006b24:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b30:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        arg = fi * argld;
 8006b34:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006b38:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b40:	edc7 7a04 	vstr	s15, [r7, #16]
        wa[i] = cosf(arg);  i++;
 8006b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	18d4      	adds	r4, r2, r3
 8006b4c:	ed97 0a04 	vldr	s0, [r7, #16]
 8006b50:	f00b fcc6 	bl	80124e0 <cosf>
 8006b54:	eef0 7a40 	vmov.f32	s15, s0
 8006b58:	edc4 7a00 	vstr	s15, [r4]
 8006b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5e:	3301      	adds	r3, #1
 8006b60:	65fb      	str	r3, [r7, #92]	; 0x5c
        wa[i] = sinf(arg);  i++;
 8006b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	18d4      	adds	r4, r2, r3
 8006b6a:	ed97 0a04 	vldr	s0, [r7, #16]
 8006b6e:	f00b fcfb 	bl	8012568 <sinf>
 8006b72:	eef0 7a40 	vmov.f32	s15, s0
 8006b76:	edc4 7a00 	vstr	s15, [r4]
 8006b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (ii = 2; ii < ido; ii += 2)
 8006b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b82:	3302      	adds	r3, #2
 8006b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	dbca      	blt.n	8006b24 <drfti1+0x16c>
      }
      is += ido;
 8006b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	647b      	str	r3, [r7, #68]	; 0x44
    for (j = 0; j < ipm; j++)
 8006b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b98:	3301      	adds	r3, #1
 8006b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	dba8      	blt.n	8006af6 <drfti1+0x13e>
    }
    l1 = l2;
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	653b      	str	r3, [r7, #80]	; 0x50
  for (k1 = 0; k1 < nfm1; k1++)
 8006ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006baa:	3301      	adds	r3, #1
 8006bac:	657b      	str	r3, [r7, #84]	; 0x54
 8006bae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	db86      	blt.n	8006ac4 <drfti1+0x10c>
 8006bb6:	e000      	b.n	8006bba <drfti1+0x202>
  if (nfm1 == 0) { return; }
 8006bb8:	bf00      	nop
  }
}
 8006bba:	376c      	adds	r7, #108	; 0x6c
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd90      	pop	{r4, r7, pc}
 8006bc0:	2000000c 	.word	0x2000000c
 8006bc4:	2000001c 	.word	0x2000001c

08006bc8 <fdrffti>:

static void fdrffti(int n, float *wsave, int32_t *ifac)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  if (n != 1) { drfti1(n, wsave + n, ifac); }
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d008      	beq.n	8006bec <fdrffti+0x24>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	4413      	add	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4619      	mov	r1, r3
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fee6 	bl	80069b8 <drfti1>
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <dradf2>:

static void dradf2(int ido, int l1, float *cc, float *ch, float *wa1)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b091      	sub	sp, #68	; 0x44
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  int i, k;
  float ti2, tr2;
  int t0, t1, t2, t3, t4, t5, t6;

  t1 = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
  t0 = (t2 = l1 * ido);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	61fb      	str	r3, [r7, #28]
  t3 = ido << 1;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (k = 0; k < l1; k++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1e:	e039      	b.n	8006c94 <dradf2+0xa0>
  {
    ch[t1 << 1] = cc[t1] + cc[t2];
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4413      	add	r3, r2
 8006c28:	ed93 7a00 	vldr	s14, [r3]
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4413      	add	r3, r2
 8006c34:	edd3 7a00 	vldr	s15, [r3]
 8006c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4413      	add	r3, r2
 8006c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c46:	edc3 7a00 	vstr	s15, [r3]
    ch[(t1 << 1) + t3 - 1] = cc[t1] - cc[t2];
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	ed93 7a00 	vldr	s14, [r3]
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	edd3 7a00 	vldr	s15, [r3]
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	005a      	lsls	r2, r3, #1
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	4413      	add	r3, r2
 8006c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	4413      	add	r3, r2
 8006c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c7a:	edc3 7a00 	vstr	s15, [r3]
    t1 += ido;
 8006c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
    t2 += ido;
 8006c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	3301      	adds	r3, #1
 8006c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	dbc1      	blt.n	8006c20 <dradf2+0x2c>
  }

  if (ido < 2) { return; }
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	f340 8125 	ble.w	8006eee <dradf2+0x2fa>
  if (ido == 2) { goto L105; }
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	f000 80e2 	beq.w	8006e70 <dradf2+0x27c>

  t1 = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
  t2 = t0;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cb8:	e0cc      	b.n	8006e54 <dradf2+0x260>
  {
    t3 = t2;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    t4 = (t1 << 1) + (ido << 1);
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	005a      	lsls	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	4413      	add	r3, r2
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    t5 = t1;
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
    t6 = t1 + t1;
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	623b      	str	r3, [r7, #32]
    for (i = 2; i < ido; i += 2)
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd8:	e0ac      	b.n	8006e34 <dradf2+0x240>
    {
      t3 += 2;
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	3302      	adds	r3, #2
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
      t4 -= 2;
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	3b02      	subs	r3, #2
 8006ce4:	62bb      	str	r3, [r7, #40]	; 0x28
      t5 += 2;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	3302      	adds	r3, #2
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
      t6 += 2;
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	3302      	adds	r3, #2
 8006cf0:	623b      	str	r3, [r7, #32]
      tr2 = wa1[i - 2] * cc[t3 - 1] + wa1[i - 1] * cc[t3];
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006cf8:	3b02      	subs	r3, #2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cfe:	4413      	add	r3, r2
 8006d00:	ed93 7a00 	vldr	s14, [r3]
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4413      	add	r3, r2
 8006d12:	edd3 7a00 	vldr	s15, [r3]
 8006d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d20:	3b01      	subs	r3, #1
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d26:	4413      	add	r3, r2
 8006d28:	edd3 6a00 	vldr	s13, [r3]
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	edd3 7a00 	vldr	s15, [r3]
 8006d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d40:	edc7 7a06 	vstr	s15, [r7, #24]
      ti2 = wa1[i - 2] * cc[t3] - wa1[i - 1] * cc[t3 - 1];
 8006d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d4a:	3b02      	subs	r3, #2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d50:	4413      	add	r3, r2
 8006d52:	ed93 7a00 	vldr	s14, [r3]
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	edd3 7a00 	vldr	s15, [r3]
 8006d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d72:	4413      	add	r3, r2
 8006d74:	edd3 6a00 	vldr	s13, [r3]
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4413      	add	r3, r2
 8006d86:	edd3 7a00 	vldr	s15, [r3]
 8006d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d92:	edc7 7a05 	vstr	s15, [r7, #20]
      ch[t6] = cc[t5] + ti2;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	ed93 7a00 	vldr	s14, [r3]
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	4413      	add	r3, r2
 8006daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006db2:	edc3 7a00 	vstr	s15, [r3]
      ch[t4] = ti2 - cc[t5];
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	edd3 7a00 	vldr	s15, [r3]
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	4413      	add	r3, r2
 8006dca:	ed97 7a05 	vldr	s14, [r7, #20]
 8006dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dd2:	edc3 7a00 	vstr	s15, [r3]
      ch[t6 - 1] = cc[t5 - 1] + tr2;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	4413      	add	r3, r2
 8006de4:	ed93 7a00 	vldr	s14, [r3]
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006dee:	3b01      	subs	r3, #1
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	edd7 7a06 	vldr	s15, [r7, #24]
 8006dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dfe:	edc3 7a00 	vstr	s15, [r3]
      ch[t4 - 1] = cc[t5 - 1] - tr2;
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4413      	add	r3, r2
 8006e10:	ed93 7a00 	vldr	s14, [r3]
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	4413      	add	r3, r2
 8006e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e2a:	edc3 7a00 	vstr	s15, [r3]
    for (i = 2; i < ido; i += 2)
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e30:	3302      	adds	r3, #2
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	f6ff af4e 	blt.w	8006cda <dradf2+0xe6>
    }
    t1 += ido;
 8006e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
    t2 += ido;
 8006e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	3301      	adds	r3, #1
 8006e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	f6ff af2e 	blt.w	8006cba <dradf2+0xc6>
  }

  if (ido % 2 == 1) { return; }
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	bfb8      	it	lt
 8006e68:	425b      	neglt	r3, r3
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d041      	beq.n	8006ef2 <dradf2+0x2fe>

L105:
 8006e6e:	e000      	b.n	8006e72 <dradf2+0x27e>
  if (ido == 2) { goto L105; }
 8006e70:	bf00      	nop
  t3 = (t2 = (t1 = ido) - 1);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  t2 += t0;
 8006e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e8c:	e02a      	b.n	8006ee4 <dradf2+0x2f0>
  {
    ch[t1] = -cc[t2];
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	4413      	add	r3, r2
 8006e96:	edd3 7a00 	vldr	s15, [r3]
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	eef1 7a67 	vneg.f32	s15, s15
 8006ea6:	edc3 7a00 	vstr	s15, [r3]
    ch[t1 - 1] = cc[t3];
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	441a      	add	r2, r3
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	440b      	add	r3, r1
 8006ec0:	6812      	ldr	r2, [r2, #0]
 8006ec2:	601a      	str	r2, [r3, #0]
    t1 += ido << 1;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eca:	4413      	add	r3, r2
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
    t2 += ido;
 8006ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	633b      	str	r3, [r7, #48]	; 0x30
    t3 += ido;
 8006ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (k = 0; k < l1; k++)
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	dbd0      	blt.n	8006e8e <dradf2+0x29a>
 8006eec:	e002      	b.n	8006ef4 <dradf2+0x300>
  if (ido < 2) { return; }
 8006eee:	bf00      	nop
 8006ef0:	e000      	b.n	8006ef4 <dradf2+0x300>
  if (ido % 2 == 1) { return; }
 8006ef2:	bf00      	nop
  }
}
 8006ef4:	3744      	adds	r7, #68	; 0x44
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <dradf4>:

static void dradf4(int ido, int l1, float *cc, float *ch, float *wa1,
                   float *wa2, float *wa3)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b09d      	sub	sp, #116	; 0x74
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
  static float hsqt2 = .70710678118654752f;
  int i, k, t0, t1, t2, t3, t4, t5, t6;
  float ci2, ci3, ci4, cr2, cr3, cr4, ti1, ti2, ti3, ti4, tr1, tr2, tr3, tr4;
  t0 = l1 * ido;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	64fb      	str	r3, [r7, #76]	; 0x4c

  t1 = t0;
 8006f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1a:	667b      	str	r3, [r7, #100]	; 0x64
  t4 = t1 << 1;
 8006f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	65bb      	str	r3, [r7, #88]	; 0x58
  t2 = t1 + (t1 << 1);
 8006f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f28:	4413      	add	r3, r2
 8006f2a:	663b      	str	r3, [r7, #96]	; 0x60
  t3 = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	65fb      	str	r3, [r7, #92]	; 0x5c

  for (k = 0; k < l1; k++)
 8006f30:	2300      	movs	r3, #0
 8006f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f34:	e083      	b.n	800703e <dradf4+0x13e>
  {
    tr1 = cc[t1] + cc[t2];
 8006f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	ed93 7a00 	vldr	s14, [r3]
 8006f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4413      	add	r3, r2
 8006f4a:	edd3 7a00 	vldr	s15, [r3]
 8006f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f52:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    tr2 = cc[t3] + cc[t4];
 8006f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	ed93 7a00 	vldr	s14, [r3]
 8006f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	4413      	add	r3, r2
 8006f6a:	edd3 7a00 	vldr	s15, [r3]
 8006f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f72:	edc7 7a06 	vstr	s15, [r7, #24]

    ch[t5 = t3 << 2] = tr1 + tr2;
 8006f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	4413      	add	r3, r2
 8006f84:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006f88:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f90:	edc3 7a00 	vstr	s15, [r3]
    ch[(ido << 2) + t5 - 1] = tr2 - tr1;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	009a      	lsls	r2, r3, #2
 8006f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	ed97 7a06 	vldr	s14, [r7, #24]
 8006fac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fb4:	edc3 7a00 	vstr	s15, [r3]
    ch[(t5 += (ido << 1)) - 1] = cc[t3] - cc[t4];
 8006fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	ed93 7a00 	vldr	s14, [r3]
 8006fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	edd3 7a00 	vldr	s15, [r3]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fd6:	4413      	add	r3, r2
 8006fd8:	657b      	str	r3, [r7, #84]	; 0x54
 8006fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fec:	edc3 7a00 	vstr	s15, [r3]
    ch[t5] = cc[t2] - cc[t1];
 8006ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	ed93 7a00 	vldr	s14, [r3]
 8006ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	edd3 7a00 	vldr	s15, [r3]
 8007008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	4413      	add	r3, r2
 8007010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007014:	edc3 7a00 	vstr	s15, [r3]

    t1 += ido;
 8007018:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	667b      	str	r3, [r7, #100]	; 0x64
    t2 += ido;
 8007020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	663b      	str	r3, [r7, #96]	; 0x60
    t3 += ido;
 8007028:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	65fb      	str	r3, [r7, #92]	; 0x5c
    t4 += ido;
 8007030:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	65bb      	str	r3, [r7, #88]	; 0x58
  for (k = 0; k < l1; k++)
 8007038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800703a:	3301      	adds	r3, #1
 800703c:	66bb      	str	r3, [r7, #104]	; 0x68
 800703e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	429a      	cmp	r2, r3
 8007044:	f6ff af77 	blt.w	8006f36 <dradf4+0x36>
  }

  if (ido < 2) { return; }
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b01      	cmp	r3, #1
 800704c:	f340 82bf 	ble.w	80075ce <dradf4+0x6ce>
  if (ido == 2) { goto L105; }
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b02      	cmp	r3, #2
 8007054:	f000 820a 	beq.w	800746c <dradf4+0x56c>


  t1 = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	667b      	str	r3, [r7, #100]	; 0x64
  for (k = 0; k < l1; k++)
 800705c:	2300      	movs	r3, #0
 800705e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007060:	e1f8      	b.n	8007454 <dradf4+0x554>
  {
    t2 = t1;
 8007062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007064:	663b      	str	r3, [r7, #96]	; 0x60
    t4 = t1 << 2;
 8007066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	65bb      	str	r3, [r7, #88]	; 0x58
    t5 = (t6 = ido << 1) + t4;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	653b      	str	r3, [r7, #80]	; 0x50
 8007072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007076:	4413      	add	r3, r2
 8007078:	657b      	str	r3, [r7, #84]	; 0x54
    for (i = 2; i < ido; i += 2)
 800707a:	2302      	movs	r3, #2
 800707c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800707e:	e1dd      	b.n	800743c <dradf4+0x53c>
    {
      t3 = (t2 += 2);
 8007080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007082:	3302      	adds	r3, #2
 8007084:	663b      	str	r3, [r7, #96]	; 0x60
 8007086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007088:	65fb      	str	r3, [r7, #92]	; 0x5c
      t4 += 2;
 800708a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800708c:	3302      	adds	r3, #2
 800708e:	65bb      	str	r3, [r7, #88]	; 0x58
      t5 -= 2;
 8007090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007092:	3b02      	subs	r3, #2
 8007094:	657b      	str	r3, [r7, #84]	; 0x54

      t3 += t0;
 8007096:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709a:	4413      	add	r3, r2
 800709c:	65fb      	str	r3, [r7, #92]	; 0x5c
      cr2 = wa1[i - 2] * cc[t3 - 1] + wa1[i - 1] * cc[t3];
 800709e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070a4:	3b02      	subs	r3, #2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070aa:	4413      	add	r3, r2
 80070ac:	ed93 7a00 	vldr	s14, [r3]
 80070b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070b6:	3b01      	subs	r3, #1
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	edd3 7a00 	vldr	s15, [r3]
 80070c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070cc:	3b01      	subs	r3, #1
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070d2:	4413      	add	r3, r2
 80070d4:	edd3 6a00 	vldr	s13, [r3]
 80070d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	edd3 7a00 	vldr	s15, [r3]
 80070e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      ci2 = wa1[i - 2] * cc[t3] - wa1[i - 1] * cc[t3 - 1];
 80070f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070f6:	3b02      	subs	r3, #2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070fc:	4413      	add	r3, r2
 80070fe:	ed93 7a00 	vldr	s14, [r3]
 8007102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	4413      	add	r3, r2
 800710a:	edd3 7a00 	vldr	s15, [r3]
 800710e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007118:	3b01      	subs	r3, #1
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800711e:	4413      	add	r3, r2
 8007120:	edd3 6a00 	vldr	s13, [r3]
 8007124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007126:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800712a:	3b01      	subs	r3, #1
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	edd3 7a00 	vldr	s15, [r3]
 8007136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800713a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800713e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      t3 += t0;
 8007142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007146:	4413      	add	r3, r2
 8007148:	65fb      	str	r3, [r7, #92]	; 0x5c
      cr3 = wa2[i - 2] * cc[t3 - 1] + wa2[i - 1] * cc[t3];
 800714a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007150:	3b02      	subs	r3, #2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007156:	4413      	add	r3, r2
 8007158:	ed93 7a00 	vldr	s14, [r3]
 800715c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800715e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007162:	3b01      	subs	r3, #1
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4413      	add	r3, r2
 800716a:	edd3 7a00 	vldr	s15, [r3]
 800716e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007178:	3b01      	subs	r3, #1
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800717e:	4413      	add	r3, r2
 8007180:	edd3 6a00 	vldr	s13, [r3]
 8007184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	edd3 7a00 	vldr	s15, [r3]
 8007190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007198:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      ci3 = wa2[i - 2] * cc[t3] - wa2[i - 1] * cc[t3 - 1];
 800719c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071a2:	3b02      	subs	r3, #2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80071a8:	4413      	add	r3, r2
 80071aa:	ed93 7a00 	vldr	s14, [r3]
 80071ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	edd3 7a00 	vldr	s15, [r3]
 80071ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071c4:	3b01      	subs	r3, #1
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80071ca:	4413      	add	r3, r2
 80071cc:	edd3 6a00 	vldr	s13, [r3]
 80071d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071d6:	3b01      	subs	r3, #1
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	edd3 7a00 	vldr	s15, [r3]
 80071e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
      t3 += t0;
 80071ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f2:	4413      	add	r3, r2
 80071f4:	65fb      	str	r3, [r7, #92]	; 0x5c
      cr4 = wa3[i - 2] * cc[t3 - 1] + wa3[i - 1] * cc[t3];
 80071f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071fc:	3b02      	subs	r3, #2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007204:	4413      	add	r3, r2
 8007206:	ed93 7a00 	vldr	s14, [r3]
 800720a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800720c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007210:	3b01      	subs	r3, #1
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	4413      	add	r3, r2
 8007218:	edd3 7a00 	vldr	s15, [r3]
 800721c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007222:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007226:	3b01      	subs	r3, #1
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800722e:	4413      	add	r3, r2
 8007230:	edd3 6a00 	vldr	s13, [r3]
 8007234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4413      	add	r3, r2
 800723c:	edd3 7a00 	vldr	s15, [r3]
 8007240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007248:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      ci4 = wa3[i - 2] * cc[t3] - wa3[i - 1] * cc[t3 - 1];
 800724c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007252:	3b02      	subs	r3, #2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800725a:	4413      	add	r3, r2
 800725c:	ed93 7a00 	vldr	s14, [r3]
 8007260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4413      	add	r3, r2
 8007268:	edd3 7a00 	vldr	s15, [r3]
 800726c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007272:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007276:	3b01      	subs	r3, #1
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800727e:	4413      	add	r3, r2
 8007280:	edd3 6a00 	vldr	s13, [r3]
 8007284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800728a:	3b01      	subs	r3, #1
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	4413      	add	r3, r2
 8007292:	edd3 7a00 	vldr	s15, [r3]
 8007296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800729a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800729e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

      tr1 = cr2 + cr4;
 80072a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80072a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80072aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072ae:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      tr4 = cr4 - cr2;
 80072b2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80072b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80072ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      ti1 = ci2 + ci4;
 80072c2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80072c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80072ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      ti4 = ci2 - ci4;
 80072d2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80072d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80072da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      ti2 = cc[t2] + ci3;
 80072e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	4413      	add	r3, r2
 80072ea:	edd3 7a00 	vldr	s15, [r3]
 80072ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80072f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072f6:	edc7 7a08 	vstr	s15, [r7, #32]
      ti3 = cc[t2] - ci3;
 80072fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4413      	add	r3, r2
 8007302:	ed93 7a00 	vldr	s14, [r3]
 8007306:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800730a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
      tr2 = cc[t2 - 1] + cr3;
 8007312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007318:	3b01      	subs	r3, #1
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4413      	add	r3, r2
 8007320:	edd3 7a00 	vldr	s15, [r3]
 8007324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800732c:	edc7 7a06 	vstr	s15, [r7, #24]
      tr3 = cc[t2 - 1] - cr3;
 8007330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007332:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007336:	3b01      	subs	r3, #1
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	ed93 7a00 	vldr	s14, [r3]
 8007342:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800734a:	edc7 7a05 	vstr	s15, [r7, #20]

      ch[t4 - 1] = tr1 + tr2;
 800734e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007350:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007354:	3b01      	subs	r3, #1
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	4413      	add	r3, r2
 800735c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007360:	edd7 7a06 	vldr	s15, [r7, #24]
 8007364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007368:	edc3 7a00 	vstr	s15, [r3]
      ch[t4] = ti1 + ti2;
 800736c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	4413      	add	r3, r2
 8007374:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007378:	edd7 7a08 	vldr	s15, [r7, #32]
 800737c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007380:	edc3 7a00 	vstr	s15, [r3]

      ch[t5 - 1] = tr3 - ti4;
 8007384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007386:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800738a:	3b01      	subs	r3, #1
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	4413      	add	r3, r2
 8007392:	ed97 7a05 	vldr	s14, [r7, #20]
 8007396:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800739a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800739e:	edc3 7a00 	vstr	s15, [r3]
      ch[t5] = tr4 - ti3;
 80073a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4413      	add	r3, r2
 80073aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80073ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80073b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073b6:	edc3 7a00 	vstr	s15, [r3]

      ch[t4 + t6 - 1] = ti4 + tr3;
 80073ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073be:	4413      	add	r3, r2
 80073c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073c4:	3b01      	subs	r3, #1
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	4413      	add	r3, r2
 80073cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80073d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80073d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073d8:	edc3 7a00 	vstr	s15, [r3]
      ch[t4 + t6] = tr4 + ti3;
 80073dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	4413      	add	r3, r2
 80073e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80073ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80073f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073f4:	edc3 7a00 	vstr	s15, [r3]

      ch[t5 + t6 - 1] = tr2 - tr1;
 80073f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fc:	4413      	add	r3, r2
 80073fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007402:	3b01      	subs	r3, #1
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	4413      	add	r3, r2
 800740a:	ed97 7a06 	vldr	s14, [r7, #24]
 800740e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007416:	edc3 7a00 	vstr	s15, [r3]
      ch[t5 + t6] = ti1 - ti2;
 800741a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800741c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4413      	add	r3, r2
 8007426:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800742a:	edd7 7a08 	vldr	s15, [r7, #32]
 800742e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007432:	edc3 7a00 	vstr	s15, [r3]
    for (i = 2; i < ido; i += 2)
 8007436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007438:	3302      	adds	r3, #2
 800743a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800743c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	429a      	cmp	r2, r3
 8007442:	f6ff ae1d 	blt.w	8007080 <dradf4+0x180>
    }
    t1 += ido;
 8007446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	667b      	str	r3, [r7, #100]	; 0x64
  for (k = 0; k < l1; k++)
 800744e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007450:	3301      	adds	r3, #1
 8007452:	66bb      	str	r3, [r7, #104]	; 0x68
 8007454:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	429a      	cmp	r2, r3
 800745a:	f6ff ae02 	blt.w	8007062 <dradf4+0x162>
  }
  if ((ido & 1) != 0) { return; }
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 80b4 	bne.w	80075d2 <dradf4+0x6d2>

L105:
 800746a:	e000      	b.n	800746e <dradf4+0x56e>
  if (ido == 2) { goto L105; }
 800746c:	bf00      	nop

  t2 = (t1 = t0 + ido - 1) + (t0 << 1);
 800746e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	3b01      	subs	r3, #1
 8007476:	667b      	str	r3, [r7, #100]	; 0x64
 8007478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800747e:	4413      	add	r3, r2
 8007480:	663b      	str	r3, [r7, #96]	; 0x60
  t3 = ido << 2;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	65fb      	str	r3, [r7, #92]	; 0x5c
  t4 = ido;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	65bb      	str	r3, [r7, #88]	; 0x58
  t5 = ido << 1;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	657b      	str	r3, [r7, #84]	; 0x54
  t6 = ido;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	653b      	str	r3, [r7, #80]	; 0x50

  for (k = 0; k < l1; k++)
 8007496:	2300      	movs	r3, #0
 8007498:	66bb      	str	r3, [r7, #104]	; 0x68
 800749a:	e092      	b.n	80075c2 <dradf4+0x6c2>
  {
    ti1 = -hsqt2 * (cc[t1] + cc[t2]);
 800749c:	4b50      	ldr	r3, [pc, #320]	; (80075e0 <dradf4+0x6e0>)
 800749e:	edd3 7a00 	vldr	s15, [r3]
 80074a2:	eeb1 7a67 	vneg.f32	s14, s15
 80074a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	edd3 6a00 	vldr	s13, [r3]
 80074b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	4413      	add	r3, r2
 80074ba:	edd3 7a00 	vldr	s15, [r3]
 80074be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tr1 = hsqt2 * (cc[t1] - cc[t2]);
 80074ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	4413      	add	r3, r2
 80074d2:	ed93 7a00 	vldr	s14, [r3]
 80074d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	edd3 7a00 	vldr	s15, [r3]
 80074e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074e6:	4b3e      	ldr	r3, [pc, #248]	; (80075e0 <dradf4+0x6e0>)
 80074e8:	edd3 7a00 	vldr	s15, [r3]
 80074ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    ch[t4 - 1] = tr1 + cc[t6 - 1];
 80074f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074fa:	3b01      	subs	r3, #1
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	4413      	add	r3, r2
 8007502:	ed93 7a00 	vldr	s14, [r3]
 8007506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007508:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800750c:	3b01      	subs	r3, #1
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	4413      	add	r3, r2
 8007514:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800751c:	edc3 7a00 	vstr	s15, [r3]
    ch[t4 + t5 - 1] = cc[t6 - 1] - tr1;
 8007520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007526:	3b01      	subs	r3, #1
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	ed93 7a00 	vldr	s14, [r3]
 8007532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007536:	4413      	add	r3, r2
 8007538:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800753c:	3b01      	subs	r3, #1
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	4413      	add	r3, r2
 8007544:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800754c:	edc3 7a00 	vstr	s15, [r3]

    ch[t4] = ti1 - cc[t1 + t0];
 8007550:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	4413      	add	r3, r2
 800755c:	edd3 7a00 	vldr	s15, [r3]
 8007560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	4413      	add	r3, r2
 8007568:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800756c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007570:	edc3 7a00 	vstr	s15, [r3]
    ch[t4 + t5] = ti1 + cc[t1 + t0];
 8007574:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	4413      	add	r3, r2
 8007580:	ed93 7a00 	vldr	s14, [r3]
 8007584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	4413      	add	r3, r2
 8007590:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007598:	edc3 7a00 	vstr	s15, [r3]

    t1 += ido;
 800759c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	667b      	str	r3, [r7, #100]	; 0x64
    t2 += ido;
 80075a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	663b      	str	r3, [r7, #96]	; 0x60
    t4 += t3;
 80075ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b0:	4413      	add	r3, r2
 80075b2:	65bb      	str	r3, [r7, #88]	; 0x58
    t6 += ido;
 80075b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	653b      	str	r3, [r7, #80]	; 0x50
  for (k = 0; k < l1; k++)
 80075bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075be:	3301      	adds	r3, #1
 80075c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80075c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	f6ff af68 	blt.w	800749c <dradf4+0x59c>
 80075cc:	e002      	b.n	80075d4 <dradf4+0x6d4>
  if (ido < 2) { return; }
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <dradf4+0x6d4>
  if ((ido & 1) != 0) { return; }
 80075d2:	bf00      	nop
  }
}
 80075d4:	3774      	adds	r7, #116	; 0x74
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000020 	.word	0x20000020

080075e4 <dradfg>:

static void dradfg(int ido, int ip, int l1, int idl1, float *cc, float *c1,
                   float *c2, float *ch, float *ch2, float *wa)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b0a6      	sub	sp, #152	; 0x98
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  float dc2, ai1, ai2, ar1, ar2, ds2;
  int nbd;
  float dcp, arg, dsp, ar1h, ar2h;
  int idp2, ipp2;

  arg = tpi / (float)ip;
 80075f2:	4bb0      	ldr	r3, [pc, #704]	; (80078b4 <dradfg+0x2d0>)
 80075f4:	edd3 6a00 	vldr	s13, [r3]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007606:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  dcp = cosf(arg);
 800760a:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800760e:	f00a ff67 	bl	80124e0 <cosf>
 8007612:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
  dsp = sinf(arg);
 8007616:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800761a:	f00a ffa5 	bl	8012568 <sinf>
 800761e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
  ipph = (ip + 1) >> 1;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	3301      	adds	r3, #1
 8007626:	105b      	asrs	r3, r3, #1
 8007628:	63bb      	str	r3, [r7, #56]	; 0x38
  ipp2 = ip;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
  idp2 = ido;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	633b      	str	r3, [r7, #48]	; 0x30
  nbd = (ido - 1) >> 1;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3b01      	subs	r3, #1
 8007636:	105b      	asrs	r3, r3, #1
 8007638:	62fb      	str	r3, [r7, #44]	; 0x2c
  t0 = l1 * ido;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	fb02 f303 	mul.w	r3, r2, r3
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
  t10 = ip * ido;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	fb02 f303 	mul.w	r3, r2, r3
 800764c:	627b      	str	r3, [r7, #36]	; 0x24

  if (ido == 1) { goto L119; }
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b01      	cmp	r3, #1
 8007652:	f000 833d 	beq.w	8007cd0 <dradfg+0x6ec>
  for (ik = 0; ik < idl1; ik++) { ch2[ik] = c2[ik]; }
 8007656:	2300      	movs	r3, #0
 8007658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800765c:	e012      	b.n	8007684 <dradfg+0xa0>
 800765e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007668:	441a      	add	r2, r3
 800766a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007674:	440b      	add	r3, r1
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800767e:	3301      	adds	r3, #1
 8007680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007684:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	dbe7      	blt.n	800765e <dradfg+0x7a>

  t1 = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	67bb      	str	r3, [r7, #120]	; 0x78
  for (j = 1; j < ip; j++)
 8007692:	2301      	movs	r3, #1
 8007694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007698:	e028      	b.n	80076ec <dradfg+0x108>
  {
    t1 += t0;
 800769a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	4413      	add	r3, r2
 80076a0:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 = t1;
 80076a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a4:	677b      	str	r3, [r7, #116]	; 0x74
    for (k = 0; k < l1; k++)
 80076a6:	2300      	movs	r3, #0
 80076a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076ac:	e014      	b.n	80076d8 <dradfg+0xf4>
    {
      ch[t2] = c1[t2];
 80076ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80076b6:	441a      	add	r2, r3
 80076b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80076c0:	440b      	add	r3, r1
 80076c2:	6812      	ldr	r2, [r2, #0]
 80076c4:	601a      	str	r2, [r3, #0]
      t2 += ido;
 80076c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	677b      	str	r3, [r7, #116]	; 0x74
    for (k = 0; k < l1; k++)
 80076ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076d2:	3301      	adds	r3, #1
 80076d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	429a      	cmp	r2, r3
 80076e0:	dbe5      	blt.n	80076ae <dradfg+0xca>
  for (j = 1; j < ip; j++)
 80076e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076e6:	3301      	adds	r3, #1
 80076e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	dbd1      	blt.n	800769a <dradfg+0xb6>
    }
  }

  is = -ido;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	425b      	negs	r3, r3
 80076fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  t1 = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (nbd > l1)
 8007700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	f340 80b0 	ble.w	800786a <dradfg+0x286>
  {
    for (j = 1; j < ip; j++)
 800770a:	2301      	movs	r3, #1
 800770c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007710:	e0a4      	b.n	800785c <dradfg+0x278>
    {
      t1 += t0;
 8007712:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	4413      	add	r3, r2
 8007718:	67bb      	str	r3, [r7, #120]	; 0x78
      is += ido;
 800771a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	67fb      	str	r3, [r7, #124]	; 0x7c
      t2 = -ido + t1;
 8007722:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	677b      	str	r3, [r7, #116]	; 0x74
      for (k = 0; k < l1; k++)
 800772a:	2300      	movs	r3, #0
 800772c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007730:	e089      	b.n	8007846 <dradfg+0x262>
      {
        idij = is - 1;
 8007732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007734:	3b01      	subs	r3, #1
 8007736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        t2 += ido;
 800773a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	677b      	str	r3, [r7, #116]	; 0x74
        t3 = t2;
 8007742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007744:	673b      	str	r3, [r7, #112]	; 0x70
        for (i = 2; i < ido; i += 2)
 8007746:	2302      	movs	r3, #2
 8007748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800774c:	e071      	b.n	8007832 <dradfg+0x24e>
        {
          idij += 2;
 800774e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007752:	3302      	adds	r3, #2
 8007754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          t3 += 2;
 8007758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800775a:	3302      	adds	r3, #2
 800775c:	673b      	str	r3, [r7, #112]	; 0x70
          ch[t3 - 1] = wa[idij - 1] * c1[t3 - 1] + wa[idij] * c1[t3];
 800775e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007766:	3b01      	subs	r3, #1
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800776e:	4413      	add	r3, r2
 8007770:	ed93 7a00 	vldr	s14, [r3]
 8007774:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007776:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800777a:	3b01      	subs	r3, #1
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007782:	4413      	add	r3, r2
 8007784:	edd3 7a00 	vldr	s15, [r3]
 8007788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800778c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007796:	4413      	add	r3, r2
 8007798:	edd3 6a00 	vldr	s13, [r3]
 800779c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80077a4:	4413      	add	r3, r2
 80077a6:	edd3 7a00 	vldr	s15, [r3]
 80077aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077b4:	3b01      	subs	r3, #1
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077bc:	4413      	add	r3, r2
 80077be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c2:	edc3 7a00 	vstr	s15, [r3]
          ch[t3] = wa[idij - 1] * c1[t3] - wa[idij] * c1[t3 - 1];
 80077c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077ce:	3b01      	subs	r3, #1
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077d6:	4413      	add	r3, r2
 80077d8:	ed93 7a00 	vldr	s14, [r3]
 80077dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80077e4:	4413      	add	r3, r2
 80077e6:	edd3 7a00 	vldr	s15, [r3]
 80077ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077f8:	4413      	add	r3, r2
 80077fa:	edd3 6a00 	vldr	s13, [r3]
 80077fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007804:	3b01      	subs	r3, #1
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800780c:	4413      	add	r3, r2
 800780e:	edd3 7a00 	vldr	s15, [r3]
 8007812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800781e:	4413      	add	r3, r2
 8007820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007824:	edc3 7a00 	vstr	s15, [r3]
        for (i = 2; i < ido; i += 2)
 8007828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800782c:	3302      	adds	r3, #2
 800782e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007832:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	429a      	cmp	r2, r3
 800783a:	db88      	blt.n	800774e <dradfg+0x16a>
      for (k = 0; k < l1; k++)
 800783c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007840:	3301      	adds	r3, #1
 8007842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007846:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	f6ff af70 	blt.w	8007732 <dradfg+0x14e>
    for (j = 1; j < ip; j++)
 8007852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007856:	3301      	adds	r3, #1
 8007858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800785c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	429a      	cmp	r2, r3
 8007864:	f6ff af55 	blt.w	8007712 <dradfg+0x12e>
 8007868:	e0af      	b.n	80079ca <dradfg+0x3e6>
    }
  }
  else
  {

    for (j = 1; j < ip; j++)
 800786a:	2301      	movs	r3, #1
 800786c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007870:	e0a5      	b.n	80079be <dradfg+0x3da>
    {
      is += ido;
 8007872:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	67fb      	str	r3, [r7, #124]	; 0x7c
      idij = is - 1;
 800787a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800787c:	3b01      	subs	r3, #1
 800787e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      t1 += t0;
 8007882:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	4413      	add	r3, r2
 8007888:	67bb      	str	r3, [r7, #120]	; 0x78
      t2 = t1;
 800788a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788c:	677b      	str	r3, [r7, #116]	; 0x74
      for (i = 2; i < ido; i += 2)
 800788e:	2302      	movs	r3, #2
 8007890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007894:	e088      	b.n	80079a8 <dradfg+0x3c4>
      {
        idij += 2;
 8007896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800789a:	3302      	adds	r3, #2
 800789c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        t2 += 2;
 80078a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a2:	3302      	adds	r3, #2
 80078a4:	677b      	str	r3, [r7, #116]	; 0x74
        t3 = t2;
 80078a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a8:	673b      	str	r3, [r7, #112]	; 0x70
        for (k = 0; k < l1; k++)
 80078aa:	2300      	movs	r3, #0
 80078ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078b0:	e070      	b.n	8007994 <dradfg+0x3b0>
 80078b2:	bf00      	nop
 80078b4:	20000024 	.word	0x20000024
        {
          ch[t3 - 1] = wa[idij - 1] * c1[t3 - 1] + wa[idij] * c1[t3];
 80078b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078c0:	3b01      	subs	r3, #1
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078c8:	4413      	add	r3, r2
 80078ca:	ed93 7a00 	vldr	s14, [r3]
 80078ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078d4:	3b01      	subs	r3, #1
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80078dc:	4413      	add	r3, r2
 80078de:	edd3 7a00 	vldr	s15, [r3]
 80078e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078f0:	4413      	add	r3, r2
 80078f2:	edd3 6a00 	vldr	s13, [r3]
 80078f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80078fe:	4413      	add	r3, r2
 8007900:	edd3 7a00 	vldr	s15, [r3]
 8007904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800790a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800790e:	3b01      	subs	r3, #1
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007916:	4413      	add	r3, r2
 8007918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800791c:	edc3 7a00 	vstr	s15, [r3]
          ch[t3] = wa[idij - 1] * c1[t3] - wa[idij] * c1[t3 - 1];
 8007920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007924:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007928:	3b01      	subs	r3, #1
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007930:	4413      	add	r3, r2
 8007932:	ed93 7a00 	vldr	s14, [r3]
 8007936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800793e:	4413      	add	r3, r2
 8007940:	edd3 7a00 	vldr	s15, [r3]
 8007944:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007952:	4413      	add	r3, r2
 8007954:	edd3 6a00 	vldr	s13, [r3]
 8007958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800795a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800795e:	3b01      	subs	r3, #1
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007966:	4413      	add	r3, r2
 8007968:	edd3 7a00 	vldr	s15, [r3]
 800796c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007978:	4413      	add	r3, r2
 800797a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800797e:	edc3 7a00 	vstr	s15, [r3]
          t3 += ido;
 8007982:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	673b      	str	r3, [r7, #112]	; 0x70
        for (k = 0; k < l1; k++)
 800798a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800798e:	3301      	adds	r3, #1
 8007990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007994:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	429a      	cmp	r2, r3
 800799c:	db8c      	blt.n	80078b8 <dradfg+0x2d4>
      for (i = 2; i < ido; i += 2)
 800799e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079a2:	3302      	adds	r3, #2
 80079a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	f6ff af71 	blt.w	8007896 <dradfg+0x2b2>
    for (j = 1; j < ip; j++)
 80079b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079b8:	3301      	adds	r3, #1
 80079ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	f6ff af54 	blt.w	8007872 <dradfg+0x28e>
        }
      }
    }
  }

  t1 = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * t0;
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d2:	fb02 f303 	mul.w	r3, r2, r3
 80079d6:	677b      	str	r3, [r7, #116]	; 0x74
  if (nbd < l1)
 80079d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	f280 80be 	bge.w	8007b5e <dradfg+0x57a>
  {
    for (j = 1; j < ipph; j++)
 80079e2:	2301      	movs	r3, #1
 80079e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079e8:	e0b2      	b.n	8007b50 <dradfg+0x56c>
    {
      t1 += t0;
 80079ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	4413      	add	r3, r2
 80079f0:	67bb      	str	r3, [r7, #120]	; 0x78
      t2 -= t0;
 80079f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	677b      	str	r3, [r7, #116]	; 0x74
      t3 = t1;
 80079fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079fc:	673b      	str	r3, [r7, #112]	; 0x70
      t4 = t2;
 80079fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a00:	66fb      	str	r3, [r7, #108]	; 0x6c
      for (i = 2; i < ido; i += 2)
 8007a02:	2302      	movs	r3, #2
 8007a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a08:	e097      	b.n	8007b3a <dradfg+0x556>
      {
        t3 += 2;
 8007a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	673b      	str	r3, [r7, #112]	; 0x70
        t4 += 2;
 8007a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a12:	3302      	adds	r3, #2
 8007a14:	66fb      	str	r3, [r7, #108]	; 0x6c
        t5 = t3 - ido;
 8007a16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	66bb      	str	r3, [r7, #104]	; 0x68
        t6 = t4 - ido;
 8007a1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	667b      	str	r3, [r7, #100]	; 0x64
        for (k = 0; k < l1; k++)
 8007a26:	2300      	movs	r3, #0
 8007a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a2c:	e07a      	b.n	8007b24 <dradfg+0x540>
        {
          t5 += ido;
 8007a2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	66bb      	str	r3, [r7, #104]	; 0x68
          t6 += ido;
 8007a36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	667b      	str	r3, [r7, #100]	; 0x64
          c1[t5 - 1] = ch[t5 - 1] + ch[t6 - 1];
 8007a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a44:	3b01      	subs	r3, #1
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a4c:	4413      	add	r3, r2
 8007a4e:	ed93 7a00 	vldr	s14, [r3]
 8007a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a60:	4413      	add	r3, r2
 8007a62:	edd3 7a00 	vldr	s15, [r3]
 8007a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007a74:	4413      	add	r3, r2
 8007a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a7a:	edc3 7a00 	vstr	s15, [r3]
          c1[t6 - 1] = ch[t5] - ch[t6];
 8007a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a86:	4413      	add	r3, r2
 8007a88:	ed93 7a00 	vldr	s14, [r3]
 8007a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a94:	4413      	add	r3, r2
 8007a96:	edd3 7a00 	vldr	s15, [r3]
 8007a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007aa8:	4413      	add	r3, r2
 8007aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aae:	edc3 7a00 	vstr	s15, [r3]
          c1[t5] = ch[t5] + ch[t6];
 8007ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007aba:	4413      	add	r3, r2
 8007abc:	ed93 7a00 	vldr	s14, [r3]
 8007ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ac8:	4413      	add	r3, r2
 8007aca:	edd3 7a00 	vldr	s15, [r3]
 8007ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007ad6:	4413      	add	r3, r2
 8007ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007adc:	edc3 7a00 	vstr	s15, [r3]
          c1[t6] = ch[t6 - 1] - ch[t5 - 1];
 8007ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ae2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007aee:	4413      	add	r3, r2
 8007af0:	ed93 7a00 	vldr	s14, [r3]
 8007af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007af6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007afa:	3b01      	subs	r3, #1
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b02:	4413      	add	r3, r2
 8007b04:	edd3 7a00 	vldr	s15, [r3]
 8007b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007b10:	4413      	add	r3, r2
 8007b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b16:	edc3 7a00 	vstr	s15, [r3]
        for (k = 0; k < l1; k++)
 8007b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b1e:	3301      	adds	r3, #1
 8007b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	f6ff af7f 	blt.w	8007a2e <dradfg+0x44a>
      for (i = 2; i < ido; i += 2)
 8007b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b34:	3302      	adds	r3, #2
 8007b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	f6ff af62 	blt.w	8007a0a <dradfg+0x426>
    for (j = 1; j < ipph; j++)
 8007b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b50:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	429a      	cmp	r2, r3
 8007b58:	f6ff af47 	blt.w	80079ea <dradfg+0x406>
 8007b5c:	e0b9      	b.n	8007cd2 <dradfg+0x6ee>
      }
    }
  }
  else
  {
    for (j = 1; j < ipph; j++)
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b64:	e0ad      	b.n	8007cc2 <dradfg+0x6de>
    {
      t1 += t0;
 8007b66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	4413      	add	r3, r2
 8007b6c:	67bb      	str	r3, [r7, #120]	; 0x78
      t2 -= t0;
 8007b6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	677b      	str	r3, [r7, #116]	; 0x74
      t3 = t1;
 8007b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b78:	673b      	str	r3, [r7, #112]	; 0x70
      t4 = t2;
 8007b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
      for (k = 0; k < l1; k++)
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b84:	e092      	b.n	8007cac <dradfg+0x6c8>
      {
        t5 = t3;
 8007b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b88:	66bb      	str	r3, [r7, #104]	; 0x68
        t6 = t4;
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	667b      	str	r3, [r7, #100]	; 0x64
        for (i = 2; i < ido; i += 2)
 8007b8e:	2302      	movs	r3, #2
 8007b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b94:	e078      	b.n	8007c88 <dradfg+0x6a4>
        {
          t5 += 2;
 8007b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b98:	3302      	adds	r3, #2
 8007b9a:	66bb      	str	r3, [r7, #104]	; 0x68
          t6 += 2;
 8007b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b9e:	3302      	adds	r3, #2
 8007ba0:	667b      	str	r3, [r7, #100]	; 0x64
          c1[t5 - 1] = ch[t5 - 1] + ch[t6 - 1];
 8007ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ba4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bb0:	4413      	add	r3, r2
 8007bb2:	ed93 7a00 	vldr	s14, [r3]
 8007bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bc4:	4413      	add	r3, r2
 8007bc6:	edd3 7a00 	vldr	s15, [r3]
 8007bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007bd8:	4413      	add	r3, r2
 8007bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bde:	edc3 7a00 	vstr	s15, [r3]
          c1[t6 - 1] = ch[t5] - ch[t6];
 8007be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bea:	4413      	add	r3, r2
 8007bec:	ed93 7a00 	vldr	s14, [r3]
 8007bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bf8:	4413      	add	r3, r2
 8007bfa:	edd3 7a00 	vldr	s15, [r3]
 8007bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c04:	3b01      	subs	r3, #1
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007c0c:	4413      	add	r3, r2
 8007c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c12:	edc3 7a00 	vstr	s15, [r3]
          c1[t5] = ch[t5] + ch[t6];
 8007c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c1e:	4413      	add	r3, r2
 8007c20:	ed93 7a00 	vldr	s14, [r3]
 8007c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c2c:	4413      	add	r3, r2
 8007c2e:	edd3 7a00 	vldr	s15, [r3]
 8007c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007c3a:	4413      	add	r3, r2
 8007c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c40:	edc3 7a00 	vstr	s15, [r3]
          c1[t6] = ch[t6 - 1] - ch[t5 - 1];
 8007c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c52:	4413      	add	r3, r2
 8007c54:	ed93 7a00 	vldr	s14, [r3]
 8007c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c66:	4413      	add	r3, r2
 8007c68:	edd3 7a00 	vldr	s15, [r3]
 8007c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007c74:	4413      	add	r3, r2
 8007c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c7a:	edc3 7a00 	vstr	s15, [r3]
        for (i = 2; i < ido; i += 2)
 8007c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c82:	3302      	adds	r3, #2
 8007c84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	db81      	blt.n	8007b96 <dradfg+0x5b2>
        }
        t3 += ido;
 8007c92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	673b      	str	r3, [r7, #112]	; 0x70
        t4 += ido;
 8007c9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
      for (k = 0; k < l1; k++)
 8007ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	f6ff af67 	blt.w	8007b86 <dradfg+0x5a2>
    for (j = 1; j < ipph; j++)
 8007cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cc2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	f6ff af4c 	blt.w	8007b66 <dradfg+0x582>
      }
    }
  }

L119:
 8007cce:	e000      	b.n	8007cd2 <dradfg+0x6ee>
  if (ido == 1) { goto L119; }
 8007cd0:	bf00      	nop
  for (ik = 0; ik < idl1; ik++) { c2[ik] = ch2[ik]; }
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cd8:	e012      	b.n	8007d00 <dradfg+0x71c>
 8007cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ce4:	441a      	add	r2, r3
 8007ce6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007cf0:	440b      	add	r3, r1
 8007cf2:	6812      	ldr	r2, [r2, #0]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	dbe7      	blt.n	8007cda <dradfg+0x6f6>

  t1 = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * idl1;
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	677b      	str	r3, [r7, #116]	; 0x74
  for (j = 1; j < ipph; j++)
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d1e:	e058      	b.n	8007dd2 <dradfg+0x7ee>
  {
    t1 += t0;
 8007d20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	4413      	add	r3, r2
 8007d26:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= t0;
 8007d28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	677b      	str	r3, [r7, #116]	; 0x74
    t3 = t1 - ido;
 8007d30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2 - ido;
 8007d38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (k = 0; k < l1; k++)
 8007d40:	2300      	movs	r3, #0
 8007d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d46:	e03a      	b.n	8007dbe <dradfg+0x7da>
    {
      t3 += ido;
 8007d48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	673b      	str	r3, [r7, #112]	; 0x70
      t4 += ido;
 8007d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	66fb      	str	r3, [r7, #108]	; 0x6c
      c1[t3] = ch[t3] + ch[t4];
 8007d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d60:	4413      	add	r3, r2
 8007d62:	ed93 7a00 	vldr	s14, [r3]
 8007d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d6e:	4413      	add	r3, r2
 8007d70:	edd3 7a00 	vldr	s15, [r3]
 8007d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007d7c:	4413      	add	r3, r2
 8007d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d82:	edc3 7a00 	vstr	s15, [r3]
      c1[t4] = ch[t4] - ch[t3];
 8007d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d8e:	4413      	add	r3, r2
 8007d90:	ed93 7a00 	vldr	s14, [r3]
 8007d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d9c:	4413      	add	r3, r2
 8007d9e:	edd3 7a00 	vldr	s15, [r3]
 8007da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007daa:	4413      	add	r3, r2
 8007dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007db0:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < l1; k++)
 8007db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007db8:	3301      	adds	r3, #1
 8007dba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	dbbf      	blt.n	8007d48 <dradfg+0x764>
  for (j = 1; j < ipph; j++)
 8007dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dcc:	3301      	adds	r3, #1
 8007dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007dd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	dba1      	blt.n	8007d20 <dradfg+0x73c>
    }
  }

  ar1 = 1.f;
 8007ddc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  ai1 = 0.f;
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	657b      	str	r3, [r7, #84]	; 0x54
  t1 = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * idl1;
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	fb02 f303 	mul.w	r3, r2, r3
 8007df4:	677b      	str	r3, [r7, #116]	; 0x74
  t3 = (ip - 1) * idl1;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	1e5a      	subs	r2, r3, #1
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	fb02 f303 	mul.w	r3, r2, r3
 8007e00:	673b      	str	r3, [r7, #112]	; 0x70
  for (l = 1; l < ipph; l++)
 8007e02:	2301      	movs	r3, #1
 8007e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e08:	e11f      	b.n	800804a <dradfg+0xa66>
  {
    t1 += idl1;
 8007e0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	4413      	add	r3, r2
 8007e10:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= idl1;
 8007e12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	677b      	str	r3, [r7, #116]	; 0x74
    ar1h = dcp * ar1 - dsp * ai1;
 8007e1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007e1e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e26:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8007e2a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e36:	edc7 7a07 	vstr	s15, [r7, #28]
    ai1 = dcp * ai1 + dsp * ar1;
 8007e3a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007e3e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007e42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e46:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8007e4a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e56:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    ar1 = ar1h;
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    t4 = t1;
 8007e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e60:	66fb      	str	r3, [r7, #108]	; 0x6c
    t5 = t2;
 8007e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e64:	66bb      	str	r3, [r7, #104]	; 0x68
    t6 = t3;
 8007e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e68:	667b      	str	r3, [r7, #100]	; 0x64
    t7 = idl1;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	663b      	str	r3, [r7, #96]	; 0x60

    for (ik = 0; ik < idl1; ik++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e74:	e03e      	b.n	8007ef4 <dradfg+0x910>
    {
      ch2[t4] = c2[ik] + ar1 * c2[t7];  t4++; t7++;
 8007e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e80:	4413      	add	r3, r2
 8007e82:	ed93 7a00 	vldr	s14, [r3]
 8007e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e8e:	4413      	add	r3, r2
 8007e90:	edd3 6a00 	vldr	s13, [r3]
 8007e94:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ea4:	4413      	add	r3, r2
 8007ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007eaa:	edc3 7a00 	vstr	s15, [r3]
 8007eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	663b      	str	r3, [r7, #96]	; 0x60
      ch2[t5] = ai1 * c2[t6];           t5++; t6++;
 8007eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ec2:	4413      	add	r3, r2
 8007ec4:	ed93 7a00 	vldr	s14, [r3]
 8007ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ed0:	4413      	add	r3, r2
 8007ed2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eda:	edc3 7a00 	vstr	s15, [r3]
 8007ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	667b      	str	r3, [r7, #100]	; 0x64
    for (ik = 0; ik < idl1; ik++)
 8007eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007eee:	3301      	adds	r3, #1
 8007ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ef4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	dbbb      	blt.n	8007e76 <dradfg+0x892>
    }

    dc2 = ar1;
 8007efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f00:	61bb      	str	r3, [r7, #24]
    ds2 = ai1;
 8007f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f04:	617b      	str	r3, [r7, #20]
    ar2 = ar1;
 8007f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f08:	64bb      	str	r3, [r7, #72]	; 0x48
    ai2 = ai1;
 8007f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f0c:	653b      	str	r3, [r7, #80]	; 0x50

    t4 = idl1;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	66fb      	str	r3, [r7, #108]	; 0x6c
    t5 = (ipp2 - 1) * idl1;
 8007f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f14:	1e5a      	subs	r2, r3, #1
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	fb02 f303 	mul.w	r3, r2, r3
 8007f1c:	66bb      	str	r3, [r7, #104]	; 0x68
    for (j = 2; j < ipph; j++)
 8007f1e:	2302      	movs	r3, #2
 8007f20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f24:	e086      	b.n	8008034 <dradfg+0xa50>
    {
      t4 += idl1;
 8007f26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
      t5 -= idl1;
 8007f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	66bb      	str	r3, [r7, #104]	; 0x68

      ar2h = dc2 * ar2 - ds2 * ai2;
 8007f36:	ed97 7a06 	vldr	s14, [r7, #24]
 8007f3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f42:	edd7 6a05 	vldr	s13, [r7, #20]
 8007f46:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f52:	edc7 7a04 	vstr	s15, [r7, #16]
      ai2 = dc2 * ai2 + ds2 * ar2;
 8007f56:	ed97 7a06 	vldr	s14, [r7, #24]
 8007f5a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f62:	edd7 6a05 	vldr	s13, [r7, #20]
 8007f66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f72:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      ar2 = ar2h;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	64bb      	str	r3, [r7, #72]	; 0x48

      t6 = t1;
 8007f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f7c:	667b      	str	r3, [r7, #100]	; 0x64
      t7 = t2;
 8007f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f80:	663b      	str	r3, [r7, #96]	; 0x60
      t8 = t4;
 8007f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f84:	65fb      	str	r3, [r7, #92]	; 0x5c
      t9 = t5;
 8007f86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f88:	65bb      	str	r3, [r7, #88]	; 0x58
      for (ik = 0; ik < idl1; ik++)
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f90:	e046      	b.n	8008020 <dradfg+0xa3c>
      {
        ch2[t6] += ar2 * c2[t8];  t6++; t8++;
 8007f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f9a:	4413      	add	r3, r2
 8007f9c:	ed93 7a00 	vldr	s14, [r3]
 8007fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fa8:	4413      	add	r3, r2
 8007faa:	edd3 6a00 	vldr	s13, [r3]
 8007fae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fbe:	4413      	add	r3, r2
 8007fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fc4:	edc3 7a00 	vstr	s15, [r3]
 8007fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fca:	3301      	adds	r3, #1
 8007fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8007fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
        ch2[t7] += ai2 * c2[t9];  t7++; t9++;
 8007fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fdc:	4413      	add	r3, r2
 8007fde:	ed93 7a00 	vldr	s14, [r3]
 8007fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fea:	4413      	add	r3, r2
 8007fec:	edd3 6a00 	vldr	s13, [r3]
 8007ff0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008000:	4413      	add	r3, r2
 8008002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008006:	edc3 7a00 	vstr	s15, [r3]
 800800a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800800c:	3301      	adds	r3, #1
 800800e:	663b      	str	r3, [r7, #96]	; 0x60
 8008010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008012:	3301      	adds	r3, #1
 8008014:	65bb      	str	r3, [r7, #88]	; 0x58
      for (ik = 0; ik < idl1; ik++)
 8008016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800801a:	3301      	adds	r3, #1
 800801c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008020:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	dbb3      	blt.n	8007f92 <dradfg+0x9ae>
    for (j = 2; j < ipph; j++)
 800802a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800802e:	3301      	adds	r3, #1
 8008030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008034:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	429a      	cmp	r2, r3
 800803c:	f6ff af73 	blt.w	8007f26 <dradfg+0x942>
  for (l = 1; l < ipph; l++)
 8008040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008044:	3301      	adds	r3, #1
 8008046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800804a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	429a      	cmp	r2, r3
 8008052:	f6ff aeda 	blt.w	8007e0a <dradfg+0x826>
      }
    }
  }

  t1 = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	67bb      	str	r3, [r7, #120]	; 0x78
  for (j = 1; j < ipph; j++)
 800805a:	2301      	movs	r3, #1
 800805c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008060:	e034      	b.n	80080cc <dradfg+0xae8>
  {
    t1 += idl1;
 8008062:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	4413      	add	r3, r2
 8008068:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 = t1;
 800806a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800806c:	677b      	str	r3, [r7, #116]	; 0x74
    for (ik = 0; ik < idl1; ik++) { ch2[ik] += c2[t2]; t2++; }
 800806e:	2300      	movs	r3, #0
 8008070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008074:	e020      	b.n	80080b8 <dradfg+0xad4>
 8008076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008080:	4413      	add	r3, r2
 8008082:	ed93 7a00 	vldr	s14, [r3]
 8008086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800808e:	4413      	add	r3, r2
 8008090:	edd3 7a00 	vldr	s15, [r3]
 8008094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800809e:	4413      	add	r3, r2
 80080a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080a4:	edc3 7a00 	vstr	s15, [r3]
 80080a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080aa:	3301      	adds	r3, #1
 80080ac:	677b      	str	r3, [r7, #116]	; 0x74
 80080ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080b2:	3301      	adds	r3, #1
 80080b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	dbd9      	blt.n	8008076 <dradfg+0xa92>
  for (j = 1; j < ipph; j++)
 80080c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080c6:	3301      	adds	r3, #1
 80080c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	429a      	cmp	r2, r3
 80080d4:	dbc5      	blt.n	8008062 <dradfg+0xa7e>
  }

  if (ido < l1) { goto L132; }
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	429a      	cmp	r2, r3
 80080dc:	db3e      	blt.n	800815c <dradfg+0xb78>

  t1 = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	677b      	str	r3, [r7, #116]	; 0x74
  for (k = 0; k < l1; k++)
 80080e6:	2300      	movs	r3, #0
 80080e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080ec:	e030      	b.n	8008150 <dradfg+0xb6c>
  {
    t3 = t1;
 80080ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080f0:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2;
 80080f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (i = 0; i < ido; i++) { cc[t4] = ch[t3]; t4++; t3++; }
 80080f6:	2300      	movs	r3, #0
 80080f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080fc:	e016      	b.n	800812c <dradfg+0xb48>
 80080fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008106:	441a      	add	r2, r3
 8008108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008110:	440b      	add	r3, r1
 8008112:	6812      	ldr	r2, [r2, #0]
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008118:	3301      	adds	r3, #1
 800811a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800811c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800811e:	3301      	adds	r3, #1
 8008120:	673b      	str	r3, [r7, #112]	; 0x70
 8008122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008126:	3301      	adds	r3, #1
 8008128:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800812c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	429a      	cmp	r2, r3
 8008134:	dbe3      	blt.n	80080fe <dradfg+0xb1a>
    t1 += ido;
 8008136:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 += t10;
 800813e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	4413      	add	r3, r2
 8008144:	677b      	str	r3, [r7, #116]	; 0x74
  for (k = 0; k < l1; k++)
 8008146:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800814a:	3301      	adds	r3, #1
 800814c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008150:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	429a      	cmp	r2, r3
 8008158:	dbc9      	blt.n	80080ee <dradfg+0xb0a>
  }

  goto L135;
 800815a:	e037      	b.n	80081cc <dradfg+0xbe8>
  if (ido < l1) { goto L132; }
 800815c:	bf00      	nop

L132:
  for (i = 0; i < ido; i++)
 800815e:	2300      	movs	r3, #0
 8008160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008164:	e02c      	b.n	80081c0 <dradfg+0xbdc>
  {
    t1 = i;
 8008166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800816a:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 = i;
 800816c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008170:	677b      	str	r3, [r7, #116]	; 0x74
    for (k = 0; k < l1; k++)
 8008172:	2300      	movs	r3, #0
 8008174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008178:	e018      	b.n	80081ac <dradfg+0xbc8>
    {
      cc[t2] = ch[t1];
 800817a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008182:	441a      	add	r2, r3
 8008184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800818c:	440b      	add	r3, r1
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	601a      	str	r2, [r3, #0]
      t1 += ido;
 8008192:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4413      	add	r3, r2
 8008198:	67bb      	str	r3, [r7, #120]	; 0x78
      t2 += t10;
 800819a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	4413      	add	r3, r2
 80081a0:	677b      	str	r3, [r7, #116]	; 0x74
    for (k = 0; k < l1; k++)
 80081a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081a6:	3301      	adds	r3, #1
 80081a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	dbe1      	blt.n	800817a <dradfg+0xb96>
  for (i = 0; i < ido; i++)
 80081b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081ba:	3301      	adds	r3, #1
 80081bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	dbcd      	blt.n	8008166 <dradfg+0xb82>
    }
  }

L135:
 80081ca:	bf00      	nop
  t1 = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ido << 1;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	677b      	str	r3, [r7, #116]	; 0x74
  t3 = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	673b      	str	r3, [r7, #112]	; 0x70
  t4 = ipp2 * t0;
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081de:	fb02 f303 	mul.w	r3, r2, r3
 80081e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  for (j = 1; j < ipph; j++)
 80081e4:	2301      	movs	r3, #1
 80081e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081ea:	e04b      	b.n	8008284 <dradfg+0xca0>
  {

    t1 += t2;
 80081ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f0:	4413      	add	r3, r2
 80081f2:	67bb      	str	r3, [r7, #120]	; 0x78
    t3 += t0;
 80081f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	4413      	add	r3, r2
 80081fa:	673b      	str	r3, [r7, #112]	; 0x70
    t4 -= t0;
 80081fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	66fb      	str	r3, [r7, #108]	; 0x6c

    t5 = t1;
 8008204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008206:	66bb      	str	r3, [r7, #104]	; 0x68
    t6 = t3;
 8008208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800820a:	667b      	str	r3, [r7, #100]	; 0x64
    t7 = t4;
 800820c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800820e:	663b      	str	r3, [r7, #96]	; 0x60

    for (k = 0; k < l1; k++)
 8008210:	2300      	movs	r3, #0
 8008212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008216:	e02b      	b.n	8008270 <dradfg+0xc8c>
    {
      cc[t5 - 1] = ch[t6];
 8008218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008220:	441a      	add	r2, r3
 8008222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008228:	3b01      	subs	r3, #1
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008230:	440b      	add	r3, r1
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	601a      	str	r2, [r3, #0]
      cc[t5] = ch[t7];
 8008236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800823e:	441a      	add	r2, r3
 8008240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008248:	440b      	add	r3, r1
 800824a:	6812      	ldr	r2, [r2, #0]
 800824c:	601a      	str	r2, [r3, #0]
      t5 += t10;
 800824e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	4413      	add	r3, r2
 8008254:	66bb      	str	r3, [r7, #104]	; 0x68
      t6 += ido;
 8008256:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	667b      	str	r3, [r7, #100]	; 0x64
      t7 += ido;
 800825e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	663b      	str	r3, [r7, #96]	; 0x60
    for (k = 0; k < l1; k++)
 8008266:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800826a:	3301      	adds	r3, #1
 800826c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008270:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	429a      	cmp	r2, r3
 8008278:	dbce      	blt.n	8008218 <dradfg+0xc34>
  for (j = 1; j < ipph; j++)
 800827a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800827e:	3301      	adds	r3, #1
 8008280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008284:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	429a      	cmp	r2, r3
 800828c:	dbae      	blt.n	80081ec <dradfg+0xc08>
    }
  }

  if (ido == 1) { return; }
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b01      	cmp	r3, #1
 8008292:	f000 81db 	beq.w	800864c <dradfg+0x1068>
  if (nbd < l1) { goto L141; }
 8008296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	429a      	cmp	r2, r3
 800829c:	f2c0 80f7 	blt.w	800848e <dradfg+0xeaa>

  t1 = -ido;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	425b      	negs	r3, r3
 80082a4:	67bb      	str	r3, [r7, #120]	; 0x78
  t3 = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	673b      	str	r3, [r7, #112]	; 0x70
  t4 = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  t5 = ipp2 * t0;
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082b2:	fb02 f303 	mul.w	r3, r2, r3
 80082b6:	66bb      	str	r3, [r7, #104]	; 0x68
  for (j = 1; j < ipph; j++)
 80082b8:	2301      	movs	r3, #1
 80082ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082be:	e0df      	b.n	8008480 <dradfg+0xe9c>
  {
    t1 += t2;
 80082c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082c4:	4413      	add	r3, r2
 80082c6:	67bb      	str	r3, [r7, #120]	; 0x78
    t3 += t2;
 80082c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80082ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082cc:	4413      	add	r3, r2
 80082ce:	673b      	str	r3, [r7, #112]	; 0x70
    t4 += t0;
 80082d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	4413      	add	r3, r2
 80082d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    t5 -= t0;
 80082d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	66bb      	str	r3, [r7, #104]	; 0x68
    t6 = t1;
 80082e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e2:	667b      	str	r3, [r7, #100]	; 0x64
    t7 = t3;
 80082e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082e6:	663b      	str	r3, [r7, #96]	; 0x60
    t8 = t4;
 80082e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    t9 = t5;
 80082ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082ee:	65bb      	str	r3, [r7, #88]	; 0x58
    for (k = 0; k < l1; k++)
 80082f0:	2300      	movs	r3, #0
 80082f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082f6:	e0b8      	b.n	800846a <dradfg+0xe86>
    {
      for (i = 2; i < ido; i += 2)
 80082f8:	2302      	movs	r3, #2
 80082fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082fe:	e099      	b.n	8008434 <dradfg+0xe50>
      {
        ic = idp2 - i;
 8008300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008302:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	623b      	str	r3, [r7, #32]
        cc[i + t7 - 1] = ch[i + t8 - 1] + ch[i + t9 - 1];
 800830a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800830e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008310:	4413      	add	r3, r2
 8008312:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008316:	3b01      	subs	r3, #1
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800831e:	4413      	add	r3, r2
 8008320:	ed93 7a00 	vldr	s14, [r3]
 8008324:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800832a:	4413      	add	r3, r2
 800832c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008330:	3b01      	subs	r3, #1
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008338:	4413      	add	r3, r2
 800833a:	edd3 7a00 	vldr	s15, [r3]
 800833e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008344:	4413      	add	r3, r2
 8008346:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800834a:	3b01      	subs	r3, #1
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008352:	4413      	add	r3, r2
 8008354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008358:	edc3 7a00 	vstr	s15, [r3]
        cc[ic + t6 - 1] = ch[i + t8 - 1] - ch[i + t9 - 1];
 800835c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008362:	4413      	add	r3, r2
 8008364:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008368:	3b01      	subs	r3, #1
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008370:	4413      	add	r3, r2
 8008372:	ed93 7a00 	vldr	s14, [r3]
 8008376:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800837a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800837c:	4413      	add	r3, r2
 800837e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008382:	3b01      	subs	r3, #1
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800838a:	4413      	add	r3, r2
 800838c:	edd3 7a00 	vldr	s15, [r3]
 8008390:	6a3a      	ldr	r2, [r7, #32]
 8008392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008394:	4413      	add	r3, r2
 8008396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800839a:	3b01      	subs	r3, #1
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80083a2:	4413      	add	r3, r2
 80083a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083a8:	edc3 7a00 	vstr	s15, [r3]
        cc[i + t7] = ch[i + t8] + ch[i + t9];
 80083ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80083b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083ba:	4413      	add	r3, r2
 80083bc:	ed93 7a00 	vldr	s14, [r3]
 80083c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80083c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083ce:	4413      	add	r3, r2
 80083d0:	edd3 7a00 	vldr	s15, [r3]
 80083d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80083d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80083e2:	4413      	add	r3, r2
 80083e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083e8:	edc3 7a00 	vstr	s15, [r3]
        cc[ic + t6] = ch[i + t9] - ch[i + t8];
 80083ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80083f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083fa:	4413      	add	r3, r2
 80083fc:	ed93 7a00 	vldr	s14, [r3]
 8008400:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800840e:	4413      	add	r3, r2
 8008410:	edd3 7a00 	vldr	s15, [r3]
 8008414:	6a3a      	ldr	r2, [r7, #32]
 8008416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008420:	4413      	add	r3, r2
 8008422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008426:	edc3 7a00 	vstr	s15, [r3]
      for (i = 2; i < ido; i += 2)
 800842a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800842e:	3302      	adds	r3, #2
 8008430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008434:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	429a      	cmp	r2, r3
 800843c:	f6ff af60 	blt.w	8008300 <dradfg+0xd1c>
      }
      t6 += t10;
 8008440:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	4413      	add	r3, r2
 8008446:	667b      	str	r3, [r7, #100]	; 0x64
      t7 += t10;
 8008448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	4413      	add	r3, r2
 800844e:	663b      	str	r3, [r7, #96]	; 0x60
      t8 += ido;
 8008450:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4413      	add	r3, r2
 8008456:	65fb      	str	r3, [r7, #92]	; 0x5c
      t9 += ido;
 8008458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	65bb      	str	r3, [r7, #88]	; 0x58
    for (k = 0; k < l1; k++)
 8008460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008464:	3301      	adds	r3, #1
 8008466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800846a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	f6ff af41 	blt.w	80082f8 <dradfg+0xd14>
  for (j = 1; j < ipph; j++)
 8008476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800847a:	3301      	adds	r3, #1
 800847c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008480:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	429a      	cmp	r2, r3
 8008488:	f6ff af1a 	blt.w	80082c0 <dradfg+0xcdc>
    }
  }
  return;
 800848c:	e0df      	b.n	800864e <dradfg+0x106a>
  if (nbd < l1) { goto L141; }
 800848e:	bf00      	nop

L141:

  t1 = -ido;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	425b      	negs	r3, r3
 8008494:	67bb      	str	r3, [r7, #120]	; 0x78
  t3 = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	673b      	str	r3, [r7, #112]	; 0x70
  t4 = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	66fb      	str	r3, [r7, #108]	; 0x6c
  t5 = ipp2 * t0;
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084a2:	fb02 f303 	mul.w	r3, r2, r3
 80084a6:	66bb      	str	r3, [r7, #104]	; 0x68
  for (j = 1; j < ipph; j++)
 80084a8:	2301      	movs	r3, #1
 80084aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80084ae:	e0c6      	b.n	800863e <dradfg+0x105a>
  {
    t1 += t2;
 80084b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b4:	4413      	add	r3, r2
 80084b6:	67bb      	str	r3, [r7, #120]	; 0x78
    t3 += t2;
 80084b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80084ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084bc:	4413      	add	r3, r2
 80084be:	673b      	str	r3, [r7, #112]	; 0x70
    t4 += t0;
 80084c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	4413      	add	r3, r2
 80084c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    t5 -= t0;
 80084c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	66bb      	str	r3, [r7, #104]	; 0x68
    for (i = 2; i < ido; i += 2)
 80084d0:	2302      	movs	r3, #2
 80084d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084d6:	e0a7      	b.n	8008628 <dradfg+0x1044>
    {
      t6 = idp2 + t1 - i;
 80084d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084dc:	441a      	add	r2, r3
 80084de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	667b      	str	r3, [r7, #100]	; 0x64
      t7 = i + t3;
 80084e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80084ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084ec:	4413      	add	r3, r2
 80084ee:	663b      	str	r3, [r7, #96]	; 0x60
      t8 = i + t4;
 80084f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80084f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f6:	4413      	add	r3, r2
 80084f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      t9 = i + t5;
 80084fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80084fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008500:	4413      	add	r3, r2
 8008502:	65bb      	str	r3, [r7, #88]	; 0x58
      for (k = 0; k < l1; k++)
 8008504:	2300      	movs	r3, #0
 8008506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800850a:	e082      	b.n	8008612 <dradfg+0x102e>
      {
        cc[t7 - 1] = ch[t8 - 1] + ch[t9 - 1];
 800850c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800850e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008512:	3b01      	subs	r3, #1
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800851a:	4413      	add	r3, r2
 800851c:	ed93 7a00 	vldr	s14, [r3]
 8008520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008526:	3b01      	subs	r3, #1
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800852e:	4413      	add	r3, r2
 8008530:	edd3 7a00 	vldr	s15, [r3]
 8008534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008536:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800853a:	3b01      	subs	r3, #1
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008542:	4413      	add	r3, r2
 8008544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008548:	edc3 7a00 	vstr	s15, [r3]
        cc[t6 - 1] = ch[t8 - 1] - ch[t9 - 1];
 800854c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800854e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008552:	3b01      	subs	r3, #1
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800855a:	4413      	add	r3, r2
 800855c:	ed93 7a00 	vldr	s14, [r3]
 8008560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008562:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008566:	3b01      	subs	r3, #1
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800856e:	4413      	add	r3, r2
 8008570:	edd3 7a00 	vldr	s15, [r3]
 8008574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008576:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800857a:	3b01      	subs	r3, #1
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008582:	4413      	add	r3, r2
 8008584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008588:	edc3 7a00 	vstr	s15, [r3]
        cc[t7] = ch[t8] + ch[t9];
 800858c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008594:	4413      	add	r3, r2
 8008596:	ed93 7a00 	vldr	s14, [r3]
 800859a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80085a2:	4413      	add	r3, r2
 80085a4:	edd3 7a00 	vldr	s15, [r3]
 80085a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80085b0:	4413      	add	r3, r2
 80085b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085b6:	edc3 7a00 	vstr	s15, [r3]
        cc[t6] = ch[t9] - ch[t8];
 80085ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80085c2:	4413      	add	r3, r2
 80085c4:	ed93 7a00 	vldr	s14, [r3]
 80085c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80085d0:	4413      	add	r3, r2
 80085d2:	edd3 7a00 	vldr	s15, [r3]
 80085d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80085de:	4413      	add	r3, r2
 80085e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085e4:	edc3 7a00 	vstr	s15, [r3]
        t6 += t10;
 80085e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	4413      	add	r3, r2
 80085ee:	667b      	str	r3, [r7, #100]	; 0x64
        t7 += t10;
 80085f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	4413      	add	r3, r2
 80085f6:	663b      	str	r3, [r7, #96]	; 0x60
        t8 += ido;
 80085f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        t9 += ido;
 8008600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	65bb      	str	r3, [r7, #88]	; 0x58
      for (k = 0; k < l1; k++)
 8008608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800860c:	3301      	adds	r3, #1
 800860e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008612:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	f6ff af77 	blt.w	800850c <dradfg+0xf28>
    for (i = 2; i < ido; i += 2)
 800861e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008622:	3302      	adds	r3, #2
 8008624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008628:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	429a      	cmp	r2, r3
 8008630:	f6ff af52 	blt.w	80084d8 <dradfg+0xef4>
  for (j = 1; j < ipph; j++)
 8008634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008638:	3301      	adds	r3, #1
 800863a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800863e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	429a      	cmp	r2, r3
 8008646:	f6ff af33 	blt.w	80084b0 <dradfg+0xecc>
 800864a:	e000      	b.n	800864e <dradfg+0x106a>
  if (ido == 1) { return; }
 800864c:	bf00      	nop
      }
    }
  }
}
 800864e:	3798      	adds	r7, #152	; 0x98
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <drftf1>:

static void drftf1(int n, float *c, float *ch, float *wa, int32_t *ifac)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b098      	sub	sp, #96	; 0x60
 8008658:	af06      	add	r7, sp, #24
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
  int i, k1, l1, l2;
  int na, kh, nf;
  int ip, iw, ido, idl1, ix2, ix3;

  nf = ifac[1];
 8008662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008664:	3304      	adds	r3, #4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	633b      	str	r3, [r7, #48]	; 0x30
  na = 1;
 800866a:	2301      	movs	r3, #1
 800866c:	63bb      	str	r3, [r7, #56]	; 0x38
  l2 = n;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
  iw = n;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	637b      	str	r3, [r7, #52]	; 0x34

  for (k1 = 0; k1 < nf; k1++)
 8008676:	2300      	movs	r3, #0
 8008678:	643b      	str	r3, [r7, #64]	; 0x40
 800867a:	e0dd      	b.n	8008838 <drftf1+0x1e4>
  {
    kh = nf - k1;
 800867c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800867e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	62fb      	str	r3, [r7, #44]	; 0x2c
    ip = ifac[kh + 1];
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	3301      	adds	r3, #1
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800868c:	4413      	add	r3, r2
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
    l1 = l2 / ip;
 8008692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	fb92 f3f3 	sdiv	r3, r2, r3
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
    ido = n / l2;
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80086a4:	623b      	str	r3, [r7, #32]
    idl1 = ido * l1;
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086aa:	fb02 f303 	mul.w	r3, r2, r3
 80086ae:	61fb      	str	r3, [r7, #28]
    iw -= (ip - 1) * ido;
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	3b01      	subs	r3, #1
 80086b4:	6a3a      	ldr	r2, [r7, #32]
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	637b      	str	r3, [r7, #52]	; 0x34
    na = 1 - na;
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	f1c3 0301 	rsb	r3, r3, #1
 80086c6:	63bb      	str	r3, [r7, #56]	; 0x38

    if (ip != 4) { goto L102; }
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d148      	bne.n	8008760 <drftf1+0x10c>

    ix2 = iw + ido;
 80086ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	4413      	add	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
    ix3 = ix2 + ido;
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	4413      	add	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]
    if (na != 0)
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01e      	beq.n	8008722 <drftf1+0xce>
    {
      dradf4(ido, l1, ch, c, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086ea:	3b01      	subs	r3, #1
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	441a      	add	r2, r3
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086f8:	3b01      	subs	r3, #1
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	4419      	add	r1, r3
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008706:	3b01      	subs	r3, #1
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	6838      	ldr	r0, [r7, #0]
 800870c:	4403      	add	r3, r0
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	9101      	str	r1, [sp, #4]
 8008712:	9200      	str	r2, [sp, #0]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800871a:	6a38      	ldr	r0, [r7, #32]
 800871c:	f7fe fbf0 	bl	8006f00 <dradf4>
    }
    else
    {
      dradf4(ido, l1, c, ch, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
    }
    goto L110;
 8008720:	e085      	b.n	800882e <drftf1+0x1da>
      dradf4(ido, l1, c, ch, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008728:	3b01      	subs	r3, #1
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	441a      	add	r2, r3
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008736:	3b01      	subs	r3, #1
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	4419      	add	r1, r3
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008744:	3b01      	subs	r3, #1
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	6838      	ldr	r0, [r7, #0]
 800874a:	4403      	add	r3, r0
 800874c:	9302      	str	r3, [sp, #8]
 800874e:	9101      	str	r1, [sp, #4]
 8008750:	9200      	str	r2, [sp, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008758:	6a38      	ldr	r0, [r7, #32]
 800875a:	f7fe fbd1 	bl	8006f00 <dradf4>
    goto L110;
 800875e:	e066      	b.n	800882e <drftf1+0x1da>
    if (ip != 4) { goto L102; }
 8008760:	bf00      	nop

L102:
    if (ip != 2) { goto L104; }
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	2b02      	cmp	r3, #2
 8008766:	d121      	bne.n	80087ac <drftf1+0x158>
    if (na != 0) { goto L103; }
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10e      	bne.n	800878c <drftf1+0x138>

    dradf2(ido, l1, c, ch, wa + iw - 1);
 800876e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008774:	3b01      	subs	r3, #1
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	4413      	add	r3, r2
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008784:	6a38      	ldr	r0, [r7, #32]
 8008786:	f7fe fa35 	bl	8006bf4 <dradf2>
    goto L110;
 800878a:	e050      	b.n	800882e <drftf1+0x1da>
    if (na != 0) { goto L103; }
 800878c:	bf00      	nop

L103:
    dradf2(ido, l1, ch, c, wa + iw - 1);
 800878e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008794:	3b01      	subs	r3, #1
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	4413      	add	r3, r2
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087a4:	6a38      	ldr	r0, [r7, #32]
 80087a6:	f7fe fa25 	bl	8006bf4 <dradf2>
    goto L110;
 80087aa:	e040      	b.n	800882e <drftf1+0x1da>
    if (ip != 2) { goto L104; }
 80087ac:	bf00      	nop

L104:
    if (ido == 1) { na = 1 - na; }
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d103      	bne.n	80087bc <drftf1+0x168>
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	f1c3 0301 	rsb	r3, r3, #1
 80087ba:	63bb      	str	r3, [r7, #56]	; 0x38
    if (na != 0) { goto L109; }
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d11a      	bne.n	80087f8 <drftf1+0x1a4>

    dradfg(ido, ip, l1, idl1, c, c, c, ch, ch, wa + iw - 1);
 80087c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087c8:	3b01      	subs	r3, #1
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	4413      	add	r3, r2
 80087d0:	9305      	str	r3, [sp, #20]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	9302      	str	r3, [sp, #8]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ec:	6a38      	ldr	r0, [r7, #32]
 80087ee:	f7fe fef9 	bl	80075e4 <dradfg>
    na = 1;
 80087f2:	2301      	movs	r3, #1
 80087f4:	63bb      	str	r3, [r7, #56]	; 0x38
    goto L110;
 80087f6:	e01a      	b.n	800882e <drftf1+0x1da>
    if (na != 0) { goto L109; }
 80087f8:	bf00      	nop

L109:
    dradfg(ido, ip, l1, idl1, ch, ch, ch, c, c, wa + iw - 1);
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008800:	3b01      	subs	r3, #1
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	4413      	add	r3, r2
 8008808:	9305      	str	r3, [sp, #20]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	9302      	str	r3, [sp, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008824:	6a38      	ldr	r0, [r7, #32]
 8008826:	f7fe fedd 	bl	80075e4 <dradfg>
    na = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	63bb      	str	r3, [r7, #56]	; 0x38

L110:
    l2 = l1;
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (k1 = 0; k1 < nf; k1++)
 8008832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008834:	3301      	adds	r3, #1
 8008836:	643b      	str	r3, [r7, #64]	; 0x40
 8008838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	429a      	cmp	r2, r3
 800883e:	f6ff af1d 	blt.w	800867c <drftf1+0x28>
  }

  if (na != 1)
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	2b01      	cmp	r3, #1
 8008846:	d013      	beq.n	8008870 <drftf1+0x21c>
  {
    for (i = 0; i < n; i++) { c[i] = ch[i]; }
 8008848:	2300      	movs	r3, #0
 800884a:	647b      	str	r3, [r7, #68]	; 0x44
 800884c:	e00c      	b.n	8008868 <drftf1+0x214>
 800884e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	441a      	add	r2, r3
 8008856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	440b      	add	r3, r1
 800885e:	6812      	ldr	r2, [r2, #0]
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008864:	3301      	adds	r3, #1
 8008866:	647b      	str	r3, [r7, #68]	; 0x44
 8008868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	429a      	cmp	r2, r3
 800886e:	dbee      	blt.n	800884e <drftf1+0x1fa>
  }
}
 8008870:	bf00      	nop
 8008872:	3748      	adds	r7, #72	; 0x48
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <dradb2>:

static void dradb2(int ido, int l1, float *cc, float *ch, float *wa1)
{
 8008878:	b480      	push	{r7}
 800887a:	b091      	sub	sp, #68	; 0x44
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
  int i, k, t0, t1, t2, t3, t4, t5, t6;
  float ti2, tr2;

  t0 = l1 * ido;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	fb02 f303 	mul.w	r3, r2, r3
 800888e:	61fb      	str	r3, [r7, #28]

  t1 = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	637b      	str	r3, [r7, #52]	; 0x34
  t2 = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	633b      	str	r3, [r7, #48]	; 0x30
  t3 = (ido << 1) - 1;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	3b01      	subs	r3, #1
 800889e:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (k = 0; k < l1; k++)
 80088a0:	2300      	movs	r3, #0
 80088a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088a4:	e037      	b.n	8008916 <dradb2+0x9e>
  {
    ch[t1] = cc[t2] + cc[t3 + t2];
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4413      	add	r3, r2
 80088ae:	ed93 7a00 	vldr	s14, [r3]
 80088b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	4413      	add	r3, r2
 80088be:	edd3 7a00 	vldr	s15, [r3]
 80088c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	4413      	add	r3, r2
 80088ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088ce:	edc3 7a00 	vstr	s15, [r3]
    ch[t1 + t0] = cc[t2] - cc[t3 + t2];
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	ed93 7a00 	vldr	s14, [r3]
 80088de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	4413      	add	r3, r2
 80088ea:	edd3 7a00 	vldr	s15, [r3]
 80088ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	4413      	add	r3, r2
 80088fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088fe:	edc3 7a00 	vstr	s15, [r3]
    t2 = (t1 += ido) << 1;
 8008902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	637b      	str	r3, [r7, #52]	; 0x34
 800890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	3301      	adds	r3, #1
 8008914:	63bb      	str	r3, [r7, #56]	; 0x38
 8008916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	429a      	cmp	r2, r3
 800891c:	dbc3      	blt.n	80088a6 <dradb2+0x2e>
  }

  if (ido < 2) { return; }
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b01      	cmp	r3, #1
 8008922:	f340 8121 	ble.w	8008b68 <dradb2+0x2f0>
  if (ido == 2) { goto L105; }
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b02      	cmp	r3, #2
 800892a:	f000 80e1 	beq.w	8008af0 <dradb2+0x278>

  t1 = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	637b      	str	r3, [r7, #52]	; 0x34
  t2 = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8008936:	2300      	movs	r3, #0
 8008938:	63bb      	str	r3, [r7, #56]	; 0x38
 800893a:	e0cb      	b.n	8008ad4 <dradb2+0x25c>
  {
    t3 = t1;
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
    t5 = (t4 = t2) + (ido << 1);
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	62bb      	str	r3, [r7, #40]	; 0x28
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800894a:	4413      	add	r3, r2
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
    t6 = t0 + t1;
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008952:	4413      	add	r3, r2
 8008954:	623b      	str	r3, [r7, #32]
    for (i = 2; i < ido; i += 2)
 8008956:	2302      	movs	r3, #2
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800895a:	e0ac      	b.n	8008ab6 <dradb2+0x23e>
    {
      t3 += 2;
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	3302      	adds	r3, #2
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
      t4 += 2;
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	3302      	adds	r3, #2
 8008966:	62bb      	str	r3, [r7, #40]	; 0x28
      t5 -= 2;
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	3b02      	subs	r3, #2
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
      t6 += 2;
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	3302      	adds	r3, #2
 8008972:	623b      	str	r3, [r7, #32]
      ch[t3 - 1] = cc[t4 - 1] + cc[t5 - 1];
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800897a:	3b01      	subs	r3, #1
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	4413      	add	r3, r2
 8008982:	ed93 7a00 	vldr	s14, [r3]
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800898c:	3b01      	subs	r3, #1
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	4413      	add	r3, r2
 8008994:	edd3 7a00 	vldr	s15, [r3]
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800899e:	3b01      	subs	r3, #1
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	4413      	add	r3, r2
 80089a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089aa:	edc3 7a00 	vstr	s15, [r3]
      tr2 = cc[t4 - 1] - cc[t5 - 1];
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089b4:	3b01      	subs	r3, #1
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	4413      	add	r3, r2
 80089bc:	ed93 7a00 	vldr	s14, [r3]
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089c6:	3b01      	subs	r3, #1
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	edd3 7a00 	vldr	s15, [r3]
 80089d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089d6:	edc7 7a06 	vstr	s15, [r7, #24]
      ch[t3] = cc[t4] - cc[t5];
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4413      	add	r3, r2
 80089e2:	ed93 7a00 	vldr	s14, [r3]
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	edd3 7a00 	vldr	s15, [r3]
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	4413      	add	r3, r2
 80089fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089fe:	edc3 7a00 	vstr	s15, [r3]
      ti2 = cc[t4] + cc[t5];
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	4413      	add	r3, r2
 8008a0a:	ed93 7a00 	vldr	s14, [r3]
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	edd3 7a00 	vldr	s15, [r3]
 8008a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a1e:	edc7 7a05 	vstr	s15, [r7, #20]
      ch[t6 - 1] = wa1[i - 2] * tr2 - wa1[i - 1] * ti2;
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a28:	3b02      	subs	r3, #2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a2e:	4413      	add	r3, r2
 8008a30:	ed93 7a00 	vldr	s14, [r3]
 8008a34:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a42:	3b01      	subs	r3, #1
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a48:	4413      	add	r3, r2
 8008a4a:	edd3 6a00 	vldr	s13, [r3]
 8008a4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	4413      	add	r3, r2
 8008a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a68:	edc3 7a00 	vstr	s15, [r3]
      ch[t6] = wa1[i - 2] * ti2 + wa1[i - 1] * tr2;
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a72:	3b02      	subs	r3, #2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a78:	4413      	add	r3, r2
 8008a7a:	ed93 7a00 	vldr	s14, [r3]
 8008a7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a92:	4413      	add	r3, r2
 8008a94:	edd3 6a00 	vldr	s13, [r3]
 8008a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008aac:	edc3 7a00 	vstr	s15, [r3]
    for (i = 2; i < ido; i += 2)
 8008ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	f6ff af4e 	blt.w	800895c <dradb2+0xe4>
    }
    t2 = (t1 += ido) << 1;
 8008ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	f6ff af2f 	blt.w	800893c <dradb2+0xc4>
  }

  if (ido % 2 == 1) { return; }
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	bfb8      	it	lt
 8008ae8:	425b      	neglt	r3, r3
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d03e      	beq.n	8008b6c <dradb2+0x2f4>

L105:
 8008aee:	e000      	b.n	8008af2 <dradb2+0x27a>
  if (ido == 2) { goto L105; }
 8008af0:	bf00      	nop
  t1 = ido - 1;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	637b      	str	r3, [r7, #52]	; 0x34
  t2 = ido - 1;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8008afe:	2300      	movs	r3, #0
 8008b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b02:	e02c      	b.n	8008b5e <dradb2+0x2e6>
  {
    ch[t1] = cc[t2] + cc[t2];
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	edd3 7a00 	vldr	s15, [r3]
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	4413      	add	r3, r2
 8008b18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b1c:	edc3 7a00 	vstr	s15, [r3]
    ch[t1 + t0] = -(cc[t2 + 1] + cc[t2 + 1]);
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	3301      	adds	r3, #1
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	edd3 7a00 	vldr	s15, [r3]
 8008b2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	eef1 7a67 	vneg.f32	s15, s15
 8008b42:	edc3 7a00 	vstr	s15, [r3]
    t1 += ido;
 8008b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
    t2 += ido << 1;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b54:	4413      	add	r3, r2
 8008b56:	633b      	str	r3, [r7, #48]	; 0x30
  for (k = 0; k < l1; k++)
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	dbce      	blt.n	8008b04 <dradb2+0x28c>
 8008b66:	e002      	b.n	8008b6e <dradb2+0x2f6>
  if (ido < 2) { return; }
 8008b68:	bf00      	nop
 8008b6a:	e000      	b.n	8008b6e <dradb2+0x2f6>
  if (ido % 2 == 1) { return; }
 8008b6c:	bf00      	nop
  }
}
 8008b6e:	3744      	adds	r7, #68	; 0x44
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <dradb3>:

static void dradb3(int ido, int l1, float *cc, float *ch, float *wa1,
                   float *wa2)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b09d      	sub	sp, #116	; 0x74
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
  static float taur = -.5f;
  static float taui = .8660254037844386f;
  int i, k, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  float ci2, ci3, di2, di3, cr2, cr3, dr2, dr3, ti2, tr2;
  t0 = l1 * ido;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	fb02 f303 	mul.w	r3, r2, r3
 8008b8e:	647b      	str	r3, [r7, #68]	; 0x44

  t1 = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	667b      	str	r3, [r7, #100]	; 0x64
  t2 = t0 << 1;
 8008b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	643b      	str	r3, [r7, #64]	; 0x40
  t3 = ido << 1;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	663b      	str	r3, [r7, #96]	; 0x60
  t4 = ido + (ido << 1);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  t5 = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (k = 0; k < l1; k++)
 8008bae:	2300      	movs	r3, #0
 8008bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bb2:	e067      	b.n	8008c84 <dradb3+0x10c>
  {
    tr2 = cc[t3 - 1] + cc[t3 - 1];
 8008bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	edd3 7a00 	vldr	s15, [r3]
 8008bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008bca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    cr2 = cc[t5] + (taur * tr2);
 8008bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	ed93 7a00 	vldr	s14, [r3]
 8008bda:	4b3e      	ldr	r3, [pc, #248]	; (8008cd4 <dradb3+0x15c>)
 8008bdc:	edd3 6a00 	vldr	s13, [r3]
 8008be0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    ch[t1] = cc[t5] + tr2;
 8008bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	ed93 7a00 	vldr	s14, [r3]
 8008bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	4413      	add	r3, r2
 8008c04:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c0c:	edc3 7a00 	vstr	s15, [r3]
    ci3 = taui * (cc[t3] + cc[t3]);
 8008c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	4413      	add	r3, r2
 8008c18:	edd3 7a00 	vldr	s15, [r3]
 8008c1c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008c20:	4b2d      	ldr	r3, [pc, #180]	; (8008cd8 <dradb3+0x160>)
 8008c22:	edd3 7a00 	vldr	s15, [r3]
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    ch[t1 + t0] = cr2 - ci3;
 8008c2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	4413      	add	r3, r2
 8008c3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008c3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c46:	edc3 7a00 	vstr	s15, [r3]
    ch[t1 + t2] = cr2 + ci3;
 8008c4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	4413      	add	r3, r2
 8008c56:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008c5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c62:	edc3 7a00 	vstr	s15, [r3]
    t1 += ido;
 8008c66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	667b      	str	r3, [r7, #100]	; 0x64
    t3 += t4;
 8008c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c72:	4413      	add	r3, r2
 8008c74:	663b      	str	r3, [r7, #96]	; 0x60
    t5 += t4;
 8008c76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7a:	4413      	add	r3, r2
 8008c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (k = 0; k < l1; k++)
 8008c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c80:	3301      	adds	r3, #1
 8008c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	db93      	blt.n	8008bb4 <dradb3+0x3c>
  }

  if (ido == 1) { return; }
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	f000 819a 	beq.w	8008fc8 <dradb3+0x450>

  t1 = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	667b      	str	r3, [r7, #100]	; 0x64
  t3 = ido << 1;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	663b      	str	r3, [r7, #96]	; 0x60
  for (k = 0; k < l1; k++)
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ca2:	e18b      	b.n	8008fbc <dradb3+0x444>
  {
    t7 = t1 + (t1 << 1);
 8008ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008caa:	4413      	add	r3, r2
 8008cac:	657b      	str	r3, [r7, #84]	; 0x54
    t6 = (t5 = t7 + t3);
 8008cae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cb2:	4413      	add	r3, r2
 8008cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cb8:	65bb      	str	r3, [r7, #88]	; 0x58
    t8 = t1;
 8008cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cbc:	653b      	str	r3, [r7, #80]	; 0x50
    t10 = (t9 = t1 + t0) + t0;
 8008cbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc2:	4413      	add	r3, r2
 8008cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cca:	4413      	add	r3, r2
 8008ccc:	64bb      	str	r3, [r7, #72]	; 0x48

    for (i = 2; i < ido; i += 2)
 8008cce:	2302      	movs	r3, #2
 8008cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cd2:	e167      	b.n	8008fa4 <dradb3+0x42c>
 8008cd4:	20000028 	.word	0x20000028
 8008cd8:	2000002c 	.word	0x2000002c
    {
      t5 += 2;
 8008cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cde:	3302      	adds	r3, #2
 8008ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
      t6 -= 2;
 8008ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ce4:	3b02      	subs	r3, #2
 8008ce6:	65bb      	str	r3, [r7, #88]	; 0x58
      t7 += 2;
 8008ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cea:	3302      	adds	r3, #2
 8008cec:	657b      	str	r3, [r7, #84]	; 0x54
      t8 += 2;
 8008cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf0:	3302      	adds	r3, #2
 8008cf2:	653b      	str	r3, [r7, #80]	; 0x50
      t9 += 2;
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
      t10 += 2;
 8008cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	64bb      	str	r3, [r7, #72]	; 0x48
      tr2 = cc[t5 - 1] + cc[t6 - 1];
 8008d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d06:	3b01      	subs	r3, #1
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	ed93 7a00 	vldr	s14, [r3]
 8008d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	4413      	add	r3, r2
 8008d20:	edd3 7a00 	vldr	s15, [r3]
 8008d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d28:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      cr2 = cc[t7 - 1] + (taur * tr2);
 8008d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d32:	3b01      	subs	r3, #1
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	4413      	add	r3, r2
 8008d3a:	ed93 7a00 	vldr	s14, [r3]
 8008d3e:	4ba5      	ldr	r3, [pc, #660]	; (8008fd4 <dradb3+0x45c>)
 8008d40:	edd3 6a00 	vldr	s13, [r3]
 8008d44:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      ch[t8 - 1] = cc[t7 - 1] + tr2;
 8008d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	4413      	add	r3, r2
 8008d62:	ed93 7a00 	vldr	s14, [r3]
 8008d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	4413      	add	r3, r2
 8008d74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d7c:	edc3 7a00 	vstr	s15, [r3]
      ti2 = cc[t5] - cc[t6];
 8008d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	4413      	add	r3, r2
 8008d88:	ed93 7a00 	vldr	s14, [r3]
 8008d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	edd3 7a00 	vldr	s15, [r3]
 8008d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d9c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      ci2 = cc[t7] + (taur * ti2);
 8008da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	ed93 7a00 	vldr	s14, [r3]
 8008dac:	4b89      	ldr	r3, [pc, #548]	; (8008fd4 <dradb3+0x45c>)
 8008dae:	edd3 6a00 	vldr	s13, [r3]
 8008db2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      ch[t8] = cc[t7] + ti2;
 8008dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	4413      	add	r3, r2
 8008dca:	ed93 7a00 	vldr	s14, [r3]
 8008dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dde:	edc3 7a00 	vstr	s15, [r3]
      cr3 = taui * (cc[t5 - 1] - cc[t6 - 1]);
 8008de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008de4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008de8:	3b01      	subs	r3, #1
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	4413      	add	r3, r2
 8008df0:	ed93 7a00 	vldr	s14, [r3]
 8008df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008df6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	edd3 7a00 	vldr	s15, [r3]
 8008e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e0a:	4b73      	ldr	r3, [pc, #460]	; (8008fd8 <dradb3+0x460>)
 8008e0c:	edd3 7a00 	vldr	s15, [r3]
 8008e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e14:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      ci3 = taui * (cc[t5] + cc[t6]);
 8008e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4413      	add	r3, r2
 8008e20:	ed93 7a00 	vldr	s14, [r3]
 8008e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	edd3 7a00 	vldr	s15, [r3]
 8008e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e34:	4b68      	ldr	r3, [pc, #416]	; (8008fd8 <dradb3+0x460>)
 8008e36:	edd3 7a00 	vldr	s15, [r3]
 8008e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      dr2 = cr2 - ci3;
 8008e42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008e46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e4e:	edc7 7a08 	vstr	s15, [r7, #32]
      dr3 = cr2 + ci3;
 8008e52:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008e56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      di2 = ci2 + cr3;
 8008e62:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008e66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e6e:	edc7 7a06 	vstr	s15, [r7, #24]
      di3 = ci2 - cr3;
 8008e72:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008e76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e7e:	edc7 7a05 	vstr	s15, [r7, #20]
      ch[t9 - 1] = wa1[i - 2] * dr2 - wa1[i - 1] * di2;
 8008e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e88:	3b02      	subs	r3, #2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e8e:	4413      	add	r3, r2
 8008e90:	ed93 7a00 	vldr	s14, [r3]
 8008e94:	edd7 7a08 	vldr	s15, [r7, #32]
 8008e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ea8:	4413      	add	r3, r2
 8008eaa:	edd3 6a00 	vldr	s13, [r3]
 8008eae:	edd7 7a06 	vldr	s15, [r7, #24]
 8008eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ec8:	edc3 7a00 	vstr	s15, [r3]
      ch[t9] = wa1[i - 2] * di2 + wa1[i - 1] * dr2;
 8008ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ece:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ed2:	3b02      	subs	r3, #2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ed8:	4413      	add	r3, r2
 8008eda:	ed93 7a00 	vldr	s14, [r3]
 8008ede:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008eec:	3b01      	subs	r3, #1
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ef2:	4413      	add	r3, r2
 8008ef4:	edd3 6a00 	vldr	s13, [r3]
 8008ef8:	edd7 7a08 	vldr	s15, [r7, #32]
 8008efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	4413      	add	r3, r2
 8008f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f0c:	edc3 7a00 	vstr	s15, [r3]
      ch[t10 - 1] = wa2[i - 2] * dr3 - wa2[i - 1] * di3;
 8008f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f16:	3b02      	subs	r3, #2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f1c:	4413      	add	r3, r2
 8008f1e:	ed93 7a00 	vldr	s14, [r3]
 8008f22:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f30:	3b01      	subs	r3, #1
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f36:	4413      	add	r3, r2
 8008f38:	edd3 6a00 	vldr	s13, [r3]
 8008f3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4413      	add	r3, r2
 8008f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f56:	edc3 7a00 	vstr	s15, [r3]
      ch[t10] = wa2[i - 2] * di3 + wa2[i - 1] * dr3;
 8008f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f60:	3b02      	subs	r3, #2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f66:	4413      	add	r3, r2
 8008f68:	ed93 7a00 	vldr	s14, [r3]
 8008f6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f80:	4413      	add	r3, r2
 8008f82:	edd3 6a00 	vldr	s13, [r3]
 8008f86:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4413      	add	r3, r2
 8008f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f9a:	edc3 7a00 	vstr	s15, [r3]
    for (i = 2; i < ido; i += 2)
 8008f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	f6ff ae97 	blt.w	8008cdc <dradb3+0x164>
    }
    t1 += ido;
 8008fae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	667b      	str	r3, [r7, #100]	; 0x64
  for (k = 0; k < l1; k++)
 8008fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fb8:	3301      	adds	r3, #1
 8008fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	f6ff ae6f 	blt.w	8008ca4 <dradb3+0x12c>
 8008fc6:	e000      	b.n	8008fca <dradb3+0x452>
  if (ido == 1) { return; }
 8008fc8:	bf00      	nop
  }
}
 8008fca:	3774      	adds	r7, #116	; 0x74
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	20000028 	.word	0x20000028
 8008fd8:	2000002c 	.word	0x2000002c

08008fdc <dradb4>:

static void dradb4(int ido, int l1, float *cc, float *ch, float *wa1,
                   float *wa2, float *wa3)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b09f      	sub	sp, #124	; 0x7c
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
  static float sqrt2 = 1.414213562373095f;
  int i, k, t0, t1, t2, t3, t4, t5, t6, t7, t8;
  float ci2, ci3, ci4, cr2, cr3, cr4, ti1, ti2, ti3, ti4, tr1, tr2, tr3, tr4;
  t0 = l1 * ido;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
 8008ff2:	657b      	str	r3, [r7, #84]	; 0x54

  t1 = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
  t2 = ido << 2;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	66bb      	str	r3, [r7, #104]	; 0x68
  t3 = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	667b      	str	r3, [r7, #100]	; 0x64
  t6 = ido << 1;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	653b      	str	r3, [r7, #80]	; 0x50
  for (k = 0; k < l1; k++)
 8009008:	2300      	movs	r3, #0
 800900a:	673b      	str	r3, [r7, #112]	; 0x70
 800900c:	e08d      	b.n	800912a <dradb4+0x14e>
  {
    t4 = t3 + t6;
 800900e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009012:	4413      	add	r3, r2
 8009014:	663b      	str	r3, [r7, #96]	; 0x60
    t5 = t1;
 8009016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009018:	65fb      	str	r3, [r7, #92]	; 0x5c
    tr3 = cc[t4 - 1] + cc[t4 - 1];
 800901a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800901c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009020:	3b01      	subs	r3, #1
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	4413      	add	r3, r2
 8009028:	edd3 7a00 	vldr	s15, [r3]
 800902c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009030:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    tr4 = cc[t4] + cc[t4];
 8009034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	4413      	add	r3, r2
 800903c:	edd3 7a00 	vldr	s15, [r3]
 8009040:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009044:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    tr1 = cc[t3] - cc[(t4 += t6) - 1];
 8009048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	4413      	add	r3, r2
 8009050:	ed93 7a00 	vldr	s14, [r3]
 8009054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009058:	4413      	add	r3, r2
 800905a:	663b      	str	r3, [r7, #96]	; 0x60
 800905c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800905e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009062:	3b01      	subs	r3, #1
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	4413      	add	r3, r2
 800906a:	edd3 7a00 	vldr	s15, [r3]
 800906e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009072:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    tr2 = cc[t3] + cc[t4 - 1];
 8009076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	4413      	add	r3, r2
 800907e:	ed93 7a00 	vldr	s14, [r3]
 8009082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009084:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009088:	3b01      	subs	r3, #1
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	4413      	add	r3, r2
 8009090:	edd3 7a00 	vldr	s15, [r3]
 8009094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009098:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    ch[t5] = tr2 + tr3;
 800909c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	4413      	add	r3, r2
 80090a4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80090a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80090ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090b0:	edc3 7a00 	vstr	s15, [r3]
    ch[t5 += t0] = tr1 - tr4;
 80090b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090b8:	4413      	add	r3, r2
 80090ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	4413      	add	r3, r2
 80090c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80090c8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80090cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090d0:	edc3 7a00 	vstr	s15, [r3]
    ch[t5 += t0] = tr2 - tr3;
 80090d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090d8:	4413      	add	r3, r2
 80090da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	4413      	add	r3, r2
 80090e4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80090e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80090ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090f0:	edc3 7a00 	vstr	s15, [r3]
    ch[t5 += t0] = tr1 + tr4;
 80090f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090f8:	4413      	add	r3, r2
 80090fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	4413      	add	r3, r2
 8009104:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009108:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800910c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009110:	edc3 7a00 	vstr	s15, [r3]
    t1 += ido;
 8009114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4413      	add	r3, r2
 800911a:	66fb      	str	r3, [r7, #108]	; 0x6c
    t3 += t2;
 800911c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800911e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009120:	4413      	add	r3, r2
 8009122:	667b      	str	r3, [r7, #100]	; 0x64
  for (k = 0; k < l1; k++)
 8009124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009126:	3301      	adds	r3, #1
 8009128:	673b      	str	r3, [r7, #112]	; 0x70
 800912a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	f6ff af6d 	blt.w	800900e <dradb4+0x32>
  }

  if (ido < 2) { return; }
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b01      	cmp	r3, #1
 8009138:	f340 82d0 	ble.w	80096dc <dradb4+0x700>
  if (ido == 2) { goto L105; }
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b02      	cmp	r3, #2
 8009140:	f000 8214 	beq.w	800956c <dradb4+0x590>

  t1 = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	66fb      	str	r3, [r7, #108]	; 0x6c
  for (k = 0; k < l1; k++)
 8009148:	2300      	movs	r3, #0
 800914a:	673b      	str	r3, [r7, #112]	; 0x70
 800914c:	e1ff      	b.n	800954e <dradb4+0x572>
  {
    t5 = (t4 = (t3 = (t2 = t1 << 2) + t6)) + t6;
 800914e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	66bb      	str	r3, [r7, #104]	; 0x68
 8009154:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009158:	4413      	add	r3, r2
 800915a:	667b      	str	r3, [r7, #100]	; 0x64
 800915c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800915e:	663b      	str	r3, [r7, #96]	; 0x60
 8009160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009164:	4413      	add	r3, r2
 8009166:	65fb      	str	r3, [r7, #92]	; 0x5c
    t7 = t1;
 8009168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800916a:	65bb      	str	r3, [r7, #88]	; 0x58
    for (i = 2; i < ido; i += 2)
 800916c:	2302      	movs	r3, #2
 800916e:	677b      	str	r3, [r7, #116]	; 0x74
 8009170:	e1e1      	b.n	8009536 <dradb4+0x55a>
    {
      t2 += 2;
 8009172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009174:	3302      	adds	r3, #2
 8009176:	66bb      	str	r3, [r7, #104]	; 0x68
      t3 += 2;
 8009178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917a:	3302      	adds	r3, #2
 800917c:	667b      	str	r3, [r7, #100]	; 0x64
      t4 -= 2;
 800917e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009180:	3b02      	subs	r3, #2
 8009182:	663b      	str	r3, [r7, #96]	; 0x60
      t5 -= 2;
 8009184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009186:	3b02      	subs	r3, #2
 8009188:	65fb      	str	r3, [r7, #92]	; 0x5c
      t7 += 2;
 800918a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800918c:	3302      	adds	r3, #2
 800918e:	65bb      	str	r3, [r7, #88]	; 0x58
      ti1 = cc[t2] + cc[t5];
 8009190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4413      	add	r3, r2
 8009198:	ed93 7a00 	vldr	s14, [r3]
 800919c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	4413      	add	r3, r2
 80091a4:	edd3 7a00 	vldr	s15, [r3]
 80091a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091ac:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      ti2 = cc[t2] - cc[t5];
 80091b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	4413      	add	r3, r2
 80091b8:	ed93 7a00 	vldr	s14, [r3]
 80091bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	4413      	add	r3, r2
 80091c4:	edd3 7a00 	vldr	s15, [r3]
 80091c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      ti3 = cc[t3] - cc[t4];
 80091d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	4413      	add	r3, r2
 80091d8:	ed93 7a00 	vldr	s14, [r3]
 80091dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	edd3 7a00 	vldr	s15, [r3]
 80091e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      tr4 = cc[t3] + cc[t4];
 80091f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	4413      	add	r3, r2
 80091f8:	ed93 7a00 	vldr	s14, [r3]
 80091fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	4413      	add	r3, r2
 8009204:	edd3 7a00 	vldr	s15, [r3]
 8009208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800920c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      tr1 = cc[t2 - 1] - cc[t5 - 1];
 8009210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009216:	3b01      	subs	r3, #1
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	4413      	add	r3, r2
 800921e:	ed93 7a00 	vldr	s14, [r3]
 8009222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009228:	3b01      	subs	r3, #1
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	4413      	add	r3, r2
 8009230:	edd3 7a00 	vldr	s15, [r3]
 8009234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009238:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
      tr2 = cc[t2 - 1] + cc[t5 - 1];
 800923c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800923e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009242:	3b01      	subs	r3, #1
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	ed93 7a00 	vldr	s14, [r3]
 800924e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009254:	3b01      	subs	r3, #1
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	4413      	add	r3, r2
 800925c:	edd3 7a00 	vldr	s15, [r3]
 8009260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009264:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      ti4 = cc[t3 - 1] - cc[t4 - 1];
 8009268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800926a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800926e:	3b01      	subs	r3, #1
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	4413      	add	r3, r2
 8009276:	ed93 7a00 	vldr	s14, [r3]
 800927a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800927c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009280:	3b01      	subs	r3, #1
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	edd3 7a00 	vldr	s15, [r3]
 800928c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009290:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      tr3 = cc[t3 - 1] + cc[t4 - 1];
 8009294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009296:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800929a:	3b01      	subs	r3, #1
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	4413      	add	r3, r2
 80092a2:	ed93 7a00 	vldr	s14, [r3]
 80092a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092ac:	3b01      	subs	r3, #1
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	4413      	add	r3, r2
 80092b4:	edd3 7a00 	vldr	s15, [r3]
 80092b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      ch[t7 - 1] = tr2 + tr3;
 80092c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092c6:	3b01      	subs	r3, #1
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4413      	add	r3, r2
 80092ce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80092d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80092d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092da:	edc3 7a00 	vstr	s15, [r3]
      cr3 = tr2 - tr3;
 80092de:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80092e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80092e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      ch[t7] = ti2 + ti3;
 80092ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4413      	add	r3, r2
 80092f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80092fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80092fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009302:	edc3 7a00 	vstr	s15, [r3]
      ci3 = ti2 - ti3;
 8009306:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800930a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800930e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009312:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      cr2 = tr1 - tr4;
 8009316:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800931a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800931e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009322:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      cr4 = tr1 + tr4;
 8009326:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800932a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800932e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009332:	edc7 7a08 	vstr	s15, [r7, #32]
      ci2 = ti1 + ti4;
 8009336:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800933a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800933e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009342:	edc7 7a07 	vstr	s15, [r7, #28]
      ci4 = ti1 - ti4;
 8009346:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800934a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800934e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009352:	edc7 7a06 	vstr	s15, [r7, #24]

      ch[(t8 = t7 + t0) - 1] = wa1[i - 2] * cr2 - wa1[i - 1] * ci2;
 8009356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800935c:	3b02      	subs	r3, #2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009364:	4413      	add	r3, r2
 8009366:	ed93 7a00 	vldr	s14, [r3]
 800936a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800936e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009374:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009378:	3b01      	subs	r3, #1
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009380:	4413      	add	r3, r2
 8009382:	edd3 6a00 	vldr	s13, [r3]
 8009386:	edd7 7a07 	vldr	s15, [r7, #28]
 800938a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800938e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009392:	4413      	add	r3, r2
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800939c:	3b01      	subs	r3, #1
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	4413      	add	r3, r2
 80093a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093a8:	edc3 7a00 	vstr	s15, [r3]
      ch[t8] = wa1[i - 2] * ci2 + wa1[i - 1] * cr2;
 80093ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093b2:	3b02      	subs	r3, #2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093ba:	4413      	add	r3, r2
 80093bc:	ed93 7a00 	vldr	s14, [r3]
 80093c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80093c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093ce:	3b01      	subs	r3, #1
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093d6:	4413      	add	r3, r2
 80093d8:	edd3 6a00 	vldr	s13, [r3]
 80093dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80093e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	4413      	add	r3, r2
 80093ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093f0:	edc3 7a00 	vstr	s15, [r3]
      ch[(t8 += t0) - 1] = wa2[i - 2] * cr3 - wa2[i - 1] * ci3;
 80093f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093fa:	3b02      	subs	r3, #2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009402:	4413      	add	r3, r2
 8009404:	ed93 7a00 	vldr	s14, [r3]
 8009408:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800940c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009412:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009416:	3b01      	subs	r3, #1
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800941e:	4413      	add	r3, r2
 8009420:	edd3 6a00 	vldr	s13, [r3]
 8009424:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009430:	4413      	add	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800943a:	3b01      	subs	r3, #1
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	4413      	add	r3, r2
 8009442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009446:	edc3 7a00 	vstr	s15, [r3]
      ch[t8] = wa2[i - 2] * ci3 + wa2[i - 1] * cr3;
 800944a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800944c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009450:	3b02      	subs	r3, #2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009458:	4413      	add	r3, r2
 800945a:	ed93 7a00 	vldr	s14, [r3]
 800945e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009468:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800946c:	3b01      	subs	r3, #1
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009474:	4413      	add	r3, r2
 8009476:	edd3 6a00 	vldr	s13, [r3]
 800947a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800947e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	4413      	add	r3, r2
 800948a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800948e:	edc3 7a00 	vstr	s15, [r3]
      ch[(t8 += t0) - 1] = wa3[i - 2] * cr4 - wa3[i - 1] * ci4;
 8009492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009498:	3b02      	subs	r3, #2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80094a0:	4413      	add	r3, r2
 80094a2:	ed93 7a00 	vldr	s14, [r3]
 80094a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80094aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80094b4:	3b01      	subs	r3, #1
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80094bc:	4413      	add	r3, r2
 80094be:	edd3 6a00 	vldr	s13, [r3]
 80094c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80094c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ce:	4413      	add	r3, r2
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80094d8:	3b01      	subs	r3, #1
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	4413      	add	r3, r2
 80094e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094e4:	edc3 7a00 	vstr	s15, [r3]
      ch[t8] = wa3[i - 2] * ci4 + wa3[i - 1] * cr4;
 80094e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80094ee:	3b02      	subs	r3, #2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80094f6:	4413      	add	r3, r2
 80094f8:	ed93 7a00 	vldr	s14, [r3]
 80094fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009506:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800950a:	3b01      	subs	r3, #1
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009512:	4413      	add	r3, r2
 8009514:	edd3 6a00 	vldr	s13, [r3]
 8009518:	edd7 7a08 	vldr	s15, [r7, #32]
 800951c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	4413      	add	r3, r2
 8009528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800952c:	edc3 7a00 	vstr	s15, [r3]
    for (i = 2; i < ido; i += 2)
 8009530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009532:	3302      	adds	r3, #2
 8009534:	677b      	str	r3, [r7, #116]	; 0x74
 8009536:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	429a      	cmp	r2, r3
 800953c:	f6ff ae19 	blt.w	8009172 <dradb4+0x196>
    }
    t1 += ido;
 8009540:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4413      	add	r3, r2
 8009546:	66fb      	str	r3, [r7, #108]	; 0x6c
  for (k = 0; k < l1; k++)
 8009548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800954a:	3301      	adds	r3, #1
 800954c:	673b      	str	r3, [r7, #112]	; 0x70
 800954e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	429a      	cmp	r2, r3
 8009554:	f6ff adfb 	blt.w	800914e <dradb4+0x172>
  }

  if (ido % 2 == 1) { return; }
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	bfb8      	it	lt
 8009562:	425b      	neglt	r3, r3
 8009564:	2b01      	cmp	r3, #1
 8009566:	f000 80bb 	beq.w	80096e0 <dradb4+0x704>

L105:
 800956a:	e000      	b.n	800956e <dradb4+0x592>
  if (ido == 2) { goto L105; }
 800956c:	bf00      	nop

  t1 = ido;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	66fb      	str	r3, [r7, #108]	; 0x6c
  t2 = ido << 2;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	66bb      	str	r3, [r7, #104]	; 0x68
  t3 = ido - 1;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3b01      	subs	r3, #1
 800957c:	667b      	str	r3, [r7, #100]	; 0x64
  t4 = ido + (ido << 1);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	663b      	str	r3, [r7, #96]	; 0x60
  for (k = 0; k < l1; k++)
 8009588:	2300      	movs	r3, #0
 800958a:	673b      	str	r3, [r7, #112]	; 0x70
 800958c:	e0a0      	b.n	80096d0 <dradb4+0x6f4>
  {
    t5 = t3;
 800958e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009590:	65fb      	str	r3, [r7, #92]	; 0x5c
    ti1 = cc[t1] + cc[t4];
 8009592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	4413      	add	r3, r2
 800959a:	ed93 7a00 	vldr	s14, [r3]
 800959e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	edd3 7a00 	vldr	s15, [r3]
 80095aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095ae:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    ti2 = cc[t4] - cc[t1];
 80095b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	4413      	add	r3, r2
 80095ba:	ed93 7a00 	vldr	s14, [r3]
 80095be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	4413      	add	r3, r2
 80095c6:	edd3 7a00 	vldr	s15, [r3]
 80095ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095ce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    tr1 = cc[t1 - 1] - cc[t4 - 1];
 80095d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095d8:	3b01      	subs	r3, #1
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	4413      	add	r3, r2
 80095e0:	ed93 7a00 	vldr	s14, [r3]
 80095e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095ea:	3b01      	subs	r3, #1
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	edd3 7a00 	vldr	s15, [r3]
 80095f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095fa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    tr2 = cc[t1 - 1] + cc[t4 - 1];
 80095fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009604:	3b01      	subs	r3, #1
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4413      	add	r3, r2
 800960c:	ed93 7a00 	vldr	s14, [r3]
 8009610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009616:	3b01      	subs	r3, #1
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	edd3 7a00 	vldr	s15, [r3]
 8009622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009626:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    ch[t5] = tr2 + tr2;
 800962a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	4413      	add	r3, r2
 8009632:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009636:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800963a:	edc3 7a00 	vstr	s15, [r3]
    ch[t5 += t0] = sqrt2 * (tr1 - ti1);
 800963e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009642:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800964a:	4b28      	ldr	r3, [pc, #160]	; (80096ec <dradb4+0x710>)
 800964c:	edd3 7a00 	vldr	s15, [r3]
 8009650:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009654:	4413      	add	r3, r2
 8009656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	4413      	add	r3, r2
 8009660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009664:	edc3 7a00 	vstr	s15, [r3]
    ch[t5 += t0] = ti2 + ti2;
 8009668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800966a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800966c:	4413      	add	r3, r2
 800966e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	4413      	add	r3, r2
 8009678:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800967c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009680:	edc3 7a00 	vstr	s15, [r3]
    ch[t5 += t0] = -sqrt2 * (tr1 + ti1);
 8009684:	4b19      	ldr	r3, [pc, #100]	; (80096ec <dradb4+0x710>)
 8009686:	edd3 7a00 	vldr	s15, [r3]
 800968a:	eeb1 7a67 	vneg.f32	s14, s15
 800968e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8009692:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800969c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800969e:	4413      	add	r3, r2
 80096a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	4413      	add	r3, r2
 80096aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ae:	edc3 7a00 	vstr	s15, [r3]

    t3 += ido;
 80096b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	667b      	str	r3, [r7, #100]	; 0x64
    t1 += t2;
 80096ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096be:	4413      	add	r3, r2
 80096c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    t4 += t2;
 80096c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096c6:	4413      	add	r3, r2
 80096c8:	663b      	str	r3, [r7, #96]	; 0x60
  for (k = 0; k < l1; k++)
 80096ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096cc:	3301      	adds	r3, #1
 80096ce:	673b      	str	r3, [r7, #112]	; 0x70
 80096d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	f6ff af5a 	blt.w	800958e <dradb4+0x5b2>
 80096da:	e002      	b.n	80096e2 <dradb4+0x706>
  if (ido < 2) { return; }
 80096dc:	bf00      	nop
 80096de:	e000      	b.n	80096e2 <dradb4+0x706>
  if (ido % 2 == 1) { return; }
 80096e0:	bf00      	nop
  }
}
 80096e2:	377c      	adds	r7, #124	; 0x7c
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	20000030 	.word	0x20000030

080096f0 <dradbg>:

static void dradbg(int ido, int ip, int l1, int idl1, float *cc, float *c1,
                   float *c2, float *ch, float *ch2, float *wa)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b0a6      	sub	sp, #152	; 0x98
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
  float dc2, ai1, ai2, ar1, ar2, ds2;
  int nbd;
  float dcp, arg, dsp, ar1h, ar2h;
  int ipp2;

  t10 = ip * ido;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	fb02 f303 	mul.w	r3, r2, r3
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
  t0 = l1 * ido;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	fb02 f303 	mul.w	r3, r2, r3
 8009710:	63bb      	str	r3, [r7, #56]	; 0x38
  arg = tpi / (float)ip;
 8009712:	4ba1      	ldr	r3, [pc, #644]	; (8009998 <dradbg+0x2a8>)
 8009714:	edd3 6a00 	vldr	s13, [r3]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009726:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  dcp = cosf(arg);
 800972a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800972e:	f008 fed7 	bl	80124e0 <cosf>
 8009732:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  dsp = sinf(arg);
 8009736:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800973a:	f008 ff15 	bl	8012568 <sinf>
 800973e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  nbd = (ido - 1) >> 1;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3b01      	subs	r3, #1
 8009746:	105b      	asrs	r3, r3, #1
 8009748:	62bb      	str	r3, [r7, #40]	; 0x28
  ipp2 = ip;
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	627b      	str	r3, [r7, #36]	; 0x24
  ipph = (ip + 1) >> 1;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	3301      	adds	r3, #1
 8009752:	105b      	asrs	r3, r3, #1
 8009754:	623b      	str	r3, [r7, #32]
  if (ido < l1) { goto L103; }
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	429a      	cmp	r2, r3
 800975c:	db3e      	blt.n	80097dc <dradbg+0xec>

  t1 = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	677b      	str	r3, [r7, #116]	; 0x74
  for (k = 0; k < l1; k++)
 8009766:	2300      	movs	r3, #0
 8009768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800976c:	e030      	b.n	80097d0 <dradbg+0xe0>
  {
    t3 = t1;
 800976e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009770:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2;
 8009772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009774:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (i = 0; i < ido; i++)
 8009776:	2300      	movs	r3, #0
 8009778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800977c:	e016      	b.n	80097ac <dradbg+0xbc>
    {
      ch[t3] = cc[t4];
 800977e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009786:	441a      	add	r2, r3
 8009788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009790:	440b      	add	r3, r1
 8009792:	6812      	ldr	r2, [r2, #0]
 8009794:	601a      	str	r2, [r3, #0]
      t3++;
 8009796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009798:	3301      	adds	r3, #1
 800979a:	673b      	str	r3, [r7, #112]	; 0x70
      t4++;
 800979c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800979e:	3301      	adds	r3, #1
 80097a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (i = 0; i < ido; i++)
 80097a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097a6:	3301      	adds	r3, #1
 80097a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	dbe3      	blt.n	800977e <dradbg+0x8e>
    }
    t1 += ido;
 80097b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 += t10;
 80097be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80097c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c2:	4413      	add	r3, r2
 80097c4:	677b      	str	r3, [r7, #116]	; 0x74
  for (k = 0; k < l1; k++)
 80097c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ca:	3301      	adds	r3, #1
 80097cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	dbc9      	blt.n	800976e <dradbg+0x7e>
  }
  goto L106;
 80097da:	e03a      	b.n	8009852 <dradbg+0x162>
  if (ido < l1) { goto L103; }
 80097dc:	bf00      	nop

L103:
  t1 = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	67bb      	str	r3, [r7, #120]	; 0x78
  for (i = 0; i < ido; i++)
 80097e2:	2300      	movs	r3, #0
 80097e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097e8:	e02d      	b.n	8009846 <dradbg+0x156>
  {
    t2 = t1;
 80097ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ec:	677b      	str	r3, [r7, #116]	; 0x74
    t3 = t1;
 80097ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097f0:	673b      	str	r3, [r7, #112]	; 0x70
    for (k = 0; k < l1; k++)
 80097f2:	2300      	movs	r3, #0
 80097f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097f8:	e018      	b.n	800982c <dradbg+0x13c>
    {
      ch[t2] = cc[t3];
 80097fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009802:	441a      	add	r2, r3
 8009804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800980c:	440b      	add	r3, r1
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	601a      	str	r2, [r3, #0]
      t2 += ido;
 8009812:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	677b      	str	r3, [r7, #116]	; 0x74
      t3 += t10;
 800981a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800981c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981e:	4413      	add	r3, r2
 8009820:	673b      	str	r3, [r7, #112]	; 0x70
    for (k = 0; k < l1; k++)
 8009822:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009826:	3301      	adds	r3, #1
 8009828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800982c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	429a      	cmp	r2, r3
 8009834:	dbe1      	blt.n	80097fa <dradbg+0x10a>
    }
    t1++;
 8009836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009838:	3301      	adds	r3, #1
 800983a:	67bb      	str	r3, [r7, #120]	; 0x78
  for (i = 0; i < ido; i++)
 800983c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009840:	3301      	adds	r3, #1
 8009842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009846:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	429a      	cmp	r2, r3
 800984e:	dbcc      	blt.n	80097ea <dradbg+0xfa>
  }

L106:
 8009850:	bf00      	nop
  t1 = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * t0;
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800985a:	fb02 f303 	mul.w	r3, r2, r3
 800985e:	677b      	str	r3, [r7, #116]	; 0x74
  t7 = (t5 = ido << 1);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	66bb      	str	r3, [r7, #104]	; 0x68
 8009866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009868:	663b      	str	r3, [r7, #96]	; 0x60
  for (j = 1; j < ipph; j++)
 800986a:	2301      	movs	r3, #1
 800986c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009870:	e053      	b.n	800991a <dradbg+0x22a>
  {
    t1 += t0;
 8009872:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	4413      	add	r3, r2
 8009878:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= t0;
 800987a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	677b      	str	r3, [r7, #116]	; 0x74
    t3 = t1;
 8009882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009884:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2;
 8009886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009888:	66fb      	str	r3, [r7, #108]	; 0x6c
    t6 = t5;
 800988a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800988c:	667b      	str	r3, [r7, #100]	; 0x64
    for (k = 0; k < l1; k++)
 800988e:	2300      	movs	r3, #0
 8009890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009894:	e033      	b.n	80098fe <dradbg+0x20e>
    {
      ch[t3] = cc[t6 - 1] + cc[t6 - 1];
 8009896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800989c:	3b01      	subs	r3, #1
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80098a4:	4413      	add	r3, r2
 80098a6:	edd3 7a00 	vldr	s15, [r3]
 80098aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098b2:	4413      	add	r3, r2
 80098b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098b8:	edc3 7a00 	vstr	s15, [r3]
      ch[t4] = cc[t6] + cc[t6];
 80098bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80098c4:	4413      	add	r3, r2
 80098c6:	edd3 7a00 	vldr	s15, [r3]
 80098ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098d2:	4413      	add	r3, r2
 80098d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098d8:	edc3 7a00 	vstr	s15, [r3]
      t3 += ido;
 80098dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4413      	add	r3, r2
 80098e2:	673b      	str	r3, [r7, #112]	; 0x70
      t4 += ido;
 80098e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	4413      	add	r3, r2
 80098ea:	66fb      	str	r3, [r7, #108]	; 0x6c
      t6 += t10;
 80098ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f0:	4413      	add	r3, r2
 80098f2:	667b      	str	r3, [r7, #100]	; 0x64
    for (k = 0; k < l1; k++)
 80098f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098f8:	3301      	adds	r3, #1
 80098fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	429a      	cmp	r2, r3
 8009906:	dbc6      	blt.n	8009896 <dradbg+0x1a6>
    }
    t5 += t7;
 8009908:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800990a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800990c:	4413      	add	r3, r2
 800990e:	66bb      	str	r3, [r7, #104]	; 0x68
  for (j = 1; j < ipph; j++)
 8009910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009914:	3301      	adds	r3, #1
 8009916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800991a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	429a      	cmp	r2, r3
 8009922:	dba6      	blt.n	8009872 <dradbg+0x182>
  }

  if (ido == 1) { goto L116; }
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b01      	cmp	r3, #1
 8009928:	f000 81bf 	beq.w	8009caa <dradbg+0x5ba>
  if (nbd < l1) { goto L112; }
 800992c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	f2c0 80db 	blt.w	8009aec <dradbg+0x3fc>

  t1 = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * t0;
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	677b      	str	r3, [r7, #116]	; 0x74
  t7 = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	663b      	str	r3, [r7, #96]	; 0x60
  for (j = 1; j < ipph; j++)
 8009948:	2301      	movs	r3, #1
 800994a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800994e:	e0c6      	b.n	8009ade <dradbg+0x3ee>
  {
    t1 += t0;
 8009950:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	4413      	add	r3, r2
 8009956:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= t0;
 8009958:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	677b      	str	r3, [r7, #116]	; 0x74
    t3 = t1;
 8009960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009962:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2;
 8009964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009966:	66fb      	str	r3, [r7, #108]	; 0x6c

    t7 += (ido << 1);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800996e:	4413      	add	r3, r2
 8009970:	663b      	str	r3, [r7, #96]	; 0x60
    t8 = t7;
 8009972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009974:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (k = 0; k < l1; k++)
 8009976:	2300      	movs	r3, #0
 8009978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800997c:	e0a4      	b.n	8009ac8 <dradbg+0x3d8>
    {
      t5 = t3;
 800997e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009980:	66bb      	str	r3, [r7, #104]	; 0x68
      t6 = t4;
 8009982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009984:	667b      	str	r3, [r7, #100]	; 0x64
      t9 = t8;
 8009986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009988:	65bb      	str	r3, [r7, #88]	; 0x58
      t11 = t8;
 800998a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800998c:	657b      	str	r3, [r7, #84]	; 0x54
      for (i = 2; i < ido; i += 2)
 800998e:	2302      	movs	r3, #2
 8009990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009994:	e081      	b.n	8009a9a <dradbg+0x3aa>
 8009996:	bf00      	nop
 8009998:	20000034 	.word	0x20000034
      {
        t5 += 2;
 800999c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800999e:	3302      	adds	r3, #2
 80099a0:	66bb      	str	r3, [r7, #104]	; 0x68
        t6 += 2;
 80099a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099a4:	3302      	adds	r3, #2
 80099a6:	667b      	str	r3, [r7, #100]	; 0x64
        t9 += 2;
 80099a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099aa:	3302      	adds	r3, #2
 80099ac:	65bb      	str	r3, [r7, #88]	; 0x58
        t11 -= 2;
 80099ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099b0:	3b02      	subs	r3, #2
 80099b2:	657b      	str	r3, [r7, #84]	; 0x54
        ch[t5 - 1] = cc[t9 - 1] + cc[t11 - 1];
 80099b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099ba:	3b01      	subs	r3, #1
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80099c2:	4413      	add	r3, r2
 80099c4:	ed93 7a00 	vldr	s14, [r3]
 80099c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099ce:	3b01      	subs	r3, #1
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80099d6:	4413      	add	r3, r2
 80099d8:	edd3 7a00 	vldr	s15, [r3]
 80099dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099e2:	3b01      	subs	r3, #1
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80099ea:	4413      	add	r3, r2
 80099ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099f0:	edc3 7a00 	vstr	s15, [r3]
        ch[t6 - 1] = cc[t9 - 1] - cc[t11 - 1];
 80099f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099fa:	3b01      	subs	r3, #1
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009a02:	4413      	add	r3, r2
 8009a04:	ed93 7a00 	vldr	s14, [r3]
 8009a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009a16:	4413      	add	r3, r2
 8009a18:	edd3 7a00 	vldr	s15, [r3]
 8009a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a22:	3b01      	subs	r3, #1
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009a2a:	4413      	add	r3, r2
 8009a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a30:	edc3 7a00 	vstr	s15, [r3]
        ch[t5] = cc[t9] - cc[t11];
 8009a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009a3c:	4413      	add	r3, r2
 8009a3e:	ed93 7a00 	vldr	s14, [r3]
 8009a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009a4a:	4413      	add	r3, r2
 8009a4c:	edd3 7a00 	vldr	s15, [r3]
 8009a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009a58:	4413      	add	r3, r2
 8009a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a5e:	edc3 7a00 	vstr	s15, [r3]
        ch[t6] = cc[t9] + cc[t11];
 8009a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009a6a:	4413      	add	r3, r2
 8009a6c:	ed93 7a00 	vldr	s14, [r3]
 8009a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009a78:	4413      	add	r3, r2
 8009a7a:	edd3 7a00 	vldr	s15, [r3]
 8009a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009a86:	4413      	add	r3, r2
 8009a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a8c:	edc3 7a00 	vstr	s15, [r3]
      for (i = 2; i < ido; i += 2)
 8009a90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a94:	3302      	adds	r3, #2
 8009a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a9a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	f6ff af7b 	blt.w	800999c <dradbg+0x2ac>
      }
      t3 += ido;
 8009aa6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	673b      	str	r3, [r7, #112]	; 0x70
      t4 += ido;
 8009aae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
      t8 += t10;
 8009ab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aba:	4413      	add	r3, r2
 8009abc:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (k = 0; k < l1; k++)
 8009abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ac8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	f6ff af55 	blt.w	800997e <dradbg+0x28e>
  for (j = 1; j < ipph; j++)
 8009ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ad8:	3301      	adds	r3, #1
 8009ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ade:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	f6ff af33 	blt.w	8009950 <dradbg+0x260>
    }
  }
  goto L116;
 8009aea:	e0df      	b.n	8009cac <dradbg+0x5bc>
  if (nbd < l1) { goto L112; }
 8009aec:	bf00      	nop

L112:
  t1 = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * t0;
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009af6:	fb02 f303 	mul.w	r3, r2, r3
 8009afa:	677b      	str	r3, [r7, #116]	; 0x74
  t7 = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	663b      	str	r3, [r7, #96]	; 0x60
  for (j = 1; j < ipph; j++)
 8009b00:	2301      	movs	r3, #1
 8009b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b06:	e0c9      	b.n	8009c9c <dradbg+0x5ac>
  {
    t1 += t0;
 8009b08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	4413      	add	r3, r2
 8009b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= t0;
 8009b10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	677b      	str	r3, [r7, #116]	; 0x74
    t3 = t1;
 8009b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b1a:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2;
 8009b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    t7 += (ido << 1);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b26:	4413      	add	r3, r2
 8009b28:	663b      	str	r3, [r7, #96]	; 0x60
    t8 = t7;
 8009b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    t9 = t7;
 8009b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b30:	65bb      	str	r3, [r7, #88]	; 0x58
    for (i = 2; i < ido; i += 2)
 8009b32:	2302      	movs	r3, #2
 8009b34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b38:	e0a5      	b.n	8009c86 <dradbg+0x596>
    {
      t3 += 2;
 8009b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b3c:	3302      	adds	r3, #2
 8009b3e:	673b      	str	r3, [r7, #112]	; 0x70
      t4 += 2;
 8009b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b42:	3302      	adds	r3, #2
 8009b44:	66fb      	str	r3, [r7, #108]	; 0x6c
      t8 += 2;
 8009b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b48:	3302      	adds	r3, #2
 8009b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
      t9 -= 2;
 8009b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b4e:	3b02      	subs	r3, #2
 8009b50:	65bb      	str	r3, [r7, #88]	; 0x58
      t5 = t3;
 8009b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b54:	66bb      	str	r3, [r7, #104]	; 0x68
      t6 = t4;
 8009b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b58:	667b      	str	r3, [r7, #100]	; 0x64
      t11 = t8;
 8009b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b5c:	657b      	str	r3, [r7, #84]	; 0x54
      t12 = t9;
 8009b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b60:	653b      	str	r3, [r7, #80]	; 0x50
      for (k = 0; k < l1; k++)
 8009b62:	2300      	movs	r3, #0
 8009b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b68:	e082      	b.n	8009c70 <dradbg+0x580>
      {
        ch[t5 - 1] = cc[t11 - 1] + cc[t12 - 1];
 8009b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b70:	3b01      	subs	r3, #1
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009b78:	4413      	add	r3, r2
 8009b7a:	ed93 7a00 	vldr	s14, [r3]
 8009b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b84:	3b01      	subs	r3, #1
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009b8c:	4413      	add	r3, r2
 8009b8e:	edd3 7a00 	vldr	s15, [r3]
 8009b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ba0:	4413      	add	r3, r2
 8009ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ba6:	edc3 7a00 	vstr	s15, [r3]
        ch[t6 - 1] = cc[t11 - 1] - cc[t12 - 1];
 8009baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009bb8:	4413      	add	r3, r2
 8009bba:	ed93 7a00 	vldr	s14, [r3]
 8009bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009bcc:	4413      	add	r3, r2
 8009bce:	edd3 7a00 	vldr	s15, [r3]
 8009bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009be0:	4413      	add	r3, r2
 8009be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009be6:	edc3 7a00 	vstr	s15, [r3]
        ch[t5] = cc[t11] - cc[t12];
 8009bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009bf2:	4413      	add	r3, r2
 8009bf4:	ed93 7a00 	vldr	s14, [r3]
 8009bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009c00:	4413      	add	r3, r2
 8009c02:	edd3 7a00 	vldr	s15, [r3]
 8009c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c0e:	4413      	add	r3, r2
 8009c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c14:	edc3 7a00 	vstr	s15, [r3]
        ch[t6] = cc[t11] + cc[t12];
 8009c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009c20:	4413      	add	r3, r2
 8009c22:	ed93 7a00 	vldr	s14, [r3]
 8009c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009c2e:	4413      	add	r3, r2
 8009c30:	edd3 7a00 	vldr	s15, [r3]
 8009c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c3c:	4413      	add	r3, r2
 8009c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c42:	edc3 7a00 	vstr	s15, [r3]
        t5 += ido;
 8009c46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	66bb      	str	r3, [r7, #104]	; 0x68
        t6 += ido;
 8009c4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	667b      	str	r3, [r7, #100]	; 0x64
        t11 += t10;
 8009c56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c5a:	4413      	add	r3, r2
 8009c5c:	657b      	str	r3, [r7, #84]	; 0x54
        t12 += t10;
 8009c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c62:	4413      	add	r3, r2
 8009c64:	653b      	str	r3, [r7, #80]	; 0x50
      for (k = 0; k < l1; k++)
 8009c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c70:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	f6ff af77 	blt.w	8009b6a <dradbg+0x47a>
    for (i = 2; i < ido; i += 2)
 8009c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c80:	3302      	adds	r3, #2
 8009c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	f6ff af54 	blt.w	8009b3a <dradbg+0x44a>
  for (j = 1; j < ipph; j++)
 8009c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c96:	3301      	adds	r3, #1
 8009c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009c9c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	f6ff af30 	blt.w	8009b08 <dradbg+0x418>
      }
    }
  }

L116:
 8009ca8:	e000      	b.n	8009cac <dradbg+0x5bc>
  if (ido == 1) { goto L116; }
 8009caa:	bf00      	nop
  ar1 = 1.f;
 8009cac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009cb0:	647b      	str	r3, [r7, #68]	; 0x44
  ai1 = 0.f;
 8009cb2:	f04f 0300 	mov.w	r3, #0
 8009cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  t1 = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	67bb      	str	r3, [r7, #120]	; 0x78
  t9 = (t2 = ipp2 * idl1);
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	fb02 f303 	mul.w	r3, r2, r3
 8009cc4:	677b      	str	r3, [r7, #116]	; 0x74
 8009cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc8:	65bb      	str	r3, [r7, #88]	; 0x58
  t3 = (ip - 1) * idl1;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	1e5a      	subs	r2, r3, #1
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	fb02 f303 	mul.w	r3, r2, r3
 8009cd4:	673b      	str	r3, [r7, #112]	; 0x70
  for (l = 1; l < ipph; l++)
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cdc:	e121      	b.n	8009f22 <dradbg+0x832>
  {
    t1 += idl1;
 8009cde:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= idl1;
 8009ce6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	677b      	str	r3, [r7, #116]	; 0x74

    ar1h = dcp * ar1 - dsp * ai1;
 8009cee:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009cf2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cfa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009cfe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d0a:	edc7 7a07 	vstr	s15, [r7, #28]
    ai1 = dcp * ai1 + dsp * ar1;
 8009d0e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009d12:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d1a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009d1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d2a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    ar1 = ar1h;
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	647b      	str	r3, [r7, #68]	; 0x44
    t4 = t1;
 8009d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d34:	66fb      	str	r3, [r7, #108]	; 0x6c
    t5 = t2;
 8009d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d38:	66bb      	str	r3, [r7, #104]	; 0x68
    t6 = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	667b      	str	r3, [r7, #100]	; 0x64
    t7 = idl1;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	663b      	str	r3, [r7, #96]	; 0x60
    t8 = t3;
 8009d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d44:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (ik = 0; ik < idl1; ik++)
 8009d46:	2300      	movs	r3, #0
 8009d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d4c:	e040      	b.n	8009dd0 <dradbg+0x6e0>
    {
      c2[t4] = ch2[t6] + ar1 * ch2[t7]; t4++; t6++; t7++;
 8009d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d56:	4413      	add	r3, r2
 8009d58:	ed93 7a00 	vldr	s14, [r3]
 8009d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d64:	4413      	add	r3, r2
 8009d66:	edd3 6a00 	vldr	s13, [r3]
 8009d6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d7a:	4413      	add	r3, r2
 8009d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d80:	edc3 7a00 	vstr	s15, [r3]
 8009d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d86:	3301      	adds	r3, #1
 8009d88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	667b      	str	r3, [r7, #100]	; 0x64
 8009d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d92:	3301      	adds	r3, #1
 8009d94:	663b      	str	r3, [r7, #96]	; 0x60
      c2[t5] = ai1 * ch2[t8];           t5++; t8++;
 8009d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d9e:	4413      	add	r3, r2
 8009da0:	ed93 7a00 	vldr	s14, [r3]
 8009da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009dac:	4413      	add	r3, r2
 8009dae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db6:	edc3 7a00 	vstr	s15, [r3]
 8009dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (ik = 0; ik < idl1; ik++)
 8009dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009dca:	3301      	adds	r3, #1
 8009dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009dd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	dbb9      	blt.n	8009d4e <dradbg+0x65e>
    }
    dc2 = ar1;
 8009dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ddc:	61bb      	str	r3, [r7, #24]
    ds2 = ai1;
 8009dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de0:	617b      	str	r3, [r7, #20]
    ar2 = ar1;
 8009de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de4:	643b      	str	r3, [r7, #64]	; 0x40
    ai2 = ai1;
 8009de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de8:	64bb      	str	r3, [r7, #72]	; 0x48

    t6 = idl1;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	667b      	str	r3, [r7, #100]	; 0x64
    t7 = t9 - idl1;
 8009dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	663b      	str	r3, [r7, #96]	; 0x60
    for (j = 2; j < ipph; j++)
 8009df6:	2302      	movs	r3, #2
 8009df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009dfc:	e086      	b.n	8009f0c <dradbg+0x81c>
    {
      t6 += idl1;
 8009dfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	4413      	add	r3, r2
 8009e04:	667b      	str	r3, [r7, #100]	; 0x64
      t7 -= idl1;
 8009e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	663b      	str	r3, [r7, #96]	; 0x60
      ar2h = dc2 * ar2 - ds2 * ai2;
 8009e0e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009e12:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8009e1e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e2a:	edc7 7a04 	vstr	s15, [r7, #16]
      ai2 = dc2 * ai2 + ds2 * ar2;
 8009e2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009e32:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009e36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e3a:	edd7 6a05 	vldr	s13, [r7, #20]
 8009e3e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e4a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      ar2 = ar2h;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	643b      	str	r3, [r7, #64]	; 0x40
      t4 = t1;
 8009e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e54:	66fb      	str	r3, [r7, #108]	; 0x6c
      t5 = t2;
 8009e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e58:	66bb      	str	r3, [r7, #104]	; 0x68
      t11 = t6;
 8009e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e5c:	657b      	str	r3, [r7, #84]	; 0x54
      t12 = t7;
 8009e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e60:	653b      	str	r3, [r7, #80]	; 0x50
      for (ik = 0; ik < idl1; ik++)
 8009e62:	2300      	movs	r3, #0
 8009e64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e68:	e046      	b.n	8009ef8 <dradbg+0x808>
      {
        c2[t4] += ar2 * ch2[t11];   t4++; t11++;
 8009e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e72:	4413      	add	r3, r2
 8009e74:	ed93 7a00 	vldr	s14, [r3]
 8009e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e80:	4413      	add	r3, r2
 8009e82:	edd3 6a00 	vldr	s13, [r3]
 8009e86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e96:	4413      	add	r3, r2
 8009e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e9c:	edc3 7a00 	vstr	s15, [r3]
 8009ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	657b      	str	r3, [r7, #84]	; 0x54
        c2[t5] += ai2 * ch2[t12];   t5++; t12++;
 8009eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009eb4:	4413      	add	r3, r2
 8009eb6:	ed93 7a00 	vldr	s14, [r3]
 8009eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ec2:	4413      	add	r3, r2
 8009ec4:	edd3 6a00 	vldr	s13, [r3]
 8009ec8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ed8:	4413      	add	r3, r2
 8009eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ede:	edc3 7a00 	vstr	s15, [r3]
 8009ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eea:	3301      	adds	r3, #1
 8009eec:	653b      	str	r3, [r7, #80]	; 0x50
      for (ik = 0; ik < idl1; ik++)
 8009eee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ef8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	dbb3      	blt.n	8009e6a <dradbg+0x77a>
    for (j = 2; j < ipph; j++)
 8009f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f06:	3301      	adds	r3, #1
 8009f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	f6ff af73 	blt.w	8009dfe <dradbg+0x70e>
  for (l = 1; l < ipph; l++)
 8009f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f22:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	f6ff aed8 	blt.w	8009cde <dradbg+0x5ee>
      }
    }
  }

  t1 = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	67bb      	str	r3, [r7, #120]	; 0x78
  for (j = 1; j < ipph; j++)
 8009f32:	2301      	movs	r3, #1
 8009f34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f38:	e034      	b.n	8009fa4 <dradbg+0x8b4>
  {
    t1 += idl1;
 8009f3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	4413      	add	r3, r2
 8009f40:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 = t1;
 8009f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f44:	677b      	str	r3, [r7, #116]	; 0x74
    for (ik = 0; ik < idl1; ik++) { ch2[ik] += ch2[t2]; t2++; }
 8009f46:	2300      	movs	r3, #0
 8009f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f4c:	e020      	b.n	8009f90 <dradbg+0x8a0>
 8009f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f58:	4413      	add	r3, r2
 8009f5a:	ed93 7a00 	vldr	s14, [r3]
 8009f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f66:	4413      	add	r3, r2
 8009f68:	edd3 7a00 	vldr	s15, [r3]
 8009f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f76:	4413      	add	r3, r2
 8009f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f7c:	edc3 7a00 	vstr	s15, [r3]
 8009f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f82:	3301      	adds	r3, #1
 8009f84:	677b      	str	r3, [r7, #116]	; 0x74
 8009f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	dbd9      	blt.n	8009f4e <dradbg+0x85e>
  for (j = 1; j < ipph; j++)
 8009f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009fa4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	dbc5      	blt.n	8009f3a <dradbg+0x84a>
  }

  t1 = 0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * t0;
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fb6:	fb02 f303 	mul.w	r3, r2, r3
 8009fba:	677b      	str	r3, [r7, #116]	; 0x74
  for (j = 1; j < ipph; j++)
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009fc2:	e054      	b.n	800a06e <dradbg+0x97e>
  {
    t1 += t0;
 8009fc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	4413      	add	r3, r2
 8009fca:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= t0;
 8009fcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	677b      	str	r3, [r7, #116]	; 0x74
    t3 = t1;
 8009fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fd6:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2;
 8009fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fda:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (k = 0; k < l1; k++)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009fe2:	e03a      	b.n	800a05a <dradbg+0x96a>
    {
      ch[t3] = c1[t3] - c1[t4];
 8009fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009fec:	4413      	add	r3, r2
 8009fee:	ed93 7a00 	vldr	s14, [r3]
 8009ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009ffa:	4413      	add	r3, r2
 8009ffc:	edd3 7a00 	vldr	s15, [r3]
 800a000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a008:	4413      	add	r3, r2
 800a00a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a00e:	edc3 7a00 	vstr	s15, [r3]
      ch[t4] = c1[t3] + c1[t4];
 800a012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a01a:	4413      	add	r3, r2
 800a01c:	ed93 7a00 	vldr	s14, [r3]
 800a020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a028:	4413      	add	r3, r2
 800a02a:	edd3 7a00 	vldr	s15, [r3]
 800a02e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a036:	4413      	add	r3, r2
 800a038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a03c:	edc3 7a00 	vstr	s15, [r3]
      t3 += ido;
 800a040:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4413      	add	r3, r2
 800a046:	673b      	str	r3, [r7, #112]	; 0x70
      t4 += ido;
 800a048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (k = 0; k < l1; k++)
 800a050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a054:	3301      	adds	r3, #1
 800a056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a05a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	429a      	cmp	r2, r3
 800a062:	dbbf      	blt.n	8009fe4 <dradbg+0x8f4>
  for (j = 1; j < ipph; j++)
 800a064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a068:	3301      	adds	r3, #1
 800a06a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a06e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	429a      	cmp	r2, r3
 800a076:	dba5      	blt.n	8009fc4 <dradbg+0x8d4>
    }
  }

  if (ido == 1) { goto L132; }
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	f000 8187 	beq.w	800a38e <dradbg+0xc9e>
  if (nbd < l1) { goto L128; }
 800a080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	429a      	cmp	r2, r3
 800a086:	f2c0 80c0 	blt.w	800a20a <dradbg+0xb1a>

  t1 = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * t0;
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a092:	fb02 f303 	mul.w	r3, r2, r3
 800a096:	677b      	str	r3, [r7, #116]	; 0x74
  for (j = 1; j < ipph; j++)
 800a098:	2301      	movs	r3, #1
 800a09a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a09e:	e0ad      	b.n	800a1fc <dradbg+0xb0c>
  {
    t1 += t0;
 800a0a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	4413      	add	r3, r2
 800a0a6:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= t0;
 800a0a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	677b      	str	r3, [r7, #116]	; 0x74
    t3 = t1;
 800a0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0b2:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2;
 800a0b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (k = 0; k < l1; k++)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0be:	e092      	b.n	800a1e6 <dradbg+0xaf6>
    {
      t5 = t3;
 800a0c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0c2:	66bb      	str	r3, [r7, #104]	; 0x68
      t6 = t4;
 800a0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0c6:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 2; i < ido; i += 2)
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0ce:	e078      	b.n	800a1c2 <dradbg+0xad2>
      {
        t5 += 2;
 800a0d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a0d2:	3302      	adds	r3, #2
 800a0d4:	66bb      	str	r3, [r7, #104]	; 0x68
        t6 += 2;
 800a0d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0d8:	3302      	adds	r3, #2
 800a0da:	667b      	str	r3, [r7, #100]	; 0x64
        ch[t5 - 1] = c1[t5 - 1] - c1[t6];
 800a0dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a0de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a0ea:	4413      	add	r3, r2
 800a0ec:	ed93 7a00 	vldr	s14, [r3]
 800a0f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a0f8:	4413      	add	r3, r2
 800a0fa:	edd3 7a00 	vldr	s15, [r3]
 800a0fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a104:	3b01      	subs	r3, #1
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a10c:	4413      	add	r3, r2
 800a10e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a112:	edc3 7a00 	vstr	s15, [r3]
        ch[t6 - 1] = c1[t5 - 1] + c1[t6];
 800a116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a11c:	3b01      	subs	r3, #1
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a124:	4413      	add	r3, r2
 800a126:	ed93 7a00 	vldr	s14, [r3]
 800a12a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a132:	4413      	add	r3, r2
 800a134:	edd3 7a00 	vldr	s15, [r3]
 800a138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a13a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a13e:	3b01      	subs	r3, #1
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a146:	4413      	add	r3, r2
 800a148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a14c:	edc3 7a00 	vstr	s15, [r3]
        ch[t5] = c1[t5] + c1[t6 - 1];
 800a150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a158:	4413      	add	r3, r2
 800a15a:	ed93 7a00 	vldr	s14, [r3]
 800a15e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a164:	3b01      	subs	r3, #1
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a16c:	4413      	add	r3, r2
 800a16e:	edd3 7a00 	vldr	s15, [r3]
 800a172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a17a:	4413      	add	r3, r2
 800a17c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a180:	edc3 7a00 	vstr	s15, [r3]
        ch[t6] = c1[t5] - c1[t6 - 1];
 800a184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a18c:	4413      	add	r3, r2
 800a18e:	ed93 7a00 	vldr	s14, [r3]
 800a192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a198:	3b01      	subs	r3, #1
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a1a0:	4413      	add	r3, r2
 800a1a2:	edd3 7a00 	vldr	s15, [r3]
 800a1a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a1ae:	4413      	add	r3, r2
 800a1b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b4:	edc3 7a00 	vstr	s15, [r3]
      for (i = 2; i < ido; i += 2)
 800a1b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1bc:	3302      	adds	r3, #2
 800a1be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	db81      	blt.n	800a0d0 <dradbg+0x9e0>
      }
      t3 += ido;
 800a1cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	673b      	str	r3, [r7, #112]	; 0x70
      t4 += ido;
 800a1d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4413      	add	r3, r2
 800a1da:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (k = 0; k < l1; k++)
 800a1dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	f6ff af67 	blt.w	800a0c0 <dradbg+0x9d0>
  for (j = 1; j < ipph; j++)
 800a1f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a1fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	429a      	cmp	r2, r3
 800a204:	f6ff af4c 	blt.w	800a0a0 <dradbg+0x9b0>
    }
  }
  goto L132;
 800a208:	e0c2      	b.n	800a390 <dradbg+0xca0>
  if (nbd < l1) { goto L128; }
 800a20a:	bf00      	nop

L128:
  t1 = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	67bb      	str	r3, [r7, #120]	; 0x78
  t2 = ipp2 * t0;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a214:	fb02 f303 	mul.w	r3, r2, r3
 800a218:	677b      	str	r3, [r7, #116]	; 0x74
  for (j = 1; j < ipph; j++)
 800a21a:	2301      	movs	r3, #1
 800a21c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a220:	e0ae      	b.n	800a380 <dradbg+0xc90>
  {
    t1 += t0;
 800a222:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	4413      	add	r3, r2
 800a228:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 -= t0;
 800a22a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	677b      	str	r3, [r7, #116]	; 0x74
    t3 = t1;
 800a232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a234:	673b      	str	r3, [r7, #112]	; 0x70
    t4 = t2;
 800a236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a238:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (i = 2; i < ido; i += 2)
 800a23a:	2302      	movs	r3, #2
 800a23c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a240:	e093      	b.n	800a36a <dradbg+0xc7a>
    {
      t3 += 2;
 800a242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a244:	3302      	adds	r3, #2
 800a246:	673b      	str	r3, [r7, #112]	; 0x70
      t4 += 2;
 800a248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a24a:	3302      	adds	r3, #2
 800a24c:	66fb      	str	r3, [r7, #108]	; 0x6c
      t5 = t3;
 800a24e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a250:	66bb      	str	r3, [r7, #104]	; 0x68
      t6 = t4;
 800a252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a254:	667b      	str	r3, [r7, #100]	; 0x64
      for (k = 0; k < l1; k++)
 800a256:	2300      	movs	r3, #0
 800a258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a25c:	e07a      	b.n	800a354 <dradbg+0xc64>
      {
        ch[t5 - 1] = c1[t5 - 1] - c1[t6];
 800a25e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a264:	3b01      	subs	r3, #1
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a26c:	4413      	add	r3, r2
 800a26e:	ed93 7a00 	vldr	s14, [r3]
 800a272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a27a:	4413      	add	r3, r2
 800a27c:	edd3 7a00 	vldr	s15, [r3]
 800a280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a282:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a286:	3b01      	subs	r3, #1
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a28e:	4413      	add	r3, r2
 800a290:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a294:	edc3 7a00 	vstr	s15, [r3]
        ch[t6 - 1] = c1[t5 - 1] + c1[t6];
 800a298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a29a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a2a6:	4413      	add	r3, r2
 800a2a8:	ed93 7a00 	vldr	s14, [r3]
 800a2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a2b4:	4413      	add	r3, r2
 800a2b6:	edd3 7a00 	vldr	s15, [r3]
 800a2ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a2c8:	4413      	add	r3, r2
 800a2ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ce:	edc3 7a00 	vstr	s15, [r3]
        ch[t5] = c1[t5] + c1[t6 - 1];
 800a2d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a2da:	4413      	add	r3, r2
 800a2dc:	ed93 7a00 	vldr	s14, [r3]
 800a2e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a2ee:	4413      	add	r3, r2
 800a2f0:	edd3 7a00 	vldr	s15, [r3]
 800a2f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a2fc:	4413      	add	r3, r2
 800a2fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a302:	edc3 7a00 	vstr	s15, [r3]
        ch[t6] = c1[t5] - c1[t6 - 1];
 800a306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a30e:	4413      	add	r3, r2
 800a310:	ed93 7a00 	vldr	s14, [r3]
 800a314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a316:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a31a:	3b01      	subs	r3, #1
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a322:	4413      	add	r3, r2
 800a324:	edd3 7a00 	vldr	s15, [r3]
 800a328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a330:	4413      	add	r3, r2
 800a332:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a336:	edc3 7a00 	vstr	s15, [r3]
        t5 += ido;
 800a33a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	66bb      	str	r3, [r7, #104]	; 0x68
        t6 += ido;
 800a342:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	667b      	str	r3, [r7, #100]	; 0x64
      for (k = 0; k < l1; k++)
 800a34a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a34e:	3301      	adds	r3, #1
 800a350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a354:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	f6ff af7f 	blt.w	800a25e <dradbg+0xb6e>
    for (i = 2; i < ido; i += 2)
 800a360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a364:	3302      	adds	r3, #2
 800a366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a36a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	429a      	cmp	r2, r3
 800a372:	f6ff af66 	blt.w	800a242 <dradbg+0xb52>
  for (j = 1; j < ipph; j++)
 800a376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a37a:	3301      	adds	r3, #1
 800a37c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a380:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	429a      	cmp	r2, r3
 800a388:	f6ff af4b 	blt.w	800a222 <dradbg+0xb32>
      }
    }
  }

L132:
 800a38c:	e000      	b.n	800a390 <dradbg+0xca0>
  if (ido == 1) { goto L132; }
 800a38e:	bf00      	nop
  if (ido == 1) { return; }
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b01      	cmp	r3, #1
 800a394:	f000 81ba 	beq.w	800a70c <dradbg+0x101c>

  for (ik = 0; ik < idl1; ik++) { c2[ik] = ch2[ik]; }
 800a398:	2300      	movs	r3, #0
 800a39a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a39e:	e012      	b.n	800a3c6 <dradbg+0xcd6>
 800a3a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3aa:	441a      	add	r2, r3
 800a3ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800a3b6:	440b      	add	r3, r1
 800a3b8:	6812      	ldr	r2, [r2, #0]
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	dbe7      	blt.n	800a3a0 <dradbg+0xcb0>

  t1 = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	67bb      	str	r3, [r7, #120]	; 0x78
  for (j = 1; j < ip; j++)
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a3da:	e028      	b.n	800a42e <dradbg+0xd3e>
  {
    t2 = (t1 += t0);
 800a3dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e0:	4413      	add	r3, r2
 800a3e2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3e6:	677b      	str	r3, [r7, #116]	; 0x74
    for (k = 0; k < l1; k++)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3ee:	e014      	b.n	800a41a <dradbg+0xd2a>
    {
      c1[t2] = ch[t2];
 800a3f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a3f8:	441a      	add	r2, r3
 800a3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a402:	440b      	add	r3, r1
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	601a      	str	r2, [r3, #0]
      t2 += ido;
 800a408:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	677b      	str	r3, [r7, #116]	; 0x74
    for (k = 0; k < l1; k++)
 800a410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a414:	3301      	adds	r3, #1
 800a416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a41a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	429a      	cmp	r2, r3
 800a422:	dbe5      	blt.n	800a3f0 <dradbg+0xd00>
  for (j = 1; j < ip; j++)
 800a424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a428:	3301      	adds	r3, #1
 800a42a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a42e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	429a      	cmp	r2, r3
 800a436:	dbd1      	blt.n	800a3dc <dradbg+0xcec>
    }
  }

  if (nbd > l1) { goto L139; }
 800a438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	f300 80b2 	bgt.w	800a5a6 <dradbg+0xeb6>

  is = -ido - 1;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	43db      	mvns	r3, r3
 800a446:	67fb      	str	r3, [r7, #124]	; 0x7c
  t1 = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	67bb      	str	r3, [r7, #120]	; 0x78
  for (j = 1; j < ip; j++)
 800a44c:	2301      	movs	r3, #1
 800a44e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a452:	e0a1      	b.n	800a598 <dradbg+0xea8>
  {
    is += ido;
 800a454:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4413      	add	r3, r2
 800a45a:	67fb      	str	r3, [r7, #124]	; 0x7c
    t1 += t0;
 800a45c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	4413      	add	r3, r2
 800a462:	67bb      	str	r3, [r7, #120]	; 0x78
    idij = is;
 800a464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    t2 = t1;
 800a46a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a46c:	677b      	str	r3, [r7, #116]	; 0x74
    for (i = 2; i < ido; i += 2)
 800a46e:	2302      	movs	r3, #2
 800a470:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a474:	e085      	b.n	800a582 <dradbg+0xe92>
    {
      t2 += 2;
 800a476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a478:	3302      	adds	r3, #2
 800a47a:	677b      	str	r3, [r7, #116]	; 0x74
      idij += 2;
 800a47c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a480:	3302      	adds	r3, #2
 800a482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      t3 = t2;
 800a486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a488:	673b      	str	r3, [r7, #112]	; 0x70
      for (k = 0; k < l1; k++)
 800a48a:	2300      	movs	r3, #0
 800a48c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a490:	e06d      	b.n	800a56e <dradbg+0xe7e>
      {
        c1[t3 - 1] = wa[idij - 1] * ch[t3 - 1] - wa[idij] * ch[t3];
 800a492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a49a:	3b01      	subs	r3, #1
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a4a2:	4413      	add	r3, r2
 800a4a4:	ed93 7a00 	vldr	s14, [r3]
 800a4a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4b6:	4413      	add	r3, r2
 800a4b8:	edd3 7a00 	vldr	s15, [r3]
 800a4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a4ca:	4413      	add	r3, r2
 800a4cc:	edd3 6a00 	vldr	s13, [r3]
 800a4d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4d8:	4413      	add	r3, r2
 800a4da:	edd3 7a00 	vldr	s15, [r3]
 800a4de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a4f0:	4413      	add	r3, r2
 800a4f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4f6:	edc3 7a00 	vstr	s15, [r3]
        c1[t3] = wa[idij - 1] * ch[t3] + wa[idij] * ch[t3 - 1];
 800a4fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a4fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a502:	3b01      	subs	r3, #1
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a50a:	4413      	add	r3, r2
 800a50c:	ed93 7a00 	vldr	s14, [r3]
 800a510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a518:	4413      	add	r3, r2
 800a51a:	edd3 7a00 	vldr	s15, [r3]
 800a51e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a52c:	4413      	add	r3, r2
 800a52e:	edd3 6a00 	vldr	s13, [r3]
 800a532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a534:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a538:	3b01      	subs	r3, #1
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a540:	4413      	add	r3, r2
 800a542:	edd3 7a00 	vldr	s15, [r3]
 800a546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a54a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a552:	4413      	add	r3, r2
 800a554:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a558:	edc3 7a00 	vstr	s15, [r3]
        t3 += ido;
 800a55c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4413      	add	r3, r2
 800a562:	673b      	str	r3, [r7, #112]	; 0x70
      for (k = 0; k < l1; k++)
 800a564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a568:	3301      	adds	r3, #1
 800a56a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a56e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	429a      	cmp	r2, r3
 800a576:	db8c      	blt.n	800a492 <dradbg+0xda2>
    for (i = 2; i < ido; i += 2)
 800a578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a57c:	3302      	adds	r3, #2
 800a57e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a582:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	429a      	cmp	r2, r3
 800a58a:	f6ff af74 	blt.w	800a476 <dradbg+0xd86>
  for (j = 1; j < ip; j++)
 800a58e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a592:	3301      	adds	r3, #1
 800a594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a598:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	f6ff af58 	blt.w	800a454 <dradbg+0xd64>
      }
    }
  }
  return;
 800a5a4:	e0b3      	b.n	800a70e <dradbg+0x101e>
  if (nbd > l1) { goto L139; }
 800a5a6:	bf00      	nop

L139:
  is = -ido - 1;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	43db      	mvns	r3, r3
 800a5ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  t1 = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	67bb      	str	r3, [r7, #120]	; 0x78
  for (j = 1; j < ip; j++)
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5b8:	e0a1      	b.n	800a6fe <dradbg+0x100e>
  {
    is += ido;
 800a5ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    t1 += t0;
 800a5c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	4413      	add	r3, r2
 800a5c8:	67bb      	str	r3, [r7, #120]	; 0x78
    t2 = t1;
 800a5ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5cc:	677b      	str	r3, [r7, #116]	; 0x74
    for (k = 0; k < l1; k++)
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5d4:	e088      	b.n	800a6e8 <dradbg+0xff8>
    {
      idij = is;
 800a5d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a5d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      t3 = t2;
 800a5dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5de:	673b      	str	r3, [r7, #112]	; 0x70
      for (i = 2; i < ido; i += 2)
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5e6:	e071      	b.n	800a6cc <dradbg+0xfdc>
      {
        idij += 2;
 800a5e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a5ec:	3302      	adds	r3, #2
 800a5ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        t3 += 2;
 800a5f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5f4:	3302      	adds	r3, #2
 800a5f6:	673b      	str	r3, [r7, #112]	; 0x70
        c1[t3 - 1] = wa[idij - 1] * ch[t3 - 1] - wa[idij] * ch[t3];
 800a5f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a5fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a600:	3b01      	subs	r3, #1
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a608:	4413      	add	r3, r2
 800a60a:	ed93 7a00 	vldr	s14, [r3]
 800a60e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a614:	3b01      	subs	r3, #1
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a61c:	4413      	add	r3, r2
 800a61e:	edd3 7a00 	vldr	s15, [r3]
 800a622:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a626:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a630:	4413      	add	r3, r2
 800a632:	edd3 6a00 	vldr	s13, [r3]
 800a636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a63e:	4413      	add	r3, r2
 800a640:	edd3 7a00 	vldr	s15, [r3]
 800a644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a64a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a64e:	3b01      	subs	r3, #1
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a656:	4413      	add	r3, r2
 800a658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a65c:	edc3 7a00 	vstr	s15, [r3]
        c1[t3] = wa[idij - 1] * ch[t3] + wa[idij] * ch[t3 - 1];
 800a660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a664:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a668:	3b01      	subs	r3, #1
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a670:	4413      	add	r3, r2
 800a672:	ed93 7a00 	vldr	s14, [r3]
 800a676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a67e:	4413      	add	r3, r2
 800a680:	edd3 7a00 	vldr	s15, [r3]
 800a684:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a688:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a692:	4413      	add	r3, r2
 800a694:	edd3 6a00 	vldr	s13, [r3]
 800a698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a69a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a6a6:	4413      	add	r3, r2
 800a6a8:	edd3 7a00 	vldr	s15, [r3]
 800a6ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a6b8:	4413      	add	r3, r2
 800a6ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6be:	edc3 7a00 	vstr	s15, [r3]
      for (i = 2; i < ido; i += 2)
 800a6c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	db88      	blt.n	800a5e8 <dradbg+0xef8>
      }
      t2 += ido;
 800a6d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4413      	add	r3, r2
 800a6dc:	677b      	str	r3, [r7, #116]	; 0x74
    for (k = 0; k < l1; k++)
 800a6de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	f6ff af71 	blt.w	800a5d6 <dradbg+0xee6>
  for (j = 1; j < ip; j++)
 800a6f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	429a      	cmp	r2, r3
 800a706:	f6ff af58 	blt.w	800a5ba <dradbg+0xeca>
 800a70a:	e000      	b.n	800a70e <dradbg+0x101e>
  if (ido == 1) { return; }
 800a70c:	bf00      	nop
    }
  }
}
 800a70e:	3798      	adds	r7, #152	; 0x98
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <drftb1>:

static void drftb1(int n, float *c, float *ch, float *wa, int32_t *ifac)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b096      	sub	sp, #88	; 0x58
 800a718:	af06      	add	r7, sp, #24
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
  int i, k1, l1, l2;
  int na;
  int nf, ip, iw, ix2, ix3, ido, idl1;

  nf = ifac[1];
 800a722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a724:	3304      	adds	r3, #4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
  na = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	633b      	str	r3, [r7, #48]	; 0x30
  l1 = 1;
 800a72e:	2301      	movs	r3, #1
 800a730:	637b      	str	r3, [r7, #52]	; 0x34
  iw = 1;
 800a732:	2301      	movs	r3, #1
 800a734:	62fb      	str	r3, [r7, #44]	; 0x2c

  for (k1 = 0; k1 < nf; k1++)
 800a736:	2300      	movs	r3, #0
 800a738:	63bb      	str	r3, [r7, #56]	; 0x38
 800a73a:	e116      	b.n	800a96a <drftb1+0x256>
  {
    ip = ifac[k1 + 2];
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	3302      	adds	r3, #2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a744:	4413      	add	r3, r2
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
    l2 = ip * l1;
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a74e:	fb02 f303 	mul.w	r3, r2, r3
 800a752:	623b      	str	r3, [r7, #32]
    ido = n / l2;
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	fb92 f3f3 	sdiv	r3, r2, r3
 800a75c:	61fb      	str	r3, [r7, #28]
    idl1 = ido * l1;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a762:	fb02 f303 	mul.w	r3, r2, r3
 800a766:	61bb      	str	r3, [r7, #24]
    if (ip != 4) { goto L103; }
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d14c      	bne.n	800a808 <drftb1+0xf4>
    ix2 = iw + ido;
 800a76e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	4413      	add	r3, r2
 800a774:	617b      	str	r3, [r7, #20]
    ix3 = ix2 + ido;
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	4413      	add	r3, r2
 800a77c:	613b      	str	r3, [r7, #16]

    if (na != 0)
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01e      	beq.n	800a7c2 <drftb1+0xae>
    {
      dradb4(ido, l1, ch, c, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
 800a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a78a:	3b01      	subs	r3, #1
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	441a      	add	r2, r3
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a798:	3b01      	subs	r3, #1
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	4419      	add	r1, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	6838      	ldr	r0, [r7, #0]
 800a7ac:	4403      	add	r3, r0
 800a7ae:	9302      	str	r3, [sp, #8]
 800a7b0:	9101      	str	r1, [sp, #4]
 800a7b2:	9200      	str	r2, [sp, #0]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7ba:	69f8      	ldr	r0, [r7, #28]
 800a7bc:	f7fe fc0e 	bl	8008fdc <dradb4>
 800a7c0:	e01d      	b.n	800a7fe <drftb1+0xea>
    }
    else
    {
      dradb4(ido, l1, c, ch, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
 800a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	441a      	add	r2, r3
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	4419      	add	r1, r3
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	6838      	ldr	r0, [r7, #0]
 800a7ea:	4403      	add	r3, r0
 800a7ec:	9302      	str	r3, [sp, #8]
 800a7ee:	9101      	str	r1, [sp, #4]
 800a7f0:	9200      	str	r2, [sp, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7f8:	69f8      	ldr	r0, [r7, #28]
 800a7fa:	f7fe fbef 	bl	8008fdc <dradb4>
    }
    na = 1 - na;
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	f1c3 0301 	rsb	r3, r3, #1
 800a804:	633b      	str	r3, [r7, #48]	; 0x30
    goto L115;
 800a806:	e0a3      	b.n	800a950 <drftb1+0x23c>
    if (ip != 4) { goto L103; }
 800a808:	bf00      	nop

L103:
    if (ip != 2) { goto L106; }
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d124      	bne.n	800a85a <drftb1+0x146>

    if (na != 0)
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00e      	beq.n	800a834 <drftb1+0x120>
    {
      dradb2(ido, l1, ch, c, wa + iw - 1);
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a81c:	3b01      	subs	r3, #1
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	4413      	add	r3, r2
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a82c:	69f8      	ldr	r0, [r7, #28]
 800a82e:	f7fe f823 	bl	8008878 <dradb2>
 800a832:	e00d      	b.n	800a850 <drftb1+0x13c>
    }
    else
    {
      dradb2(ido, l1, c, ch, wa + iw - 1);
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a83a:	3b01      	subs	r3, #1
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	4413      	add	r3, r2
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a84a:	69f8      	ldr	r0, [r7, #28]
 800a84c:	f7fe f814 	bl	8008878 <dradb2>
    }
    na = 1 - na;
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	f1c3 0301 	rsb	r3, r3, #1
 800a856:	633b      	str	r3, [r7, #48]	; 0x30
    goto L115;
 800a858:	e07a      	b.n	800a950 <drftb1+0x23c>
    if (ip != 2) { goto L106; }
 800a85a:	bf00      	nop

L106:
    if (ip != 3) { goto L109; }
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d138      	bne.n	800a8d4 <drftb1+0x1c0>

    ix2 = iw + ido;
 800a862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	4413      	add	r3, r2
 800a868:	617b      	str	r3, [r7, #20]
    if (na != 0)
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d016      	beq.n	800a89e <drftb1+0x18a>
    {
      dradb3(ido, l1, ch, c, wa + iw - 1, wa + ix2 - 1);
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a876:	3b01      	subs	r3, #1
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	441a      	add	r2, r3
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a884:	3b01      	subs	r3, #1
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	440b      	add	r3, r1
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	9200      	str	r2, [sp, #0]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a896:	69f8      	ldr	r0, [r7, #28]
 800a898:	f7fe f96e 	bl	8008b78 <dradb3>
 800a89c:	e015      	b.n	800a8ca <drftb1+0x1b6>
    }
    else
    {
      dradb3(ido, l1, c, ch, wa + iw - 1, wa + ix2 - 1);
 800a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	441a      	add	r2, r3
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	440b      	add	r3, r1
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	9200      	str	r2, [sp, #0]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8c4:	69f8      	ldr	r0, [r7, #28]
 800a8c6:	f7fe f957 	bl	8008b78 <dradb3>
    }
    na = 1 - na;
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	f1c3 0301 	rsb	r3, r3, #1
 800a8d0:	633b      	str	r3, [r7, #48]	; 0x30
    goto L115;
 800a8d2:	e03d      	b.n	800a950 <drftb1+0x23c>
    if (ip != 3) { goto L109; }
 800a8d4:	bf00      	nop
    dradb5(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1,wa+ix4-1);
    na=1-na;
    goto L115;

    L112:*/
    if (na != 0)
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d018      	beq.n	800a90e <drftb1+0x1fa>
    {
      dradbg(ido, ip, l1, idl1, ch, ch, ch, c, c, wa + iw - 1);
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	9305      	str	r3, [sp, #20]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	9304      	str	r3, [sp, #16]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	9303      	str	r3, [sp, #12]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	9301      	str	r3, [sp, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a906:	69f8      	ldr	r0, [r7, #28]
 800a908:	f7fe fef2 	bl	80096f0 <dradbg>
 800a90c:	e017      	b.n	800a93e <drftb1+0x22a>
    }
    else
    {
      dradbg(ido, ip, l1, idl1, c, c, c, ch, ch, wa + iw - 1);
 800a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a910:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a914:	3b01      	subs	r3, #1
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	4413      	add	r3, r2
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	9303      	str	r3, [sp, #12]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	9302      	str	r3, [sp, #8]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	9301      	str	r3, [sp, #4]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a938:	69f8      	ldr	r0, [r7, #28]
 800a93a:	f7fe fed9 	bl	80096f0 <dradbg>
    }
    if (ido == 1) { na = 1 - na; }
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d104      	bne.n	800a94e <drftb1+0x23a>
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	f1c3 0301 	rsb	r3, r3, #1
 800a94a:	633b      	str	r3, [r7, #48]	; 0x30
 800a94c:	e000      	b.n	800a950 <drftb1+0x23c>

L115:
 800a94e:	bf00      	nop
    l1 = l2;
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	637b      	str	r3, [r7, #52]	; 0x34
    iw += (ip - 1) * ido;
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	3b01      	subs	r3, #1
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	fb02 f303 	mul.w	r3, r2, r3
 800a95e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a960:	4413      	add	r3, r2
 800a962:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (k1 = 0; k1 < nf; k1++)
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	3301      	adds	r3, #1
 800a968:	63bb      	str	r3, [r7, #56]	; 0x38
 800a96a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	429a      	cmp	r2, r3
 800a970:	f6ff aee4 	blt.w	800a73c <drftb1+0x28>
  }

  if (na == 0) { return; }
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	2b00      	cmp	r3, #0
 800a978:	d014      	beq.n	800a9a4 <drftb1+0x290>

  for (i = 0; i < n; i++) { c[i] = ch[i]; }
 800a97a:	2300      	movs	r3, #0
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a97e:	e00c      	b.n	800a99a <drftb1+0x286>
 800a980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	441a      	add	r2, r3
 800a988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	68b9      	ldr	r1, [r7, #8]
 800a98e:	440b      	add	r3, r1
 800a990:	6812      	ldr	r2, [r2, #0]
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a996:	3301      	adds	r3, #1
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a99a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	dbee      	blt.n	800a980 <drftb1+0x26c>
 800a9a2:	e000      	b.n	800a9a6 <drftb1+0x292>
  if (na == 0) { return; }
 800a9a4:	bf00      	nop
}
 800a9a6:	3740      	adds	r7, #64	; 0x40
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <drft_forward>:


void drft_forward(drft_lookup *l, float *data)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  if (l->n != 1) { drftf1(l->n, data, l->trigcache, l->trigcache + l->n, l->splitcache); }
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d012      	beq.n	800a9e4 <drft_forward+0x38>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	1d19      	adds	r1, r3, #4
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	1d1a      	adds	r2, r3, #4
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	441a      	add	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	460a      	mov	r2, r1
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	f7fd fe38 	bl	8008654 <drftf1>
}
 800a9e4:	bf00      	nop
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <drft_backward>:

void drft_backward(drft_lookup *l, float *data)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af02      	add	r7, sp, #8
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  if (l->n != 1) { drftb1(l->n, data, l->trigcache, l->trigcache + l->n, l->splitcache); }
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d012      	beq.n	800aa24 <drft_backward+0x38>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6818      	ldr	r0, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	1d19      	adds	r1, r3, #4
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	441a      	add	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	460a      	mov	r2, r1
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	f7ff fe78 	bl	800a714 <drftb1>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <drft_init>:

void drft_init(drft_lookup *l, int32_t n)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  l->n = n;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	601a      	str	r2, [r3, #0]
  fdrffti(n, l->trigcache, l->splitcache);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	1d19      	adds	r1, r3, #4
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 800aa46:	461a      	mov	r2, r3
 800aa48:	6838      	ldr	r0, [r7, #0]
 800aa4a:	f7fc f8bd 	bl	8006bc8 <fdrffti>
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_I2C_ListenCpltCallback>:


int count = 0;

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f002 fe13 	bl	800d68a <HAL_I2C_EnableListen_IT>
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d10f      	bne.n	800aaa2 <HAL_I2C_AddrCallback+0x36>
	{
		// receive using sequential function.
		// The I2C_FIRST_AND_LAST_FRAME implies that the slave will send a NACK after receiving "entered" num of bytes
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME);
 800aa82:	2308      	movs	r3, #8
 800aa84:	220a      	movs	r2, #10
 800aa86:	490a      	ldr	r1, [pc, #40]	; (800aab0 <HAL_I2C_AddrCallback+0x44>)
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f002 fd8b 	bl	800d5a4 <HAL_I2C_Slave_Seq_Receive_IT>
		for(int i = 0;i<10;i++);
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	e002      	b.n	800aa9a <HAL_I2C_AddrCallback+0x2e>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3301      	adds	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b09      	cmp	r3, #9
 800aa9e:	ddf9      	ble.n	800aa94 <HAL_I2C_AddrCallback+0x28>
	}
	else  // if the master requests the data from the slave
	{
		Error_Handler();  // call error handler
	}
}
 800aaa0:	e001      	b.n	800aaa6 <HAL_I2C_AddrCallback+0x3a>
		Error_Handler();  // call error handler
 800aaa2:	f000 fc2f 	bl	800b304 <Error_Handler>
}
 800aaa6:	bf00      	nop
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20000100 	.word	0x20000100

0800aab4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	digitpoti.micVal = RxData[0];
 800aabc:	4b0e      	ldr	r3, [pc, #56]	; (800aaf8 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800aabe:	781a      	ldrb	r2, [r3, #0]
 800aac0:	4b0e      	ldr	r3, [pc, #56]	; (800aafc <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800aac2:	701a      	strb	r2, [r3, #0]
	digitpoti.refVal = RxData[1];
 800aac4:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800aac6:	785a      	ldrb	r2, [r3, #1]
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800aaca:	705a      	strb	r2, [r3, #1]
	digitpoti.outVal = RxData[2];
 800aacc:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800aace:	789a      	ldrb	r2, [r3, #2]
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800aad2:	709a      	strb	r2, [r3, #2]
	digitpoti.bypVal = RxData[3];
 800aad4:	4b08      	ldr	r3, [pc, #32]	; (800aaf8 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800aad6:	78da      	ldrb	r2, [r3, #3]
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800aada:	70da      	strb	r2, [r3, #3]

	sendValToPoti(&digitpoti, &hi2c1);
 800aadc:	4908      	ldr	r1, [pc, #32]	; (800ab00 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 800aade:	4807      	ldr	r0, [pc, #28]	; (800aafc <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800aae0:	f001 f8a6 	bl	800bc30 <sendValToPoti>
	count++;
 800aae4:	4b07      	ldr	r3, [pc, #28]	; (800ab04 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3301      	adds	r3, #1
 800aaea:	4a06      	ldr	r2, [pc, #24]	; (800ab04 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 800aaec:	6013      	str	r3, [r2, #0]
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000100 	.word	0x20000100
 800aafc:	2000010c 	.word	0x2000010c
 800ab00:	200001fc 	.word	0x200001fc
 800ab04:	20000110 	.word	0x20000110

0800ab08 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f002 fdba 	bl	800d68a <HAL_I2C_EnableListen_IT>
}
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ab26:	f001 f92b 	bl	800bd80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ab2a:	f000 f87b 	bl	800ac24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800ab2e:	f000 f8f1 	bl	800ad14 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ab32:	f000 fb33 	bl	800b19c <MX_GPIO_Init>
  MX_DMA_Init();
 800ab36:	f000 fb09 	bl	800b14c <MX_DMA_Init>
  MX_ADC1_Init();
 800ab3a:	f000 f90f 	bl	800ad5c <MX_ADC1_Init>
  MX_ADC2_Init();
 800ab3e:	f000 f95f 	bl	800ae00 <MX_ADC2_Init>
  MX_CAN1_Init();
 800ab42:	f000 f9af 	bl	800aea4 <MX_CAN1_Init>
  MX_I2C1_Init();
 800ab46:	f000 f9e1 	bl	800af0c <MX_I2C1_Init>
  MX_I2C3_Init();
 800ab4a:	f000 fa0d 	bl	800af68 <MX_I2C3_Init>
  MX_SPI2_Init();
 800ab4e:	f000 fa9d 	bl	800b08c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800ab52:	f000 fad1 	bl	800b0f8 <MX_USART2_UART_Init>
  MX_SAI1_Init();
 800ab56:	f000 fa35 	bl	800afc4 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  /*AEC Initialization*/

     uint32_t error_value = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	607b      	str	r3, [r7, #4]

     EchoHandlerInstance.tail_length=1024;
 800ab5e:	4b2d      	ldr	r3, [pc, #180]	; (800ac14 <main+0xf4>)
 800ab60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab64:	801a      	strh	r2, [r3, #0]
     EchoHandlerInstance.preprocess_init = 1;
 800ab66:	4b2b      	ldr	r3, [pc, #172]	; (800ac14 <main+0xf4>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	605a      	str	r2, [r3, #4]
     EchoHandlerInstance.ptr_primary_channels=1;
 800ab6c:	4b29      	ldr	r3, [pc, #164]	; (800ac14 <main+0xf4>)
 800ab6e:	2201      	movs	r2, #1
 800ab70:	811a      	strh	r2, [r3, #8]
     EchoHandlerInstance.ptr_reference_channels=1;
 800ab72:	4b28      	ldr	r3, [pc, #160]	; (800ac14 <main+0xf4>)
 800ab74:	2201      	movs	r2, #1
 800ab76:	815a      	strh	r2, [r3, #10]
     EchoHandlerInstance.ptr_output_channels=1;
 800ab78:	4b26      	ldr	r3, [pc, #152]	; (800ac14 <main+0xf4>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	819a      	strh	r2, [r3, #12]
     AcousticEC_getMemorySize(&EchoHandlerInstance);
 800ab7e:	4825      	ldr	r0, [pc, #148]	; (800ac14 <main+0xf4>)
 800ab80:	f7f6 fd32 	bl	80015e8 <AcousticEC_getMemorySize>

     EchoHandlerInstance.pInternalMemory = (uint32_t *)malloc(EchoHandlerInstance.internal_memory_size);
 800ab84:	4b23      	ldr	r3, [pc, #140]	; (800ac14 <main+0xf4>)
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f007 f92d 	bl	8011de8 <malloc>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	461a      	mov	r2, r3
 800ab92:	4b20      	ldr	r3, [pc, #128]	; (800ac14 <main+0xf4>)
 800ab94:	615a      	str	r2, [r3, #20]
     if(EchoHandlerInstance.pInternalMemory == NULL)
 800ab96:	4b1f      	ldr	r3, [pc, #124]	; (800ac14 <main+0xf4>)
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d100      	bne.n	800aba0 <main+0x80>
     {
       while(1);
 800ab9e:	e7fe      	b.n	800ab9e <main+0x7e>
     }

     error_value = AcousticEC_Init((AcousticEC_Handler_t *)&EchoHandlerInstance);
 800aba0:	481c      	ldr	r0, [pc, #112]	; (800ac14 <main+0xf4>)
 800aba2:	f7f6 fcfb 	bl	800159c <AcousticEC_Init>
 800aba6:	6078      	str	r0, [r7, #4]
     if(error_value != 0)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d000      	beq.n	800abb0 <main+0x90>
     {
       while(1);
 800abae:	e7fe      	b.n	800abae <main+0x8e>
     }

     EchoConfigInstance.preprocess_state = ACOUSTIC_EC_PREPROCESS_ENABLE;
 800abb0:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <main+0xf8>)
 800abb2:	2201      	movs	r2, #1
 800abb4:	601a      	str	r2, [r3, #0]
     EchoConfigInstance.AGC_value = 0;
 800abb6:	4b18      	ldr	r3, [pc, #96]	; (800ac18 <main+0xf8>)
 800abb8:	2200      	movs	r2, #0
 800abba:	605a      	str	r2, [r3, #4]
     EchoConfigInstance.noise_suppress_default = -15; /* Default: -15 */
 800abbc:	4b16      	ldr	r3, [pc, #88]	; (800ac18 <main+0xf8>)
 800abbe:	f06f 020e 	mvn.w	r2, #14
 800abc2:	60da      	str	r2, [r3, #12]
     EchoConfigInstance.echo_suppress_default = -40; /* Default: -40 */
 800abc4:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <main+0xf8>)
 800abc6:	f06f 0227 	mvn.w	r2, #39	; 0x27
 800abca:	611a      	str	r2, [r3, #16]
     EchoConfigInstance.echo_suppress_active = -15;  /* Default: -15 */
 800abcc:	4b12      	ldr	r3, [pc, #72]	; (800ac18 <main+0xf8>)
 800abce:	f06f 020e 	mvn.w	r2, #14
 800abd2:	615a      	str	r2, [r3, #20]
     EchoConfigInstance.residual_echo_remove = 1;    /* Default: 1   */
 800abd4:	4b10      	ldr	r3, [pc, #64]	; (800ac18 <main+0xf8>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	609a      	str	r2, [r3, #8]

     error_value = AcousticEC_setConfig((AcousticEC_Handler_t *)&EchoHandlerInstance, (AcousticEC_Config_t *) &EchoConfigInstance);
 800abda:	490f      	ldr	r1, [pc, #60]	; (800ac18 <main+0xf8>)
 800abdc:	480d      	ldr	r0, [pc, #52]	; (800ac14 <main+0xf4>)
 800abde:	f7f6 fcf5 	bl	80015cc <AcousticEC_setConfig>
 800abe2:	6078      	str	r0, [r7, #4]
     if(error_value != 0)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d000      	beq.n	800abec <main+0xcc>
     {
       while(1);
 800abea:	e7fe      	b.n	800abea <main+0xca>
     }
     if (HAL_I2C_EnableListen_IT(&hi2c3) != HAL_OK)
 800abec:	480b      	ldr	r0, [pc, #44]	; (800ac1c <main+0xfc>)
 800abee:	f002 fd4c 	bl	800d68a <HAL_I2C_EnableListen_IT>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <main+0xdc>
      {
    	  Error_Handler();
 800abf8:	f000 fb84 	bl	800b304 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(shouldProcess == true)
 800abfc:	4b08      	ldr	r3, [pc, #32]	; (800ac20 <main+0x100>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0fa      	beq.n	800abfc <main+0xdc>
	  	  {
	  		  AcousticEC_Process((AcousticEC_Handler_t *)&EchoHandlerInstance);
 800ac06:	4803      	ldr	r0, [pc, #12]	; (800ac14 <main+0xf4>)
 800ac08:	f7f6 fcd4 	bl	80015b4 <AcousticEC_Process>
	  		  shouldProcess = false;
 800ac0c:	4b04      	ldr	r3, [pc, #16]	; (800ac20 <main+0x100>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	701a      	strb	r2, [r3, #0]
	  if(shouldProcess == true)
 800ac12:	e7f3      	b.n	800abfc <main+0xdc>
 800ac14:	20000114 	.word	0x20000114
 800ac18:	2000012c 	.word	0x2000012c
 800ac1c:	20000250 	.word	0x20000250
 800ac20:	20000514 	.word	0x20000514

0800ac24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b094      	sub	sp, #80	; 0x50
 800ac28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ac2a:	f107 031c 	add.w	r3, r7, #28
 800ac2e:	2234      	movs	r2, #52	; 0x34
 800ac30:	2100      	movs	r1, #0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f007 f98c 	bl	8011f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ac38:	f107 0308 	add.w	r3, r7, #8
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	605a      	str	r2, [r3, #4]
 800ac42:	609a      	str	r2, [r3, #8]
 800ac44:	60da      	str	r2, [r3, #12]
 800ac46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac48:	2300      	movs	r3, #0
 800ac4a:	607b      	str	r3, [r7, #4]
 800ac4c:	4b2f      	ldr	r3, [pc, #188]	; (800ad0c <SystemClock_Config+0xe8>)
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac50:	4a2e      	ldr	r2, [pc, #184]	; (800ad0c <SystemClock_Config+0xe8>)
 800ac52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac56:	6413      	str	r3, [r2, #64]	; 0x40
 800ac58:	4b2c      	ldr	r3, [pc, #176]	; (800ad0c <SystemClock_Config+0xe8>)
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac60:	607b      	str	r3, [r7, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ac64:	2300      	movs	r3, #0
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	4b29      	ldr	r3, [pc, #164]	; (800ad10 <SystemClock_Config+0xec>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a28      	ldr	r2, [pc, #160]	; (800ad10 <SystemClock_Config+0xec>)
 800ac6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac72:	6013      	str	r3, [r2, #0]
 800ac74:	4b26      	ldr	r3, [pc, #152]	; (800ad10 <SystemClock_Config+0xec>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac7c:	603b      	str	r3, [r7, #0]
 800ac7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ac80:	2301      	movs	r3, #1
 800ac82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ac84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ac8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ac94:	2304      	movs	r3, #4
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800ac98:	23b4      	movs	r3, #180	; 0xb4
 800ac9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800aca0:	2302      	movs	r3, #2
 800aca2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800aca4:	2302      	movs	r3, #2
 800aca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aca8:	f107 031c 	add.w	r3, r7, #28
 800acac:	4618      	mov	r0, r3
 800acae:	f005 fd9b 	bl	80107e8 <HAL_RCC_OscConfig>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 800acb8:	f000 fb24 	bl	800b304 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800acbc:	f004 fc1e 	bl	800f4fc <HAL_PWREx_EnableOverDrive>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800acc6:	f000 fb1d 	bl	800b304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800acca:	230f      	movs	r3, #15
 800accc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800acce:	2302      	movs	r3, #2
 800acd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800acd2:	2300      	movs	r3, #0
 800acd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800acd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800acda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800acdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ace0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ace2:	f107 0308 	add.w	r3, r7, #8
 800ace6:	2105      	movs	r1, #5
 800ace8:	4618      	mov	r0, r3
 800acea:	f004 fc57 	bl	800f59c <HAL_RCC_ClockConfig>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800acf4:	f000 fb06 	bl	800b304 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 800acf8:	2200      	movs	r2, #0
 800acfa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800acfe:	2001      	movs	r0, #1
 800ad00:	f004 fd32 	bl	800f768 <HAL_RCC_MCOConfig>
}
 800ad04:	bf00      	nop
 800ad06:	3750      	adds	r7, #80	; 0x50
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	40023800 	.word	0x40023800
 800ad10:	40007000 	.word	0x40007000

0800ad14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b098      	sub	sp, #96	; 0x60
 800ad18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad1a:	1d3b      	adds	r3, r7, #4
 800ad1c:	225c      	movs	r2, #92	; 0x5c
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f007 f915 	bl	8011f50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800ad26:	2304      	movs	r3, #4
 800ad28:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 800ad2a:	2304      	movs	r3, #4
 800ad2c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 98;
 800ad2e:	2362      	movs	r3, #98	; 0x62
 800ad30:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800ad32:	2302      	movs	r3, #2
 800ad34:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800ad36:	2302      	movs	r3, #2
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad42:	1d3b      	adds	r3, r7, #4
 800ad44:	4618      	mov	r0, r3
 800ad46:	f004 fdab 	bl	800f8a0 <HAL_RCCEx_PeriphCLKConfig>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d001      	beq.n	800ad54 <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
 800ad50:	f000 fad8 	bl	800b304 <Error_Handler>
  }
}
 800ad54:	bf00      	nop
 800ad56:	3760      	adds	r7, #96	; 0x60
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ad62:	463b      	mov	r3, r7
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	605a      	str	r2, [r3, #4]
 800ad6a:	609a      	str	r2, [r3, #8]
 800ad6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ad6e:	4b21      	ldr	r3, [pc, #132]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ad70:	4a21      	ldr	r2, [pc, #132]	; (800adf8 <MX_ADC1_Init+0x9c>)
 800ad72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ad74:	4b1f      	ldr	r3, [pc, #124]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ad76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ad7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ad7c:	4b1d      	ldr	r3, [pc, #116]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800ad82:	4b1c      	ldr	r3, [pc, #112]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800ad88:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ad8e:	4b19      	ldr	r3, [pc, #100]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ad96:	4b17      	ldr	r3, [pc, #92]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ad9c:	4b15      	ldr	r3, [pc, #84]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ad9e:	4a17      	ldr	r2, [pc, #92]	; (800adfc <MX_ADC1_Init+0xa0>)
 800ada0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ada2:	4b14      	ldr	r3, [pc, #80]	; (800adf4 <MX_ADC1_Init+0x98>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800ada8:	4b12      	ldr	r3, [pc, #72]	; (800adf4 <MX_ADC1_Init+0x98>)
 800adaa:	2201      	movs	r2, #1
 800adac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800adae:	4b11      	ldr	r3, [pc, #68]	; (800adf4 <MX_ADC1_Init+0x98>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800adb6:	4b0f      	ldr	r3, [pc, #60]	; (800adf4 <MX_ADC1_Init+0x98>)
 800adb8:	2201      	movs	r2, #1
 800adba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800adbc:	480d      	ldr	r0, [pc, #52]	; (800adf4 <MX_ADC1_Init+0x98>)
 800adbe:	f001 f851 	bl	800be64 <HAL_ADC_Init>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800adc8:	f000 fa9c 	bl	800b304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800adcc:	2301      	movs	r3, #1
 800adce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800add0:	2301      	movs	r3, #1
 800add2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800add4:	2300      	movs	r3, #0
 800add6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800add8:	463b      	mov	r3, r7
 800adda:	4619      	mov	r1, r3
 800addc:	4805      	ldr	r0, [pc, #20]	; (800adf4 <MX_ADC1_Init+0x98>)
 800adde:	f001 f885 	bl	800beec <HAL_ADC_ConfigChannel>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ade8:	f000 fa8c 	bl	800b304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800adec:	bf00      	nop
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	20000144 	.word	0x20000144
 800adf8:	40012000 	.word	0x40012000
 800adfc:	0f000001 	.word	0x0f000001

0800ae00 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ae06:	463b      	mov	r3, r7
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	605a      	str	r2, [r3, #4]
 800ae0e:	609a      	str	r2, [r3, #8]
 800ae10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800ae12:	4b21      	ldr	r3, [pc, #132]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae14:	4a21      	ldr	r2, [pc, #132]	; (800ae9c <MX_ADC2_Init+0x9c>)
 800ae16:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ae18:	4b1f      	ldr	r3, [pc, #124]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ae1e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800ae20:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800ae26:	4b1c      	ldr	r3, [pc, #112]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ae2c:	4b1a      	ldr	r3, [pc, #104]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ae32:	4b19      	ldr	r3, [pc, #100]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ae3a:	4b17      	ldr	r3, [pc, #92]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ae40:	4b15      	ldr	r3, [pc, #84]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae42:	4a17      	ldr	r2, [pc, #92]	; (800aea0 <MX_ADC2_Init+0xa0>)
 800ae44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ae46:	4b14      	ldr	r3, [pc, #80]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800ae4c:	4b12      	ldr	r3, [pc, #72]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800ae52:	4b11      	ldr	r3, [pc, #68]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ae5a:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ae60:	480d      	ldr	r0, [pc, #52]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae62:	f000 ffff 	bl	800be64 <HAL_ADC_Init>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d001      	beq.n	800ae70 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800ae6c:	f000 fa4a 	bl	800b304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800ae70:	2304      	movs	r3, #4
 800ae72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ae74:	2301      	movs	r3, #1
 800ae76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ae7c:	463b      	mov	r3, r7
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4805      	ldr	r0, [pc, #20]	; (800ae98 <MX_ADC2_Init+0x98>)
 800ae82:	f001 f833 	bl	800beec <HAL_ADC_ConfigChannel>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800ae8c:	f000 fa3a 	bl	800b304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	2000018c 	.word	0x2000018c
 800ae9c:	40012100 	.word	0x40012100
 800aea0:	0f000001 	.word	0x0f000001

0800aea4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800aea8:	4b16      	ldr	r3, [pc, #88]	; (800af04 <MX_CAN1_Init+0x60>)
 800aeaa:	4a17      	ldr	r2, [pc, #92]	; (800af08 <MX_CAN1_Init+0x64>)
 800aeac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800aeae:	4b15      	ldr	r3, [pc, #84]	; (800af04 <MX_CAN1_Init+0x60>)
 800aeb0:	2210      	movs	r2, #16
 800aeb2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800aeb4:	4b13      	ldr	r3, [pc, #76]	; (800af04 <MX_CAN1_Init+0x60>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800aeba:	4b12      	ldr	r3, [pc, #72]	; (800af04 <MX_CAN1_Init+0x60>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800aec0:	4b10      	ldr	r3, [pc, #64]	; (800af04 <MX_CAN1_Init+0x60>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800aec6:	4b0f      	ldr	r3, [pc, #60]	; (800af04 <MX_CAN1_Init+0x60>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800aecc:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <MX_CAN1_Init+0x60>)
 800aece:	2200      	movs	r2, #0
 800aed0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800aed2:	4b0c      	ldr	r3, [pc, #48]	; (800af04 <MX_CAN1_Init+0x60>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800aed8:	4b0a      	ldr	r3, [pc, #40]	; (800af04 <MX_CAN1_Init+0x60>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800aede:	4b09      	ldr	r3, [pc, #36]	; (800af04 <MX_CAN1_Init+0x60>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <MX_CAN1_Init+0x60>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800aeea:	4b06      	ldr	r3, [pc, #24]	; (800af04 <MX_CAN1_Init+0x60>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800aef0:	4804      	ldr	r0, [pc, #16]	; (800af04 <MX_CAN1_Init+0x60>)
 800aef2:	f001 fa29 	bl	800c348 <HAL_CAN_Init>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800aefc:	f000 fa02 	bl	800b304 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800af00:	bf00      	nop
 800af02:	bd80      	pop	{r7, pc}
 800af04:	200001d4 	.word	0x200001d4
 800af08:	40006400 	.word	0x40006400

0800af0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800af10:	4b12      	ldr	r3, [pc, #72]	; (800af5c <MX_I2C1_Init+0x50>)
 800af12:	4a13      	ldr	r2, [pc, #76]	; (800af60 <MX_I2C1_Init+0x54>)
 800af14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800af16:	4b11      	ldr	r3, [pc, #68]	; (800af5c <MX_I2C1_Init+0x50>)
 800af18:	4a12      	ldr	r2, [pc, #72]	; (800af64 <MX_I2C1_Init+0x58>)
 800af1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800af1c:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <MX_I2C1_Init+0x50>)
 800af1e:	2200      	movs	r2, #0
 800af20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800af22:	4b0e      	ldr	r3, [pc, #56]	; (800af5c <MX_I2C1_Init+0x50>)
 800af24:	2200      	movs	r2, #0
 800af26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800af28:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <MX_I2C1_Init+0x50>)
 800af2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800af2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800af30:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <MX_I2C1_Init+0x50>)
 800af32:	2200      	movs	r2, #0
 800af34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800af36:	4b09      	ldr	r3, [pc, #36]	; (800af5c <MX_I2C1_Init+0x50>)
 800af38:	2200      	movs	r2, #0
 800af3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800af3c:	4b07      	ldr	r3, [pc, #28]	; (800af5c <MX_I2C1_Init+0x50>)
 800af3e:	2200      	movs	r2, #0
 800af40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800af42:	4b06      	ldr	r3, [pc, #24]	; (800af5c <MX_I2C1_Init+0x50>)
 800af44:	2200      	movs	r2, #0
 800af46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800af48:	4804      	ldr	r0, [pc, #16]	; (800af5c <MX_I2C1_Init+0x50>)
 800af4a:	f002 f8d3 	bl	800d0f4 <HAL_I2C_Init>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d001      	beq.n	800af58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800af54:	f000 f9d6 	bl	800b304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800af58:	bf00      	nop
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	200001fc 	.word	0x200001fc
 800af60:	40005400 	.word	0x40005400
 800af64:	000186a0 	.word	0x000186a0

0800af68 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800af6c:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <MX_I2C3_Init+0x50>)
 800af6e:	4a13      	ldr	r2, [pc, #76]	; (800afbc <MX_I2C3_Init+0x54>)
 800af70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800af72:	4b11      	ldr	r3, [pc, #68]	; (800afb8 <MX_I2C3_Init+0x50>)
 800af74:	4a12      	ldr	r2, [pc, #72]	; (800afc0 <MX_I2C3_Init+0x58>)
 800af76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800af78:	4b0f      	ldr	r3, [pc, #60]	; (800afb8 <MX_I2C3_Init+0x50>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 170;
 800af7e:	4b0e      	ldr	r3, [pc, #56]	; (800afb8 <MX_I2C3_Init+0x50>)
 800af80:	22aa      	movs	r2, #170	; 0xaa
 800af82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800af84:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <MX_I2C3_Init+0x50>)
 800af86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800af8a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <MX_I2C3_Init+0x50>)
 800af8e:	2200      	movs	r2, #0
 800af90:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <MX_I2C3_Init+0x50>)
 800af94:	2200      	movs	r2, #0
 800af96:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <MX_I2C3_Init+0x50>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <MX_I2C3_Init+0x50>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800afa4:	4804      	ldr	r0, [pc, #16]	; (800afb8 <MX_I2C3_Init+0x50>)
 800afa6:	f002 f8a5 	bl	800d0f4 <HAL_I2C_Init>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800afb0:	f000 f9a8 	bl	800b304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800afb4:	bf00      	nop
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20000250 	.word	0x20000250
 800afbc:	40005c00 	.word	0x40005c00
 800afc0:	00061a80 	.word	0x00061a80

0800afc4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800afc8:	4b2c      	ldr	r3, [pc, #176]	; (800b07c <MX_SAI1_Init+0xb8>)
 800afca:	4a2d      	ldr	r2, [pc, #180]	; (800b080 <MX_SAI1_Init+0xbc>)
 800afcc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 800afce:	4b2b      	ldr	r3, [pc, #172]	; (800b07c <MX_SAI1_Init+0xb8>)
 800afd0:	2203      	movs	r2, #3
 800afd2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 800afd4:	4b29      	ldr	r3, [pc, #164]	; (800b07c <MX_SAI1_Init+0xb8>)
 800afd6:	2201      	movs	r2, #1
 800afd8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800afda:	4b28      	ldr	r3, [pc, #160]	; (800b07c <MX_SAI1_Init+0xb8>)
 800afdc:	2200      	movs	r2, #0
 800afde:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800afe0:	4b26      	ldr	r3, [pc, #152]	; (800b07c <MX_SAI1_Init+0xb8>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800afe6:	4b25      	ldr	r3, [pc, #148]	; (800b07c <MX_SAI1_Init+0xb8>)
 800afe8:	2200      	movs	r2, #0
 800afea:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800afec:	4b23      	ldr	r3, [pc, #140]	; (800b07c <MX_SAI1_Init+0xb8>)
 800afee:	2200      	movs	r2, #0
 800aff0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800aff2:	4b22      	ldr	r3, [pc, #136]	; (800b07c <MX_SAI1_Init+0xb8>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800aff8:	4b20      	ldr	r3, [pc, #128]	; (800b07c <MX_SAI1_Init+0xb8>)
 800affa:	2200      	movs	r2, #0
 800affc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800affe:	2302      	movs	r3, #2
 800b000:	2200      	movs	r2, #0
 800b002:	2100      	movs	r1, #0
 800b004:	481d      	ldr	r0, [pc, #116]	; (800b07c <MX_SAI1_Init+0xb8>)
 800b006:	f005 fe8d 	bl	8010d24 <HAL_SAI_InitProtocol>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <MX_SAI1_Init+0x50>
  {
    Error_Handler();
 800b010:	f000 f978 	bl	800b304 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800b014:	4b1b      	ldr	r3, [pc, #108]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b016:	4a1c      	ldr	r2, [pc, #112]	; (800b088 <MX_SAI1_Init+0xc4>)
 800b018:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800b01a:	4b1a      	ldr	r3, [pc, #104]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800b020:	4b18      	ldr	r3, [pc, #96]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b022:	2200      	movs	r2, #0
 800b024:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800b026:	4b17      	ldr	r3, [pc, #92]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b028:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b02c:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800b02e:	4b15      	ldr	r3, [pc, #84]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b030:	2200      	movs	r2, #0
 800b032:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800b034:	4b13      	ldr	r3, [pc, #76]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b036:	2200      	movs	r2, #0
 800b038:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 800b03a:	4b12      	ldr	r3, [pc, #72]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b03c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b040:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 800b042:	4b10      	ldr	r3, [pc, #64]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b044:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b048:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b04a:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800b050:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b052:	2200      	movs	r2, #0
 800b054:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800b056:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b058:	2200      	movs	r2, #0
 800b05a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b05e:	2200      	movs	r2, #0
 800b060:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800b062:	2302      	movs	r3, #2
 800b064:	2200      	movs	r2, #0
 800b066:	2100      	movs	r1, #0
 800b068:	4806      	ldr	r0, [pc, #24]	; (800b084 <MX_SAI1_Init+0xc0>)
 800b06a:	f005 fe5b 	bl	8010d24 <HAL_SAI_InitProtocol>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <MX_SAI1_Init+0xb4>
  {
    Error_Handler();
 800b074:	f000 f946 	bl	800b304 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800b078:	bf00      	nop
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	200002a4 	.word	0x200002a4
 800b080:	40015804 	.word	0x40015804
 800b084:	2000032c 	.word	0x2000032c
 800b088:	40015824 	.word	0x40015824

0800b08c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800b090:	4b17      	ldr	r3, [pc, #92]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b092:	4a18      	ldr	r2, [pc, #96]	; (800b0f4 <MX_SPI2_Init+0x68>)
 800b094:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b096:	4b16      	ldr	r3, [pc, #88]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b09c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b09e:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b0a4:	4b12      	ldr	r3, [pc, #72]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b0aa:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b0b0:	4b0f      	ldr	r3, [pc, #60]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b0b6:	4b0e      	ldr	r3, [pc, #56]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b0be:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b0c4:	4b0a      	ldr	r3, [pc, #40]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b0ca:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0d0:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800b0d6:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0d8:	220a      	movs	r2, #10
 800b0da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b0dc:	4804      	ldr	r0, [pc, #16]	; (800b0f0 <MX_SPI2_Init+0x64>)
 800b0de:	f006 f949 	bl	8011374 <HAL_SPI_Init>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800b0e8:	f000 f90c 	bl	800b304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800b0ec:	bf00      	nop
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000474 	.word	0x20000474
 800b0f4:	40003800 	.word	0x40003800

0800b0f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b0fc:	4b11      	ldr	r3, [pc, #68]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b0fe:	4a12      	ldr	r2, [pc, #72]	; (800b148 <MX_USART2_UART_Init+0x50>)
 800b100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b102:	4b10      	ldr	r3, [pc, #64]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b10a:	4b0e      	ldr	r3, [pc, #56]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b110:	4b0c      	ldr	r3, [pc, #48]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b112:	2200      	movs	r2, #0
 800b114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b116:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b118:	2200      	movs	r2, #0
 800b11a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b11c:	4b09      	ldr	r3, [pc, #36]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b11e:	220c      	movs	r2, #12
 800b120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b122:	4b08      	ldr	r3, [pc, #32]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b124:	2200      	movs	r2, #0
 800b126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b128:	4b06      	ldr	r3, [pc, #24]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b12e:	4805      	ldr	r0, [pc, #20]	; (800b144 <MX_USART2_UART_Init+0x4c>)
 800b130:	f006 f9a9 	bl	8011486 <HAL_UART_Init>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d001      	beq.n	800b13e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b13a:	f000 f8e3 	bl	800b304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b13e:	bf00      	nop
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	200004cc 	.word	0x200004cc
 800b148:	40004400 	.word	0x40004400

0800b14c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b152:	2300      	movs	r3, #0
 800b154:	607b      	str	r3, [r7, #4]
 800b156:	4b10      	ldr	r3, [pc, #64]	; (800b198 <MX_DMA_Init+0x4c>)
 800b158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15a:	4a0f      	ldr	r2, [pc, #60]	; (800b198 <MX_DMA_Init+0x4c>)
 800b15c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b160:	6313      	str	r3, [r2, #48]	; 0x30
 800b162:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <MX_DMA_Init+0x4c>)
 800b164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b16a:	607b      	str	r3, [r7, #4]
 800b16c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800b16e:	2200      	movs	r2, #0
 800b170:	2100      	movs	r1, #0
 800b172:	2039      	movs	r0, #57	; 0x39
 800b174:	f001 fabf 	bl	800c6f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800b178:	2039      	movs	r0, #57	; 0x39
 800b17a:	f001 fad8 	bl	800c72e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800b17e:	2200      	movs	r2, #0
 800b180:	2100      	movs	r1, #0
 800b182:	203c      	movs	r0, #60	; 0x3c
 800b184:	f001 fab7 	bl	800c6f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800b188:	203c      	movs	r0, #60	; 0x3c
 800b18a:	f001 fad0 	bl	800c72e <HAL_NVIC_EnableIRQ>

}
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	40023800 	.word	0x40023800

0800b19c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b08a      	sub	sp, #40	; 0x28
 800b1a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1a2:	f107 0314 	add.w	r3, r7, #20
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	609a      	str	r2, [r3, #8]
 800b1ae:	60da      	str	r2, [r3, #12]
 800b1b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	613b      	str	r3, [r7, #16]
 800b1b6:	4b4f      	ldr	r3, [pc, #316]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ba:	4a4e      	ldr	r2, [pc, #312]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800b1c2:	4b4c      	ldr	r3, [pc, #304]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ca:	613b      	str	r3, [r7, #16]
 800b1cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
 800b1d2:	4b48      	ldr	r3, [pc, #288]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d6:	4a47      	ldr	r2, [pc, #284]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1d8:	f043 0304 	orr.w	r3, r3, #4
 800b1dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b1de:	4b45      	ldr	r3, [pc, #276]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60bb      	str	r3, [r7, #8]
 800b1ee:	4b41      	ldr	r3, [pc, #260]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	4a40      	ldr	r2, [pc, #256]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1f4:	f043 0301 	orr.w	r3, r3, #1
 800b1f8:	6313      	str	r3, [r2, #48]	; 0x30
 800b1fa:	4b3e      	ldr	r3, [pc, #248]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	60bb      	str	r3, [r7, #8]
 800b204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b206:	2300      	movs	r3, #0
 800b208:	607b      	str	r3, [r7, #4]
 800b20a:	4b3a      	ldr	r3, [pc, #232]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20e:	4a39      	ldr	r2, [pc, #228]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b210:	f043 0302 	orr.w	r3, r3, #2
 800b214:	6313      	str	r3, [r2, #48]	; 0x30
 800b216:	4b37      	ldr	r3, [pc, #220]	; (800b2f4 <MX_GPIO_Init+0x158>)
 800b218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21a:	f003 0302 	and.w	r3, r3, #2
 800b21e:	607b      	str	r3, [r7, #4]
 800b220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CODEC_RST_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 800b222:	2200      	movs	r2, #0
 800b224:	2121      	movs	r1, #33	; 0x21
 800b226:	4834      	ldr	r0, [pc, #208]	; (800b2f8 <MX_GPIO_Init+0x15c>)
 800b228:	f001 ff4a 	bl	800d0c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800b22c:	2200      	movs	r2, #0
 800b22e:	2120      	movs	r1, #32
 800b230:	4832      	ldr	r0, [pc, #200]	; (800b2fc <MX_GPIO_Init+0x160>)
 800b232:	f001 ff45 	bl	800d0c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGIPOT_RESET_GPIO_Port, DIGIPOT_RESET_Pin, GPIO_PIN_RESET);
 800b236:	2200      	movs	r2, #0
 800b238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b23c:	4830      	ldr	r0, [pc, #192]	; (800b300 <MX_GPIO_Init+0x164>)
 800b23e:	f001 ff3f 	bl	800d0c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CODEC_RST_Pin DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = CODEC_RST_Pin|DEBUG_LED_Pin;
 800b242:	2321      	movs	r3, #33	; 0x21
 800b244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b246:	2301      	movs	r3, #1
 800b248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b24e:	2300      	movs	r3, #0
 800b250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b252:	f107 0314 	add.w	r3, r7, #20
 800b256:	4619      	mov	r1, r3
 800b258:	4827      	ldr	r0, [pc, #156]	; (800b2f8 <MX_GPIO_Init+0x15c>)
 800b25a:	f001 fd9d 	bl	800cd98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SS_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 800b25e:	2320      	movs	r3, #32
 800b260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b262:	2301      	movs	r3, #1
 800b264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b266:	2300      	movs	r3, #0
 800b268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b26a:	2300      	movs	r3, #0
 800b26c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 800b26e:	f107 0314 	add.w	r3, r7, #20
 800b272:	4619      	mov	r1, r3
 800b274:	4821      	ldr	r0, [pc, #132]	; (800b2fc <MX_GPIO_Init+0x160>)
 800b276:	f001 fd8f 	bl	800cd98 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_addr0_Pin I2C_addr1_Pin I2C_addr2_Pin */
  GPIO_InitStruct.Pin = I2C_addr0_Pin|I2C_addr1_Pin|I2C_addr2_Pin;
 800b27a:	2307      	movs	r3, #7
 800b27c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b27e:	2300      	movs	r3, #0
 800b280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b282:	2300      	movs	r3, #0
 800b284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b286:	f107 0314 	add.w	r3, r7, #20
 800b28a:	4619      	mov	r1, r3
 800b28c:	481c      	ldr	r0, [pc, #112]	; (800b300 <MX_GPIO_Init+0x164>)
 800b28e:	f001 fd83 	bl	800cd98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b292:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b298:	2302      	movs	r3, #2
 800b29a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2a8:	f107 0314 	add.w	r3, r7, #20
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4813      	ldr	r0, [pc, #76]	; (800b2fc <MX_GPIO_Init+0x160>)
 800b2b0:	f001 fd72 	bl	800cd98 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_IO1_Pin EXT_IO2_Pin */
  GPIO_InitStruct.Pin = EXT_IO1_Pin|EXT_IO2_Pin;
 800b2b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b2b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2c2:	f107 0314 	add.w	r3, r7, #20
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	480c      	ldr	r0, [pc, #48]	; (800b2fc <MX_GPIO_Init+0x160>)
 800b2ca:	f001 fd65 	bl	800cd98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGIPOT_RESET_Pin */
  GPIO_InitStruct.Pin = DIGIPOT_RESET_Pin;
 800b2ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIGIPOT_RESET_GPIO_Port, &GPIO_InitStruct);
 800b2e0:	f107 0314 	add.w	r3, r7, #20
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4806      	ldr	r0, [pc, #24]	; (800b300 <MX_GPIO_Init+0x164>)
 800b2e8:	f001 fd56 	bl	800cd98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800b2ec:	bf00      	nop
 800b2ee:	3728      	adds	r7, #40	; 0x28
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	40023800 	.word	0x40023800
 800b2f8:	40020000 	.word	0x40020000
 800b2fc:	40020800 	.word	0x40020800
 800b300:	40020400 	.word	0x40020400

0800b304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b304:	b480      	push	{r7}
 800b306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b308:	b672      	cpsid	i
}
 800b30a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b30c:	e7fe      	b.n	800b30c <Error_Handler+0x8>
	...

0800b310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b316:	2300      	movs	r3, #0
 800b318:	607b      	str	r3, [r7, #4]
 800b31a:	4b10      	ldr	r3, [pc, #64]	; (800b35c <HAL_MspInit+0x4c>)
 800b31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b31e:	4a0f      	ldr	r2, [pc, #60]	; (800b35c <HAL_MspInit+0x4c>)
 800b320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b324:	6453      	str	r3, [r2, #68]	; 0x44
 800b326:	4b0d      	ldr	r3, [pc, #52]	; (800b35c <HAL_MspInit+0x4c>)
 800b328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b32a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b32e:	607b      	str	r3, [r7, #4]
 800b330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b332:	2300      	movs	r3, #0
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	4b09      	ldr	r3, [pc, #36]	; (800b35c <HAL_MspInit+0x4c>)
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	4a08      	ldr	r2, [pc, #32]	; (800b35c <HAL_MspInit+0x4c>)
 800b33c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b340:	6413      	str	r3, [r2, #64]	; 0x40
 800b342:	4b06      	ldr	r3, [pc, #24]	; (800b35c <HAL_MspInit+0x4c>)
 800b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b34a:	603b      	str	r3, [r7, #0]
 800b34c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b34e:	bf00      	nop
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	40023800 	.word	0x40023800

0800b360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08c      	sub	sp, #48	; 0x30
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b368:	f107 031c 	add.w	r3, r7, #28
 800b36c:	2200      	movs	r2, #0
 800b36e:	601a      	str	r2, [r3, #0]
 800b370:	605a      	str	r2, [r3, #4]
 800b372:	609a      	str	r2, [r3, #8]
 800b374:	60da      	str	r2, [r3, #12]
 800b376:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a2e      	ldr	r2, [pc, #184]	; (800b438 <HAL_ADC_MspInit+0xd8>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d128      	bne.n	800b3d4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b382:	2300      	movs	r3, #0
 800b384:	61bb      	str	r3, [r7, #24]
 800b386:	4b2d      	ldr	r3, [pc, #180]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b38a:	4a2c      	ldr	r2, [pc, #176]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b38c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b390:	6453      	str	r3, [r2, #68]	; 0x44
 800b392:	4b2a      	ldr	r3, [pc, #168]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b39a:	61bb      	str	r3, [r7, #24]
 800b39c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b39e:	2300      	movs	r3, #0
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	4b26      	ldr	r3, [pc, #152]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a6:	4a25      	ldr	r2, [pc, #148]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b3a8:	f043 0301 	orr.w	r3, r3, #1
 800b3ac:	6313      	str	r3, [r2, #48]	; 0x30
 800b3ae:	4b23      	ldr	r3, [pc, #140]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]
 800b3b8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3c6:	f107 031c 	add.w	r3, r7, #28
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	481c      	ldr	r0, [pc, #112]	; (800b440 <HAL_ADC_MspInit+0xe0>)
 800b3ce:	f001 fce3 	bl	800cd98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800b3d2:	e02c      	b.n	800b42e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a1a      	ldr	r2, [pc, #104]	; (800b444 <HAL_ADC_MspInit+0xe4>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d127      	bne.n	800b42e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800b3de:	2300      	movs	r3, #0
 800b3e0:	613b      	str	r3, [r7, #16]
 800b3e2:	4b16      	ldr	r3, [pc, #88]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3e6:	4a15      	ldr	r2, [pc, #84]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b3e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3ec:	6453      	str	r3, [r2, #68]	; 0x44
 800b3ee:	4b13      	ldr	r3, [pc, #76]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3f6:	613b      	str	r3, [r7, #16]
 800b3f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	4b0f      	ldr	r3, [pc, #60]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b402:	4a0e      	ldr	r2, [pc, #56]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b404:	f043 0301 	orr.w	r3, r3, #1
 800b408:	6313      	str	r3, [r2, #48]	; 0x30
 800b40a:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <HAL_ADC_MspInit+0xdc>)
 800b40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40e:	f003 0301 	and.w	r3, r3, #1
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b416:	2310      	movs	r3, #16
 800b418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b41a:	2303      	movs	r3, #3
 800b41c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b422:	f107 031c 	add.w	r3, r7, #28
 800b426:	4619      	mov	r1, r3
 800b428:	4805      	ldr	r0, [pc, #20]	; (800b440 <HAL_ADC_MspInit+0xe0>)
 800b42a:	f001 fcb5 	bl	800cd98 <HAL_GPIO_Init>
}
 800b42e:	bf00      	nop
 800b430:	3730      	adds	r7, #48	; 0x30
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	40012000 	.word	0x40012000
 800b43c:	40023800 	.word	0x40023800
 800b440:	40020000 	.word	0x40020000
 800b444:	40012100 	.word	0x40012100

0800b448 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08a      	sub	sp, #40	; 0x28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b450:	f107 0314 	add.w	r3, r7, #20
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	605a      	str	r2, [r3, #4]
 800b45a:	609a      	str	r2, [r3, #8]
 800b45c:	60da      	str	r2, [r3, #12]
 800b45e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a19      	ldr	r2, [pc, #100]	; (800b4cc <HAL_CAN_MspInit+0x84>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d12c      	bne.n	800b4c4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800b46a:	2300      	movs	r3, #0
 800b46c:	613b      	str	r3, [r7, #16]
 800b46e:	4b18      	ldr	r3, [pc, #96]	; (800b4d0 <HAL_CAN_MspInit+0x88>)
 800b470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b472:	4a17      	ldr	r2, [pc, #92]	; (800b4d0 <HAL_CAN_MspInit+0x88>)
 800b474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b478:	6413      	str	r3, [r2, #64]	; 0x40
 800b47a:	4b15      	ldr	r3, [pc, #84]	; (800b4d0 <HAL_CAN_MspInit+0x88>)
 800b47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b482:	613b      	str	r3, [r7, #16]
 800b484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b486:	2300      	movs	r3, #0
 800b488:	60fb      	str	r3, [r7, #12]
 800b48a:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <HAL_CAN_MspInit+0x88>)
 800b48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48e:	4a10      	ldr	r2, [pc, #64]	; (800b4d0 <HAL_CAN_MspInit+0x88>)
 800b490:	f043 0301 	orr.w	r3, r3, #1
 800b494:	6313      	str	r3, [r2, #48]	; 0x30
 800b496:	4b0e      	ldr	r3, [pc, #56]	; (800b4d0 <HAL_CAN_MspInit+0x88>)
 800b498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b4a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b4a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800b4b4:	2309      	movs	r3, #9
 800b4b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4b8:	f107 0314 	add.w	r3, r7, #20
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4805      	ldr	r0, [pc, #20]	; (800b4d4 <HAL_CAN_MspInit+0x8c>)
 800b4c0:	f001 fc6a 	bl	800cd98 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800b4c4:	bf00      	nop
 800b4c6:	3728      	adds	r7, #40	; 0x28
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	40006400 	.word	0x40006400
 800b4d0:	40023800 	.word	0x40023800
 800b4d4:	40020000 	.word	0x40020000

0800b4d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08c      	sub	sp, #48	; 0x30
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4e0:	f107 031c 	add.w	r3, r7, #28
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	605a      	str	r2, [r3, #4]
 800b4ea:	609a      	str	r2, [r3, #8]
 800b4ec:	60da      	str	r2, [r3, #12]
 800b4ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a49      	ldr	r2, [pc, #292]	; (800b61c <HAL_I2C_MspInit+0x144>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d12c      	bne.n	800b554 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	61bb      	str	r3, [r7, #24]
 800b4fe:	4b48      	ldr	r3, [pc, #288]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	4a47      	ldr	r2, [pc, #284]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b504:	f043 0302 	orr.w	r3, r3, #2
 800b508:	6313      	str	r3, [r2, #48]	; 0x30
 800b50a:	4b45      	ldr	r3, [pc, #276]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50e:	f003 0302 	and.w	r3, r3, #2
 800b512:	61bb      	str	r3, [r7, #24]
 800b514:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DIGIPOT_SCL_Pin|DIGIPOT_SDA_Pin;
 800b516:	23c0      	movs	r3, #192	; 0xc0
 800b518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b51a:	2312      	movs	r3, #18
 800b51c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b522:	2303      	movs	r3, #3
 800b524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b526:	2304      	movs	r3, #4
 800b528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b52a:	f107 031c 	add.w	r3, r7, #28
 800b52e:	4619      	mov	r1, r3
 800b530:	483c      	ldr	r0, [pc, #240]	; (800b624 <HAL_I2C_MspInit+0x14c>)
 800b532:	f001 fc31 	bl	800cd98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	4b39      	ldr	r3, [pc, #228]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53e:	4a38      	ldr	r2, [pc, #224]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b544:	6413      	str	r3, [r2, #64]	; 0x40
 800b546:	4b36      	ldr	r3, [pc, #216]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b54e:	617b      	str	r3, [r7, #20]
 800b550:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800b552:	e05f      	b.n	800b614 <HAL_I2C_MspInit+0x13c>
  else if(hi2c->Instance==I2C3)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a33      	ldr	r2, [pc, #204]	; (800b628 <HAL_I2C_MspInit+0x150>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d15a      	bne.n	800b614 <HAL_I2C_MspInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b55e:	2300      	movs	r3, #0
 800b560:	613b      	str	r3, [r7, #16]
 800b562:	4b2f      	ldr	r3, [pc, #188]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b566:	4a2e      	ldr	r2, [pc, #184]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b568:	f043 0301 	orr.w	r3, r3, #1
 800b56c:	6313      	str	r3, [r2, #48]	; 0x30
 800b56e:	4b2c      	ldr	r3, [pc, #176]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	613b      	str	r3, [r7, #16]
 800b578:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b57a:	2300      	movs	r3, #0
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	4b28      	ldr	r3, [pc, #160]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b582:	4a27      	ldr	r2, [pc, #156]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b584:	f043 0302 	orr.w	r3, r3, #2
 800b588:	6313      	str	r3, [r2, #48]	; 0x30
 800b58a:	4b25      	ldr	r3, [pc, #148]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58e:	f003 0302 	and.w	r3, r3, #2
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800b596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b59a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b59c:	2312      	movs	r3, #18
 800b59e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b5a8:	2304      	movs	r3, #4
 800b5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5ac:	f107 031c 	add.w	r3, r7, #28
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	481e      	ldr	r0, [pc, #120]	; (800b62c <HAL_I2C_MspInit+0x154>)
 800b5b4:	f001 fbf0 	bl	800cd98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b5b8:	2310      	movs	r3, #16
 800b5ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b5bc:	2312      	movs	r3, #18
 800b5be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5cc:	f107 031c 	add.w	r3, r7, #28
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4814      	ldr	r0, [pc, #80]	; (800b624 <HAL_I2C_MspInit+0x14c>)
 800b5d4:	f001 fbe0 	bl	800cd98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60bb      	str	r3, [r7, #8]
 800b5dc:	4b10      	ldr	r3, [pc, #64]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e0:	4a0f      	ldr	r2, [pc, #60]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b5e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5e6:	6413      	str	r3, [r2, #64]	; 0x40
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <HAL_I2C_MspInit+0x148>)
 800b5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5f0:	60bb      	str	r3, [r7, #8]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	2048      	movs	r0, #72	; 0x48
 800b5fa:	f001 f87c 	bl	800c6f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800b5fe:	2048      	movs	r0, #72	; 0x48
 800b600:	f001 f895 	bl	800c72e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800b604:	2200      	movs	r2, #0
 800b606:	2100      	movs	r1, #0
 800b608:	2049      	movs	r0, #73	; 0x49
 800b60a:	f001 f874 	bl	800c6f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800b60e:	2049      	movs	r0, #73	; 0x49
 800b610:	f001 f88d 	bl	800c72e <HAL_NVIC_EnableIRQ>
}
 800b614:	bf00      	nop
 800b616:	3730      	adds	r7, #48	; 0x30
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	40005400 	.word	0x40005400
 800b620:	40023800 	.word	0x40023800
 800b624:	40020400 	.word	0x40020400
 800b628:	40005c00 	.word	0x40005c00
 800b62c:	40020000 	.word	0x40020000

0800b630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08a      	sub	sp, #40	; 0x28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	605a      	str	r2, [r3, #4]
 800b642:	609a      	str	r2, [r3, #8]
 800b644:	60da      	str	r2, [r3, #12]
 800b646:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a28      	ldr	r2, [pc, #160]	; (800b6f0 <HAL_SPI_MspInit+0xc0>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d14a      	bne.n	800b6e8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b652:	2300      	movs	r3, #0
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	4b27      	ldr	r3, [pc, #156]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	4a26      	ldr	r2, [pc, #152]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b65c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b660:	6413      	str	r3, [r2, #64]	; 0x40
 800b662:	4b24      	ldr	r3, [pc, #144]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b66a:	613b      	str	r3, [r7, #16]
 800b66c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	4b20      	ldr	r3, [pc, #128]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	4a1f      	ldr	r2, [pc, #124]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b678:	f043 0304 	orr.w	r3, r3, #4
 800b67c:	6313      	str	r3, [r2, #48]	; 0x30
 800b67e:	4b1d      	ldr	r3, [pc, #116]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b682:	f003 0304 	and.w	r3, r3, #4
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b68a:	2300      	movs	r3, #0
 800b68c:	60bb      	str	r3, [r7, #8]
 800b68e:	4b19      	ldr	r3, [pc, #100]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b692:	4a18      	ldr	r2, [pc, #96]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b694:	f043 0302 	orr.w	r3, r3, #2
 800b698:	6313      	str	r3, [r2, #48]	; 0x30
 800b69a:	4b16      	ldr	r3, [pc, #88]	; (800b6f4 <HAL_SPI_MspInit+0xc4>)
 800b69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69e:	f003 0302 	and.w	r3, r3, #2
 800b6a2:	60bb      	str	r3, [r7, #8]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b6b6:	2305      	movs	r3, #5
 800b6b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b6ba:	f107 0314 	add.w	r3, r7, #20
 800b6be:	4619      	mov	r1, r3
 800b6c0:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <HAL_SPI_MspInit+0xc8>)
 800b6c2:	f001 fb69 	bl	800cd98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b6c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b6d8:	2305      	movs	r3, #5
 800b6da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6dc:	f107 0314 	add.w	r3, r7, #20
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4806      	ldr	r0, [pc, #24]	; (800b6fc <HAL_SPI_MspInit+0xcc>)
 800b6e4:	f001 fb58 	bl	800cd98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b6e8:	bf00      	nop
 800b6ea:	3728      	adds	r7, #40	; 0x28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	40003800 	.word	0x40003800
 800b6f4:	40023800 	.word	0x40023800
 800b6f8:	40020800 	.word	0x40020800
 800b6fc:	40020400 	.word	0x40020400

0800b700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b708:	f107 0314 	add.w	r3, r7, #20
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	605a      	str	r2, [r3, #4]
 800b712:	609a      	str	r2, [r3, #8]
 800b714:	60da      	str	r2, [r3, #12]
 800b716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a19      	ldr	r2, [pc, #100]	; (800b784 <HAL_UART_MspInit+0x84>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d12b      	bne.n	800b77a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b722:	2300      	movs	r3, #0
 800b724:	613b      	str	r3, [r7, #16]
 800b726:	4b18      	ldr	r3, [pc, #96]	; (800b788 <HAL_UART_MspInit+0x88>)
 800b728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72a:	4a17      	ldr	r2, [pc, #92]	; (800b788 <HAL_UART_MspInit+0x88>)
 800b72c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b730:	6413      	str	r3, [r2, #64]	; 0x40
 800b732:	4b15      	ldr	r3, [pc, #84]	; (800b788 <HAL_UART_MspInit+0x88>)
 800b734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b73a:	613b      	str	r3, [r7, #16]
 800b73c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b73e:	2300      	movs	r3, #0
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	4b11      	ldr	r3, [pc, #68]	; (800b788 <HAL_UART_MspInit+0x88>)
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	4a10      	ldr	r2, [pc, #64]	; (800b788 <HAL_UART_MspInit+0x88>)
 800b748:	f043 0301 	orr.w	r3, r3, #1
 800b74c:	6313      	str	r3, [r2, #48]	; 0x30
 800b74e:	4b0e      	ldr	r3, [pc, #56]	; (800b788 <HAL_UART_MspInit+0x88>)
 800b750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b75a:	230c      	movs	r3, #12
 800b75c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b75e:	2302      	movs	r3, #2
 800b760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b762:	2300      	movs	r3, #0
 800b764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b766:	2303      	movs	r3, #3
 800b768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b76a:	2307      	movs	r3, #7
 800b76c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b76e:	f107 0314 	add.w	r3, r7, #20
 800b772:	4619      	mov	r1, r3
 800b774:	4805      	ldr	r0, [pc, #20]	; (800b78c <HAL_UART_MspInit+0x8c>)
 800b776:	f001 fb0f 	bl	800cd98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b77a:	bf00      	nop
 800b77c:	3728      	adds	r7, #40	; 0x28
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	40004400 	.word	0x40004400
 800b788:	40023800 	.word	0x40023800
 800b78c:	40020000 	.word	0x40020000

0800b790 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08a      	sub	sp, #40	; 0x28
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a74      	ldr	r2, [pc, #464]	; (800b970 <HAL_SAI_MspInit+0x1e0>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d15c      	bne.n	800b85c <HAL_SAI_MspInit+0xcc>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800b7a2:	4b74      	ldr	r3, [pc, #464]	; (800b974 <HAL_SAI_MspInit+0x1e4>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10d      	bne.n	800b7c6 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	613b      	str	r3, [r7, #16]
 800b7ae:	4b72      	ldr	r3, [pc, #456]	; (800b978 <HAL_SAI_MspInit+0x1e8>)
 800b7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b2:	4a71      	ldr	r2, [pc, #452]	; (800b978 <HAL_SAI_MspInit+0x1e8>)
 800b7b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b7b8:	6453      	str	r3, [r2, #68]	; 0x44
 800b7ba:	4b6f      	ldr	r3, [pc, #444]	; (800b978 <HAL_SAI_MspInit+0x1e8>)
 800b7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7c2:	613b      	str	r3, [r7, #16]
 800b7c4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800b7c6:	4b6b      	ldr	r3, [pc, #428]	; (800b974 <HAL_SAI_MspInit+0x1e4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	4a69      	ldr	r2, [pc, #420]	; (800b974 <HAL_SAI_MspInit+0x1e4>)
 800b7ce:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b7e0:	2306      	movs	r3, #6
 800b7e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7e4:	f107 0314 	add.w	r3, r7, #20
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4864      	ldr	r0, [pc, #400]	; (800b97c <HAL_SAI_MspInit+0x1ec>)
 800b7ec:	f001 fad4 	bl	800cd98 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 800b7f0:	4b63      	ldr	r3, [pc, #396]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b7f2:	4a64      	ldr	r2, [pc, #400]	; (800b984 <HAL_SAI_MspInit+0x1f4>)
 800b7f4:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800b7f6:	4b62      	ldr	r3, [pc, #392]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7fc:	4b60      	ldr	r3, [pc, #384]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b7fe:	2200      	movs	r2, #0
 800b800:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800b802:	4b5f      	ldr	r3, [pc, #380]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b804:	2200      	movs	r2, #0
 800b806:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800b808:	4b5d      	ldr	r3, [pc, #372]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b80a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b80e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b810:	4b5b      	ldr	r3, [pc, #364]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b812:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b816:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b818:	4b59      	ldr	r3, [pc, #356]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b81a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b81e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800b820:	4b57      	ldr	r3, [pc, #348]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b822:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b826:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800b828:	4b55      	ldr	r3, [pc, #340]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b82e:	4b54      	ldr	r3, [pc, #336]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b830:	2200      	movs	r2, #0
 800b832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800b834:	4852      	ldr	r0, [pc, #328]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b836:	f000 ff95 	bl	800c764 <HAL_DMA_Init>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <HAL_SAI_MspInit+0xb4>
    {
      Error_Handler();
 800b840:	f7ff fd60 	bl	800b304 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a4e      	ldr	r2, [pc, #312]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b848:	675a      	str	r2, [r3, #116]	; 0x74
 800b84a:	4a4d      	ldr	r2, [pc, #308]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a4b      	ldr	r2, [pc, #300]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b854:	671a      	str	r2, [r3, #112]	; 0x70
 800b856:	4a4a      	ldr	r2, [pc, #296]	; (800b980 <HAL_SAI_MspInit+0x1f0>)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a49      	ldr	r2, [pc, #292]	; (800b988 <HAL_SAI_MspInit+0x1f8>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d17f      	bne.n	800b966 <HAL_SAI_MspInit+0x1d6>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800b866:	4b43      	ldr	r3, [pc, #268]	; (800b974 <HAL_SAI_MspInit+0x1e4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10d      	bne.n	800b88a <HAL_SAI_MspInit+0xfa>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800b86e:	2300      	movs	r3, #0
 800b870:	60fb      	str	r3, [r7, #12]
 800b872:	4b41      	ldr	r3, [pc, #260]	; (800b978 <HAL_SAI_MspInit+0x1e8>)
 800b874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b876:	4a40      	ldr	r2, [pc, #256]	; (800b978 <HAL_SAI_MspInit+0x1e8>)
 800b878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b87c:	6453      	str	r3, [r2, #68]	; 0x44
 800b87e:	4b3e      	ldr	r3, [pc, #248]	; (800b978 <HAL_SAI_MspInit+0x1e8>)
 800b880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b886:	60fb      	str	r3, [r7, #12]
 800b888:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800b88a:	4b3a      	ldr	r3, [pc, #232]	; (800b974 <HAL_SAI_MspInit+0x1e4>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	3301      	adds	r3, #1
 800b890:	4a38      	ldr	r2, [pc, #224]	; (800b974 <HAL_SAI_MspInit+0x1e4>)
 800b892:	6013      	str	r3, [r2, #0]
    PC0     ------> SAI1_MCLK_B
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b894:	2301      	movs	r3, #1
 800b896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b898:	2302      	movs	r3, #2
 800b89a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b89c:	2300      	movs	r3, #0
 800b89e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b8a4:	2306      	movs	r3, #6
 800b8a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b8a8:	f107 0314 	add.w	r3, r7, #20
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4833      	ldr	r0, [pc, #204]	; (800b97c <HAL_SAI_MspInit+0x1ec>)
 800b8b0:	f001 fa72 	bl	800cd98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 800b8b4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800b8b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b8c6:	2306      	movs	r3, #6
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8ca:	f107 0314 	add.w	r3, r7, #20
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	482e      	ldr	r0, [pc, #184]	; (800b98c <HAL_SAI_MspInit+0x1fc>)
 800b8d2:	f001 fa61 	bl	800cd98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b8d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8dc:	2302      	movs	r3, #2
 800b8de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800b8e8:	2306      	movs	r3, #6
 800b8ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ec:	f107 0314 	add.w	r3, r7, #20
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4827      	ldr	r0, [pc, #156]	; (800b990 <HAL_SAI_MspInit+0x200>)
 800b8f4:	f001 fa50 	bl	800cd98 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 800b8f8:	4b26      	ldr	r3, [pc, #152]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b8fa:	4a27      	ldr	r2, [pc, #156]	; (800b998 <HAL_SAI_MspInit+0x208>)
 800b8fc:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 800b8fe:	4b25      	ldr	r3, [pc, #148]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b900:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b904:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b906:	4b23      	ldr	r3, [pc, #140]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b908:	2240      	movs	r2, #64	; 0x40
 800b90a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800b90c:	4b21      	ldr	r3, [pc, #132]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b90e:	2200      	movs	r2, #0
 800b910:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800b912:	4b20      	ldr	r3, [pc, #128]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b918:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b91a:	4b1e      	ldr	r3, [pc, #120]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b91c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b920:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b922:	4b1c      	ldr	r3, [pc, #112]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b924:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b928:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800b92a:	4b1a      	ldr	r3, [pc, #104]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b92c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b930:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 800b932:	4b18      	ldr	r3, [pc, #96]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b934:	2200      	movs	r2, #0
 800b936:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b938:	4b16      	ldr	r3, [pc, #88]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800b93e:	4815      	ldr	r0, [pc, #84]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b940:	f000 ff10 	bl	800c764 <HAL_DMA_Init>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <HAL_SAI_MspInit+0x1be>
    {
      Error_Handler();
 800b94a:	f7ff fcdb 	bl	800b304 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a10      	ldr	r2, [pc, #64]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b952:	675a      	str	r2, [r3, #116]	; 0x74
 800b954:	4a0f      	ldr	r2, [pc, #60]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a0d      	ldr	r2, [pc, #52]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b95e:	671a      	str	r2, [r3, #112]	; 0x70
 800b960:	4a0c      	ldr	r2, [pc, #48]	; (800b994 <HAL_SAI_MspInit+0x204>)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800b966:	bf00      	nop
 800b968:	3728      	adds	r7, #40	; 0x28
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	40015804 	.word	0x40015804
 800b974:	20000518 	.word	0x20000518
 800b978:	40023800 	.word	0x40023800
 800b97c:	40020800 	.word	0x40020800
 800b980:	200003b4 	.word	0x200003b4
 800b984:	40026428 	.word	0x40026428
 800b988:	40015824 	.word	0x40015824
 800b98c:	40020400 	.word	0x40020400
 800b990:	40020000 	.word	0x40020000
 800b994:	20000414 	.word	0x20000414
 800b998:	40026470 	.word	0x40026470

0800b99c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b9a0:	e7fe      	b.n	800b9a0 <NMI_Handler+0x4>

0800b9a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b9a6:	e7fe      	b.n	800b9a6 <HardFault_Handler+0x4>

0800b9a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b9ac:	e7fe      	b.n	800b9ac <MemManage_Handler+0x4>

0800b9ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b9b2:	e7fe      	b.n	800b9b2 <BusFault_Handler+0x4>

0800b9b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b9b8:	e7fe      	b.n	800b9b8 <UsageFault_Handler+0x4>

0800b9ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b9ba:	b480      	push	{r7}
 800b9bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b9be:	bf00      	nop
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b9cc:	bf00      	nop
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b9da:	bf00      	nop
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b9e8:	f000 fa1c 	bl	800be24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b9ec:	bf00      	nop
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800b9f4:	4802      	ldr	r0, [pc, #8]	; (800ba00 <DMA2_Stream1_IRQHandler+0x10>)
 800b9f6:	f000 ff85 	bl	800c904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800b9fa:	bf00      	nop
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	200003b4 	.word	0x200003b4

0800ba04 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800ba08:	4802      	ldr	r0, [pc, #8]	; (800ba14 <DMA2_Stream4_IRQHandler+0x10>)
 800ba0a:	f000 ff7b 	bl	800c904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800ba0e:	bf00      	nop
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	20000414 	.word	0x20000414

0800ba18 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800ba1c:	4802      	ldr	r0, [pc, #8]	; (800ba28 <I2C3_EV_IRQHandler+0x10>)
 800ba1e:	f001 fe6a 	bl	800d6f6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800ba22:	bf00      	nop
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20000250 	.word	0x20000250

0800ba2c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800ba30:	4802      	ldr	r0, [pc, #8]	; (800ba3c <I2C3_ER_IRQHandler+0x10>)
 800ba32:	f001 ffb3 	bl	800d99c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800ba36:	bf00      	nop
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20000250 	.word	0x20000250

0800ba40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ba48:	4a14      	ldr	r2, [pc, #80]	; (800ba9c <_sbrk+0x5c>)
 800ba4a:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <_sbrk+0x60>)
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ba54:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <_sbrk+0x64>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d102      	bne.n	800ba62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ba5c:	4b11      	ldr	r3, [pc, #68]	; (800baa4 <_sbrk+0x64>)
 800ba5e:	4a12      	ldr	r2, [pc, #72]	; (800baa8 <_sbrk+0x68>)
 800ba60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ba62:	4b10      	ldr	r3, [pc, #64]	; (800baa4 <_sbrk+0x64>)
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4413      	add	r3, r2
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d207      	bcs.n	800ba80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ba70:	f006 fa86 	bl	8011f80 <__errno>
 800ba74:	4603      	mov	r3, r0
 800ba76:	220c      	movs	r2, #12
 800ba78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ba7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7e:	e009      	b.n	800ba94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ba80:	4b08      	ldr	r3, [pc, #32]	; (800baa4 <_sbrk+0x64>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ba86:	4b07      	ldr	r3, [pc, #28]	; (800baa4 <_sbrk+0x64>)
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	4a05      	ldr	r2, [pc, #20]	; (800baa4 <_sbrk+0x64>)
 800ba90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ba92:	68fb      	ldr	r3, [r7, #12]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3718      	adds	r7, #24
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	20020000 	.word	0x20020000
 800baa0:	00000400 	.word	0x00000400
 800baa4:	2000051c 	.word	0x2000051c
 800baa8:	20000670 	.word	0x20000670

0800baac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800baac:	b480      	push	{r7}
 800baae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bab0:	4b06      	ldr	r3, [pc, #24]	; (800bacc <SystemInit+0x20>)
 800bab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab6:	4a05      	ldr	r2, [pc, #20]	; (800bacc <SystemInit+0x20>)
 800bab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800babc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800bac0:	bf00      	nop
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	e000ed00 	.word	0xe000ed00

0800bad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800bad4:	f7ff ffea 	bl	800baac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800bad8:	480c      	ldr	r0, [pc, #48]	; (800bb0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800bada:	490d      	ldr	r1, [pc, #52]	; (800bb10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800badc:	4a0d      	ldr	r2, [pc, #52]	; (800bb14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800bade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bae0:	e002      	b.n	800bae8 <LoopCopyDataInit>

0800bae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bae6:	3304      	adds	r3, #4

0800bae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800baea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800baec:	d3f9      	bcc.n	800bae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800baee:	4a0a      	ldr	r2, [pc, #40]	; (800bb18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800baf0:	4c0a      	ldr	r4, [pc, #40]	; (800bb1c <LoopFillZerobss+0x22>)
  movs r3, #0
 800baf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800baf4:	e001      	b.n	800bafa <LoopFillZerobss>

0800baf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800baf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800baf8:	3204      	adds	r2, #4

0800bafa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bafa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bafc:	d3fb      	bcc.n	800baf6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800bafe:	f006 fa45 	bl	8011f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb02:	f7ff f80d 	bl	800ab20 <main>
  bx  lr    
 800bb06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bb08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800bb0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bb10:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800bb14:	08013f54 	.word	0x08013f54
  ldr r2, =_sbss
 800bb18:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 800bb1c:	2000066c 	.word	0x2000066c

0800bb20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb20:	e7fe      	b.n	800bb20 <ADC_IRQHandler>

0800bb22 <writePoti0>:
		2,//-42
		1,//-48
		0//- inf
};
static void writePoti0(uint8_t *outbuff, uint16_t val)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b083      	sub	sp, #12
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	807b      	strh	r3, [r7, #2]
	outbuff[0] |=  (val>>8)&0x01;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	b25a      	sxtb	r2, r3
 800bb34:	887b      	ldrh	r3, [r7, #2]
 800bb36:	0a1b      	lsrs	r3, r3, #8
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	b25b      	sxtb	r3, r3
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	b25b      	sxtb	r3, r3
 800bb42:	4313      	orrs	r3, r2
 800bb44:	b25b      	sxtb	r3, r3
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	701a      	strb	r2, [r3, #0]
	outbuff[1] = val&0xff;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	887a      	ldrh	r2, [r7, #2]
 800bb52:	b2d2      	uxtb	r2, r2
 800bb54:	701a      	strb	r2, [r3, #0]
};
 800bb56:	bf00      	nop
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <writePoti1>:
static void writePoti1(uint8_t *outbuff, uint16_t val)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	807b      	strh	r3, [r7, #2]
	outbuff[2] |=  (val>>8)&0x01;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	3302      	adds	r3, #2
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	b25a      	sxtb	r2, r3
 800bb76:	887b      	ldrh	r3, [r7, #2]
 800bb78:	0a1b      	lsrs	r3, r3, #8
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	b25b      	sxtb	r3, r3
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	b25b      	sxtb	r3, r3
 800bb84:	4313      	orrs	r3, r2
 800bb86:	b25a      	sxtb	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	3302      	adds	r3, #2
 800bb8c:	b2d2      	uxtb	r2, r2
 800bb8e:	701a      	strb	r2, [r3, #0]
	outbuff[3] = val&0xff;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	3303      	adds	r3, #3
 800bb94:	887a      	ldrh	r2, [r7, #2]
 800bb96:	b2d2      	uxtb	r2, r2
 800bb98:	701a      	strb	r2, [r3, #0]
};
 800bb9a:	bf00      	nop
 800bb9c:	370c      	adds	r7, #12
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <writePoti2>:
static void writePoti2(uint8_t *outbuff, uint16_t val)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b083      	sub	sp, #12
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	807b      	strh	r3, [r7, #2]
	outbuff[4] |=  (val>>8)&0x01;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	b25a      	sxtb	r2, r3
 800bbba:	887b      	ldrh	r3, [r7, #2]
 800bbbc:	0a1b      	lsrs	r3, r3, #8
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	b25b      	sxtb	r3, r3
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	b25b      	sxtb	r3, r3
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	b25a      	sxtb	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	b2d2      	uxtb	r2, r2
 800bbd2:	701a      	strb	r2, [r3, #0]
	outbuff[5] = val&0xff;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3305      	adds	r3, #5
 800bbd8:	887a      	ldrh	r2, [r7, #2]
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	701a      	strb	r2, [r3, #0]
};
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <writePoti3>:
static void writePoti3(uint8_t *outbuff, uint16_t val)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b083      	sub	sp, #12
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	807b      	strh	r3, [r7, #2]
	outbuff[6] |=  (val>>8)&0x01;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	3306      	adds	r3, #6
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	b25a      	sxtb	r2, r3
 800bbfe:	887b      	ldrh	r3, [r7, #2]
 800bc00:	0a1b      	lsrs	r3, r3, #8
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	b25b      	sxtb	r3, r3
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	b25b      	sxtb	r3, r3
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	b25a      	sxtb	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3306      	adds	r3, #6
 800bc14:	b2d2      	uxtb	r2, r2
 800bc16:	701a      	strb	r2, [r3, #0]
	outbuff[7] = val&0xff;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	3307      	adds	r3, #7
 800bc1c:	887a      	ldrh	r2, [r7, #2]
 800bc1e:	b2d2      	uxtb	r2, r2
 800bc20:	701a      	strb	r2, [r3, #0]
};
 800bc22:	bf00      	nop
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
	...

0800bc30 <sendValToPoti>:

void sendValToPoti ( DigitPot *poti, I2C_HandleTypeDef *i2chandle)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af02      	add	r7, sp, #8
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
	uint8_t data[8] = {0x0,0x0,  0x10,0x0,  0x60,0x0,  0x70,0x0};
 800bc3a:	4a4f      	ldr	r2, [pc, #316]	; (800bd78 <sendValToPoti+0x148>)
 800bc3c:	f107 0308 	add.w	r3, r7, #8
 800bc40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc44:	e883 0003 	stmia.w	r3, {r0, r1}

	writePoti0(data, digipotiAttValues[ ( uint8_t )( ( float ) (poti->refVal) * ( 38.0/100.0 ) ) ]);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	785b      	ldrb	r3, [r3, #1]
 800bc4c:	ee07 3a90 	vmov	s15, r3
 800bc50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc54:	ee17 0a90 	vmov	r0, s15
 800bc58:	f7f4 fc3a 	bl	80004d0 <__aeabi_f2d>
 800bc5c:	a344      	add	r3, pc, #272	; (adr r3, 800bd70 <sendValToPoti+0x140>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	f7f4 fc8d 	bl	8000580 <__aeabi_dmul>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	f7f4 ff49 	bl	8000b04 <__aeabi_d2uiz>
 800bc72:	4603      	mov	r3, r0
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	461a      	mov	r2, r3
 800bc78:	4b40      	ldr	r3, [pc, #256]	; (800bd7c <sendValToPoti+0x14c>)
 800bc7a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800bc7e:	f107 0308 	add.w	r3, r7, #8
 800bc82:	4611      	mov	r1, r2
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff ff4c 	bl	800bb22 <writePoti0>
	writePoti1(data, digipotiAttValues[ ( uint8_t )( ( float ) (poti->micVal) * ( 38.0/100.0 ) ) ]);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc96:	ee17 0a90 	vmov	r0, s15
 800bc9a:	f7f4 fc19 	bl	80004d0 <__aeabi_f2d>
 800bc9e:	a334      	add	r3, pc, #208	; (adr r3, 800bd70 <sendValToPoti+0x140>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 fc6c 	bl	8000580 <__aeabi_dmul>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4610      	mov	r0, r2
 800bcae:	4619      	mov	r1, r3
 800bcb0:	f7f4 ff28 	bl	8000b04 <__aeabi_d2uiz>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	461a      	mov	r2, r3
 800bcba:	4b30      	ldr	r3, [pc, #192]	; (800bd7c <sendValToPoti+0x14c>)
 800bcbc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800bcc0:	f107 0308 	add.w	r3, r7, #8
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7ff ff4b 	bl	800bb62 <writePoti1>
	writePoti2(data, digipotiAttValues[ ( uint8_t )( ( float ) (poti->outVal) * ( 38.0/100.0 ) ) ]);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	789b      	ldrb	r3, [r3, #2]
 800bcd0:	ee07 3a90 	vmov	s15, r3
 800bcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd8:	ee17 0a90 	vmov	r0, s15
 800bcdc:	f7f4 fbf8 	bl	80004d0 <__aeabi_f2d>
 800bce0:	a323      	add	r3, pc, #140	; (adr r3, 800bd70 <sendValToPoti+0x140>)
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	f7f4 fc4b 	bl	8000580 <__aeabi_dmul>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	4610      	mov	r0, r2
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	f7f4 ff07 	bl	8000b04 <__aeabi_d2uiz>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	4b1f      	ldr	r3, [pc, #124]	; (800bd7c <sendValToPoti+0x14c>)
 800bcfe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800bd02:	f107 0308 	add.w	r3, r7, #8
 800bd06:	4611      	mov	r1, r2
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff ff4c 	bl	800bba6 <writePoti2>
	writePoti3(data, digipotiAttValues[ ( uint8_t )( ( float ) (poti->bypVal) * ( 38.0/100.0 ) ) ]);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	78db      	ldrb	r3, [r3, #3]
 800bd12:	ee07 3a90 	vmov	s15, r3
 800bd16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1a:	ee17 0a90 	vmov	r0, s15
 800bd1e:	f7f4 fbd7 	bl	80004d0 <__aeabi_f2d>
 800bd22:	a313      	add	r3, pc, #76	; (adr r3, 800bd70 <sendValToPoti+0x140>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fc2a 	bl	8000580 <__aeabi_dmul>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4610      	mov	r0, r2
 800bd32:	4619      	mov	r1, r3
 800bd34:	f7f4 fee6 	bl	8000b04 <__aeabi_d2uiz>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <sendValToPoti+0x14c>)
 800bd40:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	4611      	mov	r1, r2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7ff ff4d 	bl	800bbea <writePoti3>


	HAL_I2C_Master_Transmit(i2chandle, 0x58, data, 16,200);
 800bd50:	f107 0208 	add.w	r2, r7, #8
 800bd54:	23c8      	movs	r3, #200	; 0xc8
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	2310      	movs	r3, #16
 800bd5a:	2158      	movs	r1, #88	; 0x58
 800bd5c:	6838      	ldr	r0, [r7, #0]
 800bd5e:	f001 fb23 	bl	800d3a8 <HAL_I2C_Master_Transmit>

}
 800bd62:	bf00      	nop
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	f3af 8000 	nop.w
 800bd70:	851eb852 	.word	0x851eb852
 800bd74:	3fd851eb 	.word	0x3fd851eb
 800bd78:	08013a80 	.word	0x08013a80
 800bd7c:	2000003c 	.word	0x2000003c

0800bd80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bd84:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <HAL_Init+0x40>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a0d      	ldr	r2, [pc, #52]	; (800bdc0 <HAL_Init+0x40>)
 800bd8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bd90:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <HAL_Init+0x40>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a0a      	ldr	r2, [pc, #40]	; (800bdc0 <HAL_Init+0x40>)
 800bd96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bd9c:	4b08      	ldr	r3, [pc, #32]	; (800bdc0 <HAL_Init+0x40>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a07      	ldr	r2, [pc, #28]	; (800bdc0 <HAL_Init+0x40>)
 800bda2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bda6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bda8:	2003      	movs	r0, #3
 800bdaa:	f000 fc99 	bl	800c6e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bdae:	200f      	movs	r0, #15
 800bdb0:	f000 f808 	bl	800bdc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bdb4:	f7ff faac 	bl	800b310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	40023c00 	.word	0x40023c00

0800bdc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bdcc:	4b12      	ldr	r3, [pc, #72]	; (800be18 <HAL_InitTick+0x54>)
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	4b12      	ldr	r3, [pc, #72]	; (800be1c <HAL_InitTick+0x58>)
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bdda:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 fcb1 	bl	800c74a <HAL_SYSTICK_Config>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e00e      	b.n	800be10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b0f      	cmp	r3, #15
 800bdf6:	d80a      	bhi.n	800be0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	f000 fc79 	bl	800c6f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800be04:	4a06      	ldr	r2, [pc, #24]	; (800be20 <HAL_InitTick+0x5c>)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	e000      	b.n	800be10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
}
 800be10:	4618      	mov	r0, r3
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	20000038 	.word	0x20000038
 800be1c:	20000090 	.word	0x20000090
 800be20:	2000008c 	.word	0x2000008c

0800be24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800be24:	b480      	push	{r7}
 800be26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800be28:	4b06      	ldr	r3, [pc, #24]	; (800be44 <HAL_IncTick+0x20>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	461a      	mov	r2, r3
 800be2e:	4b06      	ldr	r3, [pc, #24]	; (800be48 <HAL_IncTick+0x24>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4413      	add	r3, r2
 800be34:	4a04      	ldr	r2, [pc, #16]	; (800be48 <HAL_IncTick+0x24>)
 800be36:	6013      	str	r3, [r2, #0]
}
 800be38:	bf00      	nop
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	20000090 	.word	0x20000090
 800be48:	20000520 	.word	0x20000520

0800be4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800be4c:	b480      	push	{r7}
 800be4e:	af00      	add	r7, sp, #0
  return uwTick;
 800be50:	4b03      	ldr	r3, [pc, #12]	; (800be60 <HAL_GetTick+0x14>)
 800be52:	681b      	ldr	r3, [r3, #0]
}
 800be54:	4618      	mov	r0, r3
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	20000520 	.word	0x20000520

0800be64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e033      	b.n	800bee2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d109      	bne.n	800be96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff fa6c 	bl	800b360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9a:	f003 0310 	and.w	r3, r3, #16
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d118      	bne.n	800bed4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800beaa:	f023 0302 	bic.w	r3, r3, #2
 800beae:	f043 0202 	orr.w	r2, r3, #2
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f94a 	bl	800c150 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec6:	f023 0303 	bic.w	r3, r3, #3
 800beca:	f043 0201 	orr.w	r2, r3, #1
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	641a      	str	r2, [r3, #64]	; 0x40
 800bed2:	e001      	b.n	800bed8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bef6:	2300      	movs	r3, #0
 800bef8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d101      	bne.n	800bf08 <HAL_ADC_ConfigChannel+0x1c>
 800bf04:	2302      	movs	r3, #2
 800bf06:	e113      	b.n	800c130 <HAL_ADC_ConfigChannel+0x244>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b09      	cmp	r3, #9
 800bf16:	d925      	bls.n	800bf64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68d9      	ldr	r1, [r3, #12]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	461a      	mov	r2, r3
 800bf26:	4613      	mov	r3, r2
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	4413      	add	r3, r2
 800bf2c:	3b1e      	subs	r3, #30
 800bf2e:	2207      	movs	r2, #7
 800bf30:	fa02 f303 	lsl.w	r3, r2, r3
 800bf34:	43da      	mvns	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	400a      	ands	r2, r1
 800bf3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68d9      	ldr	r1, [r3, #12]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	4618      	mov	r0, r3
 800bf50:	4603      	mov	r3, r0
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	4403      	add	r3, r0
 800bf56:	3b1e      	subs	r3, #30
 800bf58:	409a      	lsls	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	430a      	orrs	r2, r1
 800bf60:	60da      	str	r2, [r3, #12]
 800bf62:	e022      	b.n	800bfaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6919      	ldr	r1, [r3, #16]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	461a      	mov	r2, r3
 800bf72:	4613      	mov	r3, r2
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	4413      	add	r3, r2
 800bf78:	2207      	movs	r2, #7
 800bf7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7e:	43da      	mvns	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	400a      	ands	r2, r1
 800bf86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6919      	ldr	r1, [r3, #16]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	689a      	ldr	r2, [r3, #8]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	4618      	mov	r0, r3
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	4403      	add	r3, r0
 800bfa0:	409a      	lsls	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	2b06      	cmp	r3, #6
 800bfb0:	d824      	bhi.n	800bffc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	3b05      	subs	r3, #5
 800bfc4:	221f      	movs	r2, #31
 800bfc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfca:	43da      	mvns	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	400a      	ands	r2, r1
 800bfd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	3b05      	subs	r3, #5
 800bfee:	fa00 f203 	lsl.w	r2, r0, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	430a      	orrs	r2, r1
 800bff8:	635a      	str	r2, [r3, #52]	; 0x34
 800bffa:	e04c      	b.n	800c096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	2b0c      	cmp	r3, #12
 800c002:	d824      	bhi.n	800c04e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	4613      	mov	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	3b23      	subs	r3, #35	; 0x23
 800c016:	221f      	movs	r2, #31
 800c018:	fa02 f303 	lsl.w	r3, r2, r3
 800c01c:	43da      	mvns	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	400a      	ands	r2, r1
 800c024:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	b29b      	uxth	r3, r3
 800c032:	4618      	mov	r0, r3
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	685a      	ldr	r2, [r3, #4]
 800c038:	4613      	mov	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	3b23      	subs	r3, #35	; 0x23
 800c040:	fa00 f203 	lsl.w	r2, r0, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	430a      	orrs	r2, r1
 800c04a:	631a      	str	r2, [r3, #48]	; 0x30
 800c04c:	e023      	b.n	800c096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	3b41      	subs	r3, #65	; 0x41
 800c060:	221f      	movs	r2, #31
 800c062:	fa02 f303 	lsl.w	r3, r2, r3
 800c066:	43da      	mvns	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	400a      	ands	r2, r1
 800c06e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	4618      	mov	r0, r3
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	3b41      	subs	r3, #65	; 0x41
 800c08a:	fa00 f203 	lsl.w	r2, r0, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	430a      	orrs	r2, r1
 800c094:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c096:	4b29      	ldr	r3, [pc, #164]	; (800c13c <HAL_ADC_ConfigChannel+0x250>)
 800c098:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a28      	ldr	r2, [pc, #160]	; (800c140 <HAL_ADC_ConfigChannel+0x254>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d10f      	bne.n	800c0c4 <HAL_ADC_ConfigChannel+0x1d8>
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b12      	cmp	r3, #18
 800c0aa:	d10b      	bne.n	800c0c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a1d      	ldr	r2, [pc, #116]	; (800c140 <HAL_ADC_ConfigChannel+0x254>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d12b      	bne.n	800c126 <HAL_ADC_ConfigChannel+0x23a>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a1c      	ldr	r2, [pc, #112]	; (800c144 <HAL_ADC_ConfigChannel+0x258>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d003      	beq.n	800c0e0 <HAL_ADC_ConfigChannel+0x1f4>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b11      	cmp	r3, #17
 800c0de:	d122      	bne.n	800c126 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a11      	ldr	r2, [pc, #68]	; (800c144 <HAL_ADC_ConfigChannel+0x258>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d111      	bne.n	800c126 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c102:	4b11      	ldr	r3, [pc, #68]	; (800c148 <HAL_ADC_ConfigChannel+0x25c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a11      	ldr	r2, [pc, #68]	; (800c14c <HAL_ADC_ConfigChannel+0x260>)
 800c108:	fba2 2303 	umull	r2, r3, r2, r3
 800c10c:	0c9a      	lsrs	r2, r3, #18
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800c118:	e002      	b.n	800c120 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1f9      	bne.n	800c11a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	40012300 	.word	0x40012300
 800c140:	40012000 	.word	0x40012000
 800c144:	10000012 	.word	0x10000012
 800c148:	20000038 	.word	0x20000038
 800c14c:	431bde83 	.word	0x431bde83

0800c150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c158:	4b79      	ldr	r3, [pc, #484]	; (800c340 <ADC_Init+0x1f0>)
 800c15a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	431a      	orrs	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6859      	ldr	r1, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	021a      	lsls	r2, r3, #8
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	685a      	ldr	r2, [r3, #4]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c1a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6859      	ldr	r1, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	689a      	ldr	r2, [r3, #8]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	430a      	orrs	r2, r1
 800c1ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	689a      	ldr	r2, [r3, #8]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6899      	ldr	r1, [r3, #8]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e2:	4a58      	ldr	r2, [pc, #352]	; (800c344 <ADC_Init+0x1f4>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d022      	beq.n	800c22e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c1f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6899      	ldr	r1, [r3, #8]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	689a      	ldr	r2, [r3, #8]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	6899      	ldr	r1, [r3, #8]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	609a      	str	r2, [r3, #8]
 800c22c:	e00f      	b.n	800c24e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	689a      	ldr	r2, [r3, #8]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c23c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	689a      	ldr	r2, [r3, #8]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c24c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	689a      	ldr	r2, [r3, #8]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f022 0202 	bic.w	r2, r2, #2
 800c25c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6899      	ldr	r1, [r3, #8]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7e1b      	ldrb	r3, [r3, #24]
 800c268:	005a      	lsls	r2, r3, #1
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	430a      	orrs	r2, r1
 800c270:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d01b      	beq.n	800c2b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c28a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c29a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6859      	ldr	r1, [r3, #4]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	035a      	lsls	r2, r3, #13
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	430a      	orrs	r2, r1
 800c2b0:	605a      	str	r2, [r3, #4]
 800c2b2:	e007      	b.n	800c2c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	685a      	ldr	r2, [r3, #4]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c2d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	051a      	lsls	r2, r3, #20
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c2f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6899      	ldr	r1, [r3, #8]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c306:	025a      	lsls	r2, r3, #9
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	430a      	orrs	r2, r1
 800c30e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	689a      	ldr	r2, [r3, #8]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c31e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	6899      	ldr	r1, [r3, #8]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	029a      	lsls	r2, r3, #10
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	430a      	orrs	r2, r1
 800c332:	609a      	str	r2, [r3, #8]
}
 800c334:	bf00      	nop
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	40012300 	.word	0x40012300
 800c344:	0f000001 	.word	0x0f000001

0800c348 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e0ed      	b.n	800c536 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	d102      	bne.n	800c36c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff f86e 	bl	800b448 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0201 	orr.w	r2, r2, #1
 800c37a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c37c:	f7ff fd66 	bl	800be4c <HAL_GetTick>
 800c380:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c382:	e012      	b.n	800c3aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c384:	f7ff fd62 	bl	800be4c <HAL_GetTick>
 800c388:	4602      	mov	r2, r0
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	2b0a      	cmp	r3, #10
 800c390:	d90b      	bls.n	800c3aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2205      	movs	r2, #5
 800c3a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e0c5      	b.n	800c536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	f003 0301 	and.w	r3, r3, #1
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0e5      	beq.n	800c384 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f022 0202 	bic.w	r2, r2, #2
 800c3c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3c8:	f7ff fd40 	bl	800be4c <HAL_GetTick>
 800c3cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c3ce:	e012      	b.n	800c3f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c3d0:	f7ff fd3c 	bl	800be4c <HAL_GetTick>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	2b0a      	cmp	r3, #10
 800c3dc:	d90b      	bls.n	800c3f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2205      	movs	r2, #5
 800c3ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e09f      	b.n	800c536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1e5      	bne.n	800c3d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7e1b      	ldrb	r3, [r3, #24]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d108      	bne.n	800c41e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	e007      	b.n	800c42e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c42c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	7e5b      	ldrb	r3, [r3, #25]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d108      	bne.n	800c448 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	e007      	b.n	800c458 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c456:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	7e9b      	ldrb	r3, [r3, #26]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d108      	bne.n	800c472 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f042 0220 	orr.w	r2, r2, #32
 800c46e:	601a      	str	r2, [r3, #0]
 800c470:	e007      	b.n	800c482 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 0220 	bic.w	r2, r2, #32
 800c480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	7edb      	ldrb	r3, [r3, #27]
 800c486:	2b01      	cmp	r3, #1
 800c488:	d108      	bne.n	800c49c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f022 0210 	bic.w	r2, r2, #16
 800c498:	601a      	str	r2, [r3, #0]
 800c49a:	e007      	b.n	800c4ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f042 0210 	orr.w	r2, r2, #16
 800c4aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	7f1b      	ldrb	r3, [r3, #28]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d108      	bne.n	800c4c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f042 0208 	orr.w	r2, r2, #8
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	e007      	b.n	800c4d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0208 	bic.w	r2, r2, #8
 800c4d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	7f5b      	ldrb	r3, [r3, #29]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d108      	bne.n	800c4f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f042 0204 	orr.w	r2, r2, #4
 800c4ec:	601a      	str	r2, [r3, #0]
 800c4ee:	e007      	b.n	800c500 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0204 	bic.w	r2, r2, #4
 800c4fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689a      	ldr	r2, [r3, #8]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	431a      	orrs	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	431a      	orrs	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	695b      	ldr	r3, [r3, #20]
 800c514:	ea42 0103 	orr.w	r1, r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	1e5a      	subs	r2, r3, #1
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	430a      	orrs	r2, r1
 800c524:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
	...

0800c540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c550:	4b0c      	ldr	r3, [pc, #48]	; (800c584 <__NVIC_SetPriorityGrouping+0x44>)
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c55c:	4013      	ands	r3, r2
 800c55e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c56c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c572:	4a04      	ldr	r2, [pc, #16]	; (800c584 <__NVIC_SetPriorityGrouping+0x44>)
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	60d3      	str	r3, [r2, #12]
}
 800c578:	bf00      	nop
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	e000ed00 	.word	0xe000ed00

0800c588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c588:	b480      	push	{r7}
 800c58a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c58c:	4b04      	ldr	r3, [pc, #16]	; (800c5a0 <__NVIC_GetPriorityGrouping+0x18>)
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	0a1b      	lsrs	r3, r3, #8
 800c592:	f003 0307 	and.w	r3, r3, #7
}
 800c596:	4618      	mov	r0, r3
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	e000ed00 	.word	0xe000ed00

0800c5a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	db0b      	blt.n	800c5ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c5b6:	79fb      	ldrb	r3, [r7, #7]
 800c5b8:	f003 021f 	and.w	r2, r3, #31
 800c5bc:	4907      	ldr	r1, [pc, #28]	; (800c5dc <__NVIC_EnableIRQ+0x38>)
 800c5be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5c2:	095b      	lsrs	r3, r3, #5
 800c5c4:	2001      	movs	r0, #1
 800c5c6:	fa00 f202 	lsl.w	r2, r0, r2
 800c5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c5ce:	bf00      	nop
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	e000e100 	.word	0xe000e100

0800c5e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	db0a      	blt.n	800c60a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	490c      	ldr	r1, [pc, #48]	; (800c62c <__NVIC_SetPriority+0x4c>)
 800c5fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5fe:	0112      	lsls	r2, r2, #4
 800c600:	b2d2      	uxtb	r2, r2
 800c602:	440b      	add	r3, r1
 800c604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c608:	e00a      	b.n	800c620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	4908      	ldr	r1, [pc, #32]	; (800c630 <__NVIC_SetPriority+0x50>)
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	f003 030f 	and.w	r3, r3, #15
 800c616:	3b04      	subs	r3, #4
 800c618:	0112      	lsls	r2, r2, #4
 800c61a:	b2d2      	uxtb	r2, r2
 800c61c:	440b      	add	r3, r1
 800c61e:	761a      	strb	r2, [r3, #24]
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	e000e100 	.word	0xe000e100
 800c630:	e000ed00 	.word	0xe000ed00

0800c634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c634:	b480      	push	{r7}
 800c636:	b089      	sub	sp, #36	; 0x24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	f1c3 0307 	rsb	r3, r3, #7
 800c64e:	2b04      	cmp	r3, #4
 800c650:	bf28      	it	cs
 800c652:	2304      	movcs	r3, #4
 800c654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	3304      	adds	r3, #4
 800c65a:	2b06      	cmp	r3, #6
 800c65c:	d902      	bls.n	800c664 <NVIC_EncodePriority+0x30>
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	3b03      	subs	r3, #3
 800c662:	e000      	b.n	800c666 <NVIC_EncodePriority+0x32>
 800c664:	2300      	movs	r3, #0
 800c666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c668:	f04f 32ff 	mov.w	r2, #4294967295
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	fa02 f303 	lsl.w	r3, r2, r3
 800c672:	43da      	mvns	r2, r3
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	401a      	ands	r2, r3
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c67c:	f04f 31ff 	mov.w	r1, #4294967295
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	fa01 f303 	lsl.w	r3, r1, r3
 800c686:	43d9      	mvns	r1, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c68c:	4313      	orrs	r3, r2
         );
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3724      	adds	r7, #36	; 0x24
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
	...

0800c69c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c6ac:	d301      	bcc.n	800c6b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e00f      	b.n	800c6d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c6b2:	4a0a      	ldr	r2, [pc, #40]	; (800c6dc <SysTick_Config+0x40>)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c6ba:	210f      	movs	r1, #15
 800c6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c0:	f7ff ff8e 	bl	800c5e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c6c4:	4b05      	ldr	r3, [pc, #20]	; (800c6dc <SysTick_Config+0x40>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c6ca:	4b04      	ldr	r3, [pc, #16]	; (800c6dc <SysTick_Config+0x40>)
 800c6cc:	2207      	movs	r2, #7
 800c6ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	e000e010 	.word	0xe000e010

0800c6e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7ff ff29 	bl	800c540 <__NVIC_SetPriorityGrouping>
}
 800c6ee:	bf00      	nop
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b086      	sub	sp, #24
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	60b9      	str	r1, [r7, #8]
 800c700:	607a      	str	r2, [r7, #4]
 800c702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c704:	2300      	movs	r3, #0
 800c706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c708:	f7ff ff3e 	bl	800c588 <__NVIC_GetPriorityGrouping>
 800c70c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	68b9      	ldr	r1, [r7, #8]
 800c712:	6978      	ldr	r0, [r7, #20]
 800c714:	f7ff ff8e 	bl	800c634 <NVIC_EncodePriority>
 800c718:	4602      	mov	r2, r0
 800c71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c71e:	4611      	mov	r1, r2
 800c720:	4618      	mov	r0, r3
 800c722:	f7ff ff5d 	bl	800c5e0 <__NVIC_SetPriority>
}
 800c726:	bf00      	nop
 800c728:	3718      	adds	r7, #24
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	4603      	mov	r3, r0
 800c736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff ff31 	bl	800c5a4 <__NVIC_EnableIRQ>
}
 800c742:	bf00      	nop
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b082      	sub	sp, #8
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff ffa2 	bl	800c69c <SysTick_Config>
 800c758:	4603      	mov	r3, r0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
	...

0800c764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c76c:	2300      	movs	r3, #0
 800c76e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c770:	f7ff fb6c 	bl	800be4c <HAL_GetTick>
 800c774:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e099      	b.n	800c8b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f022 0201 	bic.w	r2, r2, #1
 800c79e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c7a0:	e00f      	b.n	800c7c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c7a2:	f7ff fb53 	bl	800be4c <HAL_GetTick>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	2b05      	cmp	r3, #5
 800c7ae:	d908      	bls.n	800c7c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2220      	movs	r2, #32
 800c7b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2203      	movs	r2, #3
 800c7ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e078      	b.n	800c8b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f003 0301 	and.w	r3, r3, #1
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e8      	bne.n	800c7a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	4b38      	ldr	r3, [pc, #224]	; (800c8bc <HAL_DMA_Init+0x158>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	685a      	ldr	r2, [r3, #4]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c7ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a1b      	ldr	r3, [r3, #32]
 800c80c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	4313      	orrs	r3, r2
 800c812:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c818:	2b04      	cmp	r3, #4
 800c81a:	d107      	bne.n	800c82c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c824:	4313      	orrs	r3, r2
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	4313      	orrs	r3, r2
 800c82a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	695b      	ldr	r3, [r3, #20]
 800c83a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f023 0307 	bic.w	r3, r3, #7
 800c842:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c852:	2b04      	cmp	r3, #4
 800c854:	d117      	bne.n	800c886 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00e      	beq.n	800c886 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 fa19 	bl	800cca0 <DMA_CheckFifoParam>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d008      	beq.n	800c886 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2240      	movs	r2, #64	; 0x40
 800c878:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c882:	2301      	movs	r3, #1
 800c884:	e016      	b.n	800c8b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f9d0 	bl	800cc34 <DMA_CalcBaseAndBitshift>
 800c894:	4603      	mov	r3, r0
 800c896:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c89c:	223f      	movs	r2, #63	; 0x3f
 800c89e:	409a      	lsls	r2, r3
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	f010803f 	.word	0xf010803f

0800c8c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d004      	beq.n	800c8de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2280      	movs	r2, #128	; 0x80
 800c8d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e00c      	b.n	800c8f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2205      	movs	r2, #5
 800c8e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f022 0201 	bic.w	r2, r2, #1
 800c8f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c90c:	2300      	movs	r3, #0
 800c90e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c910:	4b8e      	ldr	r3, [pc, #568]	; (800cb4c <HAL_DMA_IRQHandler+0x248>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a8e      	ldr	r2, [pc, #568]	; (800cb50 <HAL_DMA_IRQHandler+0x24c>)
 800c916:	fba2 2303 	umull	r2, r3, r2, r3
 800c91a:	0a9b      	lsrs	r3, r3, #10
 800c91c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c922:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c92e:	2208      	movs	r2, #8
 800c930:	409a      	lsls	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	4013      	ands	r3, r2
 800c936:	2b00      	cmp	r3, #0
 800c938:	d01a      	beq.n	800c970 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 0304 	and.w	r3, r3, #4
 800c944:	2b00      	cmp	r3, #0
 800c946:	d013      	beq.n	800c970 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f022 0204 	bic.w	r2, r2, #4
 800c956:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c95c:	2208      	movs	r2, #8
 800c95e:	409a      	lsls	r2, r3
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c968:	f043 0201 	orr.w	r2, r3, #1
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c974:	2201      	movs	r2, #1
 800c976:	409a      	lsls	r2, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	4013      	ands	r3, r2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d012      	beq.n	800c9a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00b      	beq.n	800c9a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c992:	2201      	movs	r2, #1
 800c994:	409a      	lsls	r2, r3
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c99e:	f043 0202 	orr.w	r2, r3, #2
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	409a      	lsls	r2, r3
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d012      	beq.n	800c9dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 0302 	and.w	r3, r3, #2
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9c8:	2204      	movs	r2, #4
 800c9ca:	409a      	lsls	r2, r3
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9d4:	f043 0204 	orr.w	r2, r3, #4
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9e0:	2210      	movs	r2, #16
 800c9e2:	409a      	lsls	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d043      	beq.n	800ca74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f003 0308 	and.w	r3, r3, #8
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d03c      	beq.n	800ca74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9fe:	2210      	movs	r2, #16
 800ca00:	409a      	lsls	r2, r3
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d018      	beq.n	800ca46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d108      	bne.n	800ca34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d024      	beq.n	800ca74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	4798      	blx	r3
 800ca32:	e01f      	b.n	800ca74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d01b      	beq.n	800ca74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	4798      	blx	r3
 800ca44:	e016      	b.n	800ca74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d107      	bne.n	800ca64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f022 0208 	bic.w	r2, r2, #8
 800ca62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d003      	beq.n	800ca74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca78:	2220      	movs	r2, #32
 800ca7a:	409a      	lsls	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	4013      	ands	r3, r2
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 808f 	beq.w	800cba4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f003 0310 	and.w	r3, r3, #16
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f000 8087 	beq.w	800cba4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca9a:	2220      	movs	r2, #32
 800ca9c:	409a      	lsls	r2, r3
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b05      	cmp	r3, #5
 800caac:	d136      	bne.n	800cb1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f022 0216 	bic.w	r2, r2, #22
 800cabc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	695a      	ldr	r2, [r3, #20]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cacc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d103      	bne.n	800cade <HAL_DMA_IRQHandler+0x1da>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d007      	beq.n	800caee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f022 0208 	bic.w	r2, r2, #8
 800caec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800caf2:	223f      	movs	r2, #63	; 0x3f
 800caf4:	409a      	lsls	r2, r3
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2201      	movs	r2, #1
 800cafe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d07e      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	4798      	blx	r3
        }
        return;
 800cb1a:	e079      	b.n	800cc10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d01d      	beq.n	800cb66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10d      	bne.n	800cb54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d031      	beq.n	800cba4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	4798      	blx	r3
 800cb48:	e02c      	b.n	800cba4 <HAL_DMA_IRQHandler+0x2a0>
 800cb4a:	bf00      	nop
 800cb4c:	20000038 	.word	0x20000038
 800cb50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d023      	beq.n	800cba4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	4798      	blx	r3
 800cb64:	e01e      	b.n	800cba4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10f      	bne.n	800cb94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f022 0210 	bic.w	r2, r2, #16
 800cb82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d032      	beq.n	800cc12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb0:	f003 0301 	and.w	r3, r3, #1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d022      	beq.n	800cbfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2205      	movs	r2, #5
 800cbbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f022 0201 	bic.w	r2, r2, #1
 800cbce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	60bb      	str	r3, [r7, #8]
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d307      	bcc.n	800cbec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1f2      	bne.n	800cbd0 <HAL_DMA_IRQHandler+0x2cc>
 800cbea:	e000      	b.n	800cbee <HAL_DMA_IRQHandler+0x2ea>
          break;
 800cbec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d005      	beq.n	800cc12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	4798      	blx	r3
 800cc0e:	e000      	b.n	800cc12 <HAL_DMA_IRQHandler+0x30e>
        return;
 800cc10:	bf00      	nop
    }
  }
}
 800cc12:	3718      	adds	r7, #24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cc26:	b2db      	uxtb	r3, r3
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	3b10      	subs	r3, #16
 800cc44:	4a14      	ldr	r2, [pc, #80]	; (800cc98 <DMA_CalcBaseAndBitshift+0x64>)
 800cc46:	fba2 2303 	umull	r2, r3, r2, r3
 800cc4a:	091b      	lsrs	r3, r3, #4
 800cc4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cc4e:	4a13      	ldr	r2, [pc, #76]	; (800cc9c <DMA_CalcBaseAndBitshift+0x68>)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4413      	add	r3, r2
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	461a      	mov	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d909      	bls.n	800cc76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800cc6a:	f023 0303 	bic.w	r3, r3, #3
 800cc6e:	1d1a      	adds	r2, r3, #4
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	659a      	str	r2, [r3, #88]	; 0x58
 800cc74:	e007      	b.n	800cc86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800cc7e:	f023 0303 	bic.w	r3, r3, #3
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	aaaaaaab 	.word	0xaaaaaaab
 800cc9c:	08013af4 	.word	0x08013af4

0800cca0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d11f      	bne.n	800ccfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d856      	bhi.n	800cd6e <DMA_CheckFifoParam+0xce>
 800ccc0:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <DMA_CheckFifoParam+0x28>)
 800ccc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc6:	bf00      	nop
 800ccc8:	0800ccd9 	.word	0x0800ccd9
 800cccc:	0800cceb 	.word	0x0800cceb
 800ccd0:	0800ccd9 	.word	0x0800ccd9
 800ccd4:	0800cd6f 	.word	0x0800cd6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d046      	beq.n	800cd72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cce8:	e043      	b.n	800cd72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ccf2:	d140      	bne.n	800cd76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ccf8:	e03d      	b.n	800cd76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	699b      	ldr	r3, [r3, #24]
 800ccfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd02:	d121      	bne.n	800cd48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d837      	bhi.n	800cd7a <DMA_CheckFifoParam+0xda>
 800cd0a:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <DMA_CheckFifoParam+0x70>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd21 	.word	0x0800cd21
 800cd14:	0800cd27 	.word	0x0800cd27
 800cd18:	0800cd21 	.word	0x0800cd21
 800cd1c:	0800cd39 	.word	0x0800cd39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800cd20:	2301      	movs	r3, #1
 800cd22:	73fb      	strb	r3, [r7, #15]
      break;
 800cd24:	e030      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d025      	beq.n	800cd7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cd36:	e022      	b.n	800cd7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cd40:	d11f      	bne.n	800cd82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800cd46:	e01c      	b.n	800cd82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d903      	bls.n	800cd56 <DMA_CheckFifoParam+0xb6>
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	d003      	beq.n	800cd5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cd54:	e018      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	73fb      	strb	r3, [r7, #15]
      break;
 800cd5a:	e015      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00e      	beq.n	800cd86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	73fb      	strb	r3, [r7, #15]
      break;
 800cd6c:	e00b      	b.n	800cd86 <DMA_CheckFifoParam+0xe6>
      break;
 800cd6e:	bf00      	nop
 800cd70:	e00a      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
      break;
 800cd72:	bf00      	nop
 800cd74:	e008      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
      break;
 800cd76:	bf00      	nop
 800cd78:	e006      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
      break;
 800cd7a:	bf00      	nop
 800cd7c:	e004      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
      break;
 800cd7e:	bf00      	nop
 800cd80:	e002      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
      break;   
 800cd82:	bf00      	nop
 800cd84:	e000      	b.n	800cd88 <DMA_CheckFifoParam+0xe8>
      break;
 800cd86:	bf00      	nop
    }
  } 
  
  return status; 
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop

0800cd98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b089      	sub	sp, #36	; 0x24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cda2:	2300      	movs	r3, #0
 800cda4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cda6:	2300      	movs	r3, #0
 800cda8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cdae:	2300      	movs	r3, #0
 800cdb0:	61fb      	str	r3, [r7, #28]
 800cdb2:	e165      	b.n	800d080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	4013      	ands	r3, r2
 800cdc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	f040 8154 	bne.w	800d07a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	f003 0303 	and.w	r3, r3, #3
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d005      	beq.n	800cdea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d130      	bne.n	800ce4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	2203      	movs	r2, #3
 800cdf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdfa:	43db      	mvns	r3, r3
 800cdfc:	69ba      	ldr	r2, [r7, #24]
 800cdfe:	4013      	ands	r3, r2
 800ce00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	68da      	ldr	r2, [r3, #12]
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0e:	69ba      	ldr	r2, [r7, #24]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	69ba      	ldr	r2, [r7, #24]
 800ce18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ce20:	2201      	movs	r2, #1
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	fa02 f303 	lsl.w	r3, r2, r3
 800ce28:	43db      	mvns	r3, r3
 800ce2a:	69ba      	ldr	r2, [r7, #24]
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	091b      	lsrs	r3, r3, #4
 800ce36:	f003 0201 	and.w	r2, r3, #1
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce40:	69ba      	ldr	r2, [r7, #24]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	69ba      	ldr	r2, [r7, #24]
 800ce4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	f003 0303 	and.w	r3, r3, #3
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	d017      	beq.n	800ce88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	2203      	movs	r2, #3
 800ce64:	fa02 f303 	lsl.w	r3, r2, r3
 800ce68:	43db      	mvns	r3, r3
 800ce6a:	69ba      	ldr	r2, [r7, #24]
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	689a      	ldr	r2, [r3, #8]
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	005b      	lsls	r3, r3, #1
 800ce78:	fa02 f303 	lsl.w	r3, r2, r3
 800ce7c:	69ba      	ldr	r2, [r7, #24]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	69ba      	ldr	r2, [r7, #24]
 800ce86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	f003 0303 	and.w	r3, r3, #3
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	d123      	bne.n	800cedc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	08da      	lsrs	r2, r3, #3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	3208      	adds	r2, #8
 800ce9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	f003 0307 	and.w	r3, r3, #7
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	220f      	movs	r2, #15
 800ceac:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb0:	43db      	mvns	r3, r3
 800ceb2:	69ba      	ldr	r2, [r7, #24]
 800ceb4:	4013      	ands	r3, r2
 800ceb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	691a      	ldr	r2, [r3, #16]
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	f003 0307 	and.w	r3, r3, #7
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	fa02 f303 	lsl.w	r3, r2, r3
 800cec8:	69ba      	ldr	r2, [r7, #24]
 800ceca:	4313      	orrs	r3, r2
 800cecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	08da      	lsrs	r2, r3, #3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	3208      	adds	r2, #8
 800ced6:	69b9      	ldr	r1, [r7, #24]
 800ced8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	2203      	movs	r2, #3
 800cee8:	fa02 f303 	lsl.w	r3, r2, r3
 800ceec:	43db      	mvns	r3, r3
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	4013      	ands	r3, r2
 800cef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	f003 0203 	and.w	r2, r3, #3
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	fa02 f303 	lsl.w	r3, r2, r3
 800cf04:	69ba      	ldr	r2, [r7, #24]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f000 80ae 	beq.w	800d07a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf1e:	2300      	movs	r3, #0
 800cf20:	60fb      	str	r3, [r7, #12]
 800cf22:	4b5d      	ldr	r3, [pc, #372]	; (800d098 <HAL_GPIO_Init+0x300>)
 800cf24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf26:	4a5c      	ldr	r2, [pc, #368]	; (800d098 <HAL_GPIO_Init+0x300>)
 800cf28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf2c:	6453      	str	r3, [r2, #68]	; 0x44
 800cf2e:	4b5a      	ldr	r3, [pc, #360]	; (800d098 <HAL_GPIO_Init+0x300>)
 800cf30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf36:	60fb      	str	r3, [r7, #12]
 800cf38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cf3a:	4a58      	ldr	r2, [pc, #352]	; (800d09c <HAL_GPIO_Init+0x304>)
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	089b      	lsrs	r3, r3, #2
 800cf40:	3302      	adds	r3, #2
 800cf42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	f003 0303 	and.w	r3, r3, #3
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	220f      	movs	r2, #15
 800cf52:	fa02 f303 	lsl.w	r3, r2, r3
 800cf56:	43db      	mvns	r3, r3
 800cf58:	69ba      	ldr	r2, [r7, #24]
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a4f      	ldr	r2, [pc, #316]	; (800d0a0 <HAL_GPIO_Init+0x308>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d025      	beq.n	800cfb2 <HAL_GPIO_Init+0x21a>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a4e      	ldr	r2, [pc, #312]	; (800d0a4 <HAL_GPIO_Init+0x30c>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d01f      	beq.n	800cfae <HAL_GPIO_Init+0x216>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a4d      	ldr	r2, [pc, #308]	; (800d0a8 <HAL_GPIO_Init+0x310>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d019      	beq.n	800cfaa <HAL_GPIO_Init+0x212>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a4c      	ldr	r2, [pc, #304]	; (800d0ac <HAL_GPIO_Init+0x314>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d013      	beq.n	800cfa6 <HAL_GPIO_Init+0x20e>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4a4b      	ldr	r2, [pc, #300]	; (800d0b0 <HAL_GPIO_Init+0x318>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d00d      	beq.n	800cfa2 <HAL_GPIO_Init+0x20a>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a4a      	ldr	r2, [pc, #296]	; (800d0b4 <HAL_GPIO_Init+0x31c>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d007      	beq.n	800cf9e <HAL_GPIO_Init+0x206>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4a49      	ldr	r2, [pc, #292]	; (800d0b8 <HAL_GPIO_Init+0x320>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d101      	bne.n	800cf9a <HAL_GPIO_Init+0x202>
 800cf96:	2306      	movs	r3, #6
 800cf98:	e00c      	b.n	800cfb4 <HAL_GPIO_Init+0x21c>
 800cf9a:	2307      	movs	r3, #7
 800cf9c:	e00a      	b.n	800cfb4 <HAL_GPIO_Init+0x21c>
 800cf9e:	2305      	movs	r3, #5
 800cfa0:	e008      	b.n	800cfb4 <HAL_GPIO_Init+0x21c>
 800cfa2:	2304      	movs	r3, #4
 800cfa4:	e006      	b.n	800cfb4 <HAL_GPIO_Init+0x21c>
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	e004      	b.n	800cfb4 <HAL_GPIO_Init+0x21c>
 800cfaa:	2302      	movs	r3, #2
 800cfac:	e002      	b.n	800cfb4 <HAL_GPIO_Init+0x21c>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e000      	b.n	800cfb4 <HAL_GPIO_Init+0x21c>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	69fa      	ldr	r2, [r7, #28]
 800cfb6:	f002 0203 	and.w	r2, r2, #3
 800cfba:	0092      	lsls	r2, r2, #2
 800cfbc:	4093      	lsls	r3, r2
 800cfbe:	69ba      	ldr	r2, [r7, #24]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cfc4:	4935      	ldr	r1, [pc, #212]	; (800d09c <HAL_GPIO_Init+0x304>)
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	089b      	lsrs	r3, r3, #2
 800cfca:	3302      	adds	r3, #2
 800cfcc:	69ba      	ldr	r2, [r7, #24]
 800cfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cfd2:	4b3a      	ldr	r3, [pc, #232]	; (800d0bc <HAL_GPIO_Init+0x324>)
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	43db      	mvns	r3, r3
 800cfdc:	69ba      	ldr	r2, [r7, #24]
 800cfde:	4013      	ands	r3, r2
 800cfe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cff6:	4a31      	ldr	r2, [pc, #196]	; (800d0bc <HAL_GPIO_Init+0x324>)
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cffc:	4b2f      	ldr	r3, [pc, #188]	; (800d0bc <HAL_GPIO_Init+0x324>)
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	43db      	mvns	r3, r3
 800d006:	69ba      	ldr	r2, [r7, #24]
 800d008:	4013      	ands	r3, r2
 800d00a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800d018:	69ba      	ldr	r2, [r7, #24]
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d020:	4a26      	ldr	r2, [pc, #152]	; (800d0bc <HAL_GPIO_Init+0x324>)
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d026:	4b25      	ldr	r3, [pc, #148]	; (800d0bc <HAL_GPIO_Init+0x324>)
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	43db      	mvns	r3, r3
 800d030:	69ba      	ldr	r2, [r7, #24]
 800d032:	4013      	ands	r3, r2
 800d034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d003      	beq.n	800d04a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800d042:	69ba      	ldr	r2, [r7, #24]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	4313      	orrs	r3, r2
 800d048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d04a:	4a1c      	ldr	r2, [pc, #112]	; (800d0bc <HAL_GPIO_Init+0x324>)
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d050:	4b1a      	ldr	r3, [pc, #104]	; (800d0bc <HAL_GPIO_Init+0x324>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	43db      	mvns	r3, r3
 800d05a:	69ba      	ldr	r2, [r7, #24]
 800d05c:	4013      	ands	r3, r2
 800d05e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d003      	beq.n	800d074 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	4313      	orrs	r3, r2
 800d072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d074:	4a11      	ldr	r2, [pc, #68]	; (800d0bc <HAL_GPIO_Init+0x324>)
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	3301      	adds	r3, #1
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	2b0f      	cmp	r3, #15
 800d084:	f67f ae96 	bls.w	800cdb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	3724      	adds	r7, #36	; 0x24
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	40023800 	.word	0x40023800
 800d09c:	40013800 	.word	0x40013800
 800d0a0:	40020000 	.word	0x40020000
 800d0a4:	40020400 	.word	0x40020400
 800d0a8:	40020800 	.word	0x40020800
 800d0ac:	40020c00 	.word	0x40020c00
 800d0b0:	40021000 	.word	0x40021000
 800d0b4:	40021400 	.word	0x40021400
 800d0b8:	40021800 	.word	0x40021800
 800d0bc:	40013c00 	.word	0x40013c00

0800d0c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	807b      	strh	r3, [r7, #2]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d0d0:	787b      	ldrb	r3, [r7, #1]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d003      	beq.n	800d0de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d0d6:	887a      	ldrh	r2, [r7, #2]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d0dc:	e003      	b.n	800d0e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d0de:	887b      	ldrh	r3, [r7, #2]
 800d0e0:	041a      	lsls	r2, r3, #16
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	619a      	str	r2, [r3, #24]
}
 800d0e6:	bf00      	nop
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
	...

0800d0f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	e12b      	b.n	800d35e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d106      	bne.n	800d120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7fe f9dc 	bl	800b4d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2224      	movs	r2, #36	; 0x24
 800d124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f022 0201 	bic.w	r2, r2, #1
 800d136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d158:	f002 fb7a 	bl	800f850 <HAL_RCC_GetPCLK1Freq>
 800d15c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	4a81      	ldr	r2, [pc, #516]	; (800d368 <HAL_I2C_Init+0x274>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d807      	bhi.n	800d178 <HAL_I2C_Init+0x84>
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	4a80      	ldr	r2, [pc, #512]	; (800d36c <HAL_I2C_Init+0x278>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	bf94      	ite	ls
 800d170:	2301      	movls	r3, #1
 800d172:	2300      	movhi	r3, #0
 800d174:	b2db      	uxtb	r3, r3
 800d176:	e006      	b.n	800d186 <HAL_I2C_Init+0x92>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	4a7d      	ldr	r2, [pc, #500]	; (800d370 <HAL_I2C_Init+0x27c>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	bf94      	ite	ls
 800d180:	2301      	movls	r3, #1
 800d182:	2300      	movhi	r3, #0
 800d184:	b2db      	uxtb	r3, r3
 800d186:	2b00      	cmp	r3, #0
 800d188:	d001      	beq.n	800d18e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e0e7      	b.n	800d35e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	4a78      	ldr	r2, [pc, #480]	; (800d374 <HAL_I2C_Init+0x280>)
 800d192:	fba2 2303 	umull	r2, r3, r2, r3
 800d196:	0c9b      	lsrs	r3, r3, #18
 800d198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	430a      	orrs	r2, r1
 800d1ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	6a1b      	ldr	r3, [r3, #32]
 800d1b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	4a6a      	ldr	r2, [pc, #424]	; (800d368 <HAL_I2C_Init+0x274>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d802      	bhi.n	800d1c8 <HAL_I2C_Init+0xd4>
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	e009      	b.n	800d1dc <HAL_I2C_Init+0xe8>
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d1ce:	fb02 f303 	mul.w	r3, r2, r3
 800d1d2:	4a69      	ldr	r2, [pc, #420]	; (800d378 <HAL_I2C_Init+0x284>)
 800d1d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d8:	099b      	lsrs	r3, r3, #6
 800d1da:	3301      	adds	r3, #1
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	6812      	ldr	r2, [r2, #0]
 800d1e0:	430b      	orrs	r3, r1
 800d1e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	69db      	ldr	r3, [r3, #28]
 800d1ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d1ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	495c      	ldr	r1, [pc, #368]	; (800d368 <HAL_I2C_Init+0x274>)
 800d1f8:	428b      	cmp	r3, r1
 800d1fa:	d819      	bhi.n	800d230 <HAL_I2C_Init+0x13c>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	1e59      	subs	r1, r3, #1
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	005b      	lsls	r3, r3, #1
 800d206:	fbb1 f3f3 	udiv	r3, r1, r3
 800d20a:	1c59      	adds	r1, r3, #1
 800d20c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d210:	400b      	ands	r3, r1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <HAL_I2C_Init+0x138>
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	1e59      	subs	r1, r3, #1
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	005b      	lsls	r3, r3, #1
 800d220:	fbb1 f3f3 	udiv	r3, r1, r3
 800d224:	3301      	adds	r3, #1
 800d226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d22a:	e051      	b.n	800d2d0 <HAL_I2C_Init+0x1dc>
 800d22c:	2304      	movs	r3, #4
 800d22e:	e04f      	b.n	800d2d0 <HAL_I2C_Init+0x1dc>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d111      	bne.n	800d25c <HAL_I2C_Init+0x168>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	1e58      	subs	r0, r3, #1
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6859      	ldr	r1, [r3, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	005b      	lsls	r3, r3, #1
 800d244:	440b      	add	r3, r1
 800d246:	fbb0 f3f3 	udiv	r3, r0, r3
 800d24a:	3301      	adds	r3, #1
 800d24c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d250:	2b00      	cmp	r3, #0
 800d252:	bf0c      	ite	eq
 800d254:	2301      	moveq	r3, #1
 800d256:	2300      	movne	r3, #0
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	e012      	b.n	800d282 <HAL_I2C_Init+0x18e>
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	1e58      	subs	r0, r3, #1
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6859      	ldr	r1, [r3, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	440b      	add	r3, r1
 800d26a:	0099      	lsls	r1, r3, #2
 800d26c:	440b      	add	r3, r1
 800d26e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d272:	3301      	adds	r3, #1
 800d274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d278:	2b00      	cmp	r3, #0
 800d27a:	bf0c      	ite	eq
 800d27c:	2301      	moveq	r3, #1
 800d27e:	2300      	movne	r3, #0
 800d280:	b2db      	uxtb	r3, r3
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <HAL_I2C_Init+0x196>
 800d286:	2301      	movs	r3, #1
 800d288:	e022      	b.n	800d2d0 <HAL_I2C_Init+0x1dc>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10e      	bne.n	800d2b0 <HAL_I2C_Init+0x1bc>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	1e58      	subs	r0, r3, #1
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6859      	ldr	r1, [r3, #4]
 800d29a:	460b      	mov	r3, r1
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	440b      	add	r3, r1
 800d2a0:	fbb0 f3f3 	udiv	r3, r0, r3
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2ae:	e00f      	b.n	800d2d0 <HAL_I2C_Init+0x1dc>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	1e58      	subs	r0, r3, #1
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6859      	ldr	r1, [r3, #4]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	440b      	add	r3, r1
 800d2be:	0099      	lsls	r1, r3, #2
 800d2c0:	440b      	add	r3, r1
 800d2c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	6809      	ldr	r1, [r1, #0]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	69da      	ldr	r2, [r3, #28]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	430a      	orrs	r2, r1
 800d2f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d2fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	6911      	ldr	r1, [r2, #16]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	68d2      	ldr	r2, [r2, #12]
 800d30a:	4311      	orrs	r1, r2
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	6812      	ldr	r2, [r2, #0]
 800d310:	430b      	orrs	r3, r1
 800d312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	695a      	ldr	r2, [r3, #20]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	431a      	orrs	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	430a      	orrs	r2, r1
 800d32e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f042 0201 	orr.w	r2, r2, #1
 800d33e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2220      	movs	r2, #32
 800d34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	000186a0 	.word	0x000186a0
 800d36c:	001e847f 	.word	0x001e847f
 800d370:	003d08ff 	.word	0x003d08ff
 800d374:	431bde83 	.word	0x431bde83
 800d378:	10624dd3 	.word	0x10624dd3

0800d37c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d38e:	2b80      	cmp	r3, #128	; 0x80
 800d390:	d103      	bne.n	800d39a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2200      	movs	r2, #0
 800d398:	611a      	str	r2, [r3, #16]
  }
}
 800d39a:	bf00      	nop
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
	...

0800d3a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b088      	sub	sp, #32
 800d3ac:	af02      	add	r7, sp, #8
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	607a      	str	r2, [r7, #4]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	817b      	strh	r3, [r7, #10]
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d3bc:	f7fe fd46 	bl	800be4c <HAL_GetTick>
 800d3c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b20      	cmp	r3, #32
 800d3cc:	f040 80e0 	bne.w	800d590 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	2319      	movs	r3, #25
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	4970      	ldr	r1, [pc, #448]	; (800d59c <HAL_I2C_Master_Transmit+0x1f4>)
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f001 fe68 	bl	800f0b0 <I2C_WaitOnFlagUntilTimeout>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	e0d3      	b.n	800d592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d101      	bne.n	800d3f8 <HAL_I2C_Master_Transmit+0x50>
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	e0cc      	b.n	800d592 <HAL_I2C_Master_Transmit+0x1ea>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d007      	beq.n	800d41e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f042 0201 	orr.w	r2, r2, #1
 800d41c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d42c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2221      	movs	r2, #33	; 0x21
 800d432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2210      	movs	r2, #16
 800d43a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2200      	movs	r2, #0
 800d442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	893a      	ldrh	r2, [r7, #8]
 800d44e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d454:	b29a      	uxth	r2, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4a50      	ldr	r2, [pc, #320]	; (800d5a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800d45e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d460:	8979      	ldrh	r1, [r7, #10]
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	6a3a      	ldr	r2, [r7, #32]
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f001 fcf8 	bl	800ee5c <I2C_MasterRequestWrite>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d001      	beq.n	800d476 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d472:	2301      	movs	r3, #1
 800d474:	e08d      	b.n	800d592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d476:	2300      	movs	r3, #0
 800d478:	613b      	str	r3, [r7, #16]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	695b      	ldr	r3, [r3, #20]
 800d480:	613b      	str	r3, [r7, #16]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	699b      	ldr	r3, [r3, #24]
 800d488:	613b      	str	r3, [r7, #16]
 800d48a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d48c:	e066      	b.n	800d55c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	6a39      	ldr	r1, [r7, #32]
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f001 ff26 	bl	800f2e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00d      	beq.n	800d4ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a2:	2b04      	cmp	r3, #4
 800d4a4:	d107      	bne.n	800d4b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e06b      	b.n	800d592 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4be:	781a      	ldrb	r2, [r3, #0]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	695b      	ldr	r3, [r3, #20]
 800d4f0:	f003 0304 	and.w	r3, r3, #4
 800d4f4:	2b04      	cmp	r3, #4
 800d4f6:	d11b      	bne.n	800d530 <HAL_I2C_Master_Transmit+0x188>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d017      	beq.n	800d530 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d504:	781a      	ldrb	r2, [r3, #0]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	3b01      	subs	r3, #1
 800d51e:	b29a      	uxth	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d528:	3b01      	subs	r3, #1
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	6a39      	ldr	r1, [r7, #32]
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f001 ff1d 	bl	800f374 <I2C_WaitOnBTFFlagUntilTimeout>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00d      	beq.n	800d55c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d544:	2b04      	cmp	r3, #4
 800d546:	d107      	bne.n	800d558 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d556:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	e01a      	b.n	800d592 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d560:	2b00      	cmp	r3, #0
 800d562:	d194      	bne.n	800d48e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2220      	movs	r2, #32
 800d578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2200      	movs	r2, #0
 800d580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	e000      	b.n	800d592 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d590:	2302      	movs	r3, #2
  }
}
 800d592:	4618      	mov	r0, r3
 800d594:	3718      	adds	r7, #24
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	00100002 	.word	0x00100002
 800d5a0:	ffff0000 	.word	0xffff0000

0800d5a4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b087      	sub	sp, #28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	603b      	str	r3, [r7, #0]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d5c0:	2b28      	cmp	r3, #40	; 0x28
 800d5c2:	d15b      	bne.n	800d67c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800d5ca:	88fb      	ldrh	r3, [r7, #6]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e054      	b.n	800d67e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d101      	bne.n	800d5e2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800d5de:	2302      	movs	r3, #2
 800d5e0:	e04d      	b.n	800d67e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d007      	beq.n	800d608 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f042 0201 	orr.w	r2, r2, #1
 800d606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	222a      	movs	r2, #42	; 0x2a
 800d61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2220      	movs	r2, #32
 800d624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	88fa      	ldrh	r2, [r7, #6]
 800d638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d63e:	b29a      	uxth	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d64a:	2300      	movs	r3, #0
 800d64c:	617b      	str	r3, [r7, #20]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	617b      	str	r3, [r7, #20]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	617b      	str	r3, [r7, #20]
 800d65e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d676:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d678:	2300      	movs	r3, #0
 800d67a:	e000      	b.n	800d67e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800d67c:	2302      	movs	r3, #2
  }
}
 800d67e:	4618      	mov	r0, r3
 800d680:	371c      	adds	r7, #28
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800d68a:	b480      	push	{r7}
 800d68c:	b083      	sub	sp, #12
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b20      	cmp	r3, #32
 800d69c:	d124      	bne.n	800d6e8 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2228      	movs	r2, #40	; 0x28
 800d6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f003 0301 	and.w	r3, r3, #1
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d007      	beq.n	800d6c4 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f042 0201 	orr.w	r2, r2, #1
 800d6c2:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6d2:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800d6e2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e000      	b.n	800d6ea <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800d6e8:	2302      	movs	r3, #2
  }
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr

0800d6f6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b088      	sub	sp, #32
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800d6fe:	2300      	movs	r3, #0
 800d700:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d716:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d71e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	2b10      	cmp	r3, #16
 800d724:	d003      	beq.n	800d72e <HAL_I2C_EV_IRQHandler+0x38>
 800d726:	7bfb      	ldrb	r3, [r7, #15]
 800d728:	2b40      	cmp	r3, #64	; 0x40
 800d72a:	f040 80b1 	bne.w	800d890 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	695b      	ldr	r3, [r3, #20]
 800d73c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	f003 0301 	and.w	r3, r3, #1
 800d744:	2b00      	cmp	r3, #0
 800d746:	d10d      	bne.n	800d764 <HAL_I2C_EV_IRQHandler+0x6e>
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d74e:	d003      	beq.n	800d758 <HAL_I2C_EV_IRQHandler+0x62>
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d756:	d101      	bne.n	800d75c <HAL_I2C_EV_IRQHandler+0x66>
 800d758:	2301      	movs	r3, #1
 800d75a:	e000      	b.n	800d75e <HAL_I2C_EV_IRQHandler+0x68>
 800d75c:	2300      	movs	r3, #0
 800d75e:	2b01      	cmp	r3, #1
 800d760:	f000 8114 	beq.w	800d98c <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	f003 0301 	and.w	r3, r3, #1
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00b      	beq.n	800d786 <HAL_I2C_EV_IRQHandler+0x90>
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d774:	2b00      	cmp	r3, #0
 800d776:	d006      	beq.n	800d786 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f001 fea4 	bl	800f4c6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fd4e 	bl	800e220 <I2C_Master_SB>
 800d784:	e083      	b.n	800d88e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	f003 0308 	and.w	r3, r3, #8
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d008      	beq.n	800d7a2 <HAL_I2C_EV_IRQHandler+0xac>
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d796:	2b00      	cmp	r3, #0
 800d798:	d003      	beq.n	800d7a2 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fdc6 	bl	800e32c <I2C_Master_ADD10>
 800d7a0:	e075      	b.n	800d88e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	f003 0302 	and.w	r3, r3, #2
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d008      	beq.n	800d7be <HAL_I2C_EV_IRQHandler+0xc8>
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fde2 	bl	800e380 <I2C_Master_ADDR>
 800d7bc:	e067      	b.n	800d88e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d036      	beq.n	800d836 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7d6:	f000 80db 	beq.w	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00d      	beq.n	800d800 <HAL_I2C_EV_IRQHandler+0x10a>
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d008      	beq.n	800d800 <HAL_I2C_EV_IRQHandler+0x10a>
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	f003 0304 	and.w	r3, r3, #4
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d103      	bne.n	800d800 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f9aa 	bl	800db52 <I2C_MasterTransmit_TXE>
 800d7fe:	e046      	b.n	800d88e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	f003 0304 	and.w	r3, r3, #4
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 80c2 	beq.w	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 80bc 	beq.w	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d818:	7bbb      	ldrb	r3, [r7, #14]
 800d81a:	2b21      	cmp	r3, #33	; 0x21
 800d81c:	d103      	bne.n	800d826 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fa33 	bl	800dc8a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d824:	e0b4      	b.n	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800d826:	7bfb      	ldrb	r3, [r7, #15]
 800d828:	2b40      	cmp	r3, #64	; 0x40
 800d82a:	f040 80b1 	bne.w	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 faa1 	bl	800dd76 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d834:	e0ac      	b.n	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d844:	f000 80a4 	beq.w	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d848:	69fb      	ldr	r3, [r7, #28]
 800d84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00d      	beq.n	800d86e <HAL_I2C_EV_IRQHandler+0x178>
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d008      	beq.n	800d86e <HAL_I2C_EV_IRQHandler+0x178>
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	f003 0304 	and.w	r3, r3, #4
 800d862:	2b00      	cmp	r3, #0
 800d864:	d103      	bne.n	800d86e <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fb1d 	bl	800dea6 <I2C_MasterReceive_RXNE>
 800d86c:	e00f      	b.n	800d88e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	f003 0304 	and.w	r3, r3, #4
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 808b 	beq.w	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d880:	2b00      	cmp	r3, #0
 800d882:	f000 8085 	beq.w	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fbd5 	bl	800e036 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d88c:	e080      	b.n	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
 800d88e:	e07f      	b.n	800d990 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d894:	2b00      	cmp	r3, #0
 800d896:	d004      	beq.n	800d8a2 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	61fb      	str	r3, [r7, #28]
 800d8a0:	e007      	b.n	800d8b2 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	699b      	ldr	r3, [r3, #24]
 800d8a8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	695b      	ldr	r3, [r3, #20]
 800d8b0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	f003 0302 	and.w	r3, r3, #2
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d011      	beq.n	800d8e0 <HAL_I2C_EV_IRQHandler+0x1ea>
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00c      	beq.n	800d8e0 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d003      	beq.n	800d8d6 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	699b      	ldr	r3, [r3, #24]
 800d8d4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800d8d6:	69b9      	ldr	r1, [r7, #24]
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 ffa0 	bl	800e81e <I2C_Slave_ADDR>
 800d8de:	e05a      	b.n	800d996 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	f003 0310 	and.w	r3, r3, #16
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d008      	beq.n	800d8fc <HAL_I2C_EV_IRQHandler+0x206>
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d003      	beq.n	800d8fc <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 ffdb 	bl	800e8b0 <I2C_Slave_STOPF>
 800d8fa:	e04c      	b.n	800d996 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
 800d8fe:	2b21      	cmp	r3, #33	; 0x21
 800d900:	d002      	beq.n	800d908 <HAL_I2C_EV_IRQHandler+0x212>
 800d902:	7bbb      	ldrb	r3, [r7, #14]
 800d904:	2b29      	cmp	r3, #41	; 0x29
 800d906:	d120      	bne.n	800d94a <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00d      	beq.n	800d92e <HAL_I2C_EV_IRQHandler+0x238>
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d008      	beq.n	800d92e <HAL_I2C_EV_IRQHandler+0x238>
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	f003 0304 	and.w	r3, r3, #4
 800d922:	2b00      	cmp	r3, #0
 800d924:	d103      	bne.n	800d92e <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 febb 	bl	800e6a2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d92c:	e032      	b.n	800d994 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	f003 0304 	and.w	r3, r3, #4
 800d934:	2b00      	cmp	r3, #0
 800d936:	d02d      	beq.n	800d994 <HAL_I2C_EV_IRQHandler+0x29e>
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d028      	beq.n	800d994 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 feea 	bl	800e71c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d948:	e024      	b.n	800d994 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00d      	beq.n	800d970 <HAL_I2C_EV_IRQHandler+0x27a>
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d008      	beq.n	800d970 <HAL_I2C_EV_IRQHandler+0x27a>
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	f003 0304 	and.w	r3, r3, #4
 800d964:	2b00      	cmp	r3, #0
 800d966:	d103      	bne.n	800d970 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 fef8 	bl	800e75e <I2C_SlaveReceive_RXNE>
 800d96e:	e012      	b.n	800d996 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	f003 0304 	and.w	r3, r3, #4
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00d      	beq.n	800d996 <HAL_I2C_EV_IRQHandler+0x2a0>
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d980:	2b00      	cmp	r3, #0
 800d982:	d008      	beq.n	800d996 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 ff28 	bl	800e7da <I2C_SlaveReceive_BTF>
 800d98a:	e004      	b.n	800d996 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800d98c:	bf00      	nop
 800d98e:	e002      	b.n	800d996 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d990:	bf00      	nop
 800d992:	e000      	b.n	800d996 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d994:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800d996:	3720      	adds	r7, #32
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08a      	sub	sp, #40	; 0x28
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d9be:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d9c0:	6a3b      	ldr	r3, [r7, #32]
 800d9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00d      	beq.n	800d9e6 <HAL_I2C_ER_IRQHandler+0x4a>
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d008      	beq.n	800d9e6 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	f043 0301 	orr.w	r3, r3, #1
 800d9da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d9e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00d      	beq.n	800da0c <HAL_I2C_ER_IRQHandler+0x70>
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d008      	beq.n	800da0c <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fc:	f043 0302 	orr.w	r3, r3, #2
 800da00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800da0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da12:	2b00      	cmp	r3, #0
 800da14:	d03e      	beq.n	800da94 <HAL_I2C_ER_IRQHandler+0xf8>
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d039      	beq.n	800da94 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800da20:	7efb      	ldrb	r3, [r7, #27]
 800da22:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da28:	b29b      	uxth	r3, r3
 800da2a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da32:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da38:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800da3a:	7ebb      	ldrb	r3, [r7, #26]
 800da3c:	2b20      	cmp	r3, #32
 800da3e:	d112      	bne.n	800da66 <HAL_I2C_ER_IRQHandler+0xca>
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10f      	bne.n	800da66 <HAL_I2C_ER_IRQHandler+0xca>
 800da46:	7cfb      	ldrb	r3, [r7, #19]
 800da48:	2b21      	cmp	r3, #33	; 0x21
 800da4a:	d008      	beq.n	800da5e <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800da4c:	7cfb      	ldrb	r3, [r7, #19]
 800da4e:	2b29      	cmp	r3, #41	; 0x29
 800da50:	d005      	beq.n	800da5e <HAL_I2C_ER_IRQHandler+0xc2>
 800da52:	7cfb      	ldrb	r3, [r7, #19]
 800da54:	2b28      	cmp	r3, #40	; 0x28
 800da56:	d106      	bne.n	800da66 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b21      	cmp	r3, #33	; 0x21
 800da5c:	d103      	bne.n	800da66 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f001 f856 	bl	800eb10 <I2C_Slave_AF>
 800da64:	e016      	b.n	800da94 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800da6e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	f043 0304 	orr.w	r3, r3, #4
 800da76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800da78:	7efb      	ldrb	r3, [r7, #27]
 800da7a:	2b10      	cmp	r3, #16
 800da7c:	d002      	beq.n	800da84 <HAL_I2C_ER_IRQHandler+0xe8>
 800da7e:	7efb      	ldrb	r3, [r7, #27]
 800da80:	2b40      	cmp	r3, #64	; 0x40
 800da82:	d107      	bne.n	800da94 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da92:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800da94:	6a3b      	ldr	r3, [r7, #32]
 800da96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00d      	beq.n	800daba <HAL_I2C_ER_IRQHandler+0x11e>
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d008      	beq.n	800daba <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	f043 0308 	orr.w	r3, r3, #8
 800daae:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800dab8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d008      	beq.n	800dad2 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	431a      	orrs	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 f893 	bl	800ebf8 <I2C_ITError>
  }
}
 800dad2:	bf00      	nop
 800dad4:	3728      	adds	r7, #40	; 0x28
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dada:	b480      	push	{r7}
 800dadc:	b083      	sub	sp, #12
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800dae2:	bf00      	nop
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800daf6:	bf00      	nop
 800daf8:	370c      	adds	r7, #12
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr

0800db02 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db02:	b480      	push	{r7}
 800db04:	b083      	sub	sp, #12
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800db0a:	bf00      	nop
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db16:	b480      	push	{r7}
 800db18:	b083      	sub	sp, #12
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800db1e:	bf00      	nop
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db2a:	b480      	push	{r7}
 800db2c:	b083      	sub	sp, #12
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800db32:	bf00      	nop
 800db34:	370c      	adds	r7, #12
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr

0800db3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800db3e:	b480      	push	{r7}
 800db40:	b083      	sub	sp, #12
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800db46:	bf00      	nop
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db60:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db68:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db74:	2b00      	cmp	r3, #0
 800db76:	d150      	bne.n	800dc1a <I2C_MasterTransmit_TXE+0xc8>
 800db78:	7bfb      	ldrb	r3, [r7, #15]
 800db7a:	2b21      	cmp	r3, #33	; 0x21
 800db7c:	d14d      	bne.n	800dc1a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	2b08      	cmp	r3, #8
 800db82:	d01d      	beq.n	800dbc0 <I2C_MasterTransmit_TXE+0x6e>
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b20      	cmp	r3, #32
 800db88:	d01a      	beq.n	800dbc0 <I2C_MasterTransmit_TXE+0x6e>
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800db90:	d016      	beq.n	800dbc0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	685a      	ldr	r2, [r3, #4]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dba0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2211      	movs	r2, #17
 800dba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2220      	movs	r2, #32
 800dbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7ff ff8e 	bl	800dada <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dbbe:	e060      	b.n	800dc82 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	685a      	ldr	r2, [r3, #4]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dbce:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbde:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2220      	movs	r2, #32
 800dbea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b40      	cmp	r3, #64	; 0x40
 800dbf8:	d107      	bne.n	800dc0a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff ff87 	bl	800db16 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dc08:	e03b      	b.n	800dc82 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff ff61 	bl	800dada <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dc18:	e033      	b.n	800dc82 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	2b21      	cmp	r3, #33	; 0x21
 800dc1e:	d005      	beq.n	800dc2c <I2C_MasterTransmit_TXE+0xda>
 800dc20:	7bbb      	ldrb	r3, [r7, #14]
 800dc22:	2b40      	cmp	r3, #64	; 0x40
 800dc24:	d12d      	bne.n	800dc82 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
 800dc28:	2b22      	cmp	r3, #34	; 0x22
 800dc2a:	d12a      	bne.n	800dc82 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d108      	bne.n	800dc48 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc44:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800dc46:	e01c      	b.n	800dc82 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	2b40      	cmp	r3, #64	; 0x40
 800dc52:	d103      	bne.n	800dc5c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f88e 	bl	800dd76 <I2C_MemoryTransmit_TXE_BTF>
}
 800dc5a:	e012      	b.n	800dc82 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc60:	781a      	ldrb	r2, [r3, #0]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6c:	1c5a      	adds	r2, r3, #1
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dc80:	e7ff      	b.n	800dc82 <I2C_MasterTransmit_TXE+0x130>
 800dc82:	bf00      	nop
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc96:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b21      	cmp	r3, #33	; 0x21
 800dca2:	d164      	bne.n	800dd6e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d012      	beq.n	800dcd4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb2:	781a      	ldrb	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	3b01      	subs	r3, #1
 800dccc:	b29a      	uxth	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800dcd2:	e04c      	b.n	800dd6e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2b08      	cmp	r3, #8
 800dcd8:	d01d      	beq.n	800dd16 <I2C_MasterTransmit_BTF+0x8c>
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b20      	cmp	r3, #32
 800dcde:	d01a      	beq.n	800dd16 <I2C_MasterTransmit_BTF+0x8c>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dce6:	d016      	beq.n	800dd16 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	685a      	ldr	r2, [r3, #4]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dcf6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2211      	movs	r2, #17
 800dcfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2220      	movs	r2, #32
 800dd0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7ff fee3 	bl	800dada <HAL_I2C_MasterTxCpltCallback>
}
 800dd14:	e02b      	b.n	800dd6e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dd24:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd34:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2220      	movs	r2, #32
 800dd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	2b40      	cmp	r3, #64	; 0x40
 800dd4e:	d107      	bne.n	800dd60 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f7ff fedc 	bl	800db16 <HAL_I2C_MemTxCpltCallback>
}
 800dd5e:	e006      	b.n	800dd6e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7ff feb6 	bl	800dada <HAL_I2C_MasterTxCpltCallback>
}
 800dd6e:	bf00      	nop
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b084      	sub	sp, #16
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d11d      	bne.n	800ddca <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d10b      	bne.n	800ddae <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda6:	1c9a      	adds	r2, r3, #2
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800ddac:	e077      	b.n	800de9e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	121b      	asrs	r3, r3, #8
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ddc8:	e069      	b.n	800de9e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d10b      	bne.n	800ddea <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dde8:	e059      	b.n	800de9e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d152      	bne.n	800de98 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800ddf2:	7bfb      	ldrb	r3, [r7, #15]
 800ddf4:	2b22      	cmp	r3, #34	; 0x22
 800ddf6:	d10d      	bne.n	800de14 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de06:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	651a      	str	r2, [r3, #80]	; 0x50
}
 800de12:	e044      	b.n	800de9e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de18:	b29b      	uxth	r3, r3
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d015      	beq.n	800de4a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	2b21      	cmp	r3, #33	; 0x21
 800de22:	d112      	bne.n	800de4a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de28:	781a      	ldrb	r2, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de3e:	b29b      	uxth	r3, r3
 800de40:	3b01      	subs	r3, #1
 800de42:	b29a      	uxth	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800de48:	e029      	b.n	800de9e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d124      	bne.n	800de9e <I2C_MemoryTransmit_TXE_BTF+0x128>
 800de54:	7bfb      	ldrb	r3, [r7, #15]
 800de56:	2b21      	cmp	r3, #33	; 0x21
 800de58:	d121      	bne.n	800de9e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800de68:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de78:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2220      	movs	r2, #32
 800de84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2200      	movs	r2, #0
 800de8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff fe40 	bl	800db16 <HAL_I2C_MemTxCpltCallback>
}
 800de96:	e002      	b.n	800de9e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff fa6f 	bl	800d37c <I2C_Flush_DR>
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b084      	sub	sp, #16
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b22      	cmp	r3, #34	; 0x22
 800deb8:	f040 80b9 	bne.w	800e02e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec0:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	2b03      	cmp	r3, #3
 800dece:	d921      	bls.n	800df14 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	691a      	ldr	r2, [r3, #16]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deda:	b2d2      	uxtb	r2, r2
 800dedc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deec:	b29b      	uxth	r3, r3
 800deee:	3b01      	subs	r3, #1
 800def0:	b29a      	uxth	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800defa:	b29b      	uxth	r3, r3
 800defc:	2b03      	cmp	r3, #3
 800defe:	f040 8096 	bne.w	800e02e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	685a      	ldr	r2, [r3, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df10:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800df12:	e08c      	b.n	800e02e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d07f      	beq.n	800e01c <I2C_MasterReceive_RXNE+0x176>
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d002      	beq.n	800df28 <I2C_MasterReceive_RXNE+0x82>
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d179      	bne.n	800e01c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f001 fa6b 	bl	800f404 <I2C_WaitOnSTOPRequestThroughIT>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d14c      	bne.n	800dfce <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df42:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800df52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	691a      	ldr	r2, [r3, #16]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5e:	b2d2      	uxtb	r2, r2
 800df60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df66:	1c5a      	adds	r2, r3, #1
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df70:	b29b      	uxth	r3, r3
 800df72:	3b01      	subs	r3, #1
 800df74:	b29a      	uxth	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2220      	movs	r2, #32
 800df7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b40      	cmp	r3, #64	; 0x40
 800df8c:	d10a      	bne.n	800dfa4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff fdc4 	bl	800db2a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800dfa2:	e044      	b.n	800e02e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b08      	cmp	r3, #8
 800dfb0:	d002      	beq.n	800dfb8 <I2C_MasterReceive_RXNE+0x112>
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b20      	cmp	r3, #32
 800dfb6:	d103      	bne.n	800dfc0 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	631a      	str	r2, [r3, #48]	; 0x30
 800dfbe:	e002      	b.n	800dfc6 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2212      	movs	r2, #18
 800dfc4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff fd91 	bl	800daee <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800dfcc:	e02f      	b.n	800e02e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dfdc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	691a      	ldr	r2, [r3, #16]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe8:	b2d2      	uxtb	r2, r2
 800dfea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	3b01      	subs	r3, #1
 800dffe:	b29a      	uxth	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2220      	movs	r2, #32
 800e008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7fc fd77 	bl	800ab08 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800e01a:	e008      	b.n	800e02e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e02a:	605a      	str	r2, [r3, #4]
}
 800e02c:	e7ff      	b.n	800e02e <I2C_MasterReceive_RXNE+0x188>
 800e02e:	bf00      	nop
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e042:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e048:	b29b      	uxth	r3, r3
 800e04a:	2b04      	cmp	r3, #4
 800e04c:	d11b      	bne.n	800e086 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e05c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	691a      	ldr	r2, [r3, #16]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e068:	b2d2      	uxtb	r2, r2
 800e06a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e070:	1c5a      	adds	r2, r3, #1
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b01      	subs	r3, #1
 800e07e:	b29a      	uxth	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800e084:	e0c8      	b.n	800e218 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	2b03      	cmp	r3, #3
 800e08e:	d129      	bne.n	800e0e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	685a      	ldr	r2, [r3, #4]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e09e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2b04      	cmp	r3, #4
 800e0a4:	d00a      	beq.n	800e0bc <I2C_MasterReceive_BTF+0x86>
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2b02      	cmp	r3, #2
 800e0aa:	d007      	beq.n	800e0bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	691a      	ldr	r2, [r3, #16]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c6:	b2d2      	uxtb	r2, r2
 800e0c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ce:	1c5a      	adds	r2, r3, #1
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800e0e2:	e099      	b.n	800e218 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	f040 8081 	bne.w	800e1f2 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d002      	beq.n	800e0fc <I2C_MasterReceive_BTF+0xc6>
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2b10      	cmp	r3, #16
 800e0fa:	d108      	bne.n	800e10e <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e10a:	601a      	str	r2, [r3, #0]
 800e10c:	e019      	b.n	800e142 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2b04      	cmp	r3, #4
 800e112:	d002      	beq.n	800e11a <I2C_MasterReceive_BTF+0xe4>
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b02      	cmp	r3, #2
 800e118:	d108      	bne.n	800e12c <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	e00a      	b.n	800e142 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2b10      	cmp	r3, #16
 800e130:	d007      	beq.n	800e142 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e140:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	691a      	ldr	r2, [r3, #16]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14c:	b2d2      	uxtb	r2, r2
 800e14e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e154:	1c5a      	adds	r2, r3, #1
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e15e:	b29b      	uxth	r3, r3
 800e160:	3b01      	subs	r3, #1
 800e162:	b29a      	uxth	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	691a      	ldr	r2, [r3, #16]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e172:	b2d2      	uxtb	r2, r2
 800e174:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e184:	b29b      	uxth	r3, r3
 800e186:	3b01      	subs	r3, #1
 800e188:	b29a      	uxth	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685a      	ldr	r2, [r3, #4]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e19c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2220      	movs	r2, #32
 800e1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b40      	cmp	r3, #64	; 0x40
 800e1b0:	d10a      	bne.n	800e1c8 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff fcb2 	bl	800db2a <HAL_I2C_MemRxCpltCallback>
}
 800e1c6:	e027      	b.n	800e218 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b08      	cmp	r3, #8
 800e1d4:	d002      	beq.n	800e1dc <I2C_MasterReceive_BTF+0x1a6>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2b20      	cmp	r3, #32
 800e1da:	d103      	bne.n	800e1e4 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	631a      	str	r2, [r3, #48]	; 0x30
 800e1e2:	e002      	b.n	800e1ea <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2212      	movs	r2, #18
 800e1e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f7ff fc7f 	bl	800daee <HAL_I2C_MasterRxCpltCallback>
}
 800e1f0:	e012      	b.n	800e218 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	691a      	ldr	r2, [r3, #16]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1fc:	b2d2      	uxtb	r2, r2
 800e1fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e20e:	b29b      	uxth	r3, r3
 800e210:	3b01      	subs	r3, #1
 800e212:	b29a      	uxth	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800e218:	bf00      	nop
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	2b40      	cmp	r3, #64	; 0x40
 800e232:	d117      	bne.n	800e264 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d109      	bne.n	800e250 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e240:	b2db      	uxtb	r3, r3
 800e242:	461a      	mov	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e24c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800e24e:	e067      	b.n	800e320 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e254:	b2db      	uxtb	r3, r3
 800e256:	f043 0301 	orr.w	r3, r3, #1
 800e25a:	b2da      	uxtb	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	611a      	str	r2, [r3, #16]
}
 800e262:	e05d      	b.n	800e320 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e26c:	d133      	bne.n	800e2d6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b21      	cmp	r3, #33	; 0x21
 800e278:	d109      	bne.n	800e28e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	461a      	mov	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e28a:	611a      	str	r2, [r3, #16]
 800e28c:	e008      	b.n	800e2a0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e292:	b2db      	uxtb	r3, r3
 800e294:	f043 0301 	orr.w	r3, r3, #1
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d004      	beq.n	800e2b2 <I2C_Master_SB+0x92>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d108      	bne.n	800e2c4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d032      	beq.n	800e320 <I2C_Master_SB+0x100>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d02d      	beq.n	800e320 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	685a      	ldr	r2, [r3, #4]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2d2:	605a      	str	r2, [r3, #4]
}
 800e2d4:	e024      	b.n	800e320 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d10e      	bne.n	800e2fc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	11db      	asrs	r3, r3, #7
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	f003 0306 	and.w	r3, r3, #6
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	f063 030f 	orn	r3, r3, #15
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	611a      	str	r2, [r3, #16]
}
 800e2fa:	e011      	b.n	800e320 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e300:	2b01      	cmp	r3, #1
 800e302:	d10d      	bne.n	800e320 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e308:	b29b      	uxth	r3, r3
 800e30a:	11db      	asrs	r3, r3, #7
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	f003 0306 	and.w	r3, r3, #6
 800e312:	b2db      	uxtb	r3, r3
 800e314:	f063 030e 	orn	r3, r3, #14
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	611a      	str	r2, [r3, #16]
}
 800e320:	bf00      	nop
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <I2C_Master_ADD10+0x26>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d108      	bne.n	800e364 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00c      	beq.n	800e374 <I2C_Master_ADD10+0x48>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e360:	2b00      	cmp	r3, #0
 800e362:	d007      	beq.n	800e374 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	685a      	ldr	r2, [r3, #4]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e372:	605a      	str	r2, [r3, #4]
  }
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800e380:	b480      	push	{r7}
 800e382:	b091      	sub	sp, #68	; 0x44
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e38e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e396:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e39c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	2b22      	cmp	r3, #34	; 0x22
 800e3a8:	f040 8169 	bne.w	800e67e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10f      	bne.n	800e3d4 <I2C_Master_ADDR+0x54>
 800e3b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e3b8:	2b40      	cmp	r3, #64	; 0x40
 800e3ba:	d10b      	bne.n	800e3d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3bc:	2300      	movs	r3, #0
 800e3be:	633b      	str	r3, [r7, #48]	; 0x30
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	695b      	ldr	r3, [r3, #20]
 800e3c6:	633b      	str	r3, [r7, #48]	; 0x30
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	633b      	str	r3, [r7, #48]	; 0x30
 800e3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d2:	e160      	b.n	800e696 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d11d      	bne.n	800e418 <I2C_Master_ADDR+0x98>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e3e4:	d118      	bne.n	800e418 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	695b      	ldr	r3, [r3, #20]
 800e3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	699b      	ldr	r3, [r3, #24]
 800e3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e40a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	651a      	str	r2, [r3, #80]	; 0x50
 800e416:	e13e      	b.n	800e696 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d113      	bne.n	800e44a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e422:	2300      	movs	r3, #0
 800e424:	62bb      	str	r3, [r7, #40]	; 0x28
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	695b      	ldr	r3, [r3, #20]
 800e42c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	699b      	ldr	r3, [r3, #24]
 800e434:	62bb      	str	r3, [r7, #40]	; 0x28
 800e436:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e446:	601a      	str	r2, [r3, #0]
 800e448:	e115      	b.n	800e676 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e44e:	b29b      	uxth	r3, r3
 800e450:	2b01      	cmp	r3, #1
 800e452:	f040 808a 	bne.w	800e56a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800e456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e45c:	d137      	bne.n	800e4ce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e46c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e47c:	d113      	bne.n	800e4a6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e48c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e48e:	2300      	movs	r3, #0
 800e490:	627b      	str	r3, [r7, #36]	; 0x24
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	695b      	ldr	r3, [r3, #20]
 800e498:	627b      	str	r3, [r7, #36]	; 0x24
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	699b      	ldr	r3, [r3, #24]
 800e4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a4:	e0e7      	b.n	800e676 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	623b      	str	r3, [r7, #32]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	695b      	ldr	r3, [r3, #20]
 800e4b0:	623b      	str	r3, [r7, #32]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	623b      	str	r3, [r7, #32]
 800e4ba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	e0d3      	b.n	800e676 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d0:	2b08      	cmp	r3, #8
 800e4d2:	d02e      	beq.n	800e532 <I2C_Master_ADDR+0x1b2>
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	2b20      	cmp	r3, #32
 800e4d8:	d02b      	beq.n	800e532 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800e4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4dc:	2b12      	cmp	r3, #18
 800e4de:	d102      	bne.n	800e4e6 <I2C_Master_ADDR+0x166>
 800e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d125      	bne.n	800e532 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	2b04      	cmp	r3, #4
 800e4ea:	d00e      	beq.n	800e50a <I2C_Master_ADDR+0x18a>
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d00b      	beq.n	800e50a <I2C_Master_ADDR+0x18a>
 800e4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f4:	2b10      	cmp	r3, #16
 800e4f6:	d008      	beq.n	800e50a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e506:	601a      	str	r2, [r3, #0]
 800e508:	e007      	b.n	800e51a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e518:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e51a:	2300      	movs	r3, #0
 800e51c:	61fb      	str	r3, [r7, #28]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	695b      	ldr	r3, [r3, #20]
 800e524:	61fb      	str	r3, [r7, #28]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	699b      	ldr	r3, [r3, #24]
 800e52c:	61fb      	str	r3, [r7, #28]
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	e0a1      	b.n	800e676 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e540:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e542:	2300      	movs	r3, #0
 800e544:	61bb      	str	r3, [r7, #24]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	695b      	ldr	r3, [r3, #20]
 800e54c:	61bb      	str	r3, [r7, #24]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	699b      	ldr	r3, [r3, #24]
 800e554:	61bb      	str	r3, [r7, #24]
 800e556:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e566:	601a      	str	r2, [r3, #0]
 800e568:	e085      	b.n	800e676 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e56e:	b29b      	uxth	r3, r3
 800e570:	2b02      	cmp	r3, #2
 800e572:	d14d      	bne.n	800e610 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	2b04      	cmp	r3, #4
 800e578:	d016      	beq.n	800e5a8 <I2C_Master_ADDR+0x228>
 800e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d013      	beq.n	800e5a8 <I2C_Master_ADDR+0x228>
 800e580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e582:	2b10      	cmp	r3, #16
 800e584:	d010      	beq.n	800e5a8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e594:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	e007      	b.n	800e5b8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e5b6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5c6:	d117      	bne.n	800e5f8 <I2C_Master_ADDR+0x278>
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e5ce:	d00b      	beq.n	800e5e8 <I2C_Master_ADDR+0x268>
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d008      	beq.n	800e5e8 <I2C_Master_ADDR+0x268>
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	2b08      	cmp	r3, #8
 800e5da:	d005      	beq.n	800e5e8 <I2C_Master_ADDR+0x268>
 800e5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5de:	2b10      	cmp	r3, #16
 800e5e0:	d002      	beq.n	800e5e8 <I2C_Master_ADDR+0x268>
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	2b20      	cmp	r3, #32
 800e5e6:	d107      	bne.n	800e5f8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	685a      	ldr	r2, [r3, #4]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e5f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	695b      	ldr	r3, [r3, #20]
 800e602:	617b      	str	r3, [r7, #20]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	617b      	str	r3, [r7, #20]
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	e032      	b.n	800e676 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e61e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e62a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e62e:	d117      	bne.n	800e660 <I2C_Master_ADDR+0x2e0>
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e636:	d00b      	beq.n	800e650 <I2C_Master_ADDR+0x2d0>
 800e638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d008      	beq.n	800e650 <I2C_Master_ADDR+0x2d0>
 800e63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e640:	2b08      	cmp	r3, #8
 800e642:	d005      	beq.n	800e650 <I2C_Master_ADDR+0x2d0>
 800e644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e646:	2b10      	cmp	r3, #16
 800e648:	d002      	beq.n	800e650 <I2C_Master_ADDR+0x2d0>
 800e64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64c:	2b20      	cmp	r3, #32
 800e64e:	d107      	bne.n	800e660 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	685a      	ldr	r2, [r3, #4]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e65e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e660:	2300      	movs	r3, #0
 800e662:	613b      	str	r3, [r7, #16]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	695b      	ldr	r3, [r3, #20]
 800e66a:	613b      	str	r3, [r7, #16]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	699b      	ldr	r3, [r3, #24]
 800e672:	613b      	str	r3, [r7, #16]
 800e674:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800e67c:	e00b      	b.n	800e696 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e67e:	2300      	movs	r3, #0
 800e680:	60fb      	str	r3, [r7, #12]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	695b      	ldr	r3, [r3, #20]
 800e688:	60fb      	str	r3, [r7, #12]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	60fb      	str	r3, [r7, #12]
 800e692:	68fb      	ldr	r3, [r7, #12]
}
 800e694:	e7ff      	b.n	800e696 <I2C_Master_ADDR+0x316>
 800e696:	bf00      	nop
 800e698:	3744      	adds	r7, #68	; 0x44
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d02b      	beq.n	800e714 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c0:	781a      	ldrb	r2, [r3, #0]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6cc:	1c5a      	adds	r2, r3, #1
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d114      	bne.n	800e714 <I2C_SlaveTransmit_TXE+0x72>
 800e6ea:	7bfb      	ldrb	r3, [r7, #15]
 800e6ec:	2b29      	cmp	r3, #41	; 0x29
 800e6ee:	d111      	bne.n	800e714 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2221      	movs	r2, #33	; 0x21
 800e704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2228      	movs	r2, #40	; 0x28
 800e70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7ff f9f7 	bl	800db02 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e714:	bf00      	nop
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e728:	b29b      	uxth	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d011      	beq.n	800e752 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e732:	781a      	ldrb	r2, [r3, #0]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73e:	1c5a      	adds	r2, r3, #1
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e748:	b29b      	uxth	r3, r3
 800e74a:	3b01      	subs	r3, #1
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e752:	bf00      	nop
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b084      	sub	sp, #16
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e76c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e772:	b29b      	uxth	r3, r3
 800e774:	2b00      	cmp	r3, #0
 800e776:	d02c      	beq.n	800e7d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	691a      	ldr	r2, [r3, #16]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e782:	b2d2      	uxtb	r2, r2
 800e784:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e794:	b29b      	uxth	r3, r3
 800e796:	3b01      	subs	r3, #1
 800e798:	b29a      	uxth	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d114      	bne.n	800e7d2 <I2C_SlaveReceive_RXNE+0x74>
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e7ac:	d111      	bne.n	800e7d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	685a      	ldr	r2, [r3, #4]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2222      	movs	r2, #34	; 0x22
 800e7c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2228      	movs	r2, #40	; 0x28
 800e7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7fc f971 	bl	800aab4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e7d2:	bf00      	nop
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e7da:	b480      	push	{r7}
 800e7dc:	b083      	sub	sp, #12
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d012      	beq.n	800e812 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	691a      	ldr	r2, [r3, #16]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f6:	b2d2      	uxtb	r2, r2
 800e7f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e808:	b29b      	uxth	r3, r3
 800e80a:	3b01      	subs	r3, #1
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e812:	bf00      	nop
 800e814:	370c      	adds	r7, #12
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr

0800e81e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b084      	sub	sp, #16
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
 800e826:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800e828:	2300      	movs	r3, #0
 800e82a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e832:	b2db      	uxtb	r3, r3
 800e834:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e838:	2b28      	cmp	r3, #40	; 0x28
 800e83a:	d125      	bne.n	800e888 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685a      	ldr	r2, [r3, #4]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e84a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	f003 0304 	and.w	r3, r3, #4
 800e852:	2b00      	cmp	r3, #0
 800e854:	d101      	bne.n	800e85a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800e856:	2301      	movs	r3, #1
 800e858:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e860:	2b00      	cmp	r3, #0
 800e862:	d103      	bne.n	800e86c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	81bb      	strh	r3, [r7, #12]
 800e86a:	e002      	b.n	800e872 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800e87a:	89ba      	ldrh	r2, [r7, #12]
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7fc f8f3 	bl	800aa6c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e886:	e00e      	b.n	800e8a6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e888:	2300      	movs	r3, #0
 800e88a:	60bb      	str	r3, [r7, #8]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	60bb      	str	r3, [r7, #8]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	60bb      	str	r3, [r7, #8]
 800e89c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
	...

0800e8b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	685a      	ldr	r2, [r3, #4]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e8ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	60bb      	str	r3, [r7, #8]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	695b      	ldr	r3, [r3, #20]
 800e8da:	60bb      	str	r3, [r7, #8]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f042 0201 	orr.w	r2, r2, #1
 800e8ea:	601a      	str	r2, [r3, #0]
 800e8ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e8fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e90c:	d172      	bne.n	800e9f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
 800e910:	2b22      	cmp	r3, #34	; 0x22
 800e912:	d002      	beq.n	800e91a <I2C_Slave_STOPF+0x6a>
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	2b2a      	cmp	r3, #42	; 0x2a
 800e918:	d135      	bne.n	800e986 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	b29a      	uxth	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d005      	beq.n	800e93e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e936:	f043 0204 	orr.w	r2, r3, #4
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	685a      	ldr	r2, [r3, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e94c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e952:	4618      	mov	r0, r3
 800e954:	f7fe f960 	bl	800cc18 <HAL_DMA_GetState>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d049      	beq.n	800e9f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e962:	4a69      	ldr	r2, [pc, #420]	; (800eb08 <I2C_Slave_STOPF+0x258>)
 800e964:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fd ffa8 	bl	800c8c0 <HAL_DMA_Abort_IT>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d03d      	beq.n	800e9f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e980:	4610      	mov	r0, r2
 800e982:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e984:	e035      	b.n	800e9f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	b29a      	uxth	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e998:	b29b      	uxth	r3, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d005      	beq.n	800e9aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9a2:	f043 0204 	orr.w	r2, r3, #4
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e9b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fe f92a 	bl	800cc18 <HAL_DMA_GetState>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d014      	beq.n	800e9f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ce:	4a4e      	ldr	r2, [pc, #312]	; (800eb08 <I2C_Slave_STOPF+0x258>)
 800e9d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fd ff72 	bl	800c8c0 <HAL_DMA_Abort_IT>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d008      	beq.n	800e9f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e9ec:	4610      	mov	r0, r2
 800e9ee:	4798      	blx	r3
 800e9f0:	e000      	b.n	800e9f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e9f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d03e      	beq.n	800ea7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	695b      	ldr	r3, [r3, #20]
 800ea04:	f003 0304 	and.w	r3, r3, #4
 800ea08:	2b04      	cmp	r3, #4
 800ea0a:	d112      	bne.n	800ea32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	691a      	ldr	r2, [r3, #16]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea16:	b2d2      	uxtb	r2, r2
 800ea18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea1e:	1c5a      	adds	r2, r3, #1
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	695b      	ldr	r3, [r3, #20]
 800ea38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea3c:	2b40      	cmp	r3, #64	; 0x40
 800ea3e:	d112      	bne.n	800ea66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	691a      	ldr	r2, [r3, #16]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea4a:	b2d2      	uxtb	r2, r2
 800ea4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea52:	1c5a      	adds	r2, r3, #1
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d005      	beq.n	800ea7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea74:	f043 0204 	orr.w	r2, r3, #4
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d003      	beq.n	800ea8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f8b7 	bl	800ebf8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800ea8a:	e039      	b.n	800eb00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
 800ea8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ea90:	d109      	bne.n	800eaa6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2228      	movs	r2, #40	; 0x28
 800ea9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f7fc f807 	bl	800aab4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	2b28      	cmp	r3, #40	; 0x28
 800eab0:	d111      	bne.n	800ead6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4a15      	ldr	r2, [pc, #84]	; (800eb0c <I2C_Slave_STOPF+0x25c>)
 800eab6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2220      	movs	r2, #32
 800eac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7fb ffc1 	bl	800aa56 <HAL_I2C_ListenCpltCallback>
}
 800ead4:	e014      	b.n	800eb00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eada:	2b22      	cmp	r3, #34	; 0x22
 800eadc:	d002      	beq.n	800eae4 <I2C_Slave_STOPF+0x234>
 800eade:	7bfb      	ldrb	r3, [r7, #15]
 800eae0:	2b22      	cmp	r3, #34	; 0x22
 800eae2:	d10d      	bne.n	800eb00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2200      	movs	r2, #0
 800eae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2220      	movs	r2, #32
 800eaee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7fb ffda 	bl	800aab4 <HAL_I2C_SlaveRxCpltCallback>
}
 800eb00:	bf00      	nop
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	0800ef61 	.word	0x0800ef61
 800eb0c:	ffff0000 	.word	0xffff0000

0800eb10 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb1e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb24:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	2b08      	cmp	r3, #8
 800eb2a:	d002      	beq.n	800eb32 <I2C_Slave_AF+0x22>
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	2b20      	cmp	r3, #32
 800eb30:	d129      	bne.n	800eb86 <I2C_Slave_AF+0x76>
 800eb32:	7bfb      	ldrb	r3, [r7, #15]
 800eb34:	2b28      	cmp	r3, #40	; 0x28
 800eb36:	d126      	bne.n	800eb86 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a2e      	ldr	r2, [pc, #184]	; (800ebf4 <I2C_Slave_AF+0xe4>)
 800eb3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	685a      	ldr	r2, [r3, #4]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800eb4c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800eb56:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb66:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2220      	movs	r2, #32
 800eb72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f7fb ff69 	bl	800aa56 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800eb84:	e031      	b.n	800ebea <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800eb86:	7bfb      	ldrb	r3, [r7, #15]
 800eb88:	2b21      	cmp	r3, #33	; 0x21
 800eb8a:	d129      	bne.n	800ebe0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4a19      	ldr	r2, [pc, #100]	; (800ebf4 <I2C_Slave_AF+0xe4>)
 800eb90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2221      	movs	r2, #33	; 0x21
 800eb96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2220      	movs	r2, #32
 800eb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	685a      	ldr	r2, [r3, #4]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ebb6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ebc0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebd0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7fe fbd2 	bl	800d37c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7fe ff92 	bl	800db02 <HAL_I2C_SlaveTxCpltCallback>
}
 800ebde:	e004      	b.n	800ebea <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ebe8:	615a      	str	r2, [r3, #20]
}
 800ebea:	bf00      	nop
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	ffff0000 	.word	0xffff0000

0800ebf8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ec10:	7bbb      	ldrb	r3, [r7, #14]
 800ec12:	2b10      	cmp	r3, #16
 800ec14:	d002      	beq.n	800ec1c <I2C_ITError+0x24>
 800ec16:	7bbb      	ldrb	r3, [r7, #14]
 800ec18:	2b40      	cmp	r3, #64	; 0x40
 800ec1a:	d10a      	bne.n	800ec32 <I2C_ITError+0x3a>
 800ec1c:	7bfb      	ldrb	r3, [r7, #15]
 800ec1e:	2b22      	cmp	r3, #34	; 0x22
 800ec20:	d107      	bne.n	800ec32 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
 800ec34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ec38:	2b28      	cmp	r3, #40	; 0x28
 800ec3a:	d107      	bne.n	800ec4c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2228      	movs	r2, #40	; 0x28
 800ec46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ec4a:	e015      	b.n	800ec78 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec5a:	d00a      	beq.n	800ec72 <I2C_ITError+0x7a>
 800ec5c:	7bfb      	ldrb	r3, [r7, #15]
 800ec5e:	2b60      	cmp	r3, #96	; 0x60
 800ec60:	d007      	beq.n	800ec72 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2220      	movs	r2, #32
 800ec66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec86:	d162      	bne.n	800ed4e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	685a      	ldr	r2, [r3, #4]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d020      	beq.n	800ece8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecaa:	4a6a      	ldr	r2, [pc, #424]	; (800ee54 <I2C_ITError+0x25c>)
 800ecac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fd fe04 	bl	800c8c0 <HAL_DMA_Abort_IT>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f000 8089 	beq.w	800edd2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f022 0201 	bic.w	r2, r2, #1
 800ecce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2220      	movs	r2, #32
 800ecd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ece2:	4610      	mov	r0, r2
 800ece4:	4798      	blx	r3
 800ece6:	e074      	b.n	800edd2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecec:	4a59      	ldr	r2, [pc, #356]	; (800ee54 <I2C_ITError+0x25c>)
 800ecee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7fd fde3 	bl	800c8c0 <HAL_DMA_Abort_IT>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d068      	beq.n	800edd2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	695b      	ldr	r3, [r3, #20]
 800ed06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0a:	2b40      	cmp	r3, #64	; 0x40
 800ed0c:	d10b      	bne.n	800ed26 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	691a      	ldr	r2, [r3, #16]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed18:	b2d2      	uxtb	r2, r2
 800ed1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed20:	1c5a      	adds	r2, r3, #1
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f022 0201 	bic.w	r2, r2, #1
 800ed34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2220      	movs	r2, #32
 800ed3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ed48:	4610      	mov	r0, r2
 800ed4a:	4798      	blx	r3
 800ed4c:	e041      	b.n	800edd2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	2b60      	cmp	r3, #96	; 0x60
 800ed58:	d125      	bne.n	800eda6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2220      	movs	r2, #32
 800ed5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed72:	2b40      	cmp	r3, #64	; 0x40
 800ed74:	d10b      	bne.n	800ed8e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	691a      	ldr	r2, [r3, #16]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	b2d2      	uxtb	r2, r2
 800ed82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	1c5a      	adds	r2, r3, #1
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f022 0201 	bic.w	r2, r2, #1
 800ed9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7fe fecd 	bl	800db3e <HAL_I2C_AbortCpltCallback>
 800eda4:	e015      	b.n	800edd2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edb0:	2b40      	cmp	r3, #64	; 0x40
 800edb2:	d10b      	bne.n	800edcc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	691a      	ldr	r2, [r3, #16]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edbe:	b2d2      	uxtb	r2, r2
 800edc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc6:	1c5a      	adds	r2, r3, #1
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7fb fe9b 	bl	800ab08 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	f003 0301 	and.w	r3, r3, #1
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10e      	bne.n	800ee00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d109      	bne.n	800ee00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d104      	bne.n	800ee00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d007      	beq.n	800ee10 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	685a      	ldr	r2, [r3, #4]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee1c:	f003 0304 	and.w	r3, r3, #4
 800ee20:	2b04      	cmp	r3, #4
 800ee22:	d113      	bne.n	800ee4c <I2C_ITError+0x254>
 800ee24:	7bfb      	ldrb	r3, [r7, #15]
 800ee26:	2b28      	cmp	r3, #40	; 0x28
 800ee28:	d110      	bne.n	800ee4c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a0a      	ldr	r2, [pc, #40]	; (800ee58 <I2C_ITError+0x260>)
 800ee2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2220      	movs	r2, #32
 800ee3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f7fb fe05 	bl	800aa56 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ee4c:	bf00      	nop
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	0800ef61 	.word	0x0800ef61
 800ee58:	ffff0000 	.word	0xffff0000

0800ee5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b088      	sub	sp, #32
 800ee60:	af02      	add	r7, sp, #8
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	607a      	str	r2, [r7, #4]
 800ee66:	603b      	str	r3, [r7, #0]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b08      	cmp	r3, #8
 800ee76:	d006      	beq.n	800ee86 <I2C_MasterRequestWrite+0x2a>
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d003      	beq.n	800ee86 <I2C_MasterRequestWrite+0x2a>
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ee84:	d108      	bne.n	800ee98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	e00b      	b.n	800eeb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee9c:	2b12      	cmp	r3, #18
 800ee9e:	d107      	bne.n	800eeb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eeae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	9300      	str	r3, [sp, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 f8f7 	bl	800f0b0 <I2C_WaitOnFlagUntilTimeout>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00d      	beq.n	800eee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eed6:	d103      	bne.n	800eee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800eee0:	2303      	movs	r3, #3
 800eee2:	e035      	b.n	800ef50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eeec:	d108      	bne.n	800ef00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800eeee:	897b      	ldrh	r3, [r7, #10]
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	461a      	mov	r2, r3
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800eefc:	611a      	str	r2, [r3, #16]
 800eefe:	e01b      	b.n	800ef38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ef00:	897b      	ldrh	r3, [r7, #10]
 800ef02:	11db      	asrs	r3, r3, #7
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	f003 0306 	and.w	r3, r3, #6
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	f063 030f 	orn	r3, r3, #15
 800ef10:	b2da      	uxtb	r2, r3
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	490e      	ldr	r1, [pc, #56]	; (800ef58 <I2C_MasterRequestWrite+0xfc>)
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f000 f940 	bl	800f1a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d001      	beq.n	800ef2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	e010      	b.n	800ef50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ef2e:	897b      	ldrh	r3, [r7, #10]
 800ef30:	b2da      	uxtb	r2, r3
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	4907      	ldr	r1, [pc, #28]	; (800ef5c <I2C_MasterRequestWrite+0x100>)
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	f000 f930 	bl	800f1a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e000      	b.n	800ef50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3718      	adds	r7, #24
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	00010008 	.word	0x00010008
 800ef5c:	00010002 	.word	0x00010002

0800ef60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ef7a:	4b4b      	ldr	r3, [pc, #300]	; (800f0a8 <I2C_DMAAbort+0x148>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	08db      	lsrs	r3, r3, #3
 800ef80:	4a4a      	ldr	r2, [pc, #296]	; (800f0ac <I2C_DMAAbort+0x14c>)
 800ef82:	fba2 2303 	umull	r2, r3, r2, r3
 800ef86:	0a1a      	lsrs	r2, r3, #8
 800ef88:	4613      	mov	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4413      	add	r3, r2
 800ef8e:	00da      	lsls	r2, r3, #3
 800ef90:	1ad3      	subs	r3, r2, r3
 800ef92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d106      	bne.n	800efa8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef9e:	f043 0220 	orr.w	r2, r3, #32
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800efa6:	e00a      	b.n	800efbe <I2C_DMAAbort+0x5e>
    }
    count--;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	3b01      	subs	r3, #1
 800efac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800efb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efbc:	d0ea      	beq.n	800ef94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d003      	beq.n	800efce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efca:	2200      	movs	r2, #0
 800efcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d003      	beq.n	800efde <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efda:	2200      	movs	r2, #0
 800efdc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	2200      	movs	r2, #0
 800eff2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d003      	beq.n	800f004 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f000:	2200      	movs	r2, #0
 800f002:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d003      	beq.n	800f014 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f010:	2200      	movs	r2, #0
 800f012:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f022 0201 	bic.w	r2, r2, #1
 800f022:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	2b60      	cmp	r3, #96	; 0x60
 800f02e:	d10e      	bne.n	800f04e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	2220      	movs	r2, #32
 800f034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	2200      	movs	r2, #0
 800f03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2200      	movs	r2, #0
 800f044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f046:	6978      	ldr	r0, [r7, #20]
 800f048:	f7fe fd79 	bl	800db3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f04c:	e027      	b.n	800f09e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f04e:	7cfb      	ldrb	r3, [r7, #19]
 800f050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f054:	2b28      	cmp	r3, #40	; 0x28
 800f056:	d117      	bne.n	800f088 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f042 0201 	orr.w	r2, r2, #1
 800f066:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f076:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	2200      	movs	r2, #0
 800f07c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	2228      	movs	r2, #40	; 0x28
 800f082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f086:	e007      	b.n	800f098 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2220      	movs	r2, #32
 800f08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	2200      	movs	r2, #0
 800f094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800f098:	6978      	ldr	r0, [r7, #20]
 800f09a:	f7fb fd35 	bl	800ab08 <HAL_I2C_ErrorCallback>
}
 800f09e:	bf00      	nop
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20000038 	.word	0x20000038
 800f0ac:	14f8b589 	.word	0x14f8b589

0800f0b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	603b      	str	r3, [r7, #0]
 800f0bc:	4613      	mov	r3, r2
 800f0be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f0c0:	e048      	b.n	800f154 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0c8:	d044      	beq.n	800f154 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0ca:	f7fc febf 	bl	800be4c <HAL_GetTick>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	683a      	ldr	r2, [r7, #0]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d302      	bcc.n	800f0e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d139      	bne.n	800f154 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	0c1b      	lsrs	r3, r3, #16
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d10d      	bne.n	800f106 <I2C_WaitOnFlagUntilTimeout+0x56>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	43da      	mvns	r2, r3
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	bf0c      	ite	eq
 800f0fc:	2301      	moveq	r3, #1
 800f0fe:	2300      	movne	r3, #0
 800f100:	b2db      	uxtb	r3, r3
 800f102:	461a      	mov	r2, r3
 800f104:	e00c      	b.n	800f120 <I2C_WaitOnFlagUntilTimeout+0x70>
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	43da      	mvns	r2, r3
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	4013      	ands	r3, r2
 800f112:	b29b      	uxth	r3, r3
 800f114:	2b00      	cmp	r3, #0
 800f116:	bf0c      	ite	eq
 800f118:	2301      	moveq	r3, #1
 800f11a:	2300      	movne	r3, #0
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	461a      	mov	r2, r3
 800f120:	79fb      	ldrb	r3, [r7, #7]
 800f122:	429a      	cmp	r2, r3
 800f124:	d116      	bne.n	800f154 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2200      	movs	r2, #0
 800f12a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2220      	movs	r2, #32
 800f130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2200      	movs	r2, #0
 800f138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f140:	f043 0220 	orr.w	r2, r3, #32
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f150:	2301      	movs	r3, #1
 800f152:	e023      	b.n	800f19c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	0c1b      	lsrs	r3, r3, #16
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d10d      	bne.n	800f17a <I2C_WaitOnFlagUntilTimeout+0xca>
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	695b      	ldr	r3, [r3, #20]
 800f164:	43da      	mvns	r2, r3
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	4013      	ands	r3, r2
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	bf0c      	ite	eq
 800f170:	2301      	moveq	r3, #1
 800f172:	2300      	movne	r3, #0
 800f174:	b2db      	uxtb	r3, r3
 800f176:	461a      	mov	r2, r3
 800f178:	e00c      	b.n	800f194 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	699b      	ldr	r3, [r3, #24]
 800f180:	43da      	mvns	r2, r3
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	4013      	ands	r3, r2
 800f186:	b29b      	uxth	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	bf0c      	ite	eq
 800f18c:	2301      	moveq	r3, #1
 800f18e:	2300      	movne	r3, #0
 800f190:	b2db      	uxtb	r3, r3
 800f192:	461a      	mov	r2, r3
 800f194:	79fb      	ldrb	r3, [r7, #7]
 800f196:	429a      	cmp	r2, r3
 800f198:	d093      	beq.n	800f0c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f1b2:	e071      	b.n	800f298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1c2:	d123      	bne.n	800f20c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f1d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f1dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2220      	movs	r2, #32
 800f1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f8:	f043 0204 	orr.w	r2, r3, #4
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f208:	2301      	movs	r3, #1
 800f20a:	e067      	b.n	800f2dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f212:	d041      	beq.n	800f298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f214:	f7fc fe1a 	bl	800be4c <HAL_GetTick>
 800f218:	4602      	mov	r2, r0
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	1ad3      	subs	r3, r2, r3
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	429a      	cmp	r2, r3
 800f222:	d302      	bcc.n	800f22a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d136      	bne.n	800f298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	0c1b      	lsrs	r3, r3, #16
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	2b01      	cmp	r3, #1
 800f232:	d10c      	bne.n	800f24e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	695b      	ldr	r3, [r3, #20]
 800f23a:	43da      	mvns	r2, r3
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	4013      	ands	r3, r2
 800f240:	b29b      	uxth	r3, r3
 800f242:	2b00      	cmp	r3, #0
 800f244:	bf14      	ite	ne
 800f246:	2301      	movne	r3, #1
 800f248:	2300      	moveq	r3, #0
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	e00b      	b.n	800f266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	699b      	ldr	r3, [r3, #24]
 800f254:	43da      	mvns	r2, r3
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	4013      	ands	r3, r2
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bf14      	ite	ne
 800f260:	2301      	movne	r3, #1
 800f262:	2300      	moveq	r3, #0
 800f264:	b2db      	uxtb	r3, r3
 800f266:	2b00      	cmp	r3, #0
 800f268:	d016      	beq.n	800f298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2200      	movs	r2, #0
 800f26e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2220      	movs	r2, #32
 800f274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2200      	movs	r2, #0
 800f27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f284:	f043 0220 	orr.w	r2, r3, #32
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f294:	2301      	movs	r3, #1
 800f296:	e021      	b.n	800f2dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	0c1b      	lsrs	r3, r3, #16
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d10c      	bne.n	800f2bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	695b      	ldr	r3, [r3, #20]
 800f2a8:	43da      	mvns	r2, r3
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	bf14      	ite	ne
 800f2b4:	2301      	movne	r3, #1
 800f2b6:	2300      	moveq	r3, #0
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	e00b      	b.n	800f2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	699b      	ldr	r3, [r3, #24]
 800f2c2:	43da      	mvns	r2, r3
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	4013      	ands	r3, r2
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	bf14      	ite	ne
 800f2ce:	2301      	movne	r3, #1
 800f2d0:	2300      	moveq	r3, #0
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f47f af6d 	bne.w	800f1b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800f2da:	2300      	movs	r3, #0
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3710      	adds	r7, #16
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f2f0:	e034      	b.n	800f35c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f000 f8b8 	bl	800f468 <I2C_IsAcknowledgeFailed>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d001      	beq.n	800f302 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	e034      	b.n	800f36c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f308:	d028      	beq.n	800f35c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f30a:	f7fc fd9f 	bl	800be4c <HAL_GetTick>
 800f30e:	4602      	mov	r2, r0
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	1ad3      	subs	r3, r2, r3
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	429a      	cmp	r2, r3
 800f318:	d302      	bcc.n	800f320 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d11d      	bne.n	800f35c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	695b      	ldr	r3, [r3, #20]
 800f326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f32a:	2b80      	cmp	r3, #128	; 0x80
 800f32c:	d016      	beq.n	800f35c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2200      	movs	r2, #0
 800f332:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2220      	movs	r2, #32
 800f338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2200      	movs	r2, #0
 800f340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f348:	f043 0220 	orr.w	r2, r3, #32
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2200      	movs	r2, #0
 800f354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	e007      	b.n	800f36c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	695b      	ldr	r3, [r3, #20]
 800f362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f366:	2b80      	cmp	r3, #128	; 0x80
 800f368:	d1c3      	bne.n	800f2f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f380:	e034      	b.n	800f3ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f000 f870 	bl	800f468 <I2C_IsAcknowledgeFailed>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	e034      	b.n	800f3fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f398:	d028      	beq.n	800f3ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f39a:	f7fc fd57 	bl	800be4c <HAL_GetTick>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	1ad3      	subs	r3, r2, r3
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d302      	bcc.n	800f3b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d11d      	bne.n	800f3ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	695b      	ldr	r3, [r3, #20]
 800f3b6:	f003 0304 	and.w	r3, r3, #4
 800f3ba:	2b04      	cmp	r3, #4
 800f3bc:	d016      	beq.n	800f3ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2220      	movs	r2, #32
 800f3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d8:	f043 0220 	orr.w	r2, r3, #32
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e007      	b.n	800f3fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	f003 0304 	and.w	r3, r3, #4
 800f3f6:	2b04      	cmp	r3, #4
 800f3f8:	d1c3      	bne.n	800f382 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f3fa:	2300      	movs	r3, #0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800f404:	b480      	push	{r7}
 800f406:	b085      	sub	sp, #20
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f40c:	2300      	movs	r3, #0
 800f40e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800f410:	4b13      	ldr	r3, [pc, #76]	; (800f460 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	08db      	lsrs	r3, r3, #3
 800f416:	4a13      	ldr	r2, [pc, #76]	; (800f464 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800f418:	fba2 2303 	umull	r2, r3, r2, r3
 800f41c:	0a1a      	lsrs	r2, r3, #8
 800f41e:	4613      	mov	r3, r2
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	4413      	add	r3, r2
 800f424:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	3b01      	subs	r3, #1
 800f42a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d107      	bne.n	800f442 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f436:	f043 0220 	orr.w	r2, r3, #32
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e008      	b.n	800f454 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f44c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f450:	d0e9      	beq.n	800f426 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800f452:	2300      	movs	r3, #0
}
 800f454:	4618      	mov	r0, r3
 800f456:	3714      	adds	r7, #20
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr
 800f460:	20000038 	.word	0x20000038
 800f464:	14f8b589 	.word	0x14f8b589

0800f468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f47a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f47e:	d11b      	bne.n	800f4b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2200      	movs	r2, #0
 800f48e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2220      	movs	r2, #32
 800f494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a4:	f043 0204 	orr.w	r2, r3, #4
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	e000      	b.n	800f4ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	370c      	adds	r7, #12
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr

0800f4c6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800f4c6:	b480      	push	{r7}
 800f4c8:	b083      	sub	sp, #12
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800f4d6:	d103      	bne.n	800f4e0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800f4de:	e007      	b.n	800f4f0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f4e8:	d102      	bne.n	800f4f0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2208      	movs	r2, #8
 800f4ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800f502:	2300      	movs	r3, #0
 800f504:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800f506:	2300      	movs	r3, #0
 800f508:	603b      	str	r3, [r7, #0]
 800f50a:	4b20      	ldr	r3, [pc, #128]	; (800f58c <HAL_PWREx_EnableOverDrive+0x90>)
 800f50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50e:	4a1f      	ldr	r2, [pc, #124]	; (800f58c <HAL_PWREx_EnableOverDrive+0x90>)
 800f510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f514:	6413      	str	r3, [r2, #64]	; 0x40
 800f516:	4b1d      	ldr	r3, [pc, #116]	; (800f58c <HAL_PWREx_EnableOverDrive+0x90>)
 800f518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f51a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800f522:	4b1b      	ldr	r3, [pc, #108]	; (800f590 <HAL_PWREx_EnableOverDrive+0x94>)
 800f524:	2201      	movs	r2, #1
 800f526:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f528:	f7fc fc90 	bl	800be4c <HAL_GetTick>
 800f52c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800f52e:	e009      	b.n	800f544 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800f530:	f7fc fc8c 	bl	800be4c <HAL_GetTick>
 800f534:	4602      	mov	r2, r0
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	1ad3      	subs	r3, r2, r3
 800f53a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f53e:	d901      	bls.n	800f544 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800f540:	2303      	movs	r3, #3
 800f542:	e01f      	b.n	800f584 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800f544:	4b13      	ldr	r3, [pc, #76]	; (800f594 <HAL_PWREx_EnableOverDrive+0x98>)
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f54c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f550:	d1ee      	bne.n	800f530 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800f552:	4b11      	ldr	r3, [pc, #68]	; (800f598 <HAL_PWREx_EnableOverDrive+0x9c>)
 800f554:	2201      	movs	r2, #1
 800f556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f558:	f7fc fc78 	bl	800be4c <HAL_GetTick>
 800f55c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800f55e:	e009      	b.n	800f574 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800f560:	f7fc fc74 	bl	800be4c <HAL_GetTick>
 800f564:	4602      	mov	r2, r0
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	1ad3      	subs	r3, r2, r3
 800f56a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f56e:	d901      	bls.n	800f574 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800f570:	2303      	movs	r3, #3
 800f572:	e007      	b.n	800f584 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800f574:	4b07      	ldr	r3, [pc, #28]	; (800f594 <HAL_PWREx_EnableOverDrive+0x98>)
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f57c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f580:	d1ee      	bne.n	800f560 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800f582:	2300      	movs	r3, #0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	40023800 	.word	0x40023800
 800f590:	420e0040 	.word	0x420e0040
 800f594:	40007000 	.word	0x40007000
 800f598:	420e0044 	.word	0x420e0044

0800f59c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d101      	bne.n	800f5b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e0cc      	b.n	800f74a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f5b0:	4b68      	ldr	r3, [pc, #416]	; (800f754 <HAL_RCC_ClockConfig+0x1b8>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f003 030f 	and.w	r3, r3, #15
 800f5b8:	683a      	ldr	r2, [r7, #0]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d90c      	bls.n	800f5d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f5be:	4b65      	ldr	r3, [pc, #404]	; (800f754 <HAL_RCC_ClockConfig+0x1b8>)
 800f5c0:	683a      	ldr	r2, [r7, #0]
 800f5c2:	b2d2      	uxtb	r2, r2
 800f5c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f5c6:	4b63      	ldr	r3, [pc, #396]	; (800f754 <HAL_RCC_ClockConfig+0x1b8>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f003 030f 	and.w	r3, r3, #15
 800f5ce:	683a      	ldr	r2, [r7, #0]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d001      	beq.n	800f5d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e0b8      	b.n	800f74a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f003 0302 	and.w	r3, r3, #2
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d020      	beq.n	800f626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f003 0304 	and.w	r3, r3, #4
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d005      	beq.n	800f5fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f5f0:	4b59      	ldr	r3, [pc, #356]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	4a58      	ldr	r2, [pc, #352]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f5f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f5fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f003 0308 	and.w	r3, r3, #8
 800f604:	2b00      	cmp	r3, #0
 800f606:	d005      	beq.n	800f614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f608:	4b53      	ldr	r3, [pc, #332]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	4a52      	ldr	r2, [pc, #328]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f60e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f614:	4b50      	ldr	r3, [pc, #320]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	494d      	ldr	r1, [pc, #308]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f622:	4313      	orrs	r3, r2
 800f624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d044      	beq.n	800f6bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d107      	bne.n	800f64a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f63a:	4b47      	ldr	r3, [pc, #284]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f642:	2b00      	cmp	r3, #0
 800f644:	d119      	bne.n	800f67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f646:	2301      	movs	r3, #1
 800f648:	e07f      	b.n	800f74a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	2b02      	cmp	r3, #2
 800f650:	d003      	beq.n	800f65a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f656:	2b03      	cmp	r3, #3
 800f658:	d107      	bne.n	800f66a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f65a:	4b3f      	ldr	r3, [pc, #252]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f662:	2b00      	cmp	r3, #0
 800f664:	d109      	bne.n	800f67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	e06f      	b.n	800f74a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f66a:	4b3b      	ldr	r3, [pc, #236]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f003 0302 	and.w	r3, r3, #2
 800f672:	2b00      	cmp	r3, #0
 800f674:	d101      	bne.n	800f67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f676:	2301      	movs	r3, #1
 800f678:	e067      	b.n	800f74a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f67a:	4b37      	ldr	r3, [pc, #220]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	f023 0203 	bic.w	r2, r3, #3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	4934      	ldr	r1, [pc, #208]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f688:	4313      	orrs	r3, r2
 800f68a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f68c:	f7fc fbde 	bl	800be4c <HAL_GetTick>
 800f690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f692:	e00a      	b.n	800f6aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f694:	f7fc fbda 	bl	800be4c <HAL_GetTick>
 800f698:	4602      	mov	r2, r0
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	1ad3      	subs	r3, r2, r3
 800f69e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d901      	bls.n	800f6aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f6a6:	2303      	movs	r3, #3
 800f6a8:	e04f      	b.n	800f74a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f6aa:	4b2b      	ldr	r3, [pc, #172]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	f003 020c 	and.w	r2, r3, #12
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d1eb      	bne.n	800f694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f6bc:	4b25      	ldr	r3, [pc, #148]	; (800f754 <HAL_RCC_ClockConfig+0x1b8>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f003 030f 	and.w	r3, r3, #15
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d20c      	bcs.n	800f6e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f6ca:	4b22      	ldr	r3, [pc, #136]	; (800f754 <HAL_RCC_ClockConfig+0x1b8>)
 800f6cc:	683a      	ldr	r2, [r7, #0]
 800f6ce:	b2d2      	uxtb	r2, r2
 800f6d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f6d2:	4b20      	ldr	r3, [pc, #128]	; (800f754 <HAL_RCC_ClockConfig+0x1b8>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f003 030f 	and.w	r3, r3, #15
 800f6da:	683a      	ldr	r2, [r7, #0]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d001      	beq.n	800f6e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e032      	b.n	800f74a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	f003 0304 	and.w	r3, r3, #4
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d008      	beq.n	800f702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f6f0:	4b19      	ldr	r3, [pc, #100]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	4916      	ldr	r1, [pc, #88]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f6fe:	4313      	orrs	r3, r2
 800f700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f003 0308 	and.w	r3, r3, #8
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d009      	beq.n	800f722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f70e:	4b12      	ldr	r3, [pc, #72]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	00db      	lsls	r3, r3, #3
 800f71c:	490e      	ldr	r1, [pc, #56]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f71e:	4313      	orrs	r3, r2
 800f720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f722:	f000 fe31 	bl	8010388 <HAL_RCC_GetSysClockFreq>
 800f726:	4602      	mov	r2, r0
 800f728:	4b0b      	ldr	r3, [pc, #44]	; (800f758 <HAL_RCC_ClockConfig+0x1bc>)
 800f72a:	689b      	ldr	r3, [r3, #8]
 800f72c:	091b      	lsrs	r3, r3, #4
 800f72e:	f003 030f 	and.w	r3, r3, #15
 800f732:	490a      	ldr	r1, [pc, #40]	; (800f75c <HAL_RCC_ClockConfig+0x1c0>)
 800f734:	5ccb      	ldrb	r3, [r1, r3]
 800f736:	fa22 f303 	lsr.w	r3, r2, r3
 800f73a:	4a09      	ldr	r2, [pc, #36]	; (800f760 <HAL_RCC_ClockConfig+0x1c4>)
 800f73c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f73e:	4b09      	ldr	r3, [pc, #36]	; (800f764 <HAL_RCC_ClockConfig+0x1c8>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4618      	mov	r0, r3
 800f744:	f7fc fb3e 	bl	800bdc4 <HAL_InitTick>

  return HAL_OK;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	40023c00 	.word	0x40023c00
 800f758:	40023800 	.word	0x40023800
 800f75c:	08013adc 	.word	0x08013adc
 800f760:	20000038 	.word	0x20000038
 800f764:	2000008c 	.word	0x2000008c

0800f768 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b08c      	sub	sp, #48	; 0x30
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d129      	bne.n	800f7ce <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800f77a:	2300      	movs	r3, #0
 800f77c:	61bb      	str	r3, [r7, #24]
 800f77e:	4b2b      	ldr	r3, [pc, #172]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f782:	4a2a      	ldr	r2, [pc, #168]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f784:	f043 0301 	orr.w	r3, r3, #1
 800f788:	6313      	str	r3, [r2, #48]	; 0x30
 800f78a:	4b28      	ldr	r3, [pc, #160]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f78e:	f003 0301 	and.w	r3, r3, #1
 800f792:	61bb      	str	r3, [r7, #24]
 800f794:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800f796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f79a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f79c:	2302      	movs	r3, #2
 800f79e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7a0:	2303      	movs	r3, #3
 800f7a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800f7ac:	f107 031c 	add.w	r3, r7, #28
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	481f      	ldr	r0, [pc, #124]	; (800f830 <HAL_RCC_MCOConfig+0xc8>)
 800f7b4:	f7fd faf0 	bl	800cd98 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800f7b8:	4b1c      	ldr	r3, [pc, #112]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800f7c0:	68b9      	ldr	r1, [r7, #8]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	430b      	orrs	r3, r1
 800f7c6:	4919      	ldr	r1, [pc, #100]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800f7cc:	e029      	b.n	800f822 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	617b      	str	r3, [r7, #20]
 800f7d2:	4b16      	ldr	r3, [pc, #88]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d6:	4a15      	ldr	r2, [pc, #84]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f7d8:	f043 0304 	orr.w	r3, r3, #4
 800f7dc:	6313      	str	r3, [r2, #48]	; 0x30
 800f7de:	4b13      	ldr	r3, [pc, #76]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e2:	f003 0304 	and.w	r3, r3, #4
 800f7e6:	617b      	str	r3, [r7, #20]
 800f7e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800f7ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800f800:	f107 031c 	add.w	r3, r7, #28
 800f804:	4619      	mov	r1, r3
 800f806:	480b      	ldr	r0, [pc, #44]	; (800f834 <HAL_RCC_MCOConfig+0xcc>)
 800f808:	f7fd fac6 	bl	800cd98 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800f80c:	4b07      	ldr	r3, [pc, #28]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	00d9      	lsls	r1, r3, #3
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	430b      	orrs	r3, r1
 800f81c:	4903      	ldr	r1, [pc, #12]	; (800f82c <HAL_RCC_MCOConfig+0xc4>)
 800f81e:	4313      	orrs	r3, r2
 800f820:	608b      	str	r3, [r1, #8]
}
 800f822:	bf00      	nop
 800f824:	3730      	adds	r7, #48	; 0x30
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	40023800 	.word	0x40023800
 800f830:	40020000 	.word	0x40020000
 800f834:	40020800 	.word	0x40020800

0800f838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f838:	b480      	push	{r7}
 800f83a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f83c:	4b03      	ldr	r3, [pc, #12]	; (800f84c <HAL_RCC_GetHCLKFreq+0x14>)
 800f83e:	681b      	ldr	r3, [r3, #0]
}
 800f840:	4618      	mov	r0, r3
 800f842:	46bd      	mov	sp, r7
 800f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f848:	4770      	bx	lr
 800f84a:	bf00      	nop
 800f84c:	20000038 	.word	0x20000038

0800f850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f854:	f7ff fff0 	bl	800f838 <HAL_RCC_GetHCLKFreq>
 800f858:	4602      	mov	r2, r0
 800f85a:	4b05      	ldr	r3, [pc, #20]	; (800f870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	0a9b      	lsrs	r3, r3, #10
 800f860:	f003 0307 	and.w	r3, r3, #7
 800f864:	4903      	ldr	r1, [pc, #12]	; (800f874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f866:	5ccb      	ldrb	r3, [r1, r3]
 800f868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	40023800 	.word	0x40023800
 800f874:	08013aec 	.word	0x08013aec

0800f878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f87c:	f7ff ffdc 	bl	800f838 <HAL_RCC_GetHCLKFreq>
 800f880:	4602      	mov	r2, r0
 800f882:	4b05      	ldr	r3, [pc, #20]	; (800f898 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	0b5b      	lsrs	r3, r3, #13
 800f888:	f003 0307 	and.w	r3, r3, #7
 800f88c:	4903      	ldr	r1, [pc, #12]	; (800f89c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f88e:	5ccb      	ldrb	r3, [r1, r3]
 800f890:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f894:	4618      	mov	r0, r3
 800f896:	bd80      	pop	{r7, pc}
 800f898:	40023800 	.word	0x40023800
 800f89c:	08013aec 	.word	0x08013aec

0800f8a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b08c      	sub	sp, #48	; 0x30
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f003 0301 	and.w	r3, r3, #1
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d010      	beq.n	800f8fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800f8d8:	4b6f      	ldr	r3, [pc, #444]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f8da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8de:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e6:	496c      	ldr	r1, [pc, #432]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d101      	bne.n	800f8fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f003 0302 	and.w	r3, r3, #2
 800f902:	2b00      	cmp	r3, #0
 800f904:	d010      	beq.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800f906:	4b64      	ldr	r3, [pc, #400]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f90c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f914:	4960      	ldr	r1, [pc, #384]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f916:	4313      	orrs	r3, r2
 800f918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f920:	2b00      	cmp	r3, #0
 800f922:	d101      	bne.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800f924:	2301      	movs	r3, #1
 800f926:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f003 0304 	and.w	r3, r3, #4
 800f930:	2b00      	cmp	r3, #0
 800f932:	d017      	beq.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f934:	4b58      	ldr	r3, [pc, #352]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f93a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f942:	4955      	ldr	r1, [pc, #340]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f944:	4313      	orrs	r3, r2
 800f946:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f952:	d101      	bne.n	800f958 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800f954:	2301      	movs	r3, #1
 800f956:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d101      	bne.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800f960:	2301      	movs	r3, #1
 800f962:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f003 0308 	and.w	r3, r3, #8
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d017      	beq.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f970:	4b49      	ldr	r3, [pc, #292]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f976:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f97e:	4946      	ldr	r1, [pc, #280]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f980:	4313      	orrs	r3, r2
 800f982:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f98e:	d101      	bne.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800f990:	2301      	movs	r3, #1
 800f992:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d101      	bne.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800f99c:	2301      	movs	r3, #1
 800f99e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f003 0320 	and.w	r3, r3, #32
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 808a 	beq.w	800fac2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	60bb      	str	r3, [r7, #8]
 800f9b2:	4b39      	ldr	r3, [pc, #228]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9b6:	4a38      	ldr	r2, [pc, #224]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f9b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9bc:	6413      	str	r3, [r2, #64]	; 0x40
 800f9be:	4b36      	ldr	r3, [pc, #216]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9c6:	60bb      	str	r3, [r7, #8]
 800f9c8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800f9ca:	4b34      	ldr	r3, [pc, #208]	; (800fa9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4a33      	ldr	r2, [pc, #204]	; (800fa9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800f9d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f9d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f9d6:	f7fc fa39 	bl	800be4c <HAL_GetTick>
 800f9da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f9dc:	e008      	b.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f9de:	f7fc fa35 	bl	800be4c <HAL_GetTick>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	2b02      	cmp	r3, #2
 800f9ea:	d901      	bls.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800f9ec:	2303      	movs	r3, #3
 800f9ee:	e278      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f9f0:	4b2a      	ldr	r3, [pc, #168]	; (800fa9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d0f0      	beq.n	800f9de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f9fc:	4b26      	ldr	r3, [pc, #152]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa04:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800fa06:	6a3b      	ldr	r3, [r7, #32]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d02f      	beq.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa14:	6a3a      	ldr	r2, [r7, #32]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d028      	beq.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fa1a:	4b1f      	ldr	r3, [pc, #124]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800fa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa22:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800fa24:	4b1e      	ldr	r3, [pc, #120]	; (800faa0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800fa26:	2201      	movs	r2, #1
 800fa28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800fa2a:	4b1d      	ldr	r3, [pc, #116]	; (800faa0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800fa30:	4a19      	ldr	r2, [pc, #100]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800fa32:	6a3b      	ldr	r3, [r7, #32]
 800fa34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800fa36:	4b18      	ldr	r3, [pc, #96]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800fa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa3a:	f003 0301 	and.w	r3, r3, #1
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	d114      	bne.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800fa42:	f7fc fa03 	bl	800be4c <HAL_GetTick>
 800fa46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fa48:	e00a      	b.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fa4a:	f7fc f9ff 	bl	800be4c <HAL_GetTick>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d901      	bls.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800fa5c:	2303      	movs	r3, #3
 800fa5e:	e240      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fa60:	4b0d      	ldr	r3, [pc, #52]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800fa62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa64:	f003 0302 	and.w	r3, r3, #2
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d0ee      	beq.n	800fa4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa78:	d114      	bne.n	800faa4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800fa7a:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fa8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa8e:	4902      	ldr	r1, [pc, #8]	; (800fa98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800fa90:	4313      	orrs	r3, r2
 800fa92:	608b      	str	r3, [r1, #8]
 800fa94:	e00c      	b.n	800fab0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800fa96:	bf00      	nop
 800fa98:	40023800 	.word	0x40023800
 800fa9c:	40007000 	.word	0x40007000
 800faa0:	42470e40 	.word	0x42470e40
 800faa4:	4b4a      	ldr	r3, [pc, #296]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800faa6:	689b      	ldr	r3, [r3, #8]
 800faa8:	4a49      	ldr	r2, [pc, #292]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800faaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800faae:	6093      	str	r3, [r2, #8]
 800fab0:	4b47      	ldr	r3, [pc, #284]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fab2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fabc:	4944      	ldr	r1, [pc, #272]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fabe:	4313      	orrs	r3, r2
 800fac0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f003 0310 	and.w	r3, r3, #16
 800faca:	2b00      	cmp	r3, #0
 800facc:	d004      	beq.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800fad4:	4b3f      	ldr	r3, [pc, #252]	; (800fbd4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800fad6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00a      	beq.n	800fafa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800fae4:	4b3a      	ldr	r3, [pc, #232]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800faea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faf2:	4937      	ldr	r1, [pc, #220]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800faf4:	4313      	orrs	r3, r2
 800faf6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00a      	beq.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb06:	4b32      	ldr	r3, [pc, #200]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fb08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb0c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb14:	492e      	ldr	r1, [pc, #184]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fb16:	4313      	orrs	r3, r2
 800fb18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d011      	beq.n	800fb4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800fb28:	4b29      	ldr	r3, [pc, #164]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fb2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb2e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb36:	4926      	ldr	r1, [pc, #152]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb46:	d101      	bne.n	800fb4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d00a      	beq.n	800fb6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800fb58:	4b1d      	ldr	r3, [pc, #116]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fb5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb66:	491a      	ldr	r1, [pc, #104]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d011      	beq.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800fb7a:	4b15      	ldr	r3, [pc, #84]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fb7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb80:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb88:	4911      	ldr	r1, [pc, #68]	; (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb98:	d101      	bne.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800fb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d005      	beq.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fbac:	f040 80ff 	bne.w	800fdae <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800fbb0:	4b09      	ldr	r3, [pc, #36]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800fbb6:	f7fc f949 	bl	800be4c <HAL_GetTick>
 800fbba:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800fbbc:	e00e      	b.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800fbbe:	f7fc f945 	bl	800be4c <HAL_GetTick>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	2b02      	cmp	r3, #2
 800fbca:	d907      	bls.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fbcc:	2303      	movs	r3, #3
 800fbce:	e188      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800fbd0:	40023800 	.word	0x40023800
 800fbd4:	424711e0 	.word	0x424711e0
 800fbd8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800fbdc:	4b7e      	ldr	r3, [pc, #504]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1ea      	bne.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f003 0301 	and.w	r3, r3, #1
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d003      	beq.n	800fbfc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d009      	beq.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d028      	beq.n	800fc5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d124      	bne.n	800fc5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800fc10:	4b71      	ldr	r3, [pc, #452]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fc12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc16:	0c1b      	lsrs	r3, r3, #16
 800fc18:	f003 0303 	and.w	r3, r3, #3
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	005b      	lsls	r3, r3, #1
 800fc20:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800fc22:	4b6d      	ldr	r3, [pc, #436]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fc24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc28:	0e1b      	lsrs	r3, r3, #24
 800fc2a:	f003 030f 	and.w	r3, r3, #15
 800fc2e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	685a      	ldr	r2, [r3, #4]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	019b      	lsls	r3, r3, #6
 800fc3a:	431a      	orrs	r2, r3
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	085b      	lsrs	r3, r3, #1
 800fc40:	3b01      	subs	r3, #1
 800fc42:	041b      	lsls	r3, r3, #16
 800fc44:	431a      	orrs	r2, r3
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	061b      	lsls	r3, r3, #24
 800fc4a:	431a      	orrs	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	695b      	ldr	r3, [r3, #20]
 800fc50:	071b      	lsls	r3, r3, #28
 800fc52:	4961      	ldr	r1, [pc, #388]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fc54:	4313      	orrs	r3, r2
 800fc56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f003 0304 	and.w	r3, r3, #4
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d004      	beq.n	800fc70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc6e:	d00a      	beq.n	800fc86 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d035      	beq.n	800fce8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc84:	d130      	bne.n	800fce8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800fc86:	4b54      	ldr	r3, [pc, #336]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fc88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc8c:	0c1b      	lsrs	r3, r3, #16
 800fc8e:	f003 0303 	and.w	r3, r3, #3
 800fc92:	3301      	adds	r3, #1
 800fc94:	005b      	lsls	r3, r3, #1
 800fc96:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800fc98:	4b4f      	ldr	r3, [pc, #316]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fc9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc9e:	0f1b      	lsrs	r3, r3, #28
 800fca0:	f003 0307 	and.w	r3, r3, #7
 800fca4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	685a      	ldr	r2, [r3, #4]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	689b      	ldr	r3, [r3, #8]
 800fcae:	019b      	lsls	r3, r3, #6
 800fcb0:	431a      	orrs	r2, r3
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	085b      	lsrs	r3, r3, #1
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	041b      	lsls	r3, r3, #16
 800fcba:	431a      	orrs	r2, r3
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	691b      	ldr	r3, [r3, #16]
 800fcc0:	061b      	lsls	r3, r3, #24
 800fcc2:	431a      	orrs	r2, r3
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	071b      	lsls	r3, r3, #28
 800fcc8:	4943      	ldr	r1, [pc, #268]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fcca:	4313      	orrs	r3, r2
 800fccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800fcd0:	4b41      	ldr	r3, [pc, #260]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fcd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcd6:	f023 021f 	bic.w	r2, r3, #31
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcde:	3b01      	subs	r3, #1
 800fce0:	493d      	ldr	r1, [pc, #244]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fce2:	4313      	orrs	r3, r2
 800fce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d029      	beq.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcfc:	d124      	bne.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800fcfe:	4b36      	ldr	r3, [pc, #216]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fd00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd04:	0c1b      	lsrs	r3, r3, #16
 800fd06:	f003 0303 	and.w	r3, r3, #3
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	005b      	lsls	r3, r3, #1
 800fd0e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800fd10:	4b31      	ldr	r3, [pc, #196]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fd12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd16:	0f1b      	lsrs	r3, r3, #28
 800fd18:	f003 0307 	and.w	r3, r3, #7
 800fd1c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	019b      	lsls	r3, r3, #6
 800fd28:	431a      	orrs	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	085b      	lsrs	r3, r3, #1
 800fd30:	3b01      	subs	r3, #1
 800fd32:	041b      	lsls	r3, r3, #16
 800fd34:	431a      	orrs	r2, r3
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	061b      	lsls	r3, r3, #24
 800fd3a:	431a      	orrs	r2, r3
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	071b      	lsls	r3, r3, #28
 800fd40:	4925      	ldr	r1, [pc, #148]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fd42:	4313      	orrs	r3, r2
 800fd44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d016      	beq.n	800fd82 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	685a      	ldr	r2, [r3, #4]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	019b      	lsls	r3, r3, #6
 800fd5e:	431a      	orrs	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	085b      	lsrs	r3, r3, #1
 800fd66:	3b01      	subs	r3, #1
 800fd68:	041b      	lsls	r3, r3, #16
 800fd6a:	431a      	orrs	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	061b      	lsls	r3, r3, #24
 800fd72:	431a      	orrs	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	695b      	ldr	r3, [r3, #20]
 800fd78:	071b      	lsls	r3, r3, #28
 800fd7a:	4917      	ldr	r1, [pc, #92]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800fd82:	4b16      	ldr	r3, [pc, #88]	; (800fddc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800fd84:	2201      	movs	r2, #1
 800fd86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800fd88:	f7fc f860 	bl	800be4c <HAL_GetTick>
 800fd8c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800fd8e:	e008      	b.n	800fda2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800fd90:	f7fc f85c 	bl	800be4c <HAL_GetTick>
 800fd94:	4602      	mov	r2, r0
 800fd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	2b02      	cmp	r3, #2
 800fd9c:	d901      	bls.n	800fda2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fd9e:	2303      	movs	r3, #3
 800fda0:	e09f      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800fda2:	4b0d      	ldr	r3, [pc, #52]	; (800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d0f0      	beq.n	800fd90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	f040 8095 	bne.w	800fee0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800fdb6:	4b0a      	ldr	r3, [pc, #40]	; (800fde0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800fdb8:	2200      	movs	r2, #0
 800fdba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800fdbc:	f7fc f846 	bl	800be4c <HAL_GetTick>
 800fdc0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800fdc2:	e00f      	b.n	800fde4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800fdc4:	f7fc f842 	bl	800be4c <HAL_GetTick>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	d908      	bls.n	800fde4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	e085      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800fdd6:	bf00      	nop
 800fdd8:	40023800 	.word	0x40023800
 800fddc:	42470068 	.word	0x42470068
 800fde0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800fde4:	4b41      	ldr	r3, [pc, #260]	; (800feec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fdec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fdf0:	d0e8      	beq.n	800fdc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f003 0304 	and.w	r3, r3, #4
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d003      	beq.n	800fe06 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d009      	beq.n	800fe1a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d02b      	beq.n	800fe6a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d127      	bne.n	800fe6a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800fe1a:	4b34      	ldr	r3, [pc, #208]	; (800feec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fe1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe20:	0c1b      	lsrs	r3, r3, #16
 800fe22:	f003 0303 	and.w	r3, r3, #3
 800fe26:	3301      	adds	r3, #1
 800fe28:	005b      	lsls	r3, r3, #1
 800fe2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	699a      	ldr	r2, [r3, #24]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	69db      	ldr	r3, [r3, #28]
 800fe34:	019b      	lsls	r3, r3, #6
 800fe36:	431a      	orrs	r2, r3
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	085b      	lsrs	r3, r3, #1
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	041b      	lsls	r3, r3, #16
 800fe40:	431a      	orrs	r2, r3
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe46:	061b      	lsls	r3, r3, #24
 800fe48:	4928      	ldr	r1, [pc, #160]	; (800feec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800fe50:	4b26      	ldr	r3, [pc, #152]	; (800feec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fe52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe56:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	021b      	lsls	r3, r3, #8
 800fe62:	4922      	ldr	r1, [pc, #136]	; (800feec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fe64:	4313      	orrs	r3, r2
 800fe66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d01d      	beq.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fe7e:	d118      	bne.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800fe80:	4b1a      	ldr	r3, [pc, #104]	; (800feec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fe82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe86:	0e1b      	lsrs	r3, r3, #24
 800fe88:	f003 030f 	and.w	r3, r3, #15
 800fe8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	699a      	ldr	r2, [r3, #24]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	69db      	ldr	r3, [r3, #28]
 800fe96:	019b      	lsls	r3, r3, #6
 800fe98:	431a      	orrs	r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6a1b      	ldr	r3, [r3, #32]
 800fe9e:	085b      	lsrs	r3, r3, #1
 800fea0:	3b01      	subs	r3, #1
 800fea2:	041b      	lsls	r3, r3, #16
 800fea4:	431a      	orrs	r2, r3
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	061b      	lsls	r3, r3, #24
 800feaa:	4910      	ldr	r1, [pc, #64]	; (800feec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800feac:	4313      	orrs	r3, r2
 800feae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800feb2:	4b0f      	ldr	r3, [pc, #60]	; (800fef0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800feb4:	2201      	movs	r2, #1
 800feb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800feb8:	f7fb ffc8 	bl	800be4c <HAL_GetTick>
 800febc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800febe:	e008      	b.n	800fed2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800fec0:	f7fb ffc4 	bl	800be4c <HAL_GetTick>
 800fec4:	4602      	mov	r2, r0
 800fec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d901      	bls.n	800fed2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fece:	2303      	movs	r3, #3
 800fed0:	e007      	b.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800fed2:	4b06      	ldr	r3, [pc, #24]	; (800feec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800feda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fede:	d1ef      	bne.n	800fec0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3730      	adds	r7, #48	; 0x30
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	40023800 	.word	0x40023800
 800fef0:	42470070 	.word	0x42470070

0800fef4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b089      	sub	sp, #36	; 0x24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800fefc:	2300      	movs	r3, #0
 800fefe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800ff00:	2300      	movs	r3, #0
 800ff02:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800ff04:	2300      	movs	r3, #0
 800ff06:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800ff10:	2300      	movs	r3, #0
 800ff12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	2b07      	cmp	r3, #7
 800ff1a:	f200 8224 	bhi.w	8010366 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ff1e:	a201      	add	r2, pc, #4	; (adr r2, 800ff24 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ff20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff24:	08010127 	.word	0x08010127
 800ff28:	08010251 	.word	0x08010251
 800ff2c:	08010367 	.word	0x08010367
 800ff30:	0800ff45 	.word	0x0800ff45
 800ff34:	08010367 	.word	0x08010367
 800ff38:	08010367 	.word	0x08010367
 800ff3c:	08010367 	.word	0x08010367
 800ff40:	0800ff45 	.word	0x0800ff45
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800ff44:	4ba8      	ldr	r3, [pc, #672]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ff46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff4a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800ff52:	613b      	str	r3, [r7, #16]
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ff5a:	f000 80d6 	beq.w	801010a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ff64:	f200 80dd 	bhi.w	8010122 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ff6e:	f000 809f 	beq.w	80100b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ff78:	f200 80d3 	bhi.w	8010122 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff82:	d05b      	beq.n	801003c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff8a:	f200 80ca 	bhi.w	8010122 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ff94:	f000 80b6 	beq.w	8010104 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ff9e:	f200 80c0 	bhi.w	8010122 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ffa8:	f000 8082 	beq.w	80100b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ffb2:	f200 80b6 	bhi.w	8010122 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d004      	beq.n	800ffc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffc2:	d03b      	beq.n	801003c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800ffc4:	e0ad      	b.n	8010122 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ffc6:	4b88      	ldr	r3, [pc, #544]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d109      	bne.n	800ffe6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800ffd2:	4b85      	ldr	r3, [pc, #532]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ffd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ffdc:	4a83      	ldr	r2, [pc, #524]	; (80101ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800ffde:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffe2:	61bb      	str	r3, [r7, #24]
 800ffe4:	e008      	b.n	800fff8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800ffe6:	4b80      	ldr	r3, [pc, #512]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ffe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fff0:	4a7f      	ldr	r2, [pc, #508]	; (80101f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800fff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fff6:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800fff8:	4b7b      	ldr	r3, [pc, #492]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800fffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fffe:	0e1b      	lsrs	r3, r3, #24
 8010000:	f003 030f 	and.w	r3, r3, #15
 8010004:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8010006:	4b78      	ldr	r3, [pc, #480]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801000c:	099b      	lsrs	r3, r3, #6
 801000e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010012:	69ba      	ldr	r2, [r7, #24]
 8010014:	fb03 f202 	mul.w	r2, r3, r2
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	fbb2 f3f3 	udiv	r3, r2, r3
 801001e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8010020:	4b71      	ldr	r3, [pc, #452]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010026:	0a1b      	lsrs	r3, r3, #8
 8010028:	f003 031f 	and.w	r3, r3, #31
 801002c:	3301      	adds	r3, #1
 801002e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8010030:	69fa      	ldr	r2, [r7, #28]
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	fbb2 f3f3 	udiv	r3, r2, r3
 8010038:	61fb      	str	r3, [r7, #28]
          break;
 801003a:	e073      	b.n	8010124 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 801003c:	4b6a      	ldr	r3, [pc, #424]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010044:	2b00      	cmp	r3, #0
 8010046:	d109      	bne.n	801005c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8010048:	4b67      	ldr	r3, [pc, #412]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 801004a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801004e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010052:	4a66      	ldr	r2, [pc, #408]	; (80101ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8010054:	fbb2 f3f3 	udiv	r3, r2, r3
 8010058:	61bb      	str	r3, [r7, #24]
 801005a:	e008      	b.n	801006e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 801005c:	4b62      	ldr	r3, [pc, #392]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 801005e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010066:	4a62      	ldr	r2, [pc, #392]	; (80101f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8010068:	fbb2 f3f3 	udiv	r3, r2, r3
 801006c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 801006e:	4b5e      	ldr	r3, [pc, #376]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010074:	0e1b      	lsrs	r3, r3, #24
 8010076:	f003 030f 	and.w	r3, r3, #15
 801007a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 801007c:	4b5a      	ldr	r3, [pc, #360]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 801007e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010082:	099b      	lsrs	r3, r3, #6
 8010084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010088:	69ba      	ldr	r2, [r7, #24]
 801008a:	fb03 f202 	mul.w	r2, r3, r2
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	fbb2 f3f3 	udiv	r3, r2, r3
 8010094:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8010096:	4b54      	ldr	r3, [pc, #336]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801009c:	f003 031f 	and.w	r3, r3, #31
 80100a0:	3301      	adds	r3, #1
 80100a2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80100a4:	69fa      	ldr	r2, [r7, #28]
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80100ac:	61fb      	str	r3, [r7, #28]
          break;
 80100ae:	e039      	b.n	8010124 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80100b0:	4b4d      	ldr	r3, [pc, #308]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d108      	bne.n	80100ce <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80100bc:	4b4a      	ldr	r3, [pc, #296]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100c4:	4a49      	ldr	r2, [pc, #292]	; (80101ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80100c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80100ca:	61bb      	str	r3, [r7, #24]
 80100cc:	e007      	b.n	80100de <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80100ce:	4b46      	ldr	r3, [pc, #280]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100d6:	4a46      	ldr	r2, [pc, #280]	; (80101f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80100d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80100dc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80100de:	4b42      	ldr	r3, [pc, #264]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	0f1b      	lsrs	r3, r3, #28
 80100e4:	f003 0307 	and.w	r3, r3, #7
 80100e8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80100ea:	4b3f      	ldr	r3, [pc, #252]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	099b      	lsrs	r3, r3, #6
 80100f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100f4:	69ba      	ldr	r2, [r7, #24]
 80100f6:	fb03 f202 	mul.w	r2, r3, r2
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010100:	61fb      	str	r3, [r7, #28]
          break;
 8010102:	e00f      	b.n	8010124 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8010104:	4b3b      	ldr	r3, [pc, #236]	; (80101f4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8010106:	61fb      	str	r3, [r7, #28]
          break;
 8010108:	e00c      	b.n	8010124 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 801010a:	4b37      	ldr	r3, [pc, #220]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010112:	2b00      	cmp	r3, #0
 8010114:	d102      	bne.n	801011c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8010116:	4b35      	ldr	r3, [pc, #212]	; (80101ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8010118:	61fb      	str	r3, [r7, #28]
          break;
 801011a:	e003      	b.n	8010124 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 801011c:	4b34      	ldr	r3, [pc, #208]	; (80101f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 801011e:	61fb      	str	r3, [r7, #28]
          break;
 8010120:	e000      	b.n	8010124 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8010122:	bf00      	nop
        }
      }
      break;
 8010124:	e120      	b.n	8010368 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8010126:	4b30      	ldr	r3, [pc, #192]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801012c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8010130:	60fb      	str	r3, [r7, #12]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8010138:	d079      	beq.n	801022e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8010140:	f200 8082 	bhi.w	8010248 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801014a:	d03c      	beq.n	80101c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010152:	d879      	bhi.n	8010248 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d006      	beq.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010160:	d172      	bne.n	8010248 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8010162:	4b24      	ldr	r3, [pc, #144]	; (80101f4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8010164:	61fb      	str	r3, [r7, #28]
          break;
 8010166:	e072      	b.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010168:	4b1f      	ldr	r3, [pc, #124]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010174:	d109      	bne.n	801018a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8010176:	4b1c      	ldr	r3, [pc, #112]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801017c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010180:	4a1b      	ldr	r2, [pc, #108]	; (80101f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8010182:	fbb2 f3f3 	udiv	r3, r2, r3
 8010186:	61bb      	str	r3, [r7, #24]
 8010188:	e008      	b.n	801019c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 801018a:	4b17      	ldr	r3, [pc, #92]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 801018c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010194:	4a15      	ldr	r2, [pc, #84]	; (80101ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8010196:	fbb2 f3f3 	udiv	r3, r2, r3
 801019a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 801019c:	4b12      	ldr	r3, [pc, #72]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 801019e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101a2:	099b      	lsrs	r3, r3, #6
 80101a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	fb02 f303 	mul.w	r3, r2, r3
 80101ae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80101b0:	4b0d      	ldr	r3, [pc, #52]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80101b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101b6:	0f1b      	lsrs	r3, r3, #28
 80101b8:	f003 0307 	and.w	r3, r3, #7
 80101bc:	68ba      	ldr	r2, [r7, #8]
 80101be:	fbb2 f3f3 	udiv	r3, r2, r3
 80101c2:	61fb      	str	r3, [r7, #28]
          break;
 80101c4:	e043      	b.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80101c6:	4b08      	ldr	r3, [pc, #32]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101d2:	d111      	bne.n	80101f8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80101d4:	4b04      	ldr	r3, [pc, #16]	; (80101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101dc:	4a04      	ldr	r2, [pc, #16]	; (80101f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80101de:	fbb2 f3f3 	udiv	r3, r2, r3
 80101e2:	61bb      	str	r3, [r7, #24]
 80101e4:	e010      	b.n	8010208 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80101e6:	bf00      	nop
 80101e8:	40023800 	.word	0x40023800
 80101ec:	00f42400 	.word	0x00f42400
 80101f0:	007a1200 	.word	0x007a1200
 80101f4:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80101f8:	4b5f      	ldr	r3, [pc, #380]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010200:	4a5e      	ldr	r2, [pc, #376]	; (801037c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8010202:	fbb2 f3f3 	udiv	r3, r2, r3
 8010206:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8010208:	4b5b      	ldr	r3, [pc, #364]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	099b      	lsrs	r3, r3, #6
 801020e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	fb02 f303 	mul.w	r3, r2, r3
 8010218:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 801021a:	4b57      	ldr	r3, [pc, #348]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	0f1b      	lsrs	r3, r3, #28
 8010220:	f003 0307 	and.w	r3, r3, #7
 8010224:	68ba      	ldr	r2, [r7, #8]
 8010226:	fbb2 f3f3 	udiv	r3, r2, r3
 801022a:	61fb      	str	r3, [r7, #28]
          break;
 801022c:	e00f      	b.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801022e:	4b52      	ldr	r3, [pc, #328]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801023a:	d102      	bne.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 801023c:	4b50      	ldr	r3, [pc, #320]	; (8010380 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 801023e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8010240:	e005      	b.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8010242:	4b4e      	ldr	r3, [pc, #312]	; (801037c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8010244:	61fb      	str	r3, [r7, #28]
          break;
 8010246:	e002      	b.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8010248:	2300      	movs	r3, #0
 801024a:	61fb      	str	r3, [r7, #28]
          break;
 801024c:	bf00      	nop
        }
      }
      break;
 801024e:	e08b      	b.n	8010368 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8010250:	4b49      	ldr	r3, [pc, #292]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8010252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010256:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8010262:	d06f      	beq.n	8010344 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 801026a:	d878      	bhi.n	801035e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010272:	d03c      	beq.n	80102ee <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801027a:	d870      	bhi.n	801035e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d006      	beq.n	8010290 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010288:	d169      	bne.n	801035e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 801028a:	4b3e      	ldr	r3, [pc, #248]	; (8010384 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 801028c:	61fb      	str	r3, [r7, #28]
          break;
 801028e:	e069      	b.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010290:	4b39      	ldr	r3, [pc, #228]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801029c:	d109      	bne.n	80102b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 801029e:	4b36      	ldr	r3, [pc, #216]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80102a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102a8:	4a35      	ldr	r2, [pc, #212]	; (8010380 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80102aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80102ae:	61bb      	str	r3, [r7, #24]
 80102b0:	e008      	b.n	80102c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80102b2:	4b31      	ldr	r3, [pc, #196]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80102b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102bc:	4a2f      	ldr	r2, [pc, #188]	; (801037c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80102be:	fbb2 f3f3 	udiv	r3, r2, r3
 80102c2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80102c4:	4b2c      	ldr	r3, [pc, #176]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80102c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102ca:	099b      	lsrs	r3, r3, #6
 80102cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	fb02 f303 	mul.w	r3, r2, r3
 80102d6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80102d8:	4b27      	ldr	r3, [pc, #156]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80102da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102de:	0f1b      	lsrs	r3, r3, #28
 80102e0:	f003 0307 	and.w	r3, r3, #7
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80102ea:	61fb      	str	r3, [r7, #28]
          break;
 80102ec:	e03a      	b.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80102ee:	4b22      	ldr	r3, [pc, #136]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80102f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80102fa:	d108      	bne.n	801030e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80102fc:	4b1e      	ldr	r3, [pc, #120]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010304:	4a1e      	ldr	r2, [pc, #120]	; (8010380 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8010306:	fbb2 f3f3 	udiv	r3, r2, r3
 801030a:	61bb      	str	r3, [r7, #24]
 801030c:	e007      	b.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 801030e:	4b1a      	ldr	r3, [pc, #104]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010316:	4a19      	ldr	r2, [pc, #100]	; (801037c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8010318:	fbb2 f3f3 	udiv	r3, r2, r3
 801031c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 801031e:	4b16      	ldr	r3, [pc, #88]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	099b      	lsrs	r3, r3, #6
 8010324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	fb02 f303 	mul.w	r3, r2, r3
 801032e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8010330:	4b11      	ldr	r3, [pc, #68]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	0f1b      	lsrs	r3, r3, #28
 8010336:	f003 0307 	and.w	r3, r3, #7
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010340:	61fb      	str	r3, [r7, #28]
          break;
 8010342:	e00f      	b.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010344:	4b0c      	ldr	r3, [pc, #48]	; (8010378 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801034c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010350:	d102      	bne.n	8010358 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8010352:	4b0b      	ldr	r3, [pc, #44]	; (8010380 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8010354:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8010356:	e005      	b.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8010358:	4b08      	ldr	r3, [pc, #32]	; (801037c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 801035a:	61fb      	str	r3, [r7, #28]
          break;
 801035c:	e002      	b.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 801035e:	2300      	movs	r3, #0
 8010360:	61fb      	str	r3, [r7, #28]
          break;
 8010362:	bf00      	nop
        }
      }
      break;
 8010364:	e000      	b.n	8010368 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  default:
    {
       break;
 8010366:	bf00      	nop
    }
  }
  return frequency;
 8010368:	69fb      	ldr	r3, [r7, #28]
}
 801036a:	4618      	mov	r0, r3
 801036c:	3724      	adds	r7, #36	; 0x24
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	40023800 	.word	0x40023800
 801037c:	00f42400 	.word	0x00f42400
 8010380:	007a1200 	.word	0x007a1200
 8010384:	00bb8000 	.word	0x00bb8000

08010388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801038c:	b0ae      	sub	sp, #184	; 0xb8
 801038e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8010390:	2300      	movs	r3, #0
 8010392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8010396:	2300      	movs	r3, #0
 8010398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 801039c:	2300      	movs	r3, #0
 801039e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80103a2:	2300      	movs	r3, #0
 80103a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80103a8:	2300      	movs	r3, #0
 80103aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80103ae:	4bcb      	ldr	r3, [pc, #812]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	f003 030c 	and.w	r3, r3, #12
 80103b6:	2b0c      	cmp	r3, #12
 80103b8:	f200 8206 	bhi.w	80107c8 <HAL_RCC_GetSysClockFreq+0x440>
 80103bc:	a201      	add	r2, pc, #4	; (adr r2, 80103c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80103be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c2:	bf00      	nop
 80103c4:	080103f9 	.word	0x080103f9
 80103c8:	080107c9 	.word	0x080107c9
 80103cc:	080107c9 	.word	0x080107c9
 80103d0:	080107c9 	.word	0x080107c9
 80103d4:	08010401 	.word	0x08010401
 80103d8:	080107c9 	.word	0x080107c9
 80103dc:	080107c9 	.word	0x080107c9
 80103e0:	080107c9 	.word	0x080107c9
 80103e4:	08010409 	.word	0x08010409
 80103e8:	080107c9 	.word	0x080107c9
 80103ec:	080107c9 	.word	0x080107c9
 80103f0:	080107c9 	.word	0x080107c9
 80103f4:	080105f9 	.word	0x080105f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80103f8:	4bb9      	ldr	r3, [pc, #740]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80103fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80103fe:	e1e7      	b.n	80107d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010400:	4bb8      	ldr	r3, [pc, #736]	; (80106e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8010402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8010406:	e1e3      	b.n	80107d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010408:	4bb4      	ldr	r3, [pc, #720]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010414:	4bb1      	ldr	r3, [pc, #708]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801041c:	2b00      	cmp	r3, #0
 801041e:	d071      	beq.n	8010504 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010420:	4bae      	ldr	r3, [pc, #696]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	099b      	lsrs	r3, r3, #6
 8010426:	2200      	movs	r2, #0
 8010428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801042c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801043c:	2300      	movs	r3, #0
 801043e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010446:	4622      	mov	r2, r4
 8010448:	462b      	mov	r3, r5
 801044a:	f04f 0000 	mov.w	r0, #0
 801044e:	f04f 0100 	mov.w	r1, #0
 8010452:	0159      	lsls	r1, r3, #5
 8010454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010458:	0150      	lsls	r0, r2, #5
 801045a:	4602      	mov	r2, r0
 801045c:	460b      	mov	r3, r1
 801045e:	4621      	mov	r1, r4
 8010460:	1a51      	subs	r1, r2, r1
 8010462:	6439      	str	r1, [r7, #64]	; 0x40
 8010464:	4629      	mov	r1, r5
 8010466:	eb63 0301 	sbc.w	r3, r3, r1
 801046a:	647b      	str	r3, [r7, #68]	; 0x44
 801046c:	f04f 0200 	mov.w	r2, #0
 8010470:	f04f 0300 	mov.w	r3, #0
 8010474:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8010478:	4649      	mov	r1, r9
 801047a:	018b      	lsls	r3, r1, #6
 801047c:	4641      	mov	r1, r8
 801047e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010482:	4641      	mov	r1, r8
 8010484:	018a      	lsls	r2, r1, #6
 8010486:	4641      	mov	r1, r8
 8010488:	1a51      	subs	r1, r2, r1
 801048a:	63b9      	str	r1, [r7, #56]	; 0x38
 801048c:	4649      	mov	r1, r9
 801048e:	eb63 0301 	sbc.w	r3, r3, r1
 8010492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010494:	f04f 0200 	mov.w	r2, #0
 8010498:	f04f 0300 	mov.w	r3, #0
 801049c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80104a0:	4649      	mov	r1, r9
 80104a2:	00cb      	lsls	r3, r1, #3
 80104a4:	4641      	mov	r1, r8
 80104a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80104aa:	4641      	mov	r1, r8
 80104ac:	00ca      	lsls	r2, r1, #3
 80104ae:	4610      	mov	r0, r2
 80104b0:	4619      	mov	r1, r3
 80104b2:	4603      	mov	r3, r0
 80104b4:	4622      	mov	r2, r4
 80104b6:	189b      	adds	r3, r3, r2
 80104b8:	633b      	str	r3, [r7, #48]	; 0x30
 80104ba:	462b      	mov	r3, r5
 80104bc:	460a      	mov	r2, r1
 80104be:	eb42 0303 	adc.w	r3, r2, r3
 80104c2:	637b      	str	r3, [r7, #52]	; 0x34
 80104c4:	f04f 0200 	mov.w	r2, #0
 80104c8:	f04f 0300 	mov.w	r3, #0
 80104cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80104d0:	4629      	mov	r1, r5
 80104d2:	024b      	lsls	r3, r1, #9
 80104d4:	4621      	mov	r1, r4
 80104d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80104da:	4621      	mov	r1, r4
 80104dc:	024a      	lsls	r2, r1, #9
 80104de:	4610      	mov	r0, r2
 80104e0:	4619      	mov	r1, r3
 80104e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104e6:	2200      	movs	r2, #0
 80104e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80104ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80104f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80104f4:	f7f0 fb76 	bl	8000be4 <__aeabi_uldivmod>
 80104f8:	4602      	mov	r2, r0
 80104fa:	460b      	mov	r3, r1
 80104fc:	4613      	mov	r3, r2
 80104fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010502:	e067      	b.n	80105d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010504:	4b75      	ldr	r3, [pc, #468]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	099b      	lsrs	r3, r3, #6
 801050a:	2200      	movs	r2, #0
 801050c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010510:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8010514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801051c:	67bb      	str	r3, [r7, #120]	; 0x78
 801051e:	2300      	movs	r3, #0
 8010520:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010522:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8010526:	4622      	mov	r2, r4
 8010528:	462b      	mov	r3, r5
 801052a:	f04f 0000 	mov.w	r0, #0
 801052e:	f04f 0100 	mov.w	r1, #0
 8010532:	0159      	lsls	r1, r3, #5
 8010534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010538:	0150      	lsls	r0, r2, #5
 801053a:	4602      	mov	r2, r0
 801053c:	460b      	mov	r3, r1
 801053e:	4621      	mov	r1, r4
 8010540:	1a51      	subs	r1, r2, r1
 8010542:	62b9      	str	r1, [r7, #40]	; 0x28
 8010544:	4629      	mov	r1, r5
 8010546:	eb63 0301 	sbc.w	r3, r3, r1
 801054a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801054c:	f04f 0200 	mov.w	r2, #0
 8010550:	f04f 0300 	mov.w	r3, #0
 8010554:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8010558:	4649      	mov	r1, r9
 801055a:	018b      	lsls	r3, r1, #6
 801055c:	4641      	mov	r1, r8
 801055e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010562:	4641      	mov	r1, r8
 8010564:	018a      	lsls	r2, r1, #6
 8010566:	4641      	mov	r1, r8
 8010568:	ebb2 0a01 	subs.w	sl, r2, r1
 801056c:	4649      	mov	r1, r9
 801056e:	eb63 0b01 	sbc.w	fp, r3, r1
 8010572:	f04f 0200 	mov.w	r2, #0
 8010576:	f04f 0300 	mov.w	r3, #0
 801057a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801057e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010586:	4692      	mov	sl, r2
 8010588:	469b      	mov	fp, r3
 801058a:	4623      	mov	r3, r4
 801058c:	eb1a 0303 	adds.w	r3, sl, r3
 8010590:	623b      	str	r3, [r7, #32]
 8010592:	462b      	mov	r3, r5
 8010594:	eb4b 0303 	adc.w	r3, fp, r3
 8010598:	627b      	str	r3, [r7, #36]	; 0x24
 801059a:	f04f 0200 	mov.w	r2, #0
 801059e:	f04f 0300 	mov.w	r3, #0
 80105a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80105a6:	4629      	mov	r1, r5
 80105a8:	028b      	lsls	r3, r1, #10
 80105aa:	4621      	mov	r1, r4
 80105ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80105b0:	4621      	mov	r1, r4
 80105b2:	028a      	lsls	r2, r1, #10
 80105b4:	4610      	mov	r0, r2
 80105b6:	4619      	mov	r1, r3
 80105b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105bc:	2200      	movs	r2, #0
 80105be:	673b      	str	r3, [r7, #112]	; 0x70
 80105c0:	677a      	str	r2, [r7, #116]	; 0x74
 80105c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80105c6:	f7f0 fb0d 	bl	8000be4 <__aeabi_uldivmod>
 80105ca:	4602      	mov	r2, r0
 80105cc:	460b      	mov	r3, r1
 80105ce:	4613      	mov	r3, r2
 80105d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80105d4:	4b41      	ldr	r3, [pc, #260]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	0c1b      	lsrs	r3, r3, #16
 80105da:	f003 0303 	and.w	r3, r3, #3
 80105de:	3301      	adds	r3, #1
 80105e0:	005b      	lsls	r3, r3, #1
 80105e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80105e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80105ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80105f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80105f6:	e0eb      	b.n	80107d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80105f8:	4b38      	ldr	r3, [pc, #224]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010604:	4b35      	ldr	r3, [pc, #212]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801060c:	2b00      	cmp	r3, #0
 801060e:	d06b      	beq.n	80106e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010610:	4b32      	ldr	r3, [pc, #200]	; (80106dc <HAL_RCC_GetSysClockFreq+0x354>)
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	099b      	lsrs	r3, r3, #6
 8010616:	2200      	movs	r2, #0
 8010618:	66bb      	str	r3, [r7, #104]	; 0x68
 801061a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801061c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801061e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010622:	663b      	str	r3, [r7, #96]	; 0x60
 8010624:	2300      	movs	r3, #0
 8010626:	667b      	str	r3, [r7, #100]	; 0x64
 8010628:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801062c:	4622      	mov	r2, r4
 801062e:	462b      	mov	r3, r5
 8010630:	f04f 0000 	mov.w	r0, #0
 8010634:	f04f 0100 	mov.w	r1, #0
 8010638:	0159      	lsls	r1, r3, #5
 801063a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801063e:	0150      	lsls	r0, r2, #5
 8010640:	4602      	mov	r2, r0
 8010642:	460b      	mov	r3, r1
 8010644:	4621      	mov	r1, r4
 8010646:	1a51      	subs	r1, r2, r1
 8010648:	61b9      	str	r1, [r7, #24]
 801064a:	4629      	mov	r1, r5
 801064c:	eb63 0301 	sbc.w	r3, r3, r1
 8010650:	61fb      	str	r3, [r7, #28]
 8010652:	f04f 0200 	mov.w	r2, #0
 8010656:	f04f 0300 	mov.w	r3, #0
 801065a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 801065e:	4659      	mov	r1, fp
 8010660:	018b      	lsls	r3, r1, #6
 8010662:	4651      	mov	r1, sl
 8010664:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010668:	4651      	mov	r1, sl
 801066a:	018a      	lsls	r2, r1, #6
 801066c:	4651      	mov	r1, sl
 801066e:	ebb2 0801 	subs.w	r8, r2, r1
 8010672:	4659      	mov	r1, fp
 8010674:	eb63 0901 	sbc.w	r9, r3, r1
 8010678:	f04f 0200 	mov.w	r2, #0
 801067c:	f04f 0300 	mov.w	r3, #0
 8010680:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010684:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010688:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801068c:	4690      	mov	r8, r2
 801068e:	4699      	mov	r9, r3
 8010690:	4623      	mov	r3, r4
 8010692:	eb18 0303 	adds.w	r3, r8, r3
 8010696:	613b      	str	r3, [r7, #16]
 8010698:	462b      	mov	r3, r5
 801069a:	eb49 0303 	adc.w	r3, r9, r3
 801069e:	617b      	str	r3, [r7, #20]
 80106a0:	f04f 0200 	mov.w	r2, #0
 80106a4:	f04f 0300 	mov.w	r3, #0
 80106a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80106ac:	4629      	mov	r1, r5
 80106ae:	024b      	lsls	r3, r1, #9
 80106b0:	4621      	mov	r1, r4
 80106b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80106b6:	4621      	mov	r1, r4
 80106b8:	024a      	lsls	r2, r1, #9
 80106ba:	4610      	mov	r0, r2
 80106bc:	4619      	mov	r1, r3
 80106be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106c2:	2200      	movs	r2, #0
 80106c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80106c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80106c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80106cc:	f7f0 fa8a 	bl	8000be4 <__aeabi_uldivmod>
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	4613      	mov	r3, r2
 80106d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80106da:	e065      	b.n	80107a8 <HAL_RCC_GetSysClockFreq+0x420>
 80106dc:	40023800 	.word	0x40023800
 80106e0:	00f42400 	.word	0x00f42400
 80106e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80106e8:	4b3d      	ldr	r3, [pc, #244]	; (80107e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	099b      	lsrs	r3, r3, #6
 80106ee:	2200      	movs	r2, #0
 80106f0:	4618      	mov	r0, r3
 80106f2:	4611      	mov	r1, r2
 80106f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80106f8:	653b      	str	r3, [r7, #80]	; 0x50
 80106fa:	2300      	movs	r3, #0
 80106fc:	657b      	str	r3, [r7, #84]	; 0x54
 80106fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8010702:	4642      	mov	r2, r8
 8010704:	464b      	mov	r3, r9
 8010706:	f04f 0000 	mov.w	r0, #0
 801070a:	f04f 0100 	mov.w	r1, #0
 801070e:	0159      	lsls	r1, r3, #5
 8010710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010714:	0150      	lsls	r0, r2, #5
 8010716:	4602      	mov	r2, r0
 8010718:	460b      	mov	r3, r1
 801071a:	4641      	mov	r1, r8
 801071c:	1a51      	subs	r1, r2, r1
 801071e:	60b9      	str	r1, [r7, #8]
 8010720:	4649      	mov	r1, r9
 8010722:	eb63 0301 	sbc.w	r3, r3, r1
 8010726:	60fb      	str	r3, [r7, #12]
 8010728:	f04f 0200 	mov.w	r2, #0
 801072c:	f04f 0300 	mov.w	r3, #0
 8010730:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8010734:	4659      	mov	r1, fp
 8010736:	018b      	lsls	r3, r1, #6
 8010738:	4651      	mov	r1, sl
 801073a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801073e:	4651      	mov	r1, sl
 8010740:	018a      	lsls	r2, r1, #6
 8010742:	4651      	mov	r1, sl
 8010744:	1a54      	subs	r4, r2, r1
 8010746:	4659      	mov	r1, fp
 8010748:	eb63 0501 	sbc.w	r5, r3, r1
 801074c:	f04f 0200 	mov.w	r2, #0
 8010750:	f04f 0300 	mov.w	r3, #0
 8010754:	00eb      	lsls	r3, r5, #3
 8010756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801075a:	00e2      	lsls	r2, r4, #3
 801075c:	4614      	mov	r4, r2
 801075e:	461d      	mov	r5, r3
 8010760:	4643      	mov	r3, r8
 8010762:	18e3      	adds	r3, r4, r3
 8010764:	603b      	str	r3, [r7, #0]
 8010766:	464b      	mov	r3, r9
 8010768:	eb45 0303 	adc.w	r3, r5, r3
 801076c:	607b      	str	r3, [r7, #4]
 801076e:	f04f 0200 	mov.w	r2, #0
 8010772:	f04f 0300 	mov.w	r3, #0
 8010776:	e9d7 4500 	ldrd	r4, r5, [r7]
 801077a:	4629      	mov	r1, r5
 801077c:	028b      	lsls	r3, r1, #10
 801077e:	4621      	mov	r1, r4
 8010780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010784:	4621      	mov	r1, r4
 8010786:	028a      	lsls	r2, r1, #10
 8010788:	4610      	mov	r0, r2
 801078a:	4619      	mov	r1, r3
 801078c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010790:	2200      	movs	r2, #0
 8010792:	64bb      	str	r3, [r7, #72]	; 0x48
 8010794:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010796:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801079a:	f7f0 fa23 	bl	8000be4 <__aeabi_uldivmod>
 801079e:	4602      	mov	r2, r0
 80107a0:	460b      	mov	r3, r1
 80107a2:	4613      	mov	r3, r2
 80107a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80107a8:	4b0d      	ldr	r3, [pc, #52]	; (80107e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	0f1b      	lsrs	r3, r3, #28
 80107ae:	f003 0307 	and.w	r3, r3, #7
 80107b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80107b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80107ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80107be:	fbb2 f3f3 	udiv	r3, r2, r3
 80107c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80107c6:	e003      	b.n	80107d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80107c8:	4b06      	ldr	r3, [pc, #24]	; (80107e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80107ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80107ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80107d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	37b8      	adds	r7, #184	; 0xb8
 80107d8:	46bd      	mov	sp, r7
 80107da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107de:	bf00      	nop
 80107e0:	40023800 	.word	0x40023800
 80107e4:	00f42400 	.word	0x00f42400

080107e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b086      	sub	sp, #24
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d101      	bne.n	80107fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80107f6:	2301      	movs	r3, #1
 80107f8:	e28d      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f003 0301 	and.w	r3, r3, #1
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 8083 	beq.w	801090e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8010808:	4b94      	ldr	r3, [pc, #592]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	f003 030c 	and.w	r3, r3, #12
 8010810:	2b04      	cmp	r3, #4
 8010812:	d019      	beq.n	8010848 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8010814:	4b91      	ldr	r3, [pc, #580]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801081c:	2b08      	cmp	r3, #8
 801081e:	d106      	bne.n	801082e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8010820:	4b8e      	ldr	r3, [pc, #568]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801082c:	d00c      	beq.n	8010848 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801082e:	4b8b      	ldr	r3, [pc, #556]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010830:	689b      	ldr	r3, [r3, #8]
 8010832:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8010836:	2b0c      	cmp	r3, #12
 8010838:	d112      	bne.n	8010860 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801083a:	4b88      	ldr	r3, [pc, #544]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010846:	d10b      	bne.n	8010860 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010848:	4b84      	ldr	r3, [pc, #528]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010850:	2b00      	cmp	r3, #0
 8010852:	d05b      	beq.n	801090c <HAL_RCC_OscConfig+0x124>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d157      	bne.n	801090c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801085c:	2301      	movs	r3, #1
 801085e:	e25a      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010868:	d106      	bne.n	8010878 <HAL_RCC_OscConfig+0x90>
 801086a:	4b7c      	ldr	r3, [pc, #496]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a7b      	ldr	r2, [pc, #492]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010874:	6013      	str	r3, [r2, #0]
 8010876:	e01d      	b.n	80108b4 <HAL_RCC_OscConfig+0xcc>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010880:	d10c      	bne.n	801089c <HAL_RCC_OscConfig+0xb4>
 8010882:	4b76      	ldr	r3, [pc, #472]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4a75      	ldr	r2, [pc, #468]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801088c:	6013      	str	r3, [r2, #0]
 801088e:	4b73      	ldr	r3, [pc, #460]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a72      	ldr	r2, [pc, #456]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010898:	6013      	str	r3, [r2, #0]
 801089a:	e00b      	b.n	80108b4 <HAL_RCC_OscConfig+0xcc>
 801089c:	4b6f      	ldr	r3, [pc, #444]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a6e      	ldr	r2, [pc, #440]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 80108a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108a6:	6013      	str	r3, [r2, #0]
 80108a8:	4b6c      	ldr	r3, [pc, #432]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a6b      	ldr	r2, [pc, #428]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 80108ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80108b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d013      	beq.n	80108e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108bc:	f7fb fac6 	bl	800be4c <HAL_GetTick>
 80108c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108c2:	e008      	b.n	80108d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108c4:	f7fb fac2 	bl	800be4c <HAL_GetTick>
 80108c8:	4602      	mov	r2, r0
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	2b64      	cmp	r3, #100	; 0x64
 80108d0:	d901      	bls.n	80108d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80108d2:	2303      	movs	r3, #3
 80108d4:	e21f      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108d6:	4b61      	ldr	r3, [pc, #388]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d0f0      	beq.n	80108c4 <HAL_RCC_OscConfig+0xdc>
 80108e2:	e014      	b.n	801090e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108e4:	f7fb fab2 	bl	800be4c <HAL_GetTick>
 80108e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80108ea:	e008      	b.n	80108fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108ec:	f7fb faae 	bl	800be4c <HAL_GetTick>
 80108f0:	4602      	mov	r2, r0
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	1ad3      	subs	r3, r2, r3
 80108f6:	2b64      	cmp	r3, #100	; 0x64
 80108f8:	d901      	bls.n	80108fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80108fa:	2303      	movs	r3, #3
 80108fc:	e20b      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80108fe:	4b57      	ldr	r3, [pc, #348]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010906:	2b00      	cmp	r3, #0
 8010908:	d1f0      	bne.n	80108ec <HAL_RCC_OscConfig+0x104>
 801090a:	e000      	b.n	801090e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801090c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f003 0302 	and.w	r3, r3, #2
 8010916:	2b00      	cmp	r3, #0
 8010918:	d06f      	beq.n	80109fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801091a:	4b50      	ldr	r3, [pc, #320]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	f003 030c 	and.w	r3, r3, #12
 8010922:	2b00      	cmp	r3, #0
 8010924:	d017      	beq.n	8010956 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8010926:	4b4d      	ldr	r3, [pc, #308]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801092e:	2b08      	cmp	r3, #8
 8010930:	d105      	bne.n	801093e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8010932:	4b4a      	ldr	r3, [pc, #296]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801093a:	2b00      	cmp	r3, #0
 801093c:	d00b      	beq.n	8010956 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801093e:	4b47      	ldr	r3, [pc, #284]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8010946:	2b0c      	cmp	r3, #12
 8010948:	d11c      	bne.n	8010984 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801094a:	4b44      	ldr	r3, [pc, #272]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010952:	2b00      	cmp	r3, #0
 8010954:	d116      	bne.n	8010984 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010956:	4b41      	ldr	r3, [pc, #260]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f003 0302 	and.w	r3, r3, #2
 801095e:	2b00      	cmp	r3, #0
 8010960:	d005      	beq.n	801096e <HAL_RCC_OscConfig+0x186>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	2b01      	cmp	r3, #1
 8010968:	d001      	beq.n	801096e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801096a:	2301      	movs	r3, #1
 801096c:	e1d3      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801096e:	4b3b      	ldr	r3, [pc, #236]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	691b      	ldr	r3, [r3, #16]
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	4937      	ldr	r1, [pc, #220]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 801097e:	4313      	orrs	r3, r2
 8010980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010982:	e03a      	b.n	80109fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d020      	beq.n	80109ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801098c:	4b34      	ldr	r3, [pc, #208]	; (8010a60 <HAL_RCC_OscConfig+0x278>)
 801098e:	2201      	movs	r2, #1
 8010990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010992:	f7fb fa5b 	bl	800be4c <HAL_GetTick>
 8010996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010998:	e008      	b.n	80109ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801099a:	f7fb fa57 	bl	800be4c <HAL_GetTick>
 801099e:	4602      	mov	r2, r0
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	2b02      	cmp	r3, #2
 80109a6:	d901      	bls.n	80109ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80109a8:	2303      	movs	r3, #3
 80109aa:	e1b4      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80109ac:	4b2b      	ldr	r3, [pc, #172]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f003 0302 	and.w	r3, r3, #2
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d0f0      	beq.n	801099a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80109b8:	4b28      	ldr	r3, [pc, #160]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	691b      	ldr	r3, [r3, #16]
 80109c4:	00db      	lsls	r3, r3, #3
 80109c6:	4925      	ldr	r1, [pc, #148]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 80109c8:	4313      	orrs	r3, r2
 80109ca:	600b      	str	r3, [r1, #0]
 80109cc:	e015      	b.n	80109fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80109ce:	4b24      	ldr	r3, [pc, #144]	; (8010a60 <HAL_RCC_OscConfig+0x278>)
 80109d0:	2200      	movs	r2, #0
 80109d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109d4:	f7fb fa3a 	bl	800be4c <HAL_GetTick>
 80109d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80109da:	e008      	b.n	80109ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80109dc:	f7fb fa36 	bl	800be4c <HAL_GetTick>
 80109e0:	4602      	mov	r2, r0
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	1ad3      	subs	r3, r2, r3
 80109e6:	2b02      	cmp	r3, #2
 80109e8:	d901      	bls.n	80109ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80109ea:	2303      	movs	r3, #3
 80109ec:	e193      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80109ee:	4b1b      	ldr	r3, [pc, #108]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f003 0302 	and.w	r3, r3, #2
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d1f0      	bne.n	80109dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f003 0308 	and.w	r3, r3, #8
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d036      	beq.n	8010a74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	695b      	ldr	r3, [r3, #20]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d016      	beq.n	8010a3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010a0e:	4b15      	ldr	r3, [pc, #84]	; (8010a64 <HAL_RCC_OscConfig+0x27c>)
 8010a10:	2201      	movs	r2, #1
 8010a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a14:	f7fb fa1a 	bl	800be4c <HAL_GetTick>
 8010a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010a1a:	e008      	b.n	8010a2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010a1c:	f7fb fa16 	bl	800be4c <HAL_GetTick>
 8010a20:	4602      	mov	r2, r0
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	1ad3      	subs	r3, r2, r3
 8010a26:	2b02      	cmp	r3, #2
 8010a28:	d901      	bls.n	8010a2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8010a2a:	2303      	movs	r3, #3
 8010a2c:	e173      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010a2e:	4b0b      	ldr	r3, [pc, #44]	; (8010a5c <HAL_RCC_OscConfig+0x274>)
 8010a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a32:	f003 0302 	and.w	r3, r3, #2
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d0f0      	beq.n	8010a1c <HAL_RCC_OscConfig+0x234>
 8010a3a:	e01b      	b.n	8010a74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010a3c:	4b09      	ldr	r3, [pc, #36]	; (8010a64 <HAL_RCC_OscConfig+0x27c>)
 8010a3e:	2200      	movs	r2, #0
 8010a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a42:	f7fb fa03 	bl	800be4c <HAL_GetTick>
 8010a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a48:	e00e      	b.n	8010a68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010a4a:	f7fb f9ff 	bl	800be4c <HAL_GetTick>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	2b02      	cmp	r3, #2
 8010a56:	d907      	bls.n	8010a68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	e15c      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
 8010a5c:	40023800 	.word	0x40023800
 8010a60:	42470000 	.word	0x42470000
 8010a64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a68:	4b8a      	ldr	r3, [pc, #552]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a6c:	f003 0302 	and.w	r3, r3, #2
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1ea      	bne.n	8010a4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f000 8097 	beq.w	8010bb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010a82:	2300      	movs	r3, #0
 8010a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010a86:	4b83      	ldr	r3, [pc, #524]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d10f      	bne.n	8010ab2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010a92:	2300      	movs	r3, #0
 8010a94:	60bb      	str	r3, [r7, #8]
 8010a96:	4b7f      	ldr	r3, [pc, #508]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9a:	4a7e      	ldr	r2, [pc, #504]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8010aa2:	4b7c      	ldr	r3, [pc, #496]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010aaa:	60bb      	str	r3, [r7, #8]
 8010aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ab2:	4b79      	ldr	r3, [pc, #484]	; (8010c98 <HAL_RCC_OscConfig+0x4b0>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d118      	bne.n	8010af0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010abe:	4b76      	ldr	r3, [pc, #472]	; (8010c98 <HAL_RCC_OscConfig+0x4b0>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	4a75      	ldr	r2, [pc, #468]	; (8010c98 <HAL_RCC_OscConfig+0x4b0>)
 8010ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010aca:	f7fb f9bf 	bl	800be4c <HAL_GetTick>
 8010ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ad0:	e008      	b.n	8010ae4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010ad2:	f7fb f9bb 	bl	800be4c <HAL_GetTick>
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	1ad3      	subs	r3, r2, r3
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	d901      	bls.n	8010ae4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8010ae0:	2303      	movs	r3, #3
 8010ae2:	e118      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ae4:	4b6c      	ldr	r3, [pc, #432]	; (8010c98 <HAL_RCC_OscConfig+0x4b0>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d0f0      	beq.n	8010ad2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d106      	bne.n	8010b06 <HAL_RCC_OscConfig+0x31e>
 8010af8:	4b66      	ldr	r3, [pc, #408]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010afc:	4a65      	ldr	r2, [pc, #404]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010afe:	f043 0301 	orr.w	r3, r3, #1
 8010b02:	6713      	str	r3, [r2, #112]	; 0x70
 8010b04:	e01c      	b.n	8010b40 <HAL_RCC_OscConfig+0x358>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	2b05      	cmp	r3, #5
 8010b0c:	d10c      	bne.n	8010b28 <HAL_RCC_OscConfig+0x340>
 8010b0e:	4b61      	ldr	r3, [pc, #388]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b12:	4a60      	ldr	r2, [pc, #384]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b14:	f043 0304 	orr.w	r3, r3, #4
 8010b18:	6713      	str	r3, [r2, #112]	; 0x70
 8010b1a:	4b5e      	ldr	r3, [pc, #376]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b1e:	4a5d      	ldr	r2, [pc, #372]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b20:	f043 0301 	orr.w	r3, r3, #1
 8010b24:	6713      	str	r3, [r2, #112]	; 0x70
 8010b26:	e00b      	b.n	8010b40 <HAL_RCC_OscConfig+0x358>
 8010b28:	4b5a      	ldr	r3, [pc, #360]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b2c:	4a59      	ldr	r2, [pc, #356]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b2e:	f023 0301 	bic.w	r3, r3, #1
 8010b32:	6713      	str	r3, [r2, #112]	; 0x70
 8010b34:	4b57      	ldr	r3, [pc, #348]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b38:	4a56      	ldr	r2, [pc, #344]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b3a:	f023 0304 	bic.w	r3, r3, #4
 8010b3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d015      	beq.n	8010b74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b48:	f7fb f980 	bl	800be4c <HAL_GetTick>
 8010b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b4e:	e00a      	b.n	8010b66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b50:	f7fb f97c 	bl	800be4c <HAL_GetTick>
 8010b54:	4602      	mov	r2, r0
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d901      	bls.n	8010b66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8010b62:	2303      	movs	r3, #3
 8010b64:	e0d7      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b66:	4b4b      	ldr	r3, [pc, #300]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b6a:	f003 0302 	and.w	r3, r3, #2
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d0ee      	beq.n	8010b50 <HAL_RCC_OscConfig+0x368>
 8010b72:	e014      	b.n	8010b9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b74:	f7fb f96a 	bl	800be4c <HAL_GetTick>
 8010b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b7a:	e00a      	b.n	8010b92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b7c:	f7fb f966 	bl	800be4c <HAL_GetTick>
 8010b80:	4602      	mov	r2, r0
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	1ad3      	subs	r3, r2, r3
 8010b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d901      	bls.n	8010b92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8010b8e:	2303      	movs	r3, #3
 8010b90:	e0c1      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b92:	4b40      	ldr	r3, [pc, #256]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b96:	f003 0302 	and.w	r3, r3, #2
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d1ee      	bne.n	8010b7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010b9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d105      	bne.n	8010bb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010ba4:	4b3b      	ldr	r3, [pc, #236]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba8:	4a3a      	ldr	r2, [pc, #232]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010bae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	699b      	ldr	r3, [r3, #24]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f000 80ad 	beq.w	8010d14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010bba:	4b36      	ldr	r3, [pc, #216]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010bbc:	689b      	ldr	r3, [r3, #8]
 8010bbe:	f003 030c 	and.w	r3, r3, #12
 8010bc2:	2b08      	cmp	r3, #8
 8010bc4:	d060      	beq.n	8010c88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	699b      	ldr	r3, [r3, #24]
 8010bca:	2b02      	cmp	r3, #2
 8010bcc:	d145      	bne.n	8010c5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010bce:	4b33      	ldr	r3, [pc, #204]	; (8010c9c <HAL_RCC_OscConfig+0x4b4>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010bd4:	f7fb f93a 	bl	800be4c <HAL_GetTick>
 8010bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010bda:	e008      	b.n	8010bee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010bdc:	f7fb f936 	bl	800be4c <HAL_GetTick>
 8010be0:	4602      	mov	r2, r0
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	1ad3      	subs	r3, r2, r3
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	d901      	bls.n	8010bee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8010bea:	2303      	movs	r3, #3
 8010bec:	e093      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010bee:	4b29      	ldr	r3, [pc, #164]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d1f0      	bne.n	8010bdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	69da      	ldr	r2, [r3, #28]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a1b      	ldr	r3, [r3, #32]
 8010c02:	431a      	orrs	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c08:	019b      	lsls	r3, r3, #6
 8010c0a:	431a      	orrs	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c10:	085b      	lsrs	r3, r3, #1
 8010c12:	3b01      	subs	r3, #1
 8010c14:	041b      	lsls	r3, r3, #16
 8010c16:	431a      	orrs	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c1c:	061b      	lsls	r3, r3, #24
 8010c1e:	431a      	orrs	r2, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c24:	071b      	lsls	r3, r3, #28
 8010c26:	491b      	ldr	r1, [pc, #108]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010c2c:	4b1b      	ldr	r3, [pc, #108]	; (8010c9c <HAL_RCC_OscConfig+0x4b4>)
 8010c2e:	2201      	movs	r2, #1
 8010c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c32:	f7fb f90b 	bl	800be4c <HAL_GetTick>
 8010c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c38:	e008      	b.n	8010c4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c3a:	f7fb f907 	bl	800be4c <HAL_GetTick>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	1ad3      	subs	r3, r2, r3
 8010c44:	2b02      	cmp	r3, #2
 8010c46:	d901      	bls.n	8010c4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8010c48:	2303      	movs	r3, #3
 8010c4a:	e064      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c4c:	4b11      	ldr	r3, [pc, #68]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d0f0      	beq.n	8010c3a <HAL_RCC_OscConfig+0x452>
 8010c58:	e05c      	b.n	8010d14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010c5a:	4b10      	ldr	r3, [pc, #64]	; (8010c9c <HAL_RCC_OscConfig+0x4b4>)
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c60:	f7fb f8f4 	bl	800be4c <HAL_GetTick>
 8010c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c66:	e008      	b.n	8010c7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c68:	f7fb f8f0 	bl	800be4c <HAL_GetTick>
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	1ad3      	subs	r3, r2, r3
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	d901      	bls.n	8010c7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8010c76:	2303      	movs	r3, #3
 8010c78:	e04d      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c7a:	4b06      	ldr	r3, [pc, #24]	; (8010c94 <HAL_RCC_OscConfig+0x4ac>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d1f0      	bne.n	8010c68 <HAL_RCC_OscConfig+0x480>
 8010c86:	e045      	b.n	8010d14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	699b      	ldr	r3, [r3, #24]
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d107      	bne.n	8010ca0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8010c90:	2301      	movs	r3, #1
 8010c92:	e040      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
 8010c94:	40023800 	.word	0x40023800
 8010c98:	40007000 	.word	0x40007000
 8010c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010ca0:	4b1f      	ldr	r3, [pc, #124]	; (8010d20 <HAL_RCC_OscConfig+0x538>)
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	699b      	ldr	r3, [r3, #24]
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d030      	beq.n	8010d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d129      	bne.n	8010d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d122      	bne.n	8010d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010cca:	68fa      	ldr	r2, [r7, #12]
 8010ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010cd0:	4013      	ands	r3, r2
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d119      	bne.n	8010d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ce6:	085b      	lsrs	r3, r3, #1
 8010ce8:	3b01      	subs	r3, #1
 8010cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d10f      	bne.n	8010d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d107      	bne.n	8010d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d001      	beq.n	8010d14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8010d10:	2301      	movs	r3, #1
 8010d12:	e000      	b.n	8010d16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3718      	adds	r7, #24
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	40023800 	.word	0x40023800

08010d24 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b086      	sub	sp, #24
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	2b02      	cmp	r3, #2
 8010d3a:	d904      	bls.n	8010d46 <HAL_SAI_InitProtocol+0x22>
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	3b03      	subs	r3, #3
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d812      	bhi.n	8010d6a <HAL_SAI_InitProtocol+0x46>
 8010d44:	e008      	b.n	8010d58 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	68b9      	ldr	r1, [r7, #8]
 8010d4c:	68f8      	ldr	r0, [r7, #12]
 8010d4e:	f000 f945 	bl	8010fdc <SAI_InitI2S>
 8010d52:	4603      	mov	r3, r0
 8010d54:	75fb      	strb	r3, [r7, #23]
      break;
 8010d56:	e00b      	b.n	8010d70 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f000 f9ea 	bl	8011138 <SAI_InitPCM>
 8010d64:	4603      	mov	r3, r0
 8010d66:	75fb      	strb	r3, [r7, #23]
      break;
 8010d68:	e002      	b.n	8010d70 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8010d6e:	bf00      	nop
  }

  if (status == HAL_OK)
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d104      	bne.n	8010d80 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8010d76:	68f8      	ldr	r0, [r7, #12]
 8010d78:	f000 f808 	bl	8010d8c <HAL_SAI_Init>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3718      	adds	r7, #24
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8010d94:	2300      	movs	r3, #0
 8010d96:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8010da0:	2300      	movs	r3, #0
 8010da2:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d101      	bne.n	8010dae <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8010daa:	2301      	movs	r3, #1
 8010dac:	e10c      	b.n	8010fc8 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f7fa fce4 	bl	800b790 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2202      	movs	r2, #2
 8010dcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f000 fa31 	bl	8011238 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f000 fa66 	bl	80112a8 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6a1b      	ldr	r3, [r3, #32]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d030      	beq.n	8010e46 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 faa3 	bl	8011330 <SAI_GetInputClock>
 8010dea:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8010dec:	68ba      	ldr	r2, [r7, #8]
 8010dee:	4613      	mov	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	4413      	add	r3, r2
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	461a      	mov	r2, r3
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6a1b      	ldr	r3, [r3, #32]
 8010dfc:	025b      	lsls	r3, r3, #9
 8010dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e02:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	4a72      	ldr	r2, [pc, #456]	; (8010fd0 <HAL_SAI_Init+0x244>)
 8010e08:	fba2 2303 	umull	r2, r3, r2, r3
 8010e0c:	08da      	lsrs	r2, r3, #3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8010e12:	68f9      	ldr	r1, [r7, #12]
 8010e14:	4b6e      	ldr	r3, [pc, #440]	; (8010fd0 <HAL_SAI_Init+0x244>)
 8010e16:	fba3 2301 	umull	r2, r3, r3, r1
 8010e1a:	08da      	lsrs	r2, r3, #3
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	4413      	add	r3, r2
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	1aca      	subs	r2, r1, r3
 8010e26:	2a08      	cmp	r2, #8
 8010e28:	d904      	bls.n	8010e34 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e38:	2b04      	cmp	r3, #4
 8010e3a:	d104      	bne.n	8010e46 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e40:	085a      	lsrs	r2, r3, #1
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d003      	beq.n	8010e56 <HAL_SAI_Init+0xca>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	2b02      	cmp	r3, #2
 8010e54:	d109      	bne.n	8010e6a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d101      	bne.n	8010e62 <HAL_SAI_Init+0xd6>
 8010e5e:	2300      	movs	r3, #0
 8010e60:	e001      	b.n	8010e66 <HAL_SAI_Init+0xda>
 8010e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e66:	617b      	str	r3, [r7, #20]
 8010e68:	e008      	b.n	8010e7c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d102      	bne.n	8010e78 <HAL_SAI_Init+0xec>
 8010e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e76:	e000      	b.n	8010e7a <HAL_SAI_Init+0xee>
 8010e78:	2300      	movs	r3, #0
 8010e7a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	2b03      	cmp	r3, #3
 8010e82:	d811      	bhi.n	8010ea8 <HAL_SAI_Init+0x11c>
 8010e84:	2b02      	cmp	r3, #2
 8010e86:	d20b      	bcs.n	8010ea0 <HAL_SAI_Init+0x114>
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <HAL_SAI_Init+0x106>
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d003      	beq.n	8010e98 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8010e90:	e00a      	b.n	8010ea8 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8010e92:	2300      	movs	r3, #0
 8010e94:	613b      	str	r3, [r7, #16]
    break;
 8010e96:	e008      	b.n	8010eaa <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8010e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e9c:	613b      	str	r3, [r7, #16]
    break;
 8010e9e:	e004      	b.n	8010eaa <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8010ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ea4:	613b      	str	r3, [r7, #16]
    break;
 8010ea6:	e000      	b.n	8010eaa <HAL_SAI_Init+0x11e>
      break;
 8010ea8:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	6819      	ldr	r1, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	4b47      	ldr	r3, [pc, #284]	; (8010fd4 <HAL_SAI_Init+0x248>)
 8010eb6:	400b      	ands	r3, r1
 8010eb8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	6819      	ldr	r1, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	685a      	ldr	r2, [r3, #4]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ec8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010ece:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ed4:	431a      	orrs	r2, r3
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8010ee2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	691b      	ldr	r3, [r3, #16]
 8010ee8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010eee:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef4:	051b      	lsls	r3, r3, #20
 8010ef6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	430a      	orrs	r2, r1
 8010efe:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	6812      	ldr	r2, [r2, #0]
 8010f0a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8010f0e:	f023 030f 	bic.w	r3, r3, #15
 8010f12:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	6859      	ldr	r1, [r3, #4]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	699a      	ldr	r2, [r3, #24]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f22:	431a      	orrs	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f28:	431a      	orrs	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	430a      	orrs	r2, r1
 8010f30:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	6899      	ldr	r1, [r3, #8]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	4b26      	ldr	r3, [pc, #152]	; (8010fd8 <HAL_SAI_Init+0x24c>)
 8010f3e:	400b      	ands	r3, r1
 8010f40:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	6899      	ldr	r1, [r3, #8]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f4c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010f52:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8010f58:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8010f5e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f64:	3b01      	subs	r3, #1
 8010f66:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8010f68:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	430a      	orrs	r2, r1
 8010f70:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	68d9      	ldr	r1, [r3, #12]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8010f80:	400b      	ands	r3, r1
 8010f82:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68d9      	ldr	r1, [r3, #12]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f92:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f98:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8010f9a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010fa0:	3b01      	subs	r3, #1
 8010fa2:	021b      	lsls	r3, r3, #8
 8010fa4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	430a      	orrs	r2, r1
 8010fac:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3718      	adds	r7, #24
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	cccccccd 	.word	0xcccccccd
 8010fd4:	ff05c010 	.word	0xff05c010
 8010fd8:	fff88000 	.word	0xfff88000

08010fdc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b085      	sub	sp, #20
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	607a      	str	r2, [r7, #4]
 8010fe8:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2200      	movs	r2, #0
 8010fee:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d003      	beq.n	8011006 <SAI_InitI2S+0x2a>
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	2b02      	cmp	r3, #2
 8011004:	d103      	bne.n	801100e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2200      	movs	r2, #0
 801100a:	641a      	str	r2, [r3, #64]	; 0x40
 801100c:	e002      	b.n	8011014 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2201      	movs	r2, #1
 8011012:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801101a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011022:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	683a      	ldr	r2, [r7, #0]
 801102e:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	f003 0301 	and.w	r3, r3, #1
 8011036:	2b00      	cmp	r3, #0
 8011038:	d001      	beq.n	801103e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	e076      	b.n	801112c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d107      	bne.n	8011054 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2200      	movs	r2, #0
 8011048:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8011050:	655a      	str	r2, [r3, #84]	; 0x54
 8011052:	e006      	b.n	8011062 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801105a:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2200      	movs	r2, #0
 8011060:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2b03      	cmp	r3, #3
 8011066:	d84f      	bhi.n	8011108 <SAI_InitI2S+0x12c>
 8011068:	a201      	add	r2, pc, #4	; (adr r2, 8011070 <SAI_InitI2S+0x94>)
 801106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801106e:	bf00      	nop
 8011070:	08011081 	.word	0x08011081
 8011074:	080110a3 	.word	0x080110a3
 8011078:	080110c5 	.word	0x080110c5
 801107c:	080110e7 	.word	0x080110e7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2280      	movs	r2, #128	; 0x80
 8011084:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	085b      	lsrs	r3, r3, #1
 801108a:	015a      	lsls	r2, r3, #5
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	085b      	lsrs	r3, r3, #1
 8011094:	011a      	lsls	r2, r3, #4
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	2240      	movs	r2, #64	; 0x40
 801109e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80110a0:	e034      	b.n	801110c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2280      	movs	r2, #128	; 0x80
 80110a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	085b      	lsrs	r3, r3, #1
 80110ac:	019a      	lsls	r2, r3, #6
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	085b      	lsrs	r3, r3, #1
 80110b6:	015a      	lsls	r2, r3, #5
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2280      	movs	r2, #128	; 0x80
 80110c0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80110c2:	e023      	b.n	801110c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	22c0      	movs	r2, #192	; 0xc0
 80110c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	085b      	lsrs	r3, r3, #1
 80110ce:	019a      	lsls	r2, r3, #6
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	085b      	lsrs	r3, r3, #1
 80110d8:	015a      	lsls	r2, r3, #5
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2280      	movs	r2, #128	; 0x80
 80110e2:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80110e4:	e012      	b.n	801110c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	22e0      	movs	r2, #224	; 0xe0
 80110ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	085b      	lsrs	r3, r3, #1
 80110f0:	019a      	lsls	r2, r3, #6
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	085b      	lsrs	r3, r3, #1
 80110fa:	015a      	lsls	r2, r3, #5
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2280      	movs	r2, #128	; 0x80
 8011104:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8011106:	e001      	b.n	801110c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8011108:	2301      	movs	r3, #1
 801110a:	e00f      	b.n	801112c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	2b02      	cmp	r3, #2
 8011110:	d10b      	bne.n	801112a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2b01      	cmp	r3, #1
 8011116:	d102      	bne.n	801111e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2210      	movs	r2, #16
 801111c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2b02      	cmp	r3, #2
 8011122:	d102      	bne.n	801112a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2208      	movs	r2, #8
 8011128:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 801112a:	2300      	movs	r3, #0
}
 801112c:	4618      	mov	r0, r3
 801112e:	3714      	adds	r7, #20
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8011138:	b480      	push	{r7}
 801113a:	b085      	sub	sp, #20
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
 8011144:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2200      	movs	r2, #0
 801114a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2200      	movs	r2, #0
 8011150:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d003      	beq.n	8011162 <SAI_InitPCM+0x2a>
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	2b02      	cmp	r3, #2
 8011160:	d103      	bne.n	801116a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2201      	movs	r2, #1
 8011166:	641a      	str	r2, [r3, #64]	; 0x40
 8011168:	e002      	b.n	8011170 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2200      	movs	r2, #0
 801116e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2200      	movs	r2, #0
 8011174:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801117c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8011184:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2200      	movs	r2, #0
 801118a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	683a      	ldr	r2, [r7, #0]
 8011190:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011198:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	2b04      	cmp	r3, #4
 801119e:	d103      	bne.n	80111a8 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2201      	movs	r2, #1
 80111a4:	649a      	str	r2, [r3, #72]	; 0x48
 80111a6:	e002      	b.n	80111ae <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	220d      	movs	r2, #13
 80111ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2b03      	cmp	r3, #3
 80111b2:	d837      	bhi.n	8011224 <SAI_InitPCM+0xec>
 80111b4:	a201      	add	r2, pc, #4	; (adr r2, 80111bc <SAI_InitPCM+0x84>)
 80111b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ba:	bf00      	nop
 80111bc:	080111cd 	.word	0x080111cd
 80111c0:	080111e3 	.word	0x080111e3
 80111c4:	080111f9 	.word	0x080111f9
 80111c8:	0801120f 	.word	0x0801120f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2280      	movs	r2, #128	; 0x80
 80111d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	011a      	lsls	r2, r3, #4
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2240      	movs	r2, #64	; 0x40
 80111de:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80111e0:	e022      	b.n	8011228 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2280      	movs	r2, #128	; 0x80
 80111e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	015a      	lsls	r2, r3, #5
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2280      	movs	r2, #128	; 0x80
 80111f4:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80111f6:	e017      	b.n	8011228 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	22c0      	movs	r2, #192	; 0xc0
 80111fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	015a      	lsls	r2, r3, #5
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2280      	movs	r2, #128	; 0x80
 801120a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 801120c:	e00c      	b.n	8011228 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	22e0      	movs	r2, #224	; 0xe0
 8011212:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	015a      	lsls	r2, r3, #5
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2280      	movs	r2, #128	; 0x80
 8011220:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8011222:	e001      	b.n	8011228 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop

08011238 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8011240:	4b17      	ldr	r3, [pc, #92]	; (80112a0 <SAI_Disable+0x68>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4a17      	ldr	r2, [pc, #92]	; (80112a4 <SAI_Disable+0x6c>)
 8011246:	fba2 2303 	umull	r2, r3, r2, r3
 801124a:	0b1b      	lsrs	r3, r3, #12
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011262:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	1e5a      	subs	r2, r3, #1
 8011268:	60fa      	str	r2, [r7, #12]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d10a      	bne.n	8011284 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011274:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 801127e:	2303      	movs	r3, #3
 8011280:	72fb      	strb	r3, [r7, #11]
      break;
 8011282:	e006      	b.n	8011292 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1e8      	bne.n	8011264 <SAI_Disable+0x2c>

  return status;
 8011292:	7afb      	ldrb	r3, [r7, #11]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3714      	adds	r7, #20
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	20000038 	.word	0x20000038
 80112a4:	95cbec1b 	.word	0x95cbec1b

080112a8 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	2b02      	cmp	r3, #2
 80112b6:	d00c      	beq.n	80112d2 <SAI_BlockSynchroConfig+0x2a>
 80112b8:	2b02      	cmp	r3, #2
 80112ba:	d80d      	bhi.n	80112d8 <SAI_BlockSynchroConfig+0x30>
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <SAI_BlockSynchroConfig+0x1e>
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d003      	beq.n	80112cc <SAI_BlockSynchroConfig+0x24>
 80112c4:	e008      	b.n	80112d8 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80112c6:	2300      	movs	r3, #0
 80112c8:	60fb      	str	r3, [r7, #12]
      break;
 80112ca:	e008      	b.n	80112de <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80112cc:	2310      	movs	r3, #16
 80112ce:	60fb      	str	r3, [r7, #12]
      break;
 80112d0:	e005      	b.n	80112de <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80112d2:	2320      	movs	r3, #32
 80112d4:	60fb      	str	r3, [r7, #12]
      break;
 80112d6:	e002      	b.n	80112de <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80112d8:	2300      	movs	r3, #0
 80112da:	60fb      	str	r3, [r7, #12]
      break;
 80112dc:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	2b03      	cmp	r3, #3
 80112e4:	d103      	bne.n	80112ee <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f043 0301 	orr.w	r3, r3, #1
 80112ec:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	4a0b      	ldr	r2, [pc, #44]	; (8011320 <SAI_BlockSynchroConfig+0x78>)
 80112f4:	4293      	cmp	r3, r2
 80112f6:	d004      	beq.n	8011302 <SAI_BlockSynchroConfig+0x5a>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4a09      	ldr	r2, [pc, #36]	; (8011324 <SAI_BlockSynchroConfig+0x7c>)
 80112fe:	4293      	cmp	r3, r2
 8011300:	d103      	bne.n	801130a <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8011302:	4a09      	ldr	r2, [pc, #36]	; (8011328 <SAI_BlockSynchroConfig+0x80>)
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6013      	str	r3, [r2, #0]
 8011308:	e003      	b.n	8011312 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 801130a:	4a08      	ldr	r2, [pc, #32]	; (801132c <SAI_BlockSynchroConfig+0x84>)
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8011310:	bf00      	nop
 8011312:	bf00      	nop
 8011314:	3714      	adds	r7, #20
 8011316:	46bd      	mov	sp, r7
 8011318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131c:	4770      	bx	lr
 801131e:	bf00      	nop
 8011320:	40015804 	.word	0x40015804
 8011324:	40015824 	.word	0x40015824
 8011328:	40015800 	.word	0x40015800
 801132c:	40015c00 	.word	0x40015c00

08011330 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8011338:	2300      	movs	r3, #0
 801133a:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4a0a      	ldr	r2, [pc, #40]	; (801136c <SAI_GetInputClock+0x3c>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d004      	beq.n	8011350 <SAI_GetInputClock+0x20>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	4a09      	ldr	r2, [pc, #36]	; (8011370 <SAI_GetInputClock+0x40>)
 801134c:	4293      	cmp	r3, r2
 801134e:	d104      	bne.n	801135a <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8011350:	2004      	movs	r0, #4
 8011352:	f7fe fdcf 	bl	800fef4 <HAL_RCCEx_GetPeriphCLKFreq>
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	e003      	b.n	8011362 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 801135a:	2008      	movs	r0, #8
 801135c:	f7fe fdca 	bl	800fef4 <HAL_RCCEx_GetPeriphCLKFreq>
 8011360:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8011362:	68fb      	ldr	r3, [r7, #12]
}
 8011364:	4618      	mov	r0, r3
 8011366:	3710      	adds	r7, #16
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	40015804 	.word	0x40015804
 8011370:	40015824 	.word	0x40015824

08011374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d101      	bne.n	8011386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011382:	2301      	movs	r3, #1
 8011384:	e07b      	b.n	801147e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801138a:	2b00      	cmp	r3, #0
 801138c:	d108      	bne.n	80113a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011396:	d009      	beq.n	80113ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	61da      	str	r2, [r3, #28]
 801139e:	e005      	b.n	80113ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2200      	movs	r2, #0
 80113aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d106      	bne.n	80113cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2200      	movs	r2, #0
 80113c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7fa f932 	bl	800b630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2202      	movs	r2, #2
 80113d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80113e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	689b      	ldr	r3, [r3, #8]
 80113f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80113f4:	431a      	orrs	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113fe:	431a      	orrs	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	691b      	ldr	r3, [r3, #16]
 8011404:	f003 0302 	and.w	r3, r3, #2
 8011408:	431a      	orrs	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	695b      	ldr	r3, [r3, #20]
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	431a      	orrs	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	699b      	ldr	r3, [r3, #24]
 8011418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801141c:	431a      	orrs	r2, r3
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	69db      	ldr	r3, [r3, #28]
 8011422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011426:	431a      	orrs	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a1b      	ldr	r3, [r3, #32]
 801142c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011430:	ea42 0103 	orr.w	r1, r2, r3
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011438:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	430a      	orrs	r2, r1
 8011442:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	699b      	ldr	r3, [r3, #24]
 8011448:	0c1b      	lsrs	r3, r3, #16
 801144a:	f003 0104 	and.w	r1, r3, #4
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011452:	f003 0210 	and.w	r2, r3, #16
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	430a      	orrs	r2, r1
 801145c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	69da      	ldr	r2, [r3, #28]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801146c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2200      	movs	r2, #0
 8011472:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2201      	movs	r2, #1
 8011478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801147c:	2300      	movs	r3, #0
}
 801147e:	4618      	mov	r0, r3
 8011480:	3708      	adds	r7, #8
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011486:	b580      	push	{r7, lr}
 8011488:	b082      	sub	sp, #8
 801148a:	af00      	add	r7, sp, #0
 801148c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d101      	bne.n	8011498 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011494:	2301      	movs	r3, #1
 8011496:	e042      	b.n	801151e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d106      	bne.n	80114b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f7fa f927 	bl	800b700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2224      	movs	r2, #36	; 0x24
 80114b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	68da      	ldr	r2, [r3, #12]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80114c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f000 f82c 	bl	8011528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	691a      	ldr	r2, [r3, #16]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80114de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	695a      	ldr	r2, [r3, #20]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80114ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	68da      	ldr	r2, [r3, #12]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80114fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2220      	movs	r2, #32
 801150a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2220      	movs	r2, #32
 8011512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2200      	movs	r2, #0
 801151a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3708      	adds	r7, #8
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
	...

08011528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801152c:	b0c0      	sub	sp, #256	; 0x100
 801152e:	af00      	add	r7, sp, #0
 8011530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	691b      	ldr	r3, [r3, #16]
 801153c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011544:	68d9      	ldr	r1, [r3, #12]
 8011546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801154a:	681a      	ldr	r2, [r3, #0]
 801154c:	ea40 0301 	orr.w	r3, r0, r1
 8011550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011556:	689a      	ldr	r2, [r3, #8]
 8011558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801155c:	691b      	ldr	r3, [r3, #16]
 801155e:	431a      	orrs	r2, r3
 8011560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011564:	695b      	ldr	r3, [r3, #20]
 8011566:	431a      	orrs	r2, r3
 8011568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801156c:	69db      	ldr	r3, [r3, #28]
 801156e:	4313      	orrs	r3, r2
 8011570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011580:	f021 010c 	bic.w	r1, r1, #12
 8011584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801158e:	430b      	orrs	r3, r1
 8011590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	695b      	ldr	r3, [r3, #20]
 801159a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801159e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115a2:	6999      	ldr	r1, [r3, #24]
 80115a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	ea40 0301 	orr.w	r3, r0, r1
 80115ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80115b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	4b8f      	ldr	r3, [pc, #572]	; (80117f4 <UART_SetConfig+0x2cc>)
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d005      	beq.n	80115c8 <UART_SetConfig+0xa0>
 80115bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	4b8d      	ldr	r3, [pc, #564]	; (80117f8 <UART_SetConfig+0x2d0>)
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d104      	bne.n	80115d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80115c8:	f7fe f956 	bl	800f878 <HAL_RCC_GetPCLK2Freq>
 80115cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80115d0:	e003      	b.n	80115da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80115d2:	f7fe f93d 	bl	800f850 <HAL_RCC_GetPCLK1Freq>
 80115d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115de:	69db      	ldr	r3, [r3, #28]
 80115e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115e4:	f040 810c 	bne.w	8011800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80115e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80115ec:	2200      	movs	r2, #0
 80115ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80115f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80115f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80115fa:	4622      	mov	r2, r4
 80115fc:	462b      	mov	r3, r5
 80115fe:	1891      	adds	r1, r2, r2
 8011600:	65b9      	str	r1, [r7, #88]	; 0x58
 8011602:	415b      	adcs	r3, r3
 8011604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801160a:	4621      	mov	r1, r4
 801160c:	eb12 0801 	adds.w	r8, r2, r1
 8011610:	4629      	mov	r1, r5
 8011612:	eb43 0901 	adc.w	r9, r3, r1
 8011616:	f04f 0200 	mov.w	r2, #0
 801161a:	f04f 0300 	mov.w	r3, #0
 801161e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801162a:	4690      	mov	r8, r2
 801162c:	4699      	mov	r9, r3
 801162e:	4623      	mov	r3, r4
 8011630:	eb18 0303 	adds.w	r3, r8, r3
 8011634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011638:	462b      	mov	r3, r5
 801163a:	eb49 0303 	adc.w	r3, r9, r3
 801163e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	2200      	movs	r2, #0
 801164a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801164e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011656:	460b      	mov	r3, r1
 8011658:	18db      	adds	r3, r3, r3
 801165a:	653b      	str	r3, [r7, #80]	; 0x50
 801165c:	4613      	mov	r3, r2
 801165e:	eb42 0303 	adc.w	r3, r2, r3
 8011662:	657b      	str	r3, [r7, #84]	; 0x54
 8011664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801166c:	f7ef faba 	bl	8000be4 <__aeabi_uldivmod>
 8011670:	4602      	mov	r2, r0
 8011672:	460b      	mov	r3, r1
 8011674:	4b61      	ldr	r3, [pc, #388]	; (80117fc <UART_SetConfig+0x2d4>)
 8011676:	fba3 2302 	umull	r2, r3, r3, r2
 801167a:	095b      	lsrs	r3, r3, #5
 801167c:	011c      	lsls	r4, r3, #4
 801167e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011682:	2200      	movs	r2, #0
 8011684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801168c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8011690:	4642      	mov	r2, r8
 8011692:	464b      	mov	r3, r9
 8011694:	1891      	adds	r1, r2, r2
 8011696:	64b9      	str	r1, [r7, #72]	; 0x48
 8011698:	415b      	adcs	r3, r3
 801169a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801169c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80116a0:	4641      	mov	r1, r8
 80116a2:	eb12 0a01 	adds.w	sl, r2, r1
 80116a6:	4649      	mov	r1, r9
 80116a8:	eb43 0b01 	adc.w	fp, r3, r1
 80116ac:	f04f 0200 	mov.w	r2, #0
 80116b0:	f04f 0300 	mov.w	r3, #0
 80116b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80116b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80116bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80116c0:	4692      	mov	sl, r2
 80116c2:	469b      	mov	fp, r3
 80116c4:	4643      	mov	r3, r8
 80116c6:	eb1a 0303 	adds.w	r3, sl, r3
 80116ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80116ce:	464b      	mov	r3, r9
 80116d0:	eb4b 0303 	adc.w	r3, fp, r3
 80116d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80116d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80116e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80116e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80116ec:	460b      	mov	r3, r1
 80116ee:	18db      	adds	r3, r3, r3
 80116f0:	643b      	str	r3, [r7, #64]	; 0x40
 80116f2:	4613      	mov	r3, r2
 80116f4:	eb42 0303 	adc.w	r3, r2, r3
 80116f8:	647b      	str	r3, [r7, #68]	; 0x44
 80116fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80116fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011702:	f7ef fa6f 	bl	8000be4 <__aeabi_uldivmod>
 8011706:	4602      	mov	r2, r0
 8011708:	460b      	mov	r3, r1
 801170a:	4611      	mov	r1, r2
 801170c:	4b3b      	ldr	r3, [pc, #236]	; (80117fc <UART_SetConfig+0x2d4>)
 801170e:	fba3 2301 	umull	r2, r3, r3, r1
 8011712:	095b      	lsrs	r3, r3, #5
 8011714:	2264      	movs	r2, #100	; 0x64
 8011716:	fb02 f303 	mul.w	r3, r2, r3
 801171a:	1acb      	subs	r3, r1, r3
 801171c:	00db      	lsls	r3, r3, #3
 801171e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011722:	4b36      	ldr	r3, [pc, #216]	; (80117fc <UART_SetConfig+0x2d4>)
 8011724:	fba3 2302 	umull	r2, r3, r3, r2
 8011728:	095b      	lsrs	r3, r3, #5
 801172a:	005b      	lsls	r3, r3, #1
 801172c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011730:	441c      	add	r4, r3
 8011732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011736:	2200      	movs	r2, #0
 8011738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801173c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011744:	4642      	mov	r2, r8
 8011746:	464b      	mov	r3, r9
 8011748:	1891      	adds	r1, r2, r2
 801174a:	63b9      	str	r1, [r7, #56]	; 0x38
 801174c:	415b      	adcs	r3, r3
 801174e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011754:	4641      	mov	r1, r8
 8011756:	1851      	adds	r1, r2, r1
 8011758:	6339      	str	r1, [r7, #48]	; 0x30
 801175a:	4649      	mov	r1, r9
 801175c:	414b      	adcs	r3, r1
 801175e:	637b      	str	r3, [r7, #52]	; 0x34
 8011760:	f04f 0200 	mov.w	r2, #0
 8011764:	f04f 0300 	mov.w	r3, #0
 8011768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801176c:	4659      	mov	r1, fp
 801176e:	00cb      	lsls	r3, r1, #3
 8011770:	4651      	mov	r1, sl
 8011772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011776:	4651      	mov	r1, sl
 8011778:	00ca      	lsls	r2, r1, #3
 801177a:	4610      	mov	r0, r2
 801177c:	4619      	mov	r1, r3
 801177e:	4603      	mov	r3, r0
 8011780:	4642      	mov	r2, r8
 8011782:	189b      	adds	r3, r3, r2
 8011784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011788:	464b      	mov	r3, r9
 801178a:	460a      	mov	r2, r1
 801178c:	eb42 0303 	adc.w	r3, r2, r3
 8011790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	2200      	movs	r2, #0
 801179c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80117a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80117a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80117a8:	460b      	mov	r3, r1
 80117aa:	18db      	adds	r3, r3, r3
 80117ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80117ae:	4613      	mov	r3, r2
 80117b0:	eb42 0303 	adc.w	r3, r2, r3
 80117b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80117ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80117be:	f7ef fa11 	bl	8000be4 <__aeabi_uldivmod>
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	4b0d      	ldr	r3, [pc, #52]	; (80117fc <UART_SetConfig+0x2d4>)
 80117c8:	fba3 1302 	umull	r1, r3, r3, r2
 80117cc:	095b      	lsrs	r3, r3, #5
 80117ce:	2164      	movs	r1, #100	; 0x64
 80117d0:	fb01 f303 	mul.w	r3, r1, r3
 80117d4:	1ad3      	subs	r3, r2, r3
 80117d6:	00db      	lsls	r3, r3, #3
 80117d8:	3332      	adds	r3, #50	; 0x32
 80117da:	4a08      	ldr	r2, [pc, #32]	; (80117fc <UART_SetConfig+0x2d4>)
 80117dc:	fba2 2303 	umull	r2, r3, r2, r3
 80117e0:	095b      	lsrs	r3, r3, #5
 80117e2:	f003 0207 	and.w	r2, r3, #7
 80117e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4422      	add	r2, r4
 80117ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80117f0:	e106      	b.n	8011a00 <UART_SetConfig+0x4d8>
 80117f2:	bf00      	nop
 80117f4:	40011000 	.word	0x40011000
 80117f8:	40011400 	.word	0x40011400
 80117fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011804:	2200      	movs	r2, #0
 8011806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801180a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801180e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011812:	4642      	mov	r2, r8
 8011814:	464b      	mov	r3, r9
 8011816:	1891      	adds	r1, r2, r2
 8011818:	6239      	str	r1, [r7, #32]
 801181a:	415b      	adcs	r3, r3
 801181c:	627b      	str	r3, [r7, #36]	; 0x24
 801181e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011822:	4641      	mov	r1, r8
 8011824:	1854      	adds	r4, r2, r1
 8011826:	4649      	mov	r1, r9
 8011828:	eb43 0501 	adc.w	r5, r3, r1
 801182c:	f04f 0200 	mov.w	r2, #0
 8011830:	f04f 0300 	mov.w	r3, #0
 8011834:	00eb      	lsls	r3, r5, #3
 8011836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801183a:	00e2      	lsls	r2, r4, #3
 801183c:	4614      	mov	r4, r2
 801183e:	461d      	mov	r5, r3
 8011840:	4643      	mov	r3, r8
 8011842:	18e3      	adds	r3, r4, r3
 8011844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011848:	464b      	mov	r3, r9
 801184a:	eb45 0303 	adc.w	r3, r5, r3
 801184e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801185e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011862:	f04f 0200 	mov.w	r2, #0
 8011866:	f04f 0300 	mov.w	r3, #0
 801186a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801186e:	4629      	mov	r1, r5
 8011870:	008b      	lsls	r3, r1, #2
 8011872:	4621      	mov	r1, r4
 8011874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011878:	4621      	mov	r1, r4
 801187a:	008a      	lsls	r2, r1, #2
 801187c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011880:	f7ef f9b0 	bl	8000be4 <__aeabi_uldivmod>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	4b60      	ldr	r3, [pc, #384]	; (8011a0c <UART_SetConfig+0x4e4>)
 801188a:	fba3 2302 	umull	r2, r3, r3, r2
 801188e:	095b      	lsrs	r3, r3, #5
 8011890:	011c      	lsls	r4, r3, #4
 8011892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011896:	2200      	movs	r2, #0
 8011898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801189c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80118a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80118a4:	4642      	mov	r2, r8
 80118a6:	464b      	mov	r3, r9
 80118a8:	1891      	adds	r1, r2, r2
 80118aa:	61b9      	str	r1, [r7, #24]
 80118ac:	415b      	adcs	r3, r3
 80118ae:	61fb      	str	r3, [r7, #28]
 80118b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80118b4:	4641      	mov	r1, r8
 80118b6:	1851      	adds	r1, r2, r1
 80118b8:	6139      	str	r1, [r7, #16]
 80118ba:	4649      	mov	r1, r9
 80118bc:	414b      	adcs	r3, r1
 80118be:	617b      	str	r3, [r7, #20]
 80118c0:	f04f 0200 	mov.w	r2, #0
 80118c4:	f04f 0300 	mov.w	r3, #0
 80118c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80118cc:	4659      	mov	r1, fp
 80118ce:	00cb      	lsls	r3, r1, #3
 80118d0:	4651      	mov	r1, sl
 80118d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80118d6:	4651      	mov	r1, sl
 80118d8:	00ca      	lsls	r2, r1, #3
 80118da:	4610      	mov	r0, r2
 80118dc:	4619      	mov	r1, r3
 80118de:	4603      	mov	r3, r0
 80118e0:	4642      	mov	r2, r8
 80118e2:	189b      	adds	r3, r3, r2
 80118e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80118e8:	464b      	mov	r3, r9
 80118ea:	460a      	mov	r2, r1
 80118ec:	eb42 0303 	adc.w	r3, r2, r3
 80118f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80118f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	2200      	movs	r2, #0
 80118fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80118fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011900:	f04f 0200 	mov.w	r2, #0
 8011904:	f04f 0300 	mov.w	r3, #0
 8011908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801190c:	4649      	mov	r1, r9
 801190e:	008b      	lsls	r3, r1, #2
 8011910:	4641      	mov	r1, r8
 8011912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011916:	4641      	mov	r1, r8
 8011918:	008a      	lsls	r2, r1, #2
 801191a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801191e:	f7ef f961 	bl	8000be4 <__aeabi_uldivmod>
 8011922:	4602      	mov	r2, r0
 8011924:	460b      	mov	r3, r1
 8011926:	4611      	mov	r1, r2
 8011928:	4b38      	ldr	r3, [pc, #224]	; (8011a0c <UART_SetConfig+0x4e4>)
 801192a:	fba3 2301 	umull	r2, r3, r3, r1
 801192e:	095b      	lsrs	r3, r3, #5
 8011930:	2264      	movs	r2, #100	; 0x64
 8011932:	fb02 f303 	mul.w	r3, r2, r3
 8011936:	1acb      	subs	r3, r1, r3
 8011938:	011b      	lsls	r3, r3, #4
 801193a:	3332      	adds	r3, #50	; 0x32
 801193c:	4a33      	ldr	r2, [pc, #204]	; (8011a0c <UART_SetConfig+0x4e4>)
 801193e:	fba2 2303 	umull	r2, r3, r2, r3
 8011942:	095b      	lsrs	r3, r3, #5
 8011944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011948:	441c      	add	r4, r3
 801194a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801194e:	2200      	movs	r2, #0
 8011950:	673b      	str	r3, [r7, #112]	; 0x70
 8011952:	677a      	str	r2, [r7, #116]	; 0x74
 8011954:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011958:	4642      	mov	r2, r8
 801195a:	464b      	mov	r3, r9
 801195c:	1891      	adds	r1, r2, r2
 801195e:	60b9      	str	r1, [r7, #8]
 8011960:	415b      	adcs	r3, r3
 8011962:	60fb      	str	r3, [r7, #12]
 8011964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011968:	4641      	mov	r1, r8
 801196a:	1851      	adds	r1, r2, r1
 801196c:	6039      	str	r1, [r7, #0]
 801196e:	4649      	mov	r1, r9
 8011970:	414b      	adcs	r3, r1
 8011972:	607b      	str	r3, [r7, #4]
 8011974:	f04f 0200 	mov.w	r2, #0
 8011978:	f04f 0300 	mov.w	r3, #0
 801197c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011980:	4659      	mov	r1, fp
 8011982:	00cb      	lsls	r3, r1, #3
 8011984:	4651      	mov	r1, sl
 8011986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801198a:	4651      	mov	r1, sl
 801198c:	00ca      	lsls	r2, r1, #3
 801198e:	4610      	mov	r0, r2
 8011990:	4619      	mov	r1, r3
 8011992:	4603      	mov	r3, r0
 8011994:	4642      	mov	r2, r8
 8011996:	189b      	adds	r3, r3, r2
 8011998:	66bb      	str	r3, [r7, #104]	; 0x68
 801199a:	464b      	mov	r3, r9
 801199c:	460a      	mov	r2, r1
 801199e:	eb42 0303 	adc.w	r3, r2, r3
 80119a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80119a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	663b      	str	r3, [r7, #96]	; 0x60
 80119ae:	667a      	str	r2, [r7, #100]	; 0x64
 80119b0:	f04f 0200 	mov.w	r2, #0
 80119b4:	f04f 0300 	mov.w	r3, #0
 80119b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80119bc:	4649      	mov	r1, r9
 80119be:	008b      	lsls	r3, r1, #2
 80119c0:	4641      	mov	r1, r8
 80119c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80119c6:	4641      	mov	r1, r8
 80119c8:	008a      	lsls	r2, r1, #2
 80119ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80119ce:	f7ef f909 	bl	8000be4 <__aeabi_uldivmod>
 80119d2:	4602      	mov	r2, r0
 80119d4:	460b      	mov	r3, r1
 80119d6:	4b0d      	ldr	r3, [pc, #52]	; (8011a0c <UART_SetConfig+0x4e4>)
 80119d8:	fba3 1302 	umull	r1, r3, r3, r2
 80119dc:	095b      	lsrs	r3, r3, #5
 80119de:	2164      	movs	r1, #100	; 0x64
 80119e0:	fb01 f303 	mul.w	r3, r1, r3
 80119e4:	1ad3      	subs	r3, r2, r3
 80119e6:	011b      	lsls	r3, r3, #4
 80119e8:	3332      	adds	r3, #50	; 0x32
 80119ea:	4a08      	ldr	r2, [pc, #32]	; (8011a0c <UART_SetConfig+0x4e4>)
 80119ec:	fba2 2303 	umull	r2, r3, r2, r3
 80119f0:	095b      	lsrs	r3, r3, #5
 80119f2:	f003 020f 	and.w	r2, r3, #15
 80119f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4422      	add	r2, r4
 80119fe:	609a      	str	r2, [r3, #8]
}
 8011a00:	bf00      	nop
 8011a02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011a06:	46bd      	mov	sp, r7
 8011a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011a0c:	51eb851f 	.word	0x51eb851f

08011a10 <arm_cmplx_mult_cmplx_f32>:
 8011a10:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8011a14:	b4f0      	push	{r4, r5, r6, r7}
 8011a16:	d073      	beq.n	8011b00 <arm_cmplx_mult_cmplx_f32+0xf0>
 8011a18:	f100 0620 	add.w	r6, r0, #32
 8011a1c:	f101 0520 	add.w	r5, r1, #32
 8011a20:	f102 0420 	add.w	r4, r2, #32
 8011a24:	4667      	mov	r7, ip
 8011a26:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8011a2a:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 8011a2e:	ed15 7a08 	vldr	s14, [r5, #-32]	; 0xffffffe0
 8011a32:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8011a36:	ee27 6a87 	vmul.f32	s12, s15, s14
 8011a3a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8011a3e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011a42:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a4a:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011a4e:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8011a52:	ed44 6a08 	vstr	s13, [r4, #-32]	; 0xffffffe0
 8011a56:	ed55 5a05 	vldr	s11, [r5, #-20]	; 0xffffffec
 8011a5a:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8011a5e:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8011a62:	ed56 6a05 	vldr	s13, [r6, #-20]	; 0xffffffec
 8011a66:	ee27 6a87 	vmul.f32	s12, s15, s14
 8011a6a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8011a6e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011a72:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011a76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a7a:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011a7e:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8011a82:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8011a86:	ed55 5a03 	vldr	s11, [r5, #-12]
 8011a8a:	ed56 7a04 	vldr	s15, [r6, #-16]
 8011a8e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8011a92:	ed56 6a03 	vldr	s13, [r6, #-12]
 8011a96:	ee27 6a87 	vmul.f32	s12, s15, s14
 8011a9a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8011a9e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011aa2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011aa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011aaa:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011aae:	ed44 7a03 	vstr	s15, [r4, #-12]
 8011ab2:	ed44 6a04 	vstr	s13, [r4, #-16]
 8011ab6:	ed56 7a02 	vldr	s15, [r6, #-8]
 8011aba:	ed15 7a02 	vldr	s14, [r5, #-8]
 8011abe:	ed56 6a01 	vldr	s13, [r6, #-4]
 8011ac2:	ed55 5a01 	vldr	s11, [r5, #-4]
 8011ac6:	ee27 6a87 	vmul.f32	s12, s15, s14
 8011aca:	ee26 7a87 	vmul.f32	s14, s13, s14
 8011ace:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011ad2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ada:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011ade:	3f01      	subs	r7, #1
 8011ae0:	ed44 6a02 	vstr	s13, [r4, #-8]
 8011ae4:	ed44 7a01 	vstr	s15, [r4, #-4]
 8011ae8:	f106 0620 	add.w	r6, r6, #32
 8011aec:	f105 0520 	add.w	r5, r5, #32
 8011af0:	f104 0420 	add.w	r4, r4, #32
 8011af4:	d197      	bne.n	8011a26 <arm_cmplx_mult_cmplx_f32+0x16>
 8011af6:	ea4f 144c 	mov.w	r4, ip, lsl #5
 8011afa:	4420      	add	r0, r4
 8011afc:	4421      	add	r1, r4
 8011afe:	4422      	add	r2, r4
 8011b00:	f013 0303 	ands.w	r3, r3, #3
 8011b04:	d04b      	beq.n	8011b9e <arm_cmplx_mult_cmplx_f32+0x18e>
 8011b06:	edd0 5a00 	vldr	s11, [r0]
 8011b0a:	edd1 7a00 	vldr	s15, [r1]
 8011b0e:	edd0 6a01 	vldr	s13, [r0, #4]
 8011b12:	ed91 7a01 	vldr	s14, [r1, #4]
 8011b16:	ee27 6aa5 	vmul.f32	s12, s15, s11
 8011b1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b1e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8011b22:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011b26:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b2e:	3b01      	subs	r3, #1
 8011b30:	edc2 6a00 	vstr	s13, [r2]
 8011b34:	edc2 7a01 	vstr	s15, [r2, #4]
 8011b38:	d031      	beq.n	8011b9e <arm_cmplx_mult_cmplx_f32+0x18e>
 8011b3a:	edd0 7a02 	vldr	s15, [r0, #8]
 8011b3e:	ed91 7a02 	vldr	s14, [r1, #8]
 8011b42:	edd0 6a03 	vldr	s13, [r0, #12]
 8011b46:	edd1 5a03 	vldr	s11, [r1, #12]
 8011b4a:	ee27 6a87 	vmul.f32	s12, s15, s14
 8011b4e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8011b52:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011b56:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b5e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	edc2 6a02 	vstr	s13, [r2, #8]
 8011b68:	edc2 7a03 	vstr	s15, [r2, #12]
 8011b6c:	d017      	beq.n	8011b9e <arm_cmplx_mult_cmplx_f32+0x18e>
 8011b6e:	edd0 7a04 	vldr	s15, [r0, #16]
 8011b72:	ed91 7a04 	vldr	s14, [r1, #16]
 8011b76:	edd0 6a05 	vldr	s13, [r0, #20]
 8011b7a:	edd1 5a05 	vldr	s11, [r1, #20]
 8011b7e:	ee27 6a87 	vmul.f32	s12, s15, s14
 8011b82:	ee26 7a87 	vmul.f32	s14, s13, s14
 8011b86:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011b8a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b92:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011b96:	edc2 7a05 	vstr	s15, [r2, #20]
 8011b9a:	edc2 6a04 	vstr	s13, [r2, #16]
 8011b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8011ba0:	4770      	bx	lr
 8011ba2:	bf00      	nop

08011ba4 <arm_cmplx_mag_squared_f32>:
 8011ba4:	b470      	push	{r4, r5, r6}
 8011ba6:	0896      	lsrs	r6, r2, #2
 8011ba8:	d03e      	beq.n	8011c28 <arm_cmplx_mag_squared_f32+0x84>
 8011baa:	f100 0320 	add.w	r3, r0, #32
 8011bae:	f101 0410 	add.w	r4, r1, #16
 8011bb2:	4635      	mov	r5, r6
 8011bb4:	ed53 7a08 	vldr	s15, [r3, #-32]	; 0xffffffe0
 8011bb8:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 8011bbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011bc0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011bc4:	3d01      	subs	r5, #1
 8011bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bca:	f103 0320 	add.w	r3, r3, #32
 8011bce:	ed44 7a04 	vstr	s15, [r4, #-16]
 8011bd2:	ed53 7a0e 	vldr	s15, [r3, #-56]	; 0xffffffc8
 8011bd6:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
 8011bda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011bde:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011be2:	f104 0410 	add.w	r4, r4, #16
 8011be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bea:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8011bee:	ed53 7a0c 	vldr	s15, [r3, #-48]	; 0xffffffd0
 8011bf2:	ed13 7a0b 	vldr	s14, [r3, #-44]	; 0xffffffd4
 8011bf6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011bfa:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011bfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c02:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8011c06:	ed53 7a0a 	vldr	s15, [r3, #-40]	; 0xffffffd8
 8011c0a:	ed13 7a09 	vldr	s14, [r3, #-36]	; 0xffffffdc
 8011c0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011c12:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c1a:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8011c1e:	d1c9      	bne.n	8011bb4 <arm_cmplx_mag_squared_f32+0x10>
 8011c20:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8011c24:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8011c28:	f012 0203 	ands.w	r2, r2, #3
 8011c2c:	d027      	beq.n	8011c7e <arm_cmplx_mag_squared_f32+0xda>
 8011c2e:	ed90 7a00 	vldr	s14, [r0]
 8011c32:	edd0 7a01 	vldr	s15, [r0, #4]
 8011c36:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011c3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011c3e:	3a01      	subs	r2, #1
 8011c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c44:	edc1 7a00 	vstr	s15, [r1]
 8011c48:	d019      	beq.n	8011c7e <arm_cmplx_mag_squared_f32+0xda>
 8011c4a:	edd0 7a02 	vldr	s15, [r0, #8]
 8011c4e:	ed90 7a03 	vldr	s14, [r0, #12]
 8011c52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011c56:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011c5a:	2a01      	cmp	r2, #1
 8011c5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c60:	edc1 7a01 	vstr	s15, [r1, #4]
 8011c64:	d00b      	beq.n	8011c7e <arm_cmplx_mag_squared_f32+0xda>
 8011c66:	edd0 7a04 	vldr	s15, [r0, #16]
 8011c6a:	ed90 7a05 	vldr	s14, [r0, #20]
 8011c6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011c72:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011c76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c7a:	edc1 7a02 	vstr	s15, [r1, #8]
 8011c7e:	bc70      	pop	{r4, r5, r6}
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop

08011c84 <arm_mult_f32>:
 8011c84:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8011c88:	b4f0      	push	{r4, r5, r6, r7}
 8011c8a:	d033      	beq.n	8011cf4 <arm_mult_f32+0x70>
 8011c8c:	f100 0610 	add.w	r6, r0, #16
 8011c90:	f101 0510 	add.w	r5, r1, #16
 8011c94:	f102 0410 	add.w	r4, r2, #16
 8011c98:	4667      	mov	r7, ip
 8011c9a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8011c9e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8011ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ca6:	3f01      	subs	r7, #1
 8011ca8:	ed44 7a04 	vstr	s15, [r4, #-16]
 8011cac:	ed15 7a03 	vldr	s14, [r5, #-12]
 8011cb0:	ed56 7a03 	vldr	s15, [r6, #-12]
 8011cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011cb8:	f106 0610 	add.w	r6, r6, #16
 8011cbc:	ed44 7a03 	vstr	s15, [r4, #-12]
 8011cc0:	ed15 7a02 	vldr	s14, [r5, #-8]
 8011cc4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8011cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ccc:	f105 0510 	add.w	r5, r5, #16
 8011cd0:	ed44 7a02 	vstr	s15, [r4, #-8]
 8011cd4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8011cd8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8011cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ce0:	f104 0410 	add.w	r4, r4, #16
 8011ce4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8011ce8:	d1d7      	bne.n	8011c9a <arm_mult_f32+0x16>
 8011cea:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8011cee:	4420      	add	r0, r4
 8011cf0:	4421      	add	r1, r4
 8011cf2:	4422      	add	r2, r4
 8011cf4:	f013 0303 	ands.w	r3, r3, #3
 8011cf8:	d01b      	beq.n	8011d32 <arm_mult_f32+0xae>
 8011cfa:	edd1 7a00 	vldr	s15, [r1]
 8011cfe:	ed90 7a00 	vldr	s14, [r0]
 8011d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d06:	3b01      	subs	r3, #1
 8011d08:	edc2 7a00 	vstr	s15, [r2]
 8011d0c:	d011      	beq.n	8011d32 <arm_mult_f32+0xae>
 8011d0e:	edd0 7a01 	vldr	s15, [r0, #4]
 8011d12:	ed91 7a01 	vldr	s14, [r1, #4]
 8011d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	edc2 7a01 	vstr	s15, [r2, #4]
 8011d20:	d007      	beq.n	8011d32 <arm_mult_f32+0xae>
 8011d22:	edd0 7a02 	vldr	s15, [r0, #8]
 8011d26:	ed91 7a02 	vldr	s14, [r1, #8]
 8011d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d2e:	edc2 7a02 	vstr	s15, [r2, #8]
 8011d32:	bcf0      	pop	{r4, r5, r6, r7}
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop

08011d38 <arm_dot_prod_f32>:
 8011d38:	b4f0      	push	{r4, r5, r6, r7}
 8011d3a:	0897      	lsrs	r7, r2, #2
 8011d3c:	eddf 5a29 	vldr	s11, [pc, #164]	; 8011de4 <arm_dot_prod_f32+0xac>
 8011d40:	d02d      	beq.n	8011d9e <arm_dot_prod_f32+0x66>
 8011d42:	f100 0510 	add.w	r5, r0, #16
 8011d46:	f101 0410 	add.w	r4, r1, #16
 8011d4a:	463e      	mov	r6, r7
 8011d4c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8011d50:	ed54 3a04 	vldr	s7, [r4, #-16]
 8011d54:	ed15 7a03 	vldr	s14, [r5, #-12]
 8011d58:	ed14 4a03 	vldr	s8, [r4, #-12]
 8011d5c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8011d60:	ed54 4a02 	vldr	s9, [r4, #-8]
 8011d64:	ed15 6a01 	vldr	s12, [r5, #-4]
 8011d68:	ed14 5a01 	vldr	s10, [r4, #-4]
 8011d6c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011d70:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011d74:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011d78:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011d7c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011d80:	ee66 6a05 	vmul.f32	s13, s12, s10
 8011d84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011d88:	3e01      	subs	r6, #1
 8011d8a:	f105 0510 	add.w	r5, r5, #16
 8011d8e:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8011d92:	f104 0410 	add.w	r4, r4, #16
 8011d96:	d1d9      	bne.n	8011d4c <arm_dot_prod_f32+0x14>
 8011d98:	013f      	lsls	r7, r7, #4
 8011d9a:	4438      	add	r0, r7
 8011d9c:	4439      	add	r1, r7
 8011d9e:	f012 0203 	ands.w	r2, r2, #3
 8011da2:	d01b      	beq.n	8011ddc <arm_dot_prod_f32+0xa4>
 8011da4:	edd1 7a00 	vldr	s15, [r1]
 8011da8:	ed90 7a00 	vldr	s14, [r0]
 8011dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011db0:	3a01      	subs	r2, #1
 8011db2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011db6:	d011      	beq.n	8011ddc <arm_dot_prod_f32+0xa4>
 8011db8:	edd1 7a01 	vldr	s15, [r1, #4]
 8011dbc:	ed90 7a01 	vldr	s14, [r0, #4]
 8011dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011dc4:	2a01      	cmp	r2, #1
 8011dc6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011dca:	d007      	beq.n	8011ddc <arm_dot_prod_f32+0xa4>
 8011dcc:	edd0 7a02 	vldr	s15, [r0, #8]
 8011dd0:	ed91 7a02 	vldr	s14, [r1, #8]
 8011dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011dd8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011ddc:	edc3 5a00 	vstr	s11, [r3]
 8011de0:	bcf0      	pop	{r4, r5, r6, r7}
 8011de2:	4770      	bx	lr
 8011de4:	00000000 	.word	0x00000000

08011de8 <malloc>:
 8011de8:	4b02      	ldr	r3, [pc, #8]	; (8011df4 <malloc+0xc>)
 8011dea:	4601      	mov	r1, r0
 8011dec:	6818      	ldr	r0, [r3, #0]
 8011dee:	f000 b823 	b.w	8011e38 <_malloc_r>
 8011df2:	bf00      	nop
 8011df4:	200000e0 	.word	0x200000e0

08011df8 <sbrk_aligned>:
 8011df8:	b570      	push	{r4, r5, r6, lr}
 8011dfa:	4e0e      	ldr	r6, [pc, #56]	; (8011e34 <sbrk_aligned+0x3c>)
 8011dfc:	460c      	mov	r4, r1
 8011dfe:	6831      	ldr	r1, [r6, #0]
 8011e00:	4605      	mov	r5, r0
 8011e02:	b911      	cbnz	r1, 8011e0a <sbrk_aligned+0x12>
 8011e04:	f000 f8ac 	bl	8011f60 <_sbrk_r>
 8011e08:	6030      	str	r0, [r6, #0]
 8011e0a:	4621      	mov	r1, r4
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f000 f8a7 	bl	8011f60 <_sbrk_r>
 8011e12:	1c43      	adds	r3, r0, #1
 8011e14:	d00a      	beq.n	8011e2c <sbrk_aligned+0x34>
 8011e16:	1cc4      	adds	r4, r0, #3
 8011e18:	f024 0403 	bic.w	r4, r4, #3
 8011e1c:	42a0      	cmp	r0, r4
 8011e1e:	d007      	beq.n	8011e30 <sbrk_aligned+0x38>
 8011e20:	1a21      	subs	r1, r4, r0
 8011e22:	4628      	mov	r0, r5
 8011e24:	f000 f89c 	bl	8011f60 <_sbrk_r>
 8011e28:	3001      	adds	r0, #1
 8011e2a:	d101      	bne.n	8011e30 <sbrk_aligned+0x38>
 8011e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8011e30:	4620      	mov	r0, r4
 8011e32:	bd70      	pop	{r4, r5, r6, pc}
 8011e34:	20000528 	.word	0x20000528

08011e38 <_malloc_r>:
 8011e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e3c:	1ccd      	adds	r5, r1, #3
 8011e3e:	f025 0503 	bic.w	r5, r5, #3
 8011e42:	3508      	adds	r5, #8
 8011e44:	2d0c      	cmp	r5, #12
 8011e46:	bf38      	it	cc
 8011e48:	250c      	movcc	r5, #12
 8011e4a:	2d00      	cmp	r5, #0
 8011e4c:	4607      	mov	r7, r0
 8011e4e:	db01      	blt.n	8011e54 <_malloc_r+0x1c>
 8011e50:	42a9      	cmp	r1, r5
 8011e52:	d905      	bls.n	8011e60 <_malloc_r+0x28>
 8011e54:	230c      	movs	r3, #12
 8011e56:	603b      	str	r3, [r7, #0]
 8011e58:	2600      	movs	r6, #0
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011f34 <_malloc_r+0xfc>
 8011e64:	f000 f868 	bl	8011f38 <__malloc_lock>
 8011e68:	f8d8 3000 	ldr.w	r3, [r8]
 8011e6c:	461c      	mov	r4, r3
 8011e6e:	bb5c      	cbnz	r4, 8011ec8 <_malloc_r+0x90>
 8011e70:	4629      	mov	r1, r5
 8011e72:	4638      	mov	r0, r7
 8011e74:	f7ff ffc0 	bl	8011df8 <sbrk_aligned>
 8011e78:	1c43      	adds	r3, r0, #1
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	d155      	bne.n	8011f2a <_malloc_r+0xf2>
 8011e7e:	f8d8 4000 	ldr.w	r4, [r8]
 8011e82:	4626      	mov	r6, r4
 8011e84:	2e00      	cmp	r6, #0
 8011e86:	d145      	bne.n	8011f14 <_malloc_r+0xdc>
 8011e88:	2c00      	cmp	r4, #0
 8011e8a:	d048      	beq.n	8011f1e <_malloc_r+0xe6>
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	4631      	mov	r1, r6
 8011e90:	4638      	mov	r0, r7
 8011e92:	eb04 0903 	add.w	r9, r4, r3
 8011e96:	f000 f863 	bl	8011f60 <_sbrk_r>
 8011e9a:	4581      	cmp	r9, r0
 8011e9c:	d13f      	bne.n	8011f1e <_malloc_r+0xe6>
 8011e9e:	6821      	ldr	r1, [r4, #0]
 8011ea0:	1a6d      	subs	r5, r5, r1
 8011ea2:	4629      	mov	r1, r5
 8011ea4:	4638      	mov	r0, r7
 8011ea6:	f7ff ffa7 	bl	8011df8 <sbrk_aligned>
 8011eaa:	3001      	adds	r0, #1
 8011eac:	d037      	beq.n	8011f1e <_malloc_r+0xe6>
 8011eae:	6823      	ldr	r3, [r4, #0]
 8011eb0:	442b      	add	r3, r5
 8011eb2:	6023      	str	r3, [r4, #0]
 8011eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d038      	beq.n	8011f2e <_malloc_r+0xf6>
 8011ebc:	685a      	ldr	r2, [r3, #4]
 8011ebe:	42a2      	cmp	r2, r4
 8011ec0:	d12b      	bne.n	8011f1a <_malloc_r+0xe2>
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	605a      	str	r2, [r3, #4]
 8011ec6:	e00f      	b.n	8011ee8 <_malloc_r+0xb0>
 8011ec8:	6822      	ldr	r2, [r4, #0]
 8011eca:	1b52      	subs	r2, r2, r5
 8011ecc:	d41f      	bmi.n	8011f0e <_malloc_r+0xd6>
 8011ece:	2a0b      	cmp	r2, #11
 8011ed0:	d917      	bls.n	8011f02 <_malloc_r+0xca>
 8011ed2:	1961      	adds	r1, r4, r5
 8011ed4:	42a3      	cmp	r3, r4
 8011ed6:	6025      	str	r5, [r4, #0]
 8011ed8:	bf18      	it	ne
 8011eda:	6059      	strne	r1, [r3, #4]
 8011edc:	6863      	ldr	r3, [r4, #4]
 8011ede:	bf08      	it	eq
 8011ee0:	f8c8 1000 	streq.w	r1, [r8]
 8011ee4:	5162      	str	r2, [r4, r5]
 8011ee6:	604b      	str	r3, [r1, #4]
 8011ee8:	4638      	mov	r0, r7
 8011eea:	f104 060b 	add.w	r6, r4, #11
 8011eee:	f000 f829 	bl	8011f44 <__malloc_unlock>
 8011ef2:	f026 0607 	bic.w	r6, r6, #7
 8011ef6:	1d23      	adds	r3, r4, #4
 8011ef8:	1af2      	subs	r2, r6, r3
 8011efa:	d0ae      	beq.n	8011e5a <_malloc_r+0x22>
 8011efc:	1b9b      	subs	r3, r3, r6
 8011efe:	50a3      	str	r3, [r4, r2]
 8011f00:	e7ab      	b.n	8011e5a <_malloc_r+0x22>
 8011f02:	42a3      	cmp	r3, r4
 8011f04:	6862      	ldr	r2, [r4, #4]
 8011f06:	d1dd      	bne.n	8011ec4 <_malloc_r+0x8c>
 8011f08:	f8c8 2000 	str.w	r2, [r8]
 8011f0c:	e7ec      	b.n	8011ee8 <_malloc_r+0xb0>
 8011f0e:	4623      	mov	r3, r4
 8011f10:	6864      	ldr	r4, [r4, #4]
 8011f12:	e7ac      	b.n	8011e6e <_malloc_r+0x36>
 8011f14:	4634      	mov	r4, r6
 8011f16:	6876      	ldr	r6, [r6, #4]
 8011f18:	e7b4      	b.n	8011e84 <_malloc_r+0x4c>
 8011f1a:	4613      	mov	r3, r2
 8011f1c:	e7cc      	b.n	8011eb8 <_malloc_r+0x80>
 8011f1e:	230c      	movs	r3, #12
 8011f20:	603b      	str	r3, [r7, #0]
 8011f22:	4638      	mov	r0, r7
 8011f24:	f000 f80e 	bl	8011f44 <__malloc_unlock>
 8011f28:	e797      	b.n	8011e5a <_malloc_r+0x22>
 8011f2a:	6025      	str	r5, [r4, #0]
 8011f2c:	e7dc      	b.n	8011ee8 <_malloc_r+0xb0>
 8011f2e:	605b      	str	r3, [r3, #4]
 8011f30:	deff      	udf	#255	; 0xff
 8011f32:	bf00      	nop
 8011f34:	20000524 	.word	0x20000524

08011f38 <__malloc_lock>:
 8011f38:	4801      	ldr	r0, [pc, #4]	; (8011f40 <__malloc_lock+0x8>)
 8011f3a:	f000 b84b 	b.w	8011fd4 <__retarget_lock_acquire_recursive>
 8011f3e:	bf00      	nop
 8011f40:	20000668 	.word	0x20000668

08011f44 <__malloc_unlock>:
 8011f44:	4801      	ldr	r0, [pc, #4]	; (8011f4c <__malloc_unlock+0x8>)
 8011f46:	f000 b846 	b.w	8011fd6 <__retarget_lock_release_recursive>
 8011f4a:	bf00      	nop
 8011f4c:	20000668 	.word	0x20000668

08011f50 <memset>:
 8011f50:	4402      	add	r2, r0
 8011f52:	4603      	mov	r3, r0
 8011f54:	4293      	cmp	r3, r2
 8011f56:	d100      	bne.n	8011f5a <memset+0xa>
 8011f58:	4770      	bx	lr
 8011f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8011f5e:	e7f9      	b.n	8011f54 <memset+0x4>

08011f60 <_sbrk_r>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	4d06      	ldr	r5, [pc, #24]	; (8011f7c <_sbrk_r+0x1c>)
 8011f64:	2300      	movs	r3, #0
 8011f66:	4604      	mov	r4, r0
 8011f68:	4608      	mov	r0, r1
 8011f6a:	602b      	str	r3, [r5, #0]
 8011f6c:	f7f9 fd68 	bl	800ba40 <_sbrk>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d102      	bne.n	8011f7a <_sbrk_r+0x1a>
 8011f74:	682b      	ldr	r3, [r5, #0]
 8011f76:	b103      	cbz	r3, 8011f7a <_sbrk_r+0x1a>
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
 8011f7c:	20000664 	.word	0x20000664

08011f80 <__errno>:
 8011f80:	4b01      	ldr	r3, [pc, #4]	; (8011f88 <__errno+0x8>)
 8011f82:	6818      	ldr	r0, [r3, #0]
 8011f84:	4770      	bx	lr
 8011f86:	bf00      	nop
 8011f88:	200000e0 	.word	0x200000e0

08011f8c <__libc_init_array>:
 8011f8c:	b570      	push	{r4, r5, r6, lr}
 8011f8e:	4d0d      	ldr	r5, [pc, #52]	; (8011fc4 <__libc_init_array+0x38>)
 8011f90:	4c0d      	ldr	r4, [pc, #52]	; (8011fc8 <__libc_init_array+0x3c>)
 8011f92:	1b64      	subs	r4, r4, r5
 8011f94:	10a4      	asrs	r4, r4, #2
 8011f96:	2600      	movs	r6, #0
 8011f98:	42a6      	cmp	r6, r4
 8011f9a:	d109      	bne.n	8011fb0 <__libc_init_array+0x24>
 8011f9c:	4d0b      	ldr	r5, [pc, #44]	; (8011fcc <__libc_init_array+0x40>)
 8011f9e:	4c0c      	ldr	r4, [pc, #48]	; (8011fd0 <__libc_init_array+0x44>)
 8011fa0:	f001 fd62 	bl	8013a68 <_init>
 8011fa4:	1b64      	subs	r4, r4, r5
 8011fa6:	10a4      	asrs	r4, r4, #2
 8011fa8:	2600      	movs	r6, #0
 8011faa:	42a6      	cmp	r6, r4
 8011fac:	d105      	bne.n	8011fba <__libc_init_array+0x2e>
 8011fae:	bd70      	pop	{r4, r5, r6, pc}
 8011fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fb4:	4798      	blx	r3
 8011fb6:	3601      	adds	r6, #1
 8011fb8:	e7ee      	b.n	8011f98 <__libc_init_array+0xc>
 8011fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fbe:	4798      	blx	r3
 8011fc0:	3601      	adds	r6, #1
 8011fc2:	e7f2      	b.n	8011faa <__libc_init_array+0x1e>
 8011fc4:	08013f4c 	.word	0x08013f4c
 8011fc8:	08013f4c 	.word	0x08013f4c
 8011fcc:	08013f4c 	.word	0x08013f4c
 8011fd0:	08013f50 	.word	0x08013f50

08011fd4 <__retarget_lock_acquire_recursive>:
 8011fd4:	4770      	bx	lr

08011fd6 <__retarget_lock_release_recursive>:
 8011fd6:	4770      	bx	lr

08011fd8 <atan>:
 8011fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	ec55 4b10 	vmov	r4, r5, d0
 8011fe0:	4bc3      	ldr	r3, [pc, #780]	; (80122f0 <atan+0x318>)
 8011fe2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011fe6:	429e      	cmp	r6, r3
 8011fe8:	46ab      	mov	fp, r5
 8011fea:	dd18      	ble.n	801201e <atan+0x46>
 8011fec:	4bc1      	ldr	r3, [pc, #772]	; (80122f4 <atan+0x31c>)
 8011fee:	429e      	cmp	r6, r3
 8011ff0:	dc01      	bgt.n	8011ff6 <atan+0x1e>
 8011ff2:	d109      	bne.n	8012008 <atan+0x30>
 8011ff4:	b144      	cbz	r4, 8012008 <atan+0x30>
 8011ff6:	4622      	mov	r2, r4
 8011ff8:	462b      	mov	r3, r5
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	f7ee f909 	bl	8000214 <__adddf3>
 8012002:	4604      	mov	r4, r0
 8012004:	460d      	mov	r5, r1
 8012006:	e006      	b.n	8012016 <atan+0x3e>
 8012008:	f1bb 0f00 	cmp.w	fp, #0
 801200c:	f300 8131 	bgt.w	8012272 <atan+0x29a>
 8012010:	a59b      	add	r5, pc, #620	; (adr r5, 8012280 <atan+0x2a8>)
 8012012:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012016:	ec45 4b10 	vmov	d0, r4, r5
 801201a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801201e:	4bb6      	ldr	r3, [pc, #728]	; (80122f8 <atan+0x320>)
 8012020:	429e      	cmp	r6, r3
 8012022:	dc14      	bgt.n	801204e <atan+0x76>
 8012024:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012028:	429e      	cmp	r6, r3
 801202a:	dc0d      	bgt.n	8012048 <atan+0x70>
 801202c:	a396      	add	r3, pc, #600	; (adr r3, 8012288 <atan+0x2b0>)
 801202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012032:	ee10 0a10 	vmov	r0, s0
 8012036:	4629      	mov	r1, r5
 8012038:	f7ee f8ec 	bl	8000214 <__adddf3>
 801203c:	4baf      	ldr	r3, [pc, #700]	; (80122fc <atan+0x324>)
 801203e:	2200      	movs	r2, #0
 8012040:	f7ee fd2e 	bl	8000aa0 <__aeabi_dcmpgt>
 8012044:	2800      	cmp	r0, #0
 8012046:	d1e6      	bne.n	8012016 <atan+0x3e>
 8012048:	f04f 3aff 	mov.w	sl, #4294967295
 801204c:	e02b      	b.n	80120a6 <atan+0xce>
 801204e:	f000 f963 	bl	8012318 <fabs>
 8012052:	4bab      	ldr	r3, [pc, #684]	; (8012300 <atan+0x328>)
 8012054:	429e      	cmp	r6, r3
 8012056:	ec55 4b10 	vmov	r4, r5, d0
 801205a:	f300 80bf 	bgt.w	80121dc <atan+0x204>
 801205e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012062:	429e      	cmp	r6, r3
 8012064:	f300 80a0 	bgt.w	80121a8 <atan+0x1d0>
 8012068:	ee10 2a10 	vmov	r2, s0
 801206c:	ee10 0a10 	vmov	r0, s0
 8012070:	462b      	mov	r3, r5
 8012072:	4629      	mov	r1, r5
 8012074:	f7ee f8ce 	bl	8000214 <__adddf3>
 8012078:	4ba0      	ldr	r3, [pc, #640]	; (80122fc <atan+0x324>)
 801207a:	2200      	movs	r2, #0
 801207c:	f7ee f8c8 	bl	8000210 <__aeabi_dsub>
 8012080:	2200      	movs	r2, #0
 8012082:	4606      	mov	r6, r0
 8012084:	460f      	mov	r7, r1
 8012086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801208a:	4620      	mov	r0, r4
 801208c:	4629      	mov	r1, r5
 801208e:	f7ee f8c1 	bl	8000214 <__adddf3>
 8012092:	4602      	mov	r2, r0
 8012094:	460b      	mov	r3, r1
 8012096:	4630      	mov	r0, r6
 8012098:	4639      	mov	r1, r7
 801209a:	f7ee fb9b 	bl	80007d4 <__aeabi_ddiv>
 801209e:	f04f 0a00 	mov.w	sl, #0
 80120a2:	4604      	mov	r4, r0
 80120a4:	460d      	mov	r5, r1
 80120a6:	4622      	mov	r2, r4
 80120a8:	462b      	mov	r3, r5
 80120aa:	4620      	mov	r0, r4
 80120ac:	4629      	mov	r1, r5
 80120ae:	f7ee fa67 	bl	8000580 <__aeabi_dmul>
 80120b2:	4602      	mov	r2, r0
 80120b4:	460b      	mov	r3, r1
 80120b6:	4680      	mov	r8, r0
 80120b8:	4689      	mov	r9, r1
 80120ba:	f7ee fa61 	bl	8000580 <__aeabi_dmul>
 80120be:	a374      	add	r3, pc, #464	; (adr r3, 8012290 <atan+0x2b8>)
 80120c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c4:	4606      	mov	r6, r0
 80120c6:	460f      	mov	r7, r1
 80120c8:	f7ee fa5a 	bl	8000580 <__aeabi_dmul>
 80120cc:	a372      	add	r3, pc, #456	; (adr r3, 8012298 <atan+0x2c0>)
 80120ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d2:	f7ee f89f 	bl	8000214 <__adddf3>
 80120d6:	4632      	mov	r2, r6
 80120d8:	463b      	mov	r3, r7
 80120da:	f7ee fa51 	bl	8000580 <__aeabi_dmul>
 80120de:	a370      	add	r3, pc, #448	; (adr r3, 80122a0 <atan+0x2c8>)
 80120e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e4:	f7ee f896 	bl	8000214 <__adddf3>
 80120e8:	4632      	mov	r2, r6
 80120ea:	463b      	mov	r3, r7
 80120ec:	f7ee fa48 	bl	8000580 <__aeabi_dmul>
 80120f0:	a36d      	add	r3, pc, #436	; (adr r3, 80122a8 <atan+0x2d0>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	f7ee f88d 	bl	8000214 <__adddf3>
 80120fa:	4632      	mov	r2, r6
 80120fc:	463b      	mov	r3, r7
 80120fe:	f7ee fa3f 	bl	8000580 <__aeabi_dmul>
 8012102:	a36b      	add	r3, pc, #428	; (adr r3, 80122b0 <atan+0x2d8>)
 8012104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012108:	f7ee f884 	bl	8000214 <__adddf3>
 801210c:	4632      	mov	r2, r6
 801210e:	463b      	mov	r3, r7
 8012110:	f7ee fa36 	bl	8000580 <__aeabi_dmul>
 8012114:	a368      	add	r3, pc, #416	; (adr r3, 80122b8 <atan+0x2e0>)
 8012116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211a:	f7ee f87b 	bl	8000214 <__adddf3>
 801211e:	4642      	mov	r2, r8
 8012120:	464b      	mov	r3, r9
 8012122:	f7ee fa2d 	bl	8000580 <__aeabi_dmul>
 8012126:	a366      	add	r3, pc, #408	; (adr r3, 80122c0 <atan+0x2e8>)
 8012128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212c:	4680      	mov	r8, r0
 801212e:	4689      	mov	r9, r1
 8012130:	4630      	mov	r0, r6
 8012132:	4639      	mov	r1, r7
 8012134:	f7ee fa24 	bl	8000580 <__aeabi_dmul>
 8012138:	a363      	add	r3, pc, #396	; (adr r3, 80122c8 <atan+0x2f0>)
 801213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213e:	f7ee f867 	bl	8000210 <__aeabi_dsub>
 8012142:	4632      	mov	r2, r6
 8012144:	463b      	mov	r3, r7
 8012146:	f7ee fa1b 	bl	8000580 <__aeabi_dmul>
 801214a:	a361      	add	r3, pc, #388	; (adr r3, 80122d0 <atan+0x2f8>)
 801214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012150:	f7ee f85e 	bl	8000210 <__aeabi_dsub>
 8012154:	4632      	mov	r2, r6
 8012156:	463b      	mov	r3, r7
 8012158:	f7ee fa12 	bl	8000580 <__aeabi_dmul>
 801215c:	a35e      	add	r3, pc, #376	; (adr r3, 80122d8 <atan+0x300>)
 801215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012162:	f7ee f855 	bl	8000210 <__aeabi_dsub>
 8012166:	4632      	mov	r2, r6
 8012168:	463b      	mov	r3, r7
 801216a:	f7ee fa09 	bl	8000580 <__aeabi_dmul>
 801216e:	a35c      	add	r3, pc, #368	; (adr r3, 80122e0 <atan+0x308>)
 8012170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012174:	f7ee f84c 	bl	8000210 <__aeabi_dsub>
 8012178:	4632      	mov	r2, r6
 801217a:	463b      	mov	r3, r7
 801217c:	f7ee fa00 	bl	8000580 <__aeabi_dmul>
 8012180:	4602      	mov	r2, r0
 8012182:	460b      	mov	r3, r1
 8012184:	4640      	mov	r0, r8
 8012186:	4649      	mov	r1, r9
 8012188:	f7ee f844 	bl	8000214 <__adddf3>
 801218c:	4622      	mov	r2, r4
 801218e:	462b      	mov	r3, r5
 8012190:	f7ee f9f6 	bl	8000580 <__aeabi_dmul>
 8012194:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012198:	4602      	mov	r2, r0
 801219a:	460b      	mov	r3, r1
 801219c:	d14b      	bne.n	8012236 <atan+0x25e>
 801219e:	4620      	mov	r0, r4
 80121a0:	4629      	mov	r1, r5
 80121a2:	f7ee f835 	bl	8000210 <__aeabi_dsub>
 80121a6:	e72c      	b.n	8012002 <atan+0x2a>
 80121a8:	ee10 0a10 	vmov	r0, s0
 80121ac:	4b53      	ldr	r3, [pc, #332]	; (80122fc <atan+0x324>)
 80121ae:	2200      	movs	r2, #0
 80121b0:	4629      	mov	r1, r5
 80121b2:	f7ee f82d 	bl	8000210 <__aeabi_dsub>
 80121b6:	4b51      	ldr	r3, [pc, #324]	; (80122fc <atan+0x324>)
 80121b8:	4606      	mov	r6, r0
 80121ba:	460f      	mov	r7, r1
 80121bc:	2200      	movs	r2, #0
 80121be:	4620      	mov	r0, r4
 80121c0:	4629      	mov	r1, r5
 80121c2:	f7ee f827 	bl	8000214 <__adddf3>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	4630      	mov	r0, r6
 80121cc:	4639      	mov	r1, r7
 80121ce:	f7ee fb01 	bl	80007d4 <__aeabi_ddiv>
 80121d2:	f04f 0a01 	mov.w	sl, #1
 80121d6:	4604      	mov	r4, r0
 80121d8:	460d      	mov	r5, r1
 80121da:	e764      	b.n	80120a6 <atan+0xce>
 80121dc:	4b49      	ldr	r3, [pc, #292]	; (8012304 <atan+0x32c>)
 80121de:	429e      	cmp	r6, r3
 80121e0:	da1d      	bge.n	801221e <atan+0x246>
 80121e2:	ee10 0a10 	vmov	r0, s0
 80121e6:	4b48      	ldr	r3, [pc, #288]	; (8012308 <atan+0x330>)
 80121e8:	2200      	movs	r2, #0
 80121ea:	4629      	mov	r1, r5
 80121ec:	f7ee f810 	bl	8000210 <__aeabi_dsub>
 80121f0:	4b45      	ldr	r3, [pc, #276]	; (8012308 <atan+0x330>)
 80121f2:	4606      	mov	r6, r0
 80121f4:	460f      	mov	r7, r1
 80121f6:	2200      	movs	r2, #0
 80121f8:	4620      	mov	r0, r4
 80121fa:	4629      	mov	r1, r5
 80121fc:	f7ee f9c0 	bl	8000580 <__aeabi_dmul>
 8012200:	4b3e      	ldr	r3, [pc, #248]	; (80122fc <atan+0x324>)
 8012202:	2200      	movs	r2, #0
 8012204:	f7ee f806 	bl	8000214 <__adddf3>
 8012208:	4602      	mov	r2, r0
 801220a:	460b      	mov	r3, r1
 801220c:	4630      	mov	r0, r6
 801220e:	4639      	mov	r1, r7
 8012210:	f7ee fae0 	bl	80007d4 <__aeabi_ddiv>
 8012214:	f04f 0a02 	mov.w	sl, #2
 8012218:	4604      	mov	r4, r0
 801221a:	460d      	mov	r5, r1
 801221c:	e743      	b.n	80120a6 <atan+0xce>
 801221e:	462b      	mov	r3, r5
 8012220:	ee10 2a10 	vmov	r2, s0
 8012224:	4939      	ldr	r1, [pc, #228]	; (801230c <atan+0x334>)
 8012226:	2000      	movs	r0, #0
 8012228:	f7ee fad4 	bl	80007d4 <__aeabi_ddiv>
 801222c:	f04f 0a03 	mov.w	sl, #3
 8012230:	4604      	mov	r4, r0
 8012232:	460d      	mov	r5, r1
 8012234:	e737      	b.n	80120a6 <atan+0xce>
 8012236:	4b36      	ldr	r3, [pc, #216]	; (8012310 <atan+0x338>)
 8012238:	4e36      	ldr	r6, [pc, #216]	; (8012314 <atan+0x33c>)
 801223a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012242:	f7ed ffe5 	bl	8000210 <__aeabi_dsub>
 8012246:	4622      	mov	r2, r4
 8012248:	462b      	mov	r3, r5
 801224a:	f7ed ffe1 	bl	8000210 <__aeabi_dsub>
 801224e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012252:	4602      	mov	r2, r0
 8012254:	460b      	mov	r3, r1
 8012256:	e9d6 0100 	ldrd	r0, r1, [r6]
 801225a:	f7ed ffd9 	bl	8000210 <__aeabi_dsub>
 801225e:	f1bb 0f00 	cmp.w	fp, #0
 8012262:	4604      	mov	r4, r0
 8012264:	460d      	mov	r5, r1
 8012266:	f6bf aed6 	bge.w	8012016 <atan+0x3e>
 801226a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801226e:	461d      	mov	r5, r3
 8012270:	e6d1      	b.n	8012016 <atan+0x3e>
 8012272:	a51d      	add	r5, pc, #116	; (adr r5, 80122e8 <atan+0x310>)
 8012274:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012278:	e6cd      	b.n	8012016 <atan+0x3e>
 801227a:	bf00      	nop
 801227c:	f3af 8000 	nop.w
 8012280:	54442d18 	.word	0x54442d18
 8012284:	bff921fb 	.word	0xbff921fb
 8012288:	8800759c 	.word	0x8800759c
 801228c:	7e37e43c 	.word	0x7e37e43c
 8012290:	e322da11 	.word	0xe322da11
 8012294:	3f90ad3a 	.word	0x3f90ad3a
 8012298:	24760deb 	.word	0x24760deb
 801229c:	3fa97b4b 	.word	0x3fa97b4b
 80122a0:	a0d03d51 	.word	0xa0d03d51
 80122a4:	3fb10d66 	.word	0x3fb10d66
 80122a8:	c54c206e 	.word	0xc54c206e
 80122ac:	3fb745cd 	.word	0x3fb745cd
 80122b0:	920083ff 	.word	0x920083ff
 80122b4:	3fc24924 	.word	0x3fc24924
 80122b8:	5555550d 	.word	0x5555550d
 80122bc:	3fd55555 	.word	0x3fd55555
 80122c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80122c4:	bfa2b444 	.word	0xbfa2b444
 80122c8:	52defd9a 	.word	0x52defd9a
 80122cc:	3fadde2d 	.word	0x3fadde2d
 80122d0:	af749a6d 	.word	0xaf749a6d
 80122d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80122d8:	fe231671 	.word	0xfe231671
 80122dc:	3fbc71c6 	.word	0x3fbc71c6
 80122e0:	9998ebc4 	.word	0x9998ebc4
 80122e4:	3fc99999 	.word	0x3fc99999
 80122e8:	54442d18 	.word	0x54442d18
 80122ec:	3ff921fb 	.word	0x3ff921fb
 80122f0:	440fffff 	.word	0x440fffff
 80122f4:	7ff00000 	.word	0x7ff00000
 80122f8:	3fdbffff 	.word	0x3fdbffff
 80122fc:	3ff00000 	.word	0x3ff00000
 8012300:	3ff2ffff 	.word	0x3ff2ffff
 8012304:	40038000 	.word	0x40038000
 8012308:	3ff80000 	.word	0x3ff80000
 801230c:	bff00000 	.word	0xbff00000
 8012310:	08013b20 	.word	0x08013b20
 8012314:	08013b00 	.word	0x08013b00

08012318 <fabs>:
 8012318:	ec51 0b10 	vmov	r0, r1, d0
 801231c:	ee10 2a10 	vmov	r2, s0
 8012320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012324:	ec43 2b10 	vmov	d0, r2, r3
 8012328:	4770      	bx	lr
	...

0801232c <expf>:
 801232c:	b508      	push	{r3, lr}
 801232e:	ed2d 8b02 	vpush	{d8}
 8012332:	eef0 8a40 	vmov.f32	s17, s0
 8012336:	f000 fadf 	bl	80128f8 <__ieee754_expf>
 801233a:	eeb0 8a40 	vmov.f32	s16, s0
 801233e:	eeb0 0a68 	vmov.f32	s0, s17
 8012342:	f000 f957 	bl	80125f4 <finitef>
 8012346:	b160      	cbz	r0, 8012362 <expf+0x36>
 8012348:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012388 <expf+0x5c>
 801234c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012354:	dd0a      	ble.n	801236c <expf+0x40>
 8012356:	f7ff fe13 	bl	8011f80 <__errno>
 801235a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801238c <expf+0x60>
 801235e:	2322      	movs	r3, #34	; 0x22
 8012360:	6003      	str	r3, [r0, #0]
 8012362:	eeb0 0a48 	vmov.f32	s0, s16
 8012366:	ecbd 8b02 	vpop	{d8}
 801236a:	bd08      	pop	{r3, pc}
 801236c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012390 <expf+0x64>
 8012370:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012378:	d5f3      	bpl.n	8012362 <expf+0x36>
 801237a:	f7ff fe01 	bl	8011f80 <__errno>
 801237e:	2322      	movs	r3, #34	; 0x22
 8012380:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8012394 <expf+0x68>
 8012384:	6003      	str	r3, [r0, #0]
 8012386:	e7ec      	b.n	8012362 <expf+0x36>
 8012388:	42b17217 	.word	0x42b17217
 801238c:	7f800000 	.word	0x7f800000
 8012390:	c2cff1b5 	.word	0xc2cff1b5
 8012394:	00000000 	.word	0x00000000

08012398 <logf>:
 8012398:	b508      	push	{r3, lr}
 801239a:	ed2d 8b02 	vpush	{d8}
 801239e:	eeb0 8a40 	vmov.f32	s16, s0
 80123a2:	f000 fb77 	bl	8012a94 <__ieee754_logf>
 80123a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80123aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ae:	d60f      	bvs.n	80123d0 <logf+0x38>
 80123b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80123b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b8:	dc0a      	bgt.n	80123d0 <logf+0x38>
 80123ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80123be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c2:	d108      	bne.n	80123d6 <logf+0x3e>
 80123c4:	f7ff fddc 	bl	8011f80 <__errno>
 80123c8:	2322      	movs	r3, #34	; 0x22
 80123ca:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80123ec <logf+0x54>
 80123ce:	6003      	str	r3, [r0, #0]
 80123d0:	ecbd 8b02 	vpop	{d8}
 80123d4:	bd08      	pop	{r3, pc}
 80123d6:	f7ff fdd3 	bl	8011f80 <__errno>
 80123da:	ecbd 8b02 	vpop	{d8}
 80123de:	2321      	movs	r3, #33	; 0x21
 80123e0:	6003      	str	r3, [r0, #0]
 80123e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80123e6:	4802      	ldr	r0, [pc, #8]	; (80123f0 <logf+0x58>)
 80123e8:	f000 b912 	b.w	8012610 <nanf>
 80123ec:	ff800000 	.word	0xff800000
 80123f0:	08013b40 	.word	0x08013b40

080123f4 <powf>:
 80123f4:	b508      	push	{r3, lr}
 80123f6:	ed2d 8b04 	vpush	{d8-d9}
 80123fa:	eeb0 8a60 	vmov.f32	s16, s1
 80123fe:	eeb0 9a40 	vmov.f32	s18, s0
 8012402:	f000 fc39 	bl	8012c78 <__ieee754_powf>
 8012406:	eeb4 8a48 	vcmp.f32	s16, s16
 801240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801240e:	eef0 8a40 	vmov.f32	s17, s0
 8012412:	d63e      	bvs.n	8012492 <powf+0x9e>
 8012414:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241c:	d112      	bne.n	8012444 <powf+0x50>
 801241e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012426:	d039      	beq.n	801249c <powf+0xa8>
 8012428:	eeb0 0a48 	vmov.f32	s0, s16
 801242c:	f000 f8e2 	bl	80125f4 <finitef>
 8012430:	b378      	cbz	r0, 8012492 <powf+0x9e>
 8012432:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243a:	d52a      	bpl.n	8012492 <powf+0x9e>
 801243c:	f7ff fda0 	bl	8011f80 <__errno>
 8012440:	2322      	movs	r3, #34	; 0x22
 8012442:	e014      	b.n	801246e <powf+0x7a>
 8012444:	f000 f8d6 	bl	80125f4 <finitef>
 8012448:	b998      	cbnz	r0, 8012472 <powf+0x7e>
 801244a:	eeb0 0a49 	vmov.f32	s0, s18
 801244e:	f000 f8d1 	bl	80125f4 <finitef>
 8012452:	b170      	cbz	r0, 8012472 <powf+0x7e>
 8012454:	eeb0 0a48 	vmov.f32	s0, s16
 8012458:	f000 f8cc 	bl	80125f4 <finitef>
 801245c:	b148      	cbz	r0, 8012472 <powf+0x7e>
 801245e:	eef4 8a68 	vcmp.f32	s17, s17
 8012462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012466:	d7e9      	bvc.n	801243c <powf+0x48>
 8012468:	f7ff fd8a 	bl	8011f80 <__errno>
 801246c:	2321      	movs	r3, #33	; 0x21
 801246e:	6003      	str	r3, [r0, #0]
 8012470:	e00f      	b.n	8012492 <powf+0x9e>
 8012472:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247a:	d10a      	bne.n	8012492 <powf+0x9e>
 801247c:	eeb0 0a49 	vmov.f32	s0, s18
 8012480:	f000 f8b8 	bl	80125f4 <finitef>
 8012484:	b128      	cbz	r0, 8012492 <powf+0x9e>
 8012486:	eeb0 0a48 	vmov.f32	s0, s16
 801248a:	f000 f8b3 	bl	80125f4 <finitef>
 801248e:	2800      	cmp	r0, #0
 8012490:	d1d4      	bne.n	801243c <powf+0x48>
 8012492:	eeb0 0a68 	vmov.f32	s0, s17
 8012496:	ecbd 8b04 	vpop	{d8-d9}
 801249a:	bd08      	pop	{r3, pc}
 801249c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80124a0:	e7f7      	b.n	8012492 <powf+0x9e>
	...

080124a4 <sqrtf>:
 80124a4:	b508      	push	{r3, lr}
 80124a6:	ed2d 8b02 	vpush	{d8}
 80124aa:	eeb0 8a40 	vmov.f32	s16, s0
 80124ae:	f000 f8b5 	bl	801261c <__ieee754_sqrtf>
 80124b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80124b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ba:	d60c      	bvs.n	80124d6 <sqrtf+0x32>
 80124bc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80124dc <sqrtf+0x38>
 80124c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80124c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c8:	d505      	bpl.n	80124d6 <sqrtf+0x32>
 80124ca:	f7ff fd59 	bl	8011f80 <__errno>
 80124ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80124d2:	2321      	movs	r3, #33	; 0x21
 80124d4:	6003      	str	r3, [r0, #0]
 80124d6:	ecbd 8b02 	vpop	{d8}
 80124da:	bd08      	pop	{r3, pc}
 80124dc:	00000000 	.word	0x00000000

080124e0 <cosf>:
 80124e0:	ee10 3a10 	vmov	r3, s0
 80124e4:	b507      	push	{r0, r1, r2, lr}
 80124e6:	4a1e      	ldr	r2, [pc, #120]	; (8012560 <cosf+0x80>)
 80124e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124ec:	4293      	cmp	r3, r2
 80124ee:	dc06      	bgt.n	80124fe <cosf+0x1e>
 80124f0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8012564 <cosf+0x84>
 80124f4:	b003      	add	sp, #12
 80124f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80124fa:	f000 b957 	b.w	80127ac <__kernel_cosf>
 80124fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012502:	db04      	blt.n	801250e <cosf+0x2e>
 8012504:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012508:	b003      	add	sp, #12
 801250a:	f85d fb04 	ldr.w	pc, [sp], #4
 801250e:	4668      	mov	r0, sp
 8012510:	f000 fe7c 	bl	801320c <__ieee754_rem_pio2f>
 8012514:	f000 0003 	and.w	r0, r0, #3
 8012518:	2801      	cmp	r0, #1
 801251a:	d009      	beq.n	8012530 <cosf+0x50>
 801251c:	2802      	cmp	r0, #2
 801251e:	d010      	beq.n	8012542 <cosf+0x62>
 8012520:	b9b0      	cbnz	r0, 8012550 <cosf+0x70>
 8012522:	eddd 0a01 	vldr	s1, [sp, #4]
 8012526:	ed9d 0a00 	vldr	s0, [sp]
 801252a:	f000 f93f 	bl	80127ac <__kernel_cosf>
 801252e:	e7eb      	b.n	8012508 <cosf+0x28>
 8012530:	eddd 0a01 	vldr	s1, [sp, #4]
 8012534:	ed9d 0a00 	vldr	s0, [sp]
 8012538:	f000 f996 	bl	8012868 <__kernel_sinf>
 801253c:	eeb1 0a40 	vneg.f32	s0, s0
 8012540:	e7e2      	b.n	8012508 <cosf+0x28>
 8012542:	eddd 0a01 	vldr	s1, [sp, #4]
 8012546:	ed9d 0a00 	vldr	s0, [sp]
 801254a:	f000 f92f 	bl	80127ac <__kernel_cosf>
 801254e:	e7f5      	b.n	801253c <cosf+0x5c>
 8012550:	eddd 0a01 	vldr	s1, [sp, #4]
 8012554:	ed9d 0a00 	vldr	s0, [sp]
 8012558:	2001      	movs	r0, #1
 801255a:	f000 f985 	bl	8012868 <__kernel_sinf>
 801255e:	e7d3      	b.n	8012508 <cosf+0x28>
 8012560:	3f490fd8 	.word	0x3f490fd8
 8012564:	00000000 	.word	0x00000000

08012568 <sinf>:
 8012568:	ee10 3a10 	vmov	r3, s0
 801256c:	b507      	push	{r0, r1, r2, lr}
 801256e:	4a1f      	ldr	r2, [pc, #124]	; (80125ec <sinf+0x84>)
 8012570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012574:	4293      	cmp	r3, r2
 8012576:	dc07      	bgt.n	8012588 <sinf+0x20>
 8012578:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80125f0 <sinf+0x88>
 801257c:	2000      	movs	r0, #0
 801257e:	b003      	add	sp, #12
 8012580:	f85d eb04 	ldr.w	lr, [sp], #4
 8012584:	f000 b970 	b.w	8012868 <__kernel_sinf>
 8012588:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801258c:	db04      	blt.n	8012598 <sinf+0x30>
 801258e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012592:	b003      	add	sp, #12
 8012594:	f85d fb04 	ldr.w	pc, [sp], #4
 8012598:	4668      	mov	r0, sp
 801259a:	f000 fe37 	bl	801320c <__ieee754_rem_pio2f>
 801259e:	f000 0003 	and.w	r0, r0, #3
 80125a2:	2801      	cmp	r0, #1
 80125a4:	d00a      	beq.n	80125bc <sinf+0x54>
 80125a6:	2802      	cmp	r0, #2
 80125a8:	d00f      	beq.n	80125ca <sinf+0x62>
 80125aa:	b9c0      	cbnz	r0, 80125de <sinf+0x76>
 80125ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80125b0:	ed9d 0a00 	vldr	s0, [sp]
 80125b4:	2001      	movs	r0, #1
 80125b6:	f000 f957 	bl	8012868 <__kernel_sinf>
 80125ba:	e7ea      	b.n	8012592 <sinf+0x2a>
 80125bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80125c0:	ed9d 0a00 	vldr	s0, [sp]
 80125c4:	f000 f8f2 	bl	80127ac <__kernel_cosf>
 80125c8:	e7e3      	b.n	8012592 <sinf+0x2a>
 80125ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80125ce:	ed9d 0a00 	vldr	s0, [sp]
 80125d2:	2001      	movs	r0, #1
 80125d4:	f000 f948 	bl	8012868 <__kernel_sinf>
 80125d8:	eeb1 0a40 	vneg.f32	s0, s0
 80125dc:	e7d9      	b.n	8012592 <sinf+0x2a>
 80125de:	eddd 0a01 	vldr	s1, [sp, #4]
 80125e2:	ed9d 0a00 	vldr	s0, [sp]
 80125e6:	f000 f8e1 	bl	80127ac <__kernel_cosf>
 80125ea:	e7f5      	b.n	80125d8 <sinf+0x70>
 80125ec:	3f490fd8 	.word	0x3f490fd8
 80125f0:	00000000 	.word	0x00000000

080125f4 <finitef>:
 80125f4:	b082      	sub	sp, #8
 80125f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80125fa:	9801      	ldr	r0, [sp, #4]
 80125fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012600:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012604:	bfac      	ite	ge
 8012606:	2000      	movge	r0, #0
 8012608:	2001      	movlt	r0, #1
 801260a:	b002      	add	sp, #8
 801260c:	4770      	bx	lr
	...

08012610 <nanf>:
 8012610:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012618 <nanf+0x8>
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	7fc00000 	.word	0x7fc00000

0801261c <__ieee754_sqrtf>:
 801261c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012620:	4770      	bx	lr
 8012622:	0000      	movs	r0, r0
 8012624:	0000      	movs	r0, r0
	...

08012628 <floor>:
 8012628:	ec51 0b10 	vmov	r0, r1, d0
 801262c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012634:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8012638:	2e13      	cmp	r6, #19
 801263a:	ee10 5a10 	vmov	r5, s0
 801263e:	ee10 8a10 	vmov	r8, s0
 8012642:	460c      	mov	r4, r1
 8012644:	dc31      	bgt.n	80126aa <floor+0x82>
 8012646:	2e00      	cmp	r6, #0
 8012648:	da14      	bge.n	8012674 <floor+0x4c>
 801264a:	a333      	add	r3, pc, #204	; (adr r3, 8012718 <floor+0xf0>)
 801264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012650:	f7ed fde0 	bl	8000214 <__adddf3>
 8012654:	2200      	movs	r2, #0
 8012656:	2300      	movs	r3, #0
 8012658:	f7ee fa22 	bl	8000aa0 <__aeabi_dcmpgt>
 801265c:	b138      	cbz	r0, 801266e <floor+0x46>
 801265e:	2c00      	cmp	r4, #0
 8012660:	da53      	bge.n	801270a <floor+0xe2>
 8012662:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012666:	4325      	orrs	r5, r4
 8012668:	d052      	beq.n	8012710 <floor+0xe8>
 801266a:	4c2d      	ldr	r4, [pc, #180]	; (8012720 <floor+0xf8>)
 801266c:	2500      	movs	r5, #0
 801266e:	4621      	mov	r1, r4
 8012670:	4628      	mov	r0, r5
 8012672:	e024      	b.n	80126be <floor+0x96>
 8012674:	4f2b      	ldr	r7, [pc, #172]	; (8012724 <floor+0xfc>)
 8012676:	4137      	asrs	r7, r6
 8012678:	ea01 0307 	and.w	r3, r1, r7
 801267c:	4303      	orrs	r3, r0
 801267e:	d01e      	beq.n	80126be <floor+0x96>
 8012680:	a325      	add	r3, pc, #148	; (adr r3, 8012718 <floor+0xf0>)
 8012682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012686:	f7ed fdc5 	bl	8000214 <__adddf3>
 801268a:	2200      	movs	r2, #0
 801268c:	2300      	movs	r3, #0
 801268e:	f7ee fa07 	bl	8000aa0 <__aeabi_dcmpgt>
 8012692:	2800      	cmp	r0, #0
 8012694:	d0eb      	beq.n	801266e <floor+0x46>
 8012696:	2c00      	cmp	r4, #0
 8012698:	bfbe      	ittt	lt
 801269a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801269e:	4133      	asrlt	r3, r6
 80126a0:	18e4      	addlt	r4, r4, r3
 80126a2:	ea24 0407 	bic.w	r4, r4, r7
 80126a6:	2500      	movs	r5, #0
 80126a8:	e7e1      	b.n	801266e <floor+0x46>
 80126aa:	2e33      	cmp	r6, #51	; 0x33
 80126ac:	dd0b      	ble.n	80126c6 <floor+0x9e>
 80126ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80126b2:	d104      	bne.n	80126be <floor+0x96>
 80126b4:	ee10 2a10 	vmov	r2, s0
 80126b8:	460b      	mov	r3, r1
 80126ba:	f7ed fdab 	bl	8000214 <__adddf3>
 80126be:	ec41 0b10 	vmov	d0, r0, r1
 80126c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80126ca:	f04f 37ff 	mov.w	r7, #4294967295
 80126ce:	40df      	lsrs	r7, r3
 80126d0:	4238      	tst	r0, r7
 80126d2:	d0f4      	beq.n	80126be <floor+0x96>
 80126d4:	a310      	add	r3, pc, #64	; (adr r3, 8012718 <floor+0xf0>)
 80126d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126da:	f7ed fd9b 	bl	8000214 <__adddf3>
 80126de:	2200      	movs	r2, #0
 80126e0:	2300      	movs	r3, #0
 80126e2:	f7ee f9dd 	bl	8000aa0 <__aeabi_dcmpgt>
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d0c1      	beq.n	801266e <floor+0x46>
 80126ea:	2c00      	cmp	r4, #0
 80126ec:	da0a      	bge.n	8012704 <floor+0xdc>
 80126ee:	2e14      	cmp	r6, #20
 80126f0:	d101      	bne.n	80126f6 <floor+0xce>
 80126f2:	3401      	adds	r4, #1
 80126f4:	e006      	b.n	8012704 <floor+0xdc>
 80126f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80126fa:	2301      	movs	r3, #1
 80126fc:	40b3      	lsls	r3, r6
 80126fe:	441d      	add	r5, r3
 8012700:	45a8      	cmp	r8, r5
 8012702:	d8f6      	bhi.n	80126f2 <floor+0xca>
 8012704:	ea25 0507 	bic.w	r5, r5, r7
 8012708:	e7b1      	b.n	801266e <floor+0x46>
 801270a:	2500      	movs	r5, #0
 801270c:	462c      	mov	r4, r5
 801270e:	e7ae      	b.n	801266e <floor+0x46>
 8012710:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012714:	e7ab      	b.n	801266e <floor+0x46>
 8012716:	bf00      	nop
 8012718:	8800759c 	.word	0x8800759c
 801271c:	7e37e43c 	.word	0x7e37e43c
 8012720:	bff00000 	.word	0xbff00000
 8012724:	000fffff 	.word	0x000fffff

08012728 <floorf>:
 8012728:	ee10 3a10 	vmov	r3, s0
 801272c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012730:	3a7f      	subs	r2, #127	; 0x7f
 8012732:	2a16      	cmp	r2, #22
 8012734:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012738:	dc2a      	bgt.n	8012790 <floorf+0x68>
 801273a:	2a00      	cmp	r2, #0
 801273c:	da11      	bge.n	8012762 <floorf+0x3a>
 801273e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80127a0 <floorf+0x78>
 8012742:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012746:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274e:	dd05      	ble.n	801275c <floorf+0x34>
 8012750:	2b00      	cmp	r3, #0
 8012752:	da23      	bge.n	801279c <floorf+0x74>
 8012754:	4a13      	ldr	r2, [pc, #76]	; (80127a4 <floorf+0x7c>)
 8012756:	2900      	cmp	r1, #0
 8012758:	bf18      	it	ne
 801275a:	4613      	movne	r3, r2
 801275c:	ee00 3a10 	vmov	s0, r3
 8012760:	4770      	bx	lr
 8012762:	4911      	ldr	r1, [pc, #68]	; (80127a8 <floorf+0x80>)
 8012764:	4111      	asrs	r1, r2
 8012766:	420b      	tst	r3, r1
 8012768:	d0fa      	beq.n	8012760 <floorf+0x38>
 801276a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80127a0 <floorf+0x78>
 801276e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012772:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277a:	ddef      	ble.n	801275c <floorf+0x34>
 801277c:	2b00      	cmp	r3, #0
 801277e:	bfbe      	ittt	lt
 8012780:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012784:	fa40 f202 	asrlt.w	r2, r0, r2
 8012788:	189b      	addlt	r3, r3, r2
 801278a:	ea23 0301 	bic.w	r3, r3, r1
 801278e:	e7e5      	b.n	801275c <floorf+0x34>
 8012790:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012794:	d3e4      	bcc.n	8012760 <floorf+0x38>
 8012796:	ee30 0a00 	vadd.f32	s0, s0, s0
 801279a:	4770      	bx	lr
 801279c:	2300      	movs	r3, #0
 801279e:	e7dd      	b.n	801275c <floorf+0x34>
 80127a0:	7149f2ca 	.word	0x7149f2ca
 80127a4:	bf800000 	.word	0xbf800000
 80127a8:	007fffff 	.word	0x007fffff

080127ac <__kernel_cosf>:
 80127ac:	ee10 3a10 	vmov	r3, s0
 80127b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80127b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80127bc:	da05      	bge.n	80127ca <__kernel_cosf+0x1e>
 80127be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80127c2:	ee17 2a90 	vmov	r2, s15
 80127c6:	2a00      	cmp	r2, #0
 80127c8:	d03b      	beq.n	8012842 <__kernel_cosf+0x96>
 80127ca:	ee20 7a00 	vmul.f32	s14, s0, s0
 80127ce:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012848 <__kernel_cosf+0x9c>
 80127d2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801284c <__kernel_cosf+0xa0>
 80127d6:	4a1e      	ldr	r2, [pc, #120]	; (8012850 <__kernel_cosf+0xa4>)
 80127d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80127dc:	4293      	cmp	r3, r2
 80127de:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8012854 <__kernel_cosf+0xa8>
 80127e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80127e6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8012858 <__kernel_cosf+0xac>
 80127ea:	eea7 6a87 	vfma.f32	s12, s15, s14
 80127ee:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801285c <__kernel_cosf+0xb0>
 80127f2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80127f6:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8012860 <__kernel_cosf+0xb4>
 80127fa:	eea7 6a87 	vfma.f32	s12, s15, s14
 80127fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8012802:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012806:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801280a:	eee7 0a06 	vfma.f32	s1, s14, s12
 801280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012812:	dc04      	bgt.n	801281e <__kernel_cosf+0x72>
 8012814:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012818:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801281c:	4770      	bx	lr
 801281e:	4a11      	ldr	r2, [pc, #68]	; (8012864 <__kernel_cosf+0xb8>)
 8012820:	4293      	cmp	r3, r2
 8012822:	bfda      	itte	le
 8012824:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8012828:	ee07 3a10 	vmovle	s14, r3
 801282c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8012830:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012834:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8012838:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801283c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012840:	4770      	bx	lr
 8012842:	eeb0 0a66 	vmov.f32	s0, s13
 8012846:	4770      	bx	lr
 8012848:	ad47d74e 	.word	0xad47d74e
 801284c:	310f74f6 	.word	0x310f74f6
 8012850:	3e999999 	.word	0x3e999999
 8012854:	b493f27c 	.word	0xb493f27c
 8012858:	37d00d01 	.word	0x37d00d01
 801285c:	bab60b61 	.word	0xbab60b61
 8012860:	3d2aaaab 	.word	0x3d2aaaab
 8012864:	3f480000 	.word	0x3f480000

08012868 <__kernel_sinf>:
 8012868:	ee10 3a10 	vmov	r3, s0
 801286c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012870:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012874:	da04      	bge.n	8012880 <__kernel_sinf+0x18>
 8012876:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801287a:	ee17 3a90 	vmov	r3, s15
 801287e:	b35b      	cbz	r3, 80128d8 <__kernel_sinf+0x70>
 8012880:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012884:	eddf 7a15 	vldr	s15, [pc, #84]	; 80128dc <__kernel_sinf+0x74>
 8012888:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80128e0 <__kernel_sinf+0x78>
 801288c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012890:	eddf 7a14 	vldr	s15, [pc, #80]	; 80128e4 <__kernel_sinf+0x7c>
 8012894:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012898:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80128e8 <__kernel_sinf+0x80>
 801289c:	eea7 6a87 	vfma.f32	s12, s15, s14
 80128a0:	eddf 7a12 	vldr	s15, [pc, #72]	; 80128ec <__kernel_sinf+0x84>
 80128a4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80128a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80128ac:	b930      	cbnz	r0, 80128bc <__kernel_sinf+0x54>
 80128ae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80128f0 <__kernel_sinf+0x88>
 80128b2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80128b6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80128ba:	4770      	bx	lr
 80128bc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80128c0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80128c4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80128c8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80128cc:	eddf 7a09 	vldr	s15, [pc, #36]	; 80128f4 <__kernel_sinf+0x8c>
 80128d0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80128d4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80128d8:	4770      	bx	lr
 80128da:	bf00      	nop
 80128dc:	2f2ec9d3 	.word	0x2f2ec9d3
 80128e0:	b2d72f34 	.word	0xb2d72f34
 80128e4:	3638ef1b 	.word	0x3638ef1b
 80128e8:	b9500d01 	.word	0xb9500d01
 80128ec:	3c088889 	.word	0x3c088889
 80128f0:	be2aaaab 	.word	0xbe2aaaab
 80128f4:	3e2aaaab 	.word	0x3e2aaaab

080128f8 <__ieee754_expf>:
 80128f8:	ee10 2a10 	vmov	r2, s0
 80128fc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012900:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012904:	d902      	bls.n	801290c <__ieee754_expf+0x14>
 8012906:	ee30 0a00 	vadd.f32	s0, s0, s0
 801290a:	4770      	bx	lr
 801290c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8012910:	d106      	bne.n	8012920 <__ieee754_expf+0x28>
 8012912:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8012a4c <__ieee754_expf+0x154>
 8012916:	2900      	cmp	r1, #0
 8012918:	bf18      	it	ne
 801291a:	eeb0 0a67 	vmovne.f32	s0, s15
 801291e:	4770      	bx	lr
 8012920:	484b      	ldr	r0, [pc, #300]	; (8012a50 <__ieee754_expf+0x158>)
 8012922:	4282      	cmp	r2, r0
 8012924:	dd02      	ble.n	801292c <__ieee754_expf+0x34>
 8012926:	2000      	movs	r0, #0
 8012928:	f000 be26 	b.w	8013578 <__math_oflowf>
 801292c:	2a00      	cmp	r2, #0
 801292e:	da05      	bge.n	801293c <__ieee754_expf+0x44>
 8012930:	4a48      	ldr	r2, [pc, #288]	; (8012a54 <__ieee754_expf+0x15c>)
 8012932:	4293      	cmp	r3, r2
 8012934:	d902      	bls.n	801293c <__ieee754_expf+0x44>
 8012936:	2000      	movs	r0, #0
 8012938:	f000 be18 	b.w	801356c <__math_uflowf>
 801293c:	4a46      	ldr	r2, [pc, #280]	; (8012a58 <__ieee754_expf+0x160>)
 801293e:	4293      	cmp	r3, r2
 8012940:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012944:	d952      	bls.n	80129ec <__ieee754_expf+0xf4>
 8012946:	4a45      	ldr	r2, [pc, #276]	; (8012a5c <__ieee754_expf+0x164>)
 8012948:	4293      	cmp	r3, r2
 801294a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801294e:	d834      	bhi.n	80129ba <__ieee754_expf+0xc2>
 8012950:	4b43      	ldr	r3, [pc, #268]	; (8012a60 <__ieee754_expf+0x168>)
 8012952:	4413      	add	r3, r2
 8012954:	ed93 7a00 	vldr	s14, [r3]
 8012958:	4b42      	ldr	r3, [pc, #264]	; (8012a64 <__ieee754_expf+0x16c>)
 801295a:	4413      	add	r3, r2
 801295c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8012960:	f1c1 0201 	rsb	r2, r1, #1
 8012964:	edd3 7a00 	vldr	s15, [r3]
 8012968:	1a52      	subs	r2, r2, r1
 801296a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801296e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8012972:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8012a68 <__ieee754_expf+0x170>
 8012976:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012a6c <__ieee754_expf+0x174>
 801297a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801297e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8012a70 <__ieee754_expf+0x178>
 8012982:	eea6 5a86 	vfma.f32	s10, s13, s12
 8012986:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8012a74 <__ieee754_expf+0x17c>
 801298a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801298e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8012a78 <__ieee754_expf+0x180>
 8012992:	eea6 5a86 	vfma.f32	s10, s13, s12
 8012996:	eef0 6a40 	vmov.f32	s13, s0
 801299a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801299e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80129a2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80129a6:	bb92      	cbnz	r2, 8012a0e <__ieee754_expf+0x116>
 80129a8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80129ac:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80129b0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80129b4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80129b8:	4770      	bx	lr
 80129ba:	4b30      	ldr	r3, [pc, #192]	; (8012a7c <__ieee754_expf+0x184>)
 80129bc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8012a80 <__ieee754_expf+0x188>
 80129c0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8012a84 <__ieee754_expf+0x18c>
 80129c4:	4413      	add	r3, r2
 80129c6:	edd3 7a00 	vldr	s15, [r3]
 80129ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80129ce:	eeb0 7a40 	vmov.f32	s14, s0
 80129d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129d6:	ee17 2a90 	vmov	r2, s15
 80129da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129de:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80129e2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8012a88 <__ieee754_expf+0x190>
 80129e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129ea:	e7be      	b.n	801296a <__ieee754_expf+0x72>
 80129ec:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80129f0:	d20b      	bcs.n	8012a0a <__ieee754_expf+0x112>
 80129f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012a8c <__ieee754_expf+0x194>
 80129f6:	ee70 6a26 	vadd.f32	s13, s0, s13
 80129fa:	eef4 6ae5 	vcmpe.f32	s13, s11
 80129fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a02:	dd02      	ble.n	8012a0a <__ieee754_expf+0x112>
 8012a04:	ee30 0a25 	vadd.f32	s0, s0, s11
 8012a08:	4770      	bx	lr
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	e7af      	b.n	801296e <__ieee754_expf+0x76>
 8012a0e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8012a12:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8012a16:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8012a1a:	bfb8      	it	lt
 8012a1c:	3264      	addlt	r2, #100	; 0x64
 8012a1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a26:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012a2a:	ee17 3a90 	vmov	r3, s15
 8012a2e:	bfab      	itete	ge
 8012a30:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8012a34:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8012a38:	ee00 3a10 	vmovge	s0, r3
 8012a3c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8012a90 <__ieee754_expf+0x198>
 8012a40:	bfbc      	itt	lt
 8012a42:	ee00 3a10 	vmovlt	s0, r3
 8012a46:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8012a4a:	4770      	bx	lr
 8012a4c:	00000000 	.word	0x00000000
 8012a50:	42b17217 	.word	0x42b17217
 8012a54:	42cff1b5 	.word	0x42cff1b5
 8012a58:	3eb17218 	.word	0x3eb17218
 8012a5c:	3f851591 	.word	0x3f851591
 8012a60:	08013b4c 	.word	0x08013b4c
 8012a64:	08013b54 	.word	0x08013b54
 8012a68:	3331bb4c 	.word	0x3331bb4c
 8012a6c:	b5ddea0e 	.word	0xb5ddea0e
 8012a70:	388ab355 	.word	0x388ab355
 8012a74:	bb360b61 	.word	0xbb360b61
 8012a78:	3e2aaaab 	.word	0x3e2aaaab
 8012a7c:	08013b44 	.word	0x08013b44
 8012a80:	3fb8aa3b 	.word	0x3fb8aa3b
 8012a84:	3f317180 	.word	0x3f317180
 8012a88:	3717f7d1 	.word	0x3717f7d1
 8012a8c:	7149f2ca 	.word	0x7149f2ca
 8012a90:	0d800000 	.word	0x0d800000

08012a94 <__ieee754_logf>:
 8012a94:	ee10 3a10 	vmov	r3, s0
 8012a98:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012a9c:	d106      	bne.n	8012aac <__ieee754_logf+0x18>
 8012a9e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8012c38 <__ieee754_logf+0x1a4>
 8012aa2:	eddf 7a66 	vldr	s15, [pc, #408]	; 8012c3c <__ieee754_logf+0x1a8>
 8012aa6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012aaa:	4770      	bx	lr
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	da02      	bge.n	8012ab6 <__ieee754_logf+0x22>
 8012ab0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012ab4:	e7f5      	b.n	8012aa2 <__ieee754_logf+0xe>
 8012ab6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012aba:	db02      	blt.n	8012ac2 <__ieee754_logf+0x2e>
 8012abc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012ac0:	4770      	bx	lr
 8012ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012ac6:	bfb8      	it	lt
 8012ac8:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8012c40 <__ieee754_logf+0x1ac>
 8012acc:	485d      	ldr	r0, [pc, #372]	; (8012c44 <__ieee754_logf+0x1b0>)
 8012ace:	bfbe      	ittt	lt
 8012ad0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012ad4:	f06f 0118 	mvnlt.w	r1, #24
 8012ad8:	ee17 3a90 	vmovlt	r3, s15
 8012adc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8012ae0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012ae4:	4418      	add	r0, r3
 8012ae6:	bfa8      	it	ge
 8012ae8:	2100      	movge	r1, #0
 8012aea:	3a7f      	subs	r2, #127	; 0x7f
 8012aec:	440a      	add	r2, r1
 8012aee:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8012af2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8012af6:	4319      	orrs	r1, r3
 8012af8:	ee00 1a10 	vmov	s0, r1
 8012afc:	4952      	ldr	r1, [pc, #328]	; (8012c48 <__ieee754_logf+0x1b4>)
 8012afe:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8012b02:	f103 000f 	add.w	r0, r3, #15
 8012b06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012b0a:	4001      	ands	r1, r0
 8012b0c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b10:	bb89      	cbnz	r1, 8012b76 <__ieee754_logf+0xe2>
 8012b12:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b1a:	d10f      	bne.n	8012b3c <__ieee754_logf+0xa8>
 8012b1c:	2a00      	cmp	r2, #0
 8012b1e:	f000 8087 	beq.w	8012c30 <__ieee754_logf+0x19c>
 8012b22:	ee07 2a90 	vmov	s15, r2
 8012b26:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8012c4c <__ieee754_logf+0x1b8>
 8012b2a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012c50 <__ieee754_logf+0x1bc>
 8012b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b32:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012b36:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012b3a:	4770      	bx	lr
 8012b3c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8012c54 <__ieee754_logf+0x1c0>
 8012b40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012b44:	eee0 7a66 	vfms.f32	s15, s0, s13
 8012b48:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b50:	b912      	cbnz	r2, 8012b58 <__ieee754_logf+0xc4>
 8012b52:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012b56:	4770      	bx	lr
 8012b58:	ee07 2a90 	vmov	s15, r2
 8012b5c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8012c4c <__ieee754_logf+0x1b8>
 8012b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b64:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012b68:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012b6c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012c50 <__ieee754_logf+0x1bc>
 8012b70:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8012b74:	4770      	bx	lr
 8012b76:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012b7a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012b7e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8012c58 <__ieee754_logf+0x1c4>
 8012b82:	eddf 4a36 	vldr	s9, [pc, #216]	; 8012c5c <__ieee754_logf+0x1c8>
 8012b86:	4936      	ldr	r1, [pc, #216]	; (8012c60 <__ieee754_logf+0x1cc>)
 8012b88:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8012b8c:	4419      	add	r1, r3
 8012b8e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8012b92:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8012b96:	430b      	orrs	r3, r1
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	ee07 2a90 	vmov	s15, r2
 8012b9e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8012ba2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012ba6:	ee25 7a05 	vmul.f32	s14, s10, s10
 8012baa:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8012c64 <__ieee754_logf+0x1d0>
 8012bae:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012bb2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8012c68 <__ieee754_logf+0x1d4>
 8012bb6:	eee7 5a87 	vfma.f32	s11, s15, s14
 8012bba:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8012c6c <__ieee754_logf+0x1d8>
 8012bbe:	eee7 7a24 	vfma.f32	s15, s14, s9
 8012bc2:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8012c70 <__ieee754_logf+0x1dc>
 8012bc6:	eee7 4a87 	vfma.f32	s9, s15, s14
 8012bca:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8012c74 <__ieee754_logf+0x1e0>
 8012bce:	eee4 7a87 	vfma.f32	s15, s9, s14
 8012bd2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012bd6:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012bda:	dd1a      	ble.n	8012c12 <__ieee754_logf+0x17e>
 8012bdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012be0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012be4:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012be8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012bec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012bf0:	b912      	cbnz	r2, 8012bf8 <__ieee754_logf+0x164>
 8012bf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012bf6:	e7ac      	b.n	8012b52 <__ieee754_logf+0xbe>
 8012bf8:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8012c4c <__ieee754_logf+0x1b8>
 8012bfc:	eee6 7a86 	vfma.f32	s15, s13, s12
 8012c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c04:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012c08:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012c50 <__ieee754_logf+0x1bc>
 8012c0c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8012c10:	4770      	bx	lr
 8012c12:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012c16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012c1a:	b912      	cbnz	r2, 8012c22 <__ieee754_logf+0x18e>
 8012c1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012c20:	4770      	bx	lr
 8012c22:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8012c4c <__ieee754_logf+0x1b8>
 8012c26:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012c2a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012c2e:	e7eb      	b.n	8012c08 <__ieee754_logf+0x174>
 8012c30:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012c3c <__ieee754_logf+0x1a8>
 8012c34:	4770      	bx	lr
 8012c36:	bf00      	nop
 8012c38:	cc000000 	.word	0xcc000000
 8012c3c:	00000000 	.word	0x00000000
 8012c40:	4c000000 	.word	0x4c000000
 8012c44:	004afb20 	.word	0x004afb20
 8012c48:	007ffff0 	.word	0x007ffff0
 8012c4c:	3717f7d1 	.word	0x3717f7d1
 8012c50:	3f317180 	.word	0x3f317180
 8012c54:	3eaaaaab 	.word	0x3eaaaaab
 8012c58:	3e1cd04f 	.word	0x3e1cd04f
 8012c5c:	3e178897 	.word	0x3e178897
 8012c60:	ffcf5c30 	.word	0xffcf5c30
 8012c64:	3e638e29 	.word	0x3e638e29
 8012c68:	3ecccccd 	.word	0x3ecccccd
 8012c6c:	3e3a3325 	.word	0x3e3a3325
 8012c70:	3e924925 	.word	0x3e924925
 8012c74:	3f2aaaab 	.word	0x3f2aaaab

08012c78 <__ieee754_powf>:
 8012c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c7c:	ee10 4a90 	vmov	r4, s1
 8012c80:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012c84:	ed2d 8b02 	vpush	{d8}
 8012c88:	ee10 7a10 	vmov	r7, s0
 8012c8c:	eeb0 8a40 	vmov.f32	s16, s0
 8012c90:	eef0 8a60 	vmov.f32	s17, s1
 8012c94:	d10c      	bne.n	8012cb0 <__ieee754_powf+0x38>
 8012c96:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8012c9a:	007f      	lsls	r7, r7, #1
 8012c9c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8012ca0:	f240 8292 	bls.w	80131c8 <__ieee754_powf+0x550>
 8012ca4:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012ca8:	ecbd 8b02 	vpop	{d8}
 8012cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cb0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8012cb4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012cb8:	dcf4      	bgt.n	8012ca4 <__ieee754_powf+0x2c>
 8012cba:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012cbe:	dd08      	ble.n	8012cd2 <__ieee754_powf+0x5a>
 8012cc0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8012cc4:	d1ee      	bne.n	8012ca4 <__ieee754_powf+0x2c>
 8012cc6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012cca:	0064      	lsls	r4, r4, #1
 8012ccc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012cd0:	e7e6      	b.n	8012ca0 <__ieee754_powf+0x28>
 8012cd2:	2f00      	cmp	r7, #0
 8012cd4:	da20      	bge.n	8012d18 <__ieee754_powf+0xa0>
 8012cd6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012cda:	da2d      	bge.n	8012d38 <__ieee754_powf+0xc0>
 8012cdc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012ce0:	f2c0 827b 	blt.w	80131da <__ieee754_powf+0x562>
 8012ce4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012ce8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012cec:	fa48 f603 	asr.w	r6, r8, r3
 8012cf0:	fa06 f303 	lsl.w	r3, r6, r3
 8012cf4:	4543      	cmp	r3, r8
 8012cf6:	f040 8270 	bne.w	80131da <__ieee754_powf+0x562>
 8012cfa:	f006 0601 	and.w	r6, r6, #1
 8012cfe:	f1c6 0602 	rsb	r6, r6, #2
 8012d02:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012d06:	d11f      	bne.n	8012d48 <__ieee754_powf+0xd0>
 8012d08:	2c00      	cmp	r4, #0
 8012d0a:	f280 8263 	bge.w	80131d4 <__ieee754_powf+0x55c>
 8012d0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d12:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012d16:	e7c7      	b.n	8012ca8 <__ieee754_powf+0x30>
 8012d18:	2600      	movs	r6, #0
 8012d1a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012d1e:	d1f0      	bne.n	8012d02 <__ieee754_powf+0x8a>
 8012d20:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012d24:	f000 8250 	beq.w	80131c8 <__ieee754_powf+0x550>
 8012d28:	dd08      	ble.n	8012d3c <__ieee754_powf+0xc4>
 8012d2a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8013030 <__ieee754_powf+0x3b8>
 8012d2e:	2c00      	cmp	r4, #0
 8012d30:	bfa8      	it	ge
 8012d32:	eeb0 0a68 	vmovge.f32	s0, s17
 8012d36:	e7b7      	b.n	8012ca8 <__ieee754_powf+0x30>
 8012d38:	2602      	movs	r6, #2
 8012d3a:	e7ee      	b.n	8012d1a <__ieee754_powf+0xa2>
 8012d3c:	2c00      	cmp	r4, #0
 8012d3e:	f280 8246 	bge.w	80131ce <__ieee754_powf+0x556>
 8012d42:	eeb1 0a68 	vneg.f32	s0, s17
 8012d46:	e7af      	b.n	8012ca8 <__ieee754_powf+0x30>
 8012d48:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012d4c:	d102      	bne.n	8012d54 <__ieee754_powf+0xdc>
 8012d4e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012d52:	e7a9      	b.n	8012ca8 <__ieee754_powf+0x30>
 8012d54:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012d58:	eeb0 0a48 	vmov.f32	s0, s16
 8012d5c:	d107      	bne.n	8012d6e <__ieee754_powf+0xf6>
 8012d5e:	2f00      	cmp	r7, #0
 8012d60:	db05      	blt.n	8012d6e <__ieee754_powf+0xf6>
 8012d62:	ecbd 8b02 	vpop	{d8}
 8012d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d6a:	f7ff bc57 	b.w	801261c <__ieee754_sqrtf>
 8012d6e:	f000 fb79 	bl	8013464 <fabsf>
 8012d72:	b125      	cbz	r5, 8012d7e <__ieee754_powf+0x106>
 8012d74:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8012d78:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012d7c:	d115      	bne.n	8012daa <__ieee754_powf+0x132>
 8012d7e:	2c00      	cmp	r4, #0
 8012d80:	bfbc      	itt	lt
 8012d82:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012d86:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012d8a:	2f00      	cmp	r7, #0
 8012d8c:	da8c      	bge.n	8012ca8 <__ieee754_powf+0x30>
 8012d8e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8012d92:	4335      	orrs	r5, r6
 8012d94:	d104      	bne.n	8012da0 <__ieee754_powf+0x128>
 8012d96:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012d9a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012d9e:	e783      	b.n	8012ca8 <__ieee754_powf+0x30>
 8012da0:	2e01      	cmp	r6, #1
 8012da2:	d181      	bne.n	8012ca8 <__ieee754_powf+0x30>
 8012da4:	eeb1 0a40 	vneg.f32	s0, s0
 8012da8:	e77e      	b.n	8012ca8 <__ieee754_powf+0x30>
 8012daa:	0ff8      	lsrs	r0, r7, #31
 8012dac:	3801      	subs	r0, #1
 8012dae:	ea56 0300 	orrs.w	r3, r6, r0
 8012db2:	d104      	bne.n	8012dbe <__ieee754_powf+0x146>
 8012db4:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012db8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012dbc:	e774      	b.n	8012ca8 <__ieee754_powf+0x30>
 8012dbe:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012dc2:	dd73      	ble.n	8012eac <__ieee754_powf+0x234>
 8012dc4:	4b9b      	ldr	r3, [pc, #620]	; (8013034 <__ieee754_powf+0x3bc>)
 8012dc6:	429d      	cmp	r5, r3
 8012dc8:	dc08      	bgt.n	8012ddc <__ieee754_powf+0x164>
 8012dca:	2c00      	cmp	r4, #0
 8012dcc:	da0b      	bge.n	8012de6 <__ieee754_powf+0x16e>
 8012dce:	2000      	movs	r0, #0
 8012dd0:	ecbd 8b02 	vpop	{d8}
 8012dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd8:	f000 bbce 	b.w	8013578 <__math_oflowf>
 8012ddc:	4b96      	ldr	r3, [pc, #600]	; (8013038 <__ieee754_powf+0x3c0>)
 8012dde:	429d      	cmp	r5, r3
 8012de0:	dd08      	ble.n	8012df4 <__ieee754_powf+0x17c>
 8012de2:	2c00      	cmp	r4, #0
 8012de4:	dcf3      	bgt.n	8012dce <__ieee754_powf+0x156>
 8012de6:	2000      	movs	r0, #0
 8012de8:	ecbd 8b02 	vpop	{d8}
 8012dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012df0:	f000 bbbc 	b.w	801356c <__math_uflowf>
 8012df4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012df8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012dfc:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801303c <__ieee754_powf+0x3c4>
 8012e00:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012e04:	eee0 6a67 	vfms.f32	s13, s0, s15
 8012e08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012e0c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012e10:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012e18:	eddf 7a89 	vldr	s15, [pc, #548]	; 8013040 <__ieee754_powf+0x3c8>
 8012e1c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8012e20:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013044 <__ieee754_powf+0x3cc>
 8012e24:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012e28:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8013048 <__ieee754_powf+0x3d0>
 8012e2c:	eef0 6a67 	vmov.f32	s13, s15
 8012e30:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012e34:	ee16 3a90 	vmov	r3, s13
 8012e38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012e3c:	f023 030f 	bic.w	r3, r3, #15
 8012e40:	ee06 3a90 	vmov	s13, r3
 8012e44:	eee0 6a47 	vfms.f32	s13, s0, s14
 8012e48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012e4c:	3e01      	subs	r6, #1
 8012e4e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8012e52:	4306      	orrs	r6, r0
 8012e54:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012e58:	f024 040f 	bic.w	r4, r4, #15
 8012e5c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012e60:	bf08      	it	eq
 8012e62:	eeb0 8a47 	vmoveq.f32	s16, s14
 8012e66:	ee07 4a10 	vmov	s14, r4
 8012e6a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012e6e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8012e72:	ee07 3a90 	vmov	s15, r3
 8012e76:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012e7a:	ee07 4a10 	vmov	s14, r4
 8012e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e82:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012e86:	ee17 1a10 	vmov	r1, s14
 8012e8a:	2900      	cmp	r1, #0
 8012e8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e90:	f340 817c 	ble.w	801318c <__ieee754_powf+0x514>
 8012e94:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8012e98:	f340 80f8 	ble.w	801308c <__ieee754_powf+0x414>
 8012e9c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea4:	bf4c      	ite	mi
 8012ea6:	2001      	movmi	r0, #1
 8012ea8:	2000      	movpl	r0, #0
 8012eaa:	e791      	b.n	8012dd0 <__ieee754_powf+0x158>
 8012eac:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8012eb0:	bf01      	itttt	eq
 8012eb2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801304c <__ieee754_powf+0x3d4>
 8012eb6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012eba:	f06f 0317 	mvneq.w	r3, #23
 8012ebe:	ee17 5a90 	vmoveq	r5, s15
 8012ec2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8012ec6:	bf18      	it	ne
 8012ec8:	2300      	movne	r3, #0
 8012eca:	3a7f      	subs	r2, #127	; 0x7f
 8012ecc:	441a      	add	r2, r3
 8012ece:	4b60      	ldr	r3, [pc, #384]	; (8013050 <__ieee754_powf+0x3d8>)
 8012ed0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8012ed4:	429d      	cmp	r5, r3
 8012ed6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8012eda:	dd06      	ble.n	8012eea <__ieee754_powf+0x272>
 8012edc:	4b5d      	ldr	r3, [pc, #372]	; (8013054 <__ieee754_powf+0x3dc>)
 8012ede:	429d      	cmp	r5, r3
 8012ee0:	f340 80a4 	ble.w	801302c <__ieee754_powf+0x3b4>
 8012ee4:	3201      	adds	r2, #1
 8012ee6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012eea:	2500      	movs	r5, #0
 8012eec:	4b5a      	ldr	r3, [pc, #360]	; (8013058 <__ieee754_powf+0x3e0>)
 8012eee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8012ef2:	ee07 1a10 	vmov	s14, r1
 8012ef6:	edd3 5a00 	vldr	s11, [r3]
 8012efa:	4b58      	ldr	r3, [pc, #352]	; (801305c <__ieee754_powf+0x3e4>)
 8012efc:	ee75 7a87 	vadd.f32	s15, s11, s14
 8012f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012f04:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8012f08:	1049      	asrs	r1, r1, #1
 8012f0a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8012f0e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8012f12:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8012f16:	ee37 6a65 	vsub.f32	s12, s14, s11
 8012f1a:	ee07 1a90 	vmov	s15, r1
 8012f1e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8012f22:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8012f26:	ee15 7a10 	vmov	r7, s10
 8012f2a:	401f      	ands	r7, r3
 8012f2c:	ee06 7a90 	vmov	s13, r7
 8012f30:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8012f34:	ee37 7a65 	vsub.f32	s14, s14, s11
 8012f38:	ee65 7a05 	vmul.f32	s15, s10, s10
 8012f3c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8012f40:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013060 <__ieee754_powf+0x3e8>
 8012f44:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013064 <__ieee754_powf+0x3ec>
 8012f48:	eee7 5a87 	vfma.f32	s11, s15, s14
 8012f4c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013068 <__ieee754_powf+0x3f0>
 8012f50:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012f54:	eddf 5a39 	vldr	s11, [pc, #228]	; 801303c <__ieee754_powf+0x3c4>
 8012f58:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012f5c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801306c <__ieee754_powf+0x3f4>
 8012f60:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012f64:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013070 <__ieee754_powf+0x3f8>
 8012f68:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012f6c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012f70:	ee35 7a26 	vadd.f32	s14, s10, s13
 8012f74:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8012f78:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012f7c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8012f80:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8012f84:	eef0 5a67 	vmov.f32	s11, s15
 8012f88:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8012f8c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8012f90:	ee15 1a90 	vmov	r1, s11
 8012f94:	4019      	ands	r1, r3
 8012f96:	ee05 1a90 	vmov	s11, r1
 8012f9a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012f9e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8012fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012fa6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012faa:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012fae:	eeb0 6a67 	vmov.f32	s12, s15
 8012fb2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012fb6:	ee16 1a10 	vmov	r1, s12
 8012fba:	4019      	ands	r1, r3
 8012fbc:	ee07 1a10 	vmov	s14, r1
 8012fc0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8012fc4:	ee06 1a10 	vmov	s12, r1
 8012fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012fcc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013074 <__ieee754_powf+0x3fc>
 8012fd0:	4929      	ldr	r1, [pc, #164]	; (8013078 <__ieee754_powf+0x400>)
 8012fd2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 801307c <__ieee754_powf+0x404>
 8012fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fda:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013080 <__ieee754_powf+0x408>
 8012fde:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012fe2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8012fe6:	ed91 7a00 	vldr	s14, [r1]
 8012fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012fee:	ee07 2a10 	vmov	s14, r2
 8012ff2:	eef0 6a67 	vmov.f32	s13, s15
 8012ff6:	4a23      	ldr	r2, [pc, #140]	; (8013084 <__ieee754_powf+0x40c>)
 8012ff8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012ffc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013000:	ed92 5a00 	vldr	s10, [r2]
 8013004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013008:	ee76 6a85 	vadd.f32	s13, s13, s10
 801300c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013010:	ee16 2a90 	vmov	r2, s13
 8013014:	4013      	ands	r3, r2
 8013016:	ee06 3a90 	vmov	s13, r3
 801301a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801301e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8013022:	eea6 7a65 	vfms.f32	s14, s12, s11
 8013026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801302a:	e70f      	b.n	8012e4c <__ieee754_powf+0x1d4>
 801302c:	2501      	movs	r5, #1
 801302e:	e75d      	b.n	8012eec <__ieee754_powf+0x274>
 8013030:	00000000 	.word	0x00000000
 8013034:	3f7ffff3 	.word	0x3f7ffff3
 8013038:	3f800007 	.word	0x3f800007
 801303c:	3eaaaaab 	.word	0x3eaaaaab
 8013040:	3fb8aa3b 	.word	0x3fb8aa3b
 8013044:	36eca570 	.word	0x36eca570
 8013048:	3fb8aa00 	.word	0x3fb8aa00
 801304c:	4b800000 	.word	0x4b800000
 8013050:	001cc471 	.word	0x001cc471
 8013054:	005db3d6 	.word	0x005db3d6
 8013058:	08013b5c 	.word	0x08013b5c
 801305c:	fffff000 	.word	0xfffff000
 8013060:	3e6c3255 	.word	0x3e6c3255
 8013064:	3e53f142 	.word	0x3e53f142
 8013068:	3e8ba305 	.word	0x3e8ba305
 801306c:	3edb6db7 	.word	0x3edb6db7
 8013070:	3f19999a 	.word	0x3f19999a
 8013074:	3f76384f 	.word	0x3f76384f
 8013078:	08013b6c 	.word	0x08013b6c
 801307c:	3f763800 	.word	0x3f763800
 8013080:	369dc3a0 	.word	0x369dc3a0
 8013084:	08013b64 	.word	0x08013b64
 8013088:	3338aa3c 	.word	0x3338aa3c
 801308c:	f040 8093 	bne.w	80131b6 <__ieee754_powf+0x53e>
 8013090:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013088 <__ieee754_powf+0x410>
 8013094:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013098:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801309c:	eef4 6ac7 	vcmpe.f32	s13, s14
 80130a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a4:	f73f aefa 	bgt.w	8012e9c <__ieee754_powf+0x224>
 80130a8:	15db      	asrs	r3, r3, #23
 80130aa:	3b7e      	subs	r3, #126	; 0x7e
 80130ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80130b0:	4118      	asrs	r0, r3
 80130b2:	4408      	add	r0, r1
 80130b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80130b8:	4a49      	ldr	r2, [pc, #292]	; (80131e0 <__ieee754_powf+0x568>)
 80130ba:	3b7f      	subs	r3, #127	; 0x7f
 80130bc:	411a      	asrs	r2, r3
 80130be:	4002      	ands	r2, r0
 80130c0:	ee07 2a10 	vmov	s14, r2
 80130c4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80130c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80130cc:	f1c3 0317 	rsb	r3, r3, #23
 80130d0:	4118      	asrs	r0, r3
 80130d2:	2900      	cmp	r1, #0
 80130d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80130d8:	bfb8      	it	lt
 80130da:	4240      	neglt	r0, r0
 80130dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80130e0:	eddf 6a40 	vldr	s13, [pc, #256]	; 80131e4 <__ieee754_powf+0x56c>
 80130e4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80131e8 <__ieee754_powf+0x570>
 80130e8:	ee17 3a10 	vmov	r3, s14
 80130ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80130f0:	f023 030f 	bic.w	r3, r3, #15
 80130f4:	ee07 3a10 	vmov	s14, r3
 80130f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80130fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013100:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013104:	eddf 7a39 	vldr	s15, [pc, #228]	; 80131ec <__ieee754_powf+0x574>
 8013108:	ee67 7a27 	vmul.f32	s15, s14, s15
 801310c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8013110:	eef0 6a67 	vmov.f32	s13, s15
 8013114:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013118:	eef0 5a66 	vmov.f32	s11, s13
 801311c:	eee7 5a46 	vfms.f32	s11, s14, s12
 8013120:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013124:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013128:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80131f0 <__ieee754_powf+0x578>
 801312c:	eddf 5a31 	vldr	s11, [pc, #196]	; 80131f4 <__ieee754_powf+0x57c>
 8013130:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013134:	eddf 5a30 	vldr	s11, [pc, #192]	; 80131f8 <__ieee754_powf+0x580>
 8013138:	eee6 5a07 	vfma.f32	s11, s12, s14
 801313c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80131fc <__ieee754_powf+0x584>
 8013140:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013144:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8013200 <__ieee754_powf+0x588>
 8013148:	eee6 5a07 	vfma.f32	s11, s12, s14
 801314c:	eeb0 6a66 	vmov.f32	s12, s13
 8013150:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8013154:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013158:	ee66 5a86 	vmul.f32	s11, s13, s12
 801315c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013160:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8013164:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8013168:	ee77 7a67 	vsub.f32	s15, s14, s15
 801316c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013170:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013174:	ee10 3a10 	vmov	r3, s0
 8013178:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801317c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013180:	da1f      	bge.n	80131c2 <__ieee754_powf+0x54a>
 8013182:	f000 f977 	bl	8013474 <scalbnf>
 8013186:	ee20 0a08 	vmul.f32	s0, s0, s16
 801318a:	e58d      	b.n	8012ca8 <__ieee754_powf+0x30>
 801318c:	4a1d      	ldr	r2, [pc, #116]	; (8013204 <__ieee754_powf+0x58c>)
 801318e:	4293      	cmp	r3, r2
 8013190:	dd07      	ble.n	80131a2 <__ieee754_powf+0x52a>
 8013192:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801319a:	bf4c      	ite	mi
 801319c:	2001      	movmi	r0, #1
 801319e:	2000      	movpl	r0, #0
 80131a0:	e622      	b.n	8012de8 <__ieee754_powf+0x170>
 80131a2:	d108      	bne.n	80131b6 <__ieee754_powf+0x53e>
 80131a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131a8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80131ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b0:	f6ff af7a 	blt.w	80130a8 <__ieee754_powf+0x430>
 80131b4:	e7ed      	b.n	8013192 <__ieee754_powf+0x51a>
 80131b6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80131ba:	f73f af75 	bgt.w	80130a8 <__ieee754_powf+0x430>
 80131be:	2000      	movs	r0, #0
 80131c0:	e78c      	b.n	80130dc <__ieee754_powf+0x464>
 80131c2:	ee00 3a10 	vmov	s0, r3
 80131c6:	e7de      	b.n	8013186 <__ieee754_powf+0x50e>
 80131c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80131cc:	e56c      	b.n	8012ca8 <__ieee754_powf+0x30>
 80131ce:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013208 <__ieee754_powf+0x590>
 80131d2:	e569      	b.n	8012ca8 <__ieee754_powf+0x30>
 80131d4:	eeb0 0a48 	vmov.f32	s0, s16
 80131d8:	e566      	b.n	8012ca8 <__ieee754_powf+0x30>
 80131da:	2600      	movs	r6, #0
 80131dc:	e591      	b.n	8012d02 <__ieee754_powf+0x8a>
 80131de:	bf00      	nop
 80131e0:	ff800000 	.word	0xff800000
 80131e4:	3f317218 	.word	0x3f317218
 80131e8:	3f317200 	.word	0x3f317200
 80131ec:	35bfbe8c 	.word	0x35bfbe8c
 80131f0:	b5ddea0e 	.word	0xb5ddea0e
 80131f4:	3331bb4c 	.word	0x3331bb4c
 80131f8:	388ab355 	.word	0x388ab355
 80131fc:	bb360b61 	.word	0xbb360b61
 8013200:	3e2aaaab 	.word	0x3e2aaaab
 8013204:	43160000 	.word	0x43160000
 8013208:	00000000 	.word	0x00000000

0801320c <__ieee754_rem_pio2f>:
 801320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801320e:	ee10 6a10 	vmov	r6, s0
 8013212:	4b86      	ldr	r3, [pc, #536]	; (801342c <__ieee754_rem_pio2f+0x220>)
 8013214:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013218:	429d      	cmp	r5, r3
 801321a:	b087      	sub	sp, #28
 801321c:	4604      	mov	r4, r0
 801321e:	dc05      	bgt.n	801322c <__ieee754_rem_pio2f+0x20>
 8013220:	2300      	movs	r3, #0
 8013222:	ed80 0a00 	vstr	s0, [r0]
 8013226:	6043      	str	r3, [r0, #4]
 8013228:	2000      	movs	r0, #0
 801322a:	e020      	b.n	801326e <__ieee754_rem_pio2f+0x62>
 801322c:	4b80      	ldr	r3, [pc, #512]	; (8013430 <__ieee754_rem_pio2f+0x224>)
 801322e:	429d      	cmp	r5, r3
 8013230:	dc38      	bgt.n	80132a4 <__ieee754_rem_pio2f+0x98>
 8013232:	2e00      	cmp	r6, #0
 8013234:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8013434 <__ieee754_rem_pio2f+0x228>
 8013238:	4b7f      	ldr	r3, [pc, #508]	; (8013438 <__ieee754_rem_pio2f+0x22c>)
 801323a:	f025 050f 	bic.w	r5, r5, #15
 801323e:	dd18      	ble.n	8013272 <__ieee754_rem_pio2f+0x66>
 8013240:	429d      	cmp	r5, r3
 8013242:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013246:	bf09      	itett	eq
 8013248:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801343c <__ieee754_rem_pio2f+0x230>
 801324c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8013440 <__ieee754_rem_pio2f+0x234>
 8013250:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013254:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8013444 <__ieee754_rem_pio2f+0x238>
 8013258:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801325c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013260:	edc0 6a00 	vstr	s13, [r0]
 8013264:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013268:	edc0 7a01 	vstr	s15, [r0, #4]
 801326c:	2001      	movs	r0, #1
 801326e:	b007      	add	sp, #28
 8013270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013272:	429d      	cmp	r5, r3
 8013274:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013278:	bf09      	itett	eq
 801327a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801343c <__ieee754_rem_pio2f+0x230>
 801327e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8013440 <__ieee754_rem_pio2f+0x234>
 8013282:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013286:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8013444 <__ieee754_rem_pio2f+0x238>
 801328a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801328e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013292:	edc0 6a00 	vstr	s13, [r0]
 8013296:	ee77 7a87 	vadd.f32	s15, s15, s14
 801329a:	edc0 7a01 	vstr	s15, [r0, #4]
 801329e:	f04f 30ff 	mov.w	r0, #4294967295
 80132a2:	e7e4      	b.n	801326e <__ieee754_rem_pio2f+0x62>
 80132a4:	4b68      	ldr	r3, [pc, #416]	; (8013448 <__ieee754_rem_pio2f+0x23c>)
 80132a6:	429d      	cmp	r5, r3
 80132a8:	dc71      	bgt.n	801338e <__ieee754_rem_pio2f+0x182>
 80132aa:	f000 f8db 	bl	8013464 <fabsf>
 80132ae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801344c <__ieee754_rem_pio2f+0x240>
 80132b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80132b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80132ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80132c2:	ee17 0a90 	vmov	r0, s15
 80132c6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013434 <__ieee754_rem_pio2f+0x228>
 80132ca:	eea7 0a67 	vfms.f32	s0, s14, s15
 80132ce:	281f      	cmp	r0, #31
 80132d0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013440 <__ieee754_rem_pio2f+0x234>
 80132d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132d8:	eeb1 6a47 	vneg.f32	s12, s14
 80132dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80132e0:	ee16 2a90 	vmov	r2, s13
 80132e4:	dc1c      	bgt.n	8013320 <__ieee754_rem_pio2f+0x114>
 80132e6:	495a      	ldr	r1, [pc, #360]	; (8013450 <__ieee754_rem_pio2f+0x244>)
 80132e8:	1e47      	subs	r7, r0, #1
 80132ea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80132ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80132f2:	428b      	cmp	r3, r1
 80132f4:	d014      	beq.n	8013320 <__ieee754_rem_pio2f+0x114>
 80132f6:	6022      	str	r2, [r4, #0]
 80132f8:	ed94 7a00 	vldr	s14, [r4]
 80132fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013300:	2e00      	cmp	r6, #0
 8013302:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013306:	ed84 0a01 	vstr	s0, [r4, #4]
 801330a:	dab0      	bge.n	801326e <__ieee754_rem_pio2f+0x62>
 801330c:	eeb1 7a47 	vneg.f32	s14, s14
 8013310:	eeb1 0a40 	vneg.f32	s0, s0
 8013314:	ed84 7a00 	vstr	s14, [r4]
 8013318:	ed84 0a01 	vstr	s0, [r4, #4]
 801331c:	4240      	negs	r0, r0
 801331e:	e7a6      	b.n	801326e <__ieee754_rem_pio2f+0x62>
 8013320:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013324:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8013328:	2908      	cmp	r1, #8
 801332a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801332e:	dde2      	ble.n	80132f6 <__ieee754_rem_pio2f+0xea>
 8013330:	eddf 5a42 	vldr	s11, [pc, #264]	; 801343c <__ieee754_rem_pio2f+0x230>
 8013334:	eef0 6a40 	vmov.f32	s13, s0
 8013338:	eee6 6a25 	vfma.f32	s13, s12, s11
 801333c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013340:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013344:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013444 <__ieee754_rem_pio2f+0x238>
 8013348:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801334c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013350:	ee15 2a90 	vmov	r2, s11
 8013354:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013358:	1a5b      	subs	r3, r3, r1
 801335a:	2b19      	cmp	r3, #25
 801335c:	dc04      	bgt.n	8013368 <__ieee754_rem_pio2f+0x15c>
 801335e:	edc4 5a00 	vstr	s11, [r4]
 8013362:	eeb0 0a66 	vmov.f32	s0, s13
 8013366:	e7c7      	b.n	80132f8 <__ieee754_rem_pio2f+0xec>
 8013368:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013454 <__ieee754_rem_pio2f+0x248>
 801336c:	eeb0 0a66 	vmov.f32	s0, s13
 8013370:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013374:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013378:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013458 <__ieee754_rem_pio2f+0x24c>
 801337c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013380:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013384:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013388:	ed84 7a00 	vstr	s14, [r4]
 801338c:	e7b4      	b.n	80132f8 <__ieee754_rem_pio2f+0xec>
 801338e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013392:	db06      	blt.n	80133a2 <__ieee754_rem_pio2f+0x196>
 8013394:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013398:	edc0 7a01 	vstr	s15, [r0, #4]
 801339c:	edc0 7a00 	vstr	s15, [r0]
 80133a0:	e742      	b.n	8013228 <__ieee754_rem_pio2f+0x1c>
 80133a2:	15ea      	asrs	r2, r5, #23
 80133a4:	3a86      	subs	r2, #134	; 0x86
 80133a6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80133aa:	ee07 3a90 	vmov	s15, r3
 80133ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80133b2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801345c <__ieee754_rem_pio2f+0x250>
 80133b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80133ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133be:	ed8d 7a03 	vstr	s14, [sp, #12]
 80133c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80133c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80133ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80133ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133d2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80133d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80133da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80133de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e2:	edcd 7a05 	vstr	s15, [sp, #20]
 80133e6:	d11e      	bne.n	8013426 <__ieee754_rem_pio2f+0x21a>
 80133e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80133ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f0:	bf14      	ite	ne
 80133f2:	2302      	movne	r3, #2
 80133f4:	2301      	moveq	r3, #1
 80133f6:	491a      	ldr	r1, [pc, #104]	; (8013460 <__ieee754_rem_pio2f+0x254>)
 80133f8:	9101      	str	r1, [sp, #4]
 80133fa:	2102      	movs	r1, #2
 80133fc:	9100      	str	r1, [sp, #0]
 80133fe:	a803      	add	r0, sp, #12
 8013400:	4621      	mov	r1, r4
 8013402:	f000 f8bf 	bl	8013584 <__kernel_rem_pio2f>
 8013406:	2e00      	cmp	r6, #0
 8013408:	f6bf af31 	bge.w	801326e <__ieee754_rem_pio2f+0x62>
 801340c:	edd4 7a00 	vldr	s15, [r4]
 8013410:	eef1 7a67 	vneg.f32	s15, s15
 8013414:	edc4 7a00 	vstr	s15, [r4]
 8013418:	edd4 7a01 	vldr	s15, [r4, #4]
 801341c:	eef1 7a67 	vneg.f32	s15, s15
 8013420:	edc4 7a01 	vstr	s15, [r4, #4]
 8013424:	e77a      	b.n	801331c <__ieee754_rem_pio2f+0x110>
 8013426:	2303      	movs	r3, #3
 8013428:	e7e5      	b.n	80133f6 <__ieee754_rem_pio2f+0x1ea>
 801342a:	bf00      	nop
 801342c:	3f490fd8 	.word	0x3f490fd8
 8013430:	4016cbe3 	.word	0x4016cbe3
 8013434:	3fc90f80 	.word	0x3fc90f80
 8013438:	3fc90fd0 	.word	0x3fc90fd0
 801343c:	37354400 	.word	0x37354400
 8013440:	37354443 	.word	0x37354443
 8013444:	2e85a308 	.word	0x2e85a308
 8013448:	43490f80 	.word	0x43490f80
 801344c:	3f22f984 	.word	0x3f22f984
 8013450:	08013b74 	.word	0x08013b74
 8013454:	2e85a300 	.word	0x2e85a300
 8013458:	248d3132 	.word	0x248d3132
 801345c:	43800000 	.word	0x43800000
 8013460:	08013bf4 	.word	0x08013bf4

08013464 <fabsf>:
 8013464:	ee10 3a10 	vmov	r3, s0
 8013468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801346c:	ee00 3a10 	vmov	s0, r3
 8013470:	4770      	bx	lr
	...

08013474 <scalbnf>:
 8013474:	ee10 3a10 	vmov	r3, s0
 8013478:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801347c:	d02b      	beq.n	80134d6 <scalbnf+0x62>
 801347e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013482:	d302      	bcc.n	801348a <scalbnf+0x16>
 8013484:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013488:	4770      	bx	lr
 801348a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801348e:	d123      	bne.n	80134d8 <scalbnf+0x64>
 8013490:	4b24      	ldr	r3, [pc, #144]	; (8013524 <scalbnf+0xb0>)
 8013492:	eddf 7a25 	vldr	s15, [pc, #148]	; 8013528 <scalbnf+0xb4>
 8013496:	4298      	cmp	r0, r3
 8013498:	ee20 0a27 	vmul.f32	s0, s0, s15
 801349c:	db17      	blt.n	80134ce <scalbnf+0x5a>
 801349e:	ee10 3a10 	vmov	r3, s0
 80134a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80134a6:	3a19      	subs	r2, #25
 80134a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80134ac:	4288      	cmp	r0, r1
 80134ae:	dd15      	ble.n	80134dc <scalbnf+0x68>
 80134b0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801352c <scalbnf+0xb8>
 80134b4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8013530 <scalbnf+0xbc>
 80134b8:	ee10 3a10 	vmov	r3, s0
 80134bc:	eeb0 7a67 	vmov.f32	s14, s15
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	bfb8      	it	lt
 80134c4:	eef0 7a66 	vmovlt.f32	s15, s13
 80134c8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80134cc:	4770      	bx	lr
 80134ce:	eddf 7a19 	vldr	s15, [pc, #100]	; 8013534 <scalbnf+0xc0>
 80134d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80134d6:	4770      	bx	lr
 80134d8:	0dd2      	lsrs	r2, r2, #23
 80134da:	e7e5      	b.n	80134a8 <scalbnf+0x34>
 80134dc:	4410      	add	r0, r2
 80134de:	28fe      	cmp	r0, #254	; 0xfe
 80134e0:	dce6      	bgt.n	80134b0 <scalbnf+0x3c>
 80134e2:	2800      	cmp	r0, #0
 80134e4:	dd06      	ble.n	80134f4 <scalbnf+0x80>
 80134e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80134ea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80134ee:	ee00 3a10 	vmov	s0, r3
 80134f2:	4770      	bx	lr
 80134f4:	f110 0f16 	cmn.w	r0, #22
 80134f8:	da09      	bge.n	801350e <scalbnf+0x9a>
 80134fa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013534 <scalbnf+0xc0>
 80134fe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8013538 <scalbnf+0xc4>
 8013502:	ee10 3a10 	vmov	r3, s0
 8013506:	eeb0 7a67 	vmov.f32	s14, s15
 801350a:	2b00      	cmp	r3, #0
 801350c:	e7d9      	b.n	80134c2 <scalbnf+0x4e>
 801350e:	3019      	adds	r0, #25
 8013510:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013514:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013518:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801353c <scalbnf+0xc8>
 801351c:	ee07 3a90 	vmov	s15, r3
 8013520:	e7d7      	b.n	80134d2 <scalbnf+0x5e>
 8013522:	bf00      	nop
 8013524:	ffff3cb0 	.word	0xffff3cb0
 8013528:	4c000000 	.word	0x4c000000
 801352c:	7149f2ca 	.word	0x7149f2ca
 8013530:	f149f2ca 	.word	0xf149f2ca
 8013534:	0da24260 	.word	0x0da24260
 8013538:	8da24260 	.word	0x8da24260
 801353c:	33000000 	.word	0x33000000

08013540 <with_errnof>:
 8013540:	b513      	push	{r0, r1, r4, lr}
 8013542:	4604      	mov	r4, r0
 8013544:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013548:	f7fe fd1a 	bl	8011f80 <__errno>
 801354c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013550:	6004      	str	r4, [r0, #0]
 8013552:	b002      	add	sp, #8
 8013554:	bd10      	pop	{r4, pc}

08013556 <xflowf>:
 8013556:	b130      	cbz	r0, 8013566 <xflowf+0x10>
 8013558:	eef1 7a40 	vneg.f32	s15, s0
 801355c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013560:	2022      	movs	r0, #34	; 0x22
 8013562:	f7ff bfed 	b.w	8013540 <with_errnof>
 8013566:	eef0 7a40 	vmov.f32	s15, s0
 801356a:	e7f7      	b.n	801355c <xflowf+0x6>

0801356c <__math_uflowf>:
 801356c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013574 <__math_uflowf+0x8>
 8013570:	f7ff bff1 	b.w	8013556 <xflowf>
 8013574:	10000000 	.word	0x10000000

08013578 <__math_oflowf>:
 8013578:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013580 <__math_oflowf+0x8>
 801357c:	f7ff bfeb 	b.w	8013556 <xflowf>
 8013580:	70000000 	.word	0x70000000

08013584 <__kernel_rem_pio2f>:
 8013584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013588:	ed2d 8b04 	vpush	{d8-d9}
 801358c:	b0d9      	sub	sp, #356	; 0x164
 801358e:	4688      	mov	r8, r1
 8013590:	9002      	str	r0, [sp, #8]
 8013592:	49b8      	ldr	r1, [pc, #736]	; (8013874 <__kernel_rem_pio2f+0x2f0>)
 8013594:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013596:	9301      	str	r3, [sp, #4]
 8013598:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801359c:	9901      	ldr	r1, [sp, #4]
 801359e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 80135a0:	f101 3bff 	add.w	fp, r1, #4294967295
 80135a4:	1d11      	adds	r1, r2, #4
 80135a6:	db25      	blt.n	80135f4 <__kernel_rem_pio2f+0x70>
 80135a8:	1ed0      	subs	r0, r2, #3
 80135aa:	bf48      	it	mi
 80135ac:	1d10      	addmi	r0, r2, #4
 80135ae:	10c0      	asrs	r0, r0, #3
 80135b0:	1c45      	adds	r5, r0, #1
 80135b2:	00e9      	lsls	r1, r5, #3
 80135b4:	eba0 070b 	sub.w	r7, r0, fp
 80135b8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8013884 <__kernel_rem_pio2f+0x300>
 80135bc:	9103      	str	r1, [sp, #12]
 80135be:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80135c2:	eb0a 0c0b 	add.w	ip, sl, fp
 80135c6:	ae1c      	add	r6, sp, #112	; 0x70
 80135c8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80135cc:	2400      	movs	r4, #0
 80135ce:	4564      	cmp	r4, ip
 80135d0:	dd12      	ble.n	80135f8 <__kernel_rem_pio2f+0x74>
 80135d2:	9901      	ldr	r1, [sp, #4]
 80135d4:	ac1c      	add	r4, sp, #112	; 0x70
 80135d6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80135da:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80135de:	f04f 0c00 	mov.w	ip, #0
 80135e2:	45d4      	cmp	ip, sl
 80135e4:	dc27      	bgt.n	8013636 <__kernel_rem_pio2f+0xb2>
 80135e6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80135ea:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8013884 <__kernel_rem_pio2f+0x300>
 80135ee:	4627      	mov	r7, r4
 80135f0:	2600      	movs	r6, #0
 80135f2:	e016      	b.n	8013622 <__kernel_rem_pio2f+0x9e>
 80135f4:	2000      	movs	r0, #0
 80135f6:	e7db      	b.n	80135b0 <__kernel_rem_pio2f+0x2c>
 80135f8:	42e7      	cmn	r7, r4
 80135fa:	bf5d      	ittte	pl
 80135fc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8013600:	ee07 1a90 	vmovpl	s15, r1
 8013604:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013608:	eef0 7a47 	vmovmi.f32	s15, s14
 801360c:	ece6 7a01 	vstmia	r6!, {s15}
 8013610:	3401      	adds	r4, #1
 8013612:	e7dc      	b.n	80135ce <__kernel_rem_pio2f+0x4a>
 8013614:	ecfe 6a01 	vldmia	lr!, {s13}
 8013618:	ed97 7a00 	vldr	s14, [r7]
 801361c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013620:	3601      	adds	r6, #1
 8013622:	455e      	cmp	r6, fp
 8013624:	f1a7 0704 	sub.w	r7, r7, #4
 8013628:	ddf4      	ble.n	8013614 <__kernel_rem_pio2f+0x90>
 801362a:	ece9 7a01 	vstmia	r9!, {s15}
 801362e:	f10c 0c01 	add.w	ip, ip, #1
 8013632:	3404      	adds	r4, #4
 8013634:	e7d5      	b.n	80135e2 <__kernel_rem_pio2f+0x5e>
 8013636:	a908      	add	r1, sp, #32
 8013638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801363c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8013640:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8013880 <__kernel_rem_pio2f+0x2fc>
 8013644:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801387c <__kernel_rem_pio2f+0x2f8>
 8013648:	9105      	str	r1, [sp, #20]
 801364a:	9304      	str	r3, [sp, #16]
 801364c:	4656      	mov	r6, sl
 801364e:	00b3      	lsls	r3, r6, #2
 8013650:	9306      	str	r3, [sp, #24]
 8013652:	ab58      	add	r3, sp, #352	; 0x160
 8013654:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013658:	ac08      	add	r4, sp, #32
 801365a:	ab44      	add	r3, sp, #272	; 0x110
 801365c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8013660:	46a4      	mov	ip, r4
 8013662:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013666:	4637      	mov	r7, r6
 8013668:	2f00      	cmp	r7, #0
 801366a:	f1a0 0004 	sub.w	r0, r0, #4
 801366e:	dc4a      	bgt.n	8013706 <__kernel_rem_pio2f+0x182>
 8013670:	4628      	mov	r0, r5
 8013672:	9207      	str	r2, [sp, #28]
 8013674:	f7ff fefe 	bl	8013474 <scalbnf>
 8013678:	eeb0 8a40 	vmov.f32	s16, s0
 801367c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013680:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013684:	f7ff f850 	bl	8012728 <floorf>
 8013688:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801368c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013690:	2d00      	cmp	r5, #0
 8013692:	9a07      	ldr	r2, [sp, #28]
 8013694:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013698:	ee17 9a90 	vmov	r9, s15
 801369c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80136a4:	dd41      	ble.n	801372a <__kernel_rem_pio2f+0x1a6>
 80136a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80136aa:	ab08      	add	r3, sp, #32
 80136ac:	f1c5 0e08 	rsb	lr, r5, #8
 80136b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80136b4:	fa47 f00e 	asr.w	r0, r7, lr
 80136b8:	4481      	add	r9, r0
 80136ba:	fa00 f00e 	lsl.w	r0, r0, lr
 80136be:	1a3f      	subs	r7, r7, r0
 80136c0:	f1c5 0007 	rsb	r0, r5, #7
 80136c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80136c8:	4107      	asrs	r7, r0
 80136ca:	2f00      	cmp	r7, #0
 80136cc:	dd3c      	ble.n	8013748 <__kernel_rem_pio2f+0x1c4>
 80136ce:	f04f 0e00 	mov.w	lr, #0
 80136d2:	f109 0901 	add.w	r9, r9, #1
 80136d6:	4671      	mov	r1, lr
 80136d8:	4576      	cmp	r6, lr
 80136da:	dc67      	bgt.n	80137ac <__kernel_rem_pio2f+0x228>
 80136dc:	2d00      	cmp	r5, #0
 80136de:	dd03      	ble.n	80136e8 <__kernel_rem_pio2f+0x164>
 80136e0:	2d01      	cmp	r5, #1
 80136e2:	d074      	beq.n	80137ce <__kernel_rem_pio2f+0x24a>
 80136e4:	2d02      	cmp	r5, #2
 80136e6:	d07b      	beq.n	80137e0 <__kernel_rem_pio2f+0x25c>
 80136e8:	2f02      	cmp	r7, #2
 80136ea:	d12d      	bne.n	8013748 <__kernel_rem_pio2f+0x1c4>
 80136ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80136f0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80136f4:	b341      	cbz	r1, 8013748 <__kernel_rem_pio2f+0x1c4>
 80136f6:	4628      	mov	r0, r5
 80136f8:	9207      	str	r2, [sp, #28]
 80136fa:	f7ff febb 	bl	8013474 <scalbnf>
 80136fe:	9a07      	ldr	r2, [sp, #28]
 8013700:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013704:	e020      	b.n	8013748 <__kernel_rem_pio2f+0x1c4>
 8013706:	ee60 7a28 	vmul.f32	s15, s0, s17
 801370a:	3f01      	subs	r7, #1
 801370c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013714:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013718:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801371c:	ecac 0a01 	vstmia	ip!, {s0}
 8013720:	ed90 0a00 	vldr	s0, [r0]
 8013724:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013728:	e79e      	b.n	8013668 <__kernel_rem_pio2f+0xe4>
 801372a:	d105      	bne.n	8013738 <__kernel_rem_pio2f+0x1b4>
 801372c:	1e70      	subs	r0, r6, #1
 801372e:	ab08      	add	r3, sp, #32
 8013730:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013734:	11ff      	asrs	r7, r7, #7
 8013736:	e7c8      	b.n	80136ca <__kernel_rem_pio2f+0x146>
 8013738:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801373c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013744:	da30      	bge.n	80137a8 <__kernel_rem_pio2f+0x224>
 8013746:	2700      	movs	r7, #0
 8013748:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801374c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013750:	f040 809a 	bne.w	8013888 <__kernel_rem_pio2f+0x304>
 8013754:	1e74      	subs	r4, r6, #1
 8013756:	46a4      	mov	ip, r4
 8013758:	2100      	movs	r1, #0
 801375a:	45d4      	cmp	ip, sl
 801375c:	da47      	bge.n	80137ee <__kernel_rem_pio2f+0x26a>
 801375e:	2900      	cmp	r1, #0
 8013760:	d063      	beq.n	801382a <__kernel_rem_pio2f+0x2a6>
 8013762:	ab08      	add	r3, sp, #32
 8013764:	3d08      	subs	r5, #8
 8013766:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d07f      	beq.n	801386e <__kernel_rem_pio2f+0x2ea>
 801376e:	4628      	mov	r0, r5
 8013770:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013774:	f7ff fe7e 	bl	8013474 <scalbnf>
 8013778:	1c63      	adds	r3, r4, #1
 801377a:	aa44      	add	r2, sp, #272	; 0x110
 801377c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013880 <__kernel_rem_pio2f+0x2fc>
 8013780:	0099      	lsls	r1, r3, #2
 8013782:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013786:	4623      	mov	r3, r4
 8013788:	2b00      	cmp	r3, #0
 801378a:	f280 80ad 	bge.w	80138e8 <__kernel_rem_pio2f+0x364>
 801378e:	4623      	mov	r3, r4
 8013790:	2b00      	cmp	r3, #0
 8013792:	f2c0 80cb 	blt.w	801392c <__kernel_rem_pio2f+0x3a8>
 8013796:	aa44      	add	r2, sp, #272	; 0x110
 8013798:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801379c:	4e36      	ldr	r6, [pc, #216]	; (8013878 <__kernel_rem_pio2f+0x2f4>)
 801379e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013884 <__kernel_rem_pio2f+0x300>
 80137a2:	2000      	movs	r0, #0
 80137a4:	1ae2      	subs	r2, r4, r3
 80137a6:	e0b6      	b.n	8013916 <__kernel_rem_pio2f+0x392>
 80137a8:	2702      	movs	r7, #2
 80137aa:	e790      	b.n	80136ce <__kernel_rem_pio2f+0x14a>
 80137ac:	6820      	ldr	r0, [r4, #0]
 80137ae:	b949      	cbnz	r1, 80137c4 <__kernel_rem_pio2f+0x240>
 80137b0:	b118      	cbz	r0, 80137ba <__kernel_rem_pio2f+0x236>
 80137b2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80137b6:	6020      	str	r0, [r4, #0]
 80137b8:	2001      	movs	r0, #1
 80137ba:	f10e 0e01 	add.w	lr, lr, #1
 80137be:	3404      	adds	r4, #4
 80137c0:	4601      	mov	r1, r0
 80137c2:	e789      	b.n	80136d8 <__kernel_rem_pio2f+0x154>
 80137c4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80137c8:	6020      	str	r0, [r4, #0]
 80137ca:	4608      	mov	r0, r1
 80137cc:	e7f5      	b.n	80137ba <__kernel_rem_pio2f+0x236>
 80137ce:	1e74      	subs	r4, r6, #1
 80137d0:	ab08      	add	r3, sp, #32
 80137d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80137da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80137de:	e783      	b.n	80136e8 <__kernel_rem_pio2f+0x164>
 80137e0:	1e74      	subs	r4, r6, #1
 80137e2:	ab08      	add	r3, sp, #32
 80137e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80137ec:	e7f5      	b.n	80137da <__kernel_rem_pio2f+0x256>
 80137ee:	ab08      	add	r3, sp, #32
 80137f0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80137f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80137f8:	4301      	orrs	r1, r0
 80137fa:	e7ae      	b.n	801375a <__kernel_rem_pio2f+0x1d6>
 80137fc:	3001      	adds	r0, #1
 80137fe:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8013802:	2f00      	cmp	r7, #0
 8013804:	d0fa      	beq.n	80137fc <__kernel_rem_pio2f+0x278>
 8013806:	9b06      	ldr	r3, [sp, #24]
 8013808:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801380c:	eb0d 0403 	add.w	r4, sp, r3
 8013810:	9b01      	ldr	r3, [sp, #4]
 8013812:	18f7      	adds	r7, r6, r3
 8013814:	ab1c      	add	r3, sp, #112	; 0x70
 8013816:	f106 0c01 	add.w	ip, r6, #1
 801381a:	3c4c      	subs	r4, #76	; 0x4c
 801381c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013820:	4430      	add	r0, r6
 8013822:	4560      	cmp	r0, ip
 8013824:	da04      	bge.n	8013830 <__kernel_rem_pio2f+0x2ac>
 8013826:	4606      	mov	r6, r0
 8013828:	e711      	b.n	801364e <__kernel_rem_pio2f+0xca>
 801382a:	9c05      	ldr	r4, [sp, #20]
 801382c:	2001      	movs	r0, #1
 801382e:	e7e6      	b.n	80137fe <__kernel_rem_pio2f+0x27a>
 8013830:	9b04      	ldr	r3, [sp, #16]
 8013832:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013836:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801383a:	9306      	str	r3, [sp, #24]
 801383c:	ee07 3a90 	vmov	s15, r3
 8013840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013844:	2600      	movs	r6, #0
 8013846:	ece7 7a01 	vstmia	r7!, {s15}
 801384a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013884 <__kernel_rem_pio2f+0x300>
 801384e:	46b9      	mov	r9, r7
 8013850:	455e      	cmp	r6, fp
 8013852:	dd04      	ble.n	801385e <__kernel_rem_pio2f+0x2da>
 8013854:	ece4 7a01 	vstmia	r4!, {s15}
 8013858:	f10c 0c01 	add.w	ip, ip, #1
 801385c:	e7e1      	b.n	8013822 <__kernel_rem_pio2f+0x29e>
 801385e:	ecfe 6a01 	vldmia	lr!, {s13}
 8013862:	ed39 7a01 	vldmdb	r9!, {s14}
 8013866:	3601      	adds	r6, #1
 8013868:	eee6 7a87 	vfma.f32	s15, s13, s14
 801386c:	e7f0      	b.n	8013850 <__kernel_rem_pio2f+0x2cc>
 801386e:	3c01      	subs	r4, #1
 8013870:	e777      	b.n	8013762 <__kernel_rem_pio2f+0x1de>
 8013872:	bf00      	nop
 8013874:	08013f38 	.word	0x08013f38
 8013878:	08013f0c 	.word	0x08013f0c
 801387c:	43800000 	.word	0x43800000
 8013880:	3b800000 	.word	0x3b800000
 8013884:	00000000 	.word	0x00000000
 8013888:	9b03      	ldr	r3, [sp, #12]
 801388a:	eeb0 0a48 	vmov.f32	s0, s16
 801388e:	1a98      	subs	r0, r3, r2
 8013890:	f7ff fdf0 	bl	8013474 <scalbnf>
 8013894:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801387c <__kernel_rem_pio2f+0x2f8>
 8013898:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a0:	db19      	blt.n	80138d6 <__kernel_rem_pio2f+0x352>
 80138a2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013880 <__kernel_rem_pio2f+0x2fc>
 80138a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80138aa:	aa08      	add	r2, sp, #32
 80138ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138b0:	1c74      	adds	r4, r6, #1
 80138b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138b6:	3508      	adds	r5, #8
 80138b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80138bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80138c4:	ee10 3a10 	vmov	r3, s0
 80138c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80138cc:	ee17 3a90 	vmov	r3, s15
 80138d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80138d4:	e74b      	b.n	801376e <__kernel_rem_pio2f+0x1ea>
 80138d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80138da:	aa08      	add	r2, sp, #32
 80138dc:	ee10 3a10 	vmov	r3, s0
 80138e0:	4634      	mov	r4, r6
 80138e2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80138e6:	e742      	b.n	801376e <__kernel_rem_pio2f+0x1ea>
 80138e8:	a808      	add	r0, sp, #32
 80138ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80138ee:	9001      	str	r0, [sp, #4]
 80138f0:	ee07 0a90 	vmov	s15, r0
 80138f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138f8:	3b01      	subs	r3, #1
 80138fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80138fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013902:	ed62 7a01 	vstmdb	r2!, {s15}
 8013906:	e73f      	b.n	8013788 <__kernel_rem_pio2f+0x204>
 8013908:	ecf6 6a01 	vldmia	r6!, {s13}
 801390c:	ecb5 7a01 	vldmia	r5!, {s14}
 8013910:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013914:	3001      	adds	r0, #1
 8013916:	4550      	cmp	r0, sl
 8013918:	dc01      	bgt.n	801391e <__kernel_rem_pio2f+0x39a>
 801391a:	4290      	cmp	r0, r2
 801391c:	ddf4      	ble.n	8013908 <__kernel_rem_pio2f+0x384>
 801391e:	a858      	add	r0, sp, #352	; 0x160
 8013920:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013924:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8013928:	3b01      	subs	r3, #1
 801392a:	e731      	b.n	8013790 <__kernel_rem_pio2f+0x20c>
 801392c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801392e:	2b02      	cmp	r3, #2
 8013930:	dc09      	bgt.n	8013946 <__kernel_rem_pio2f+0x3c2>
 8013932:	2b00      	cmp	r3, #0
 8013934:	dc2b      	bgt.n	801398e <__kernel_rem_pio2f+0x40a>
 8013936:	d044      	beq.n	80139c2 <__kernel_rem_pio2f+0x43e>
 8013938:	f009 0007 	and.w	r0, r9, #7
 801393c:	b059      	add	sp, #356	; 0x164
 801393e:	ecbd 8b04 	vpop	{d8-d9}
 8013942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013946:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013948:	2b03      	cmp	r3, #3
 801394a:	d1f5      	bne.n	8013938 <__kernel_rem_pio2f+0x3b4>
 801394c:	aa30      	add	r2, sp, #192	; 0xc0
 801394e:	1f0b      	subs	r3, r1, #4
 8013950:	4413      	add	r3, r2
 8013952:	461a      	mov	r2, r3
 8013954:	4620      	mov	r0, r4
 8013956:	2800      	cmp	r0, #0
 8013958:	f1a2 0204 	sub.w	r2, r2, #4
 801395c:	dc52      	bgt.n	8013a04 <__kernel_rem_pio2f+0x480>
 801395e:	4622      	mov	r2, r4
 8013960:	2a01      	cmp	r2, #1
 8013962:	f1a3 0304 	sub.w	r3, r3, #4
 8013966:	dc5d      	bgt.n	8013a24 <__kernel_rem_pio2f+0x4a0>
 8013968:	ab30      	add	r3, sp, #192	; 0xc0
 801396a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013884 <__kernel_rem_pio2f+0x300>
 801396e:	440b      	add	r3, r1
 8013970:	2c01      	cmp	r4, #1
 8013972:	dc67      	bgt.n	8013a44 <__kernel_rem_pio2f+0x4c0>
 8013974:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013978:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801397c:	2f00      	cmp	r7, #0
 801397e:	d167      	bne.n	8013a50 <__kernel_rem_pio2f+0x4cc>
 8013980:	edc8 6a00 	vstr	s13, [r8]
 8013984:	ed88 7a01 	vstr	s14, [r8, #4]
 8013988:	edc8 7a02 	vstr	s15, [r8, #8]
 801398c:	e7d4      	b.n	8013938 <__kernel_rem_pio2f+0x3b4>
 801398e:	ab30      	add	r3, sp, #192	; 0xc0
 8013990:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8013884 <__kernel_rem_pio2f+0x300>
 8013994:	440b      	add	r3, r1
 8013996:	4622      	mov	r2, r4
 8013998:	2a00      	cmp	r2, #0
 801399a:	da24      	bge.n	80139e6 <__kernel_rem_pio2f+0x462>
 801399c:	b34f      	cbz	r7, 80139f2 <__kernel_rem_pio2f+0x46e>
 801399e:	eef1 7a47 	vneg.f32	s15, s14
 80139a2:	edc8 7a00 	vstr	s15, [r8]
 80139a6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80139aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139ae:	aa31      	add	r2, sp, #196	; 0xc4
 80139b0:	2301      	movs	r3, #1
 80139b2:	429c      	cmp	r4, r3
 80139b4:	da20      	bge.n	80139f8 <__kernel_rem_pio2f+0x474>
 80139b6:	b10f      	cbz	r7, 80139bc <__kernel_rem_pio2f+0x438>
 80139b8:	eef1 7a67 	vneg.f32	s15, s15
 80139bc:	edc8 7a01 	vstr	s15, [r8, #4]
 80139c0:	e7ba      	b.n	8013938 <__kernel_rem_pio2f+0x3b4>
 80139c2:	ab30      	add	r3, sp, #192	; 0xc0
 80139c4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8013884 <__kernel_rem_pio2f+0x300>
 80139c8:	440b      	add	r3, r1
 80139ca:	2c00      	cmp	r4, #0
 80139cc:	da05      	bge.n	80139da <__kernel_rem_pio2f+0x456>
 80139ce:	b10f      	cbz	r7, 80139d4 <__kernel_rem_pio2f+0x450>
 80139d0:	eef1 7a67 	vneg.f32	s15, s15
 80139d4:	edc8 7a00 	vstr	s15, [r8]
 80139d8:	e7ae      	b.n	8013938 <__kernel_rem_pio2f+0x3b4>
 80139da:	ed33 7a01 	vldmdb	r3!, {s14}
 80139de:	3c01      	subs	r4, #1
 80139e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80139e4:	e7f1      	b.n	80139ca <__kernel_rem_pio2f+0x446>
 80139e6:	ed73 7a01 	vldmdb	r3!, {s15}
 80139ea:	3a01      	subs	r2, #1
 80139ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80139f0:	e7d2      	b.n	8013998 <__kernel_rem_pio2f+0x414>
 80139f2:	eef0 7a47 	vmov.f32	s15, s14
 80139f6:	e7d4      	b.n	80139a2 <__kernel_rem_pio2f+0x41e>
 80139f8:	ecb2 7a01 	vldmia	r2!, {s14}
 80139fc:	3301      	adds	r3, #1
 80139fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a02:	e7d6      	b.n	80139b2 <__kernel_rem_pio2f+0x42e>
 8013a04:	edd2 7a00 	vldr	s15, [r2]
 8013a08:	edd2 6a01 	vldr	s13, [r2, #4]
 8013a0c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013a10:	3801      	subs	r0, #1
 8013a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a16:	ed82 7a00 	vstr	s14, [r2]
 8013a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a1e:	edc2 7a01 	vstr	s15, [r2, #4]
 8013a22:	e798      	b.n	8013956 <__kernel_rem_pio2f+0x3d2>
 8013a24:	edd3 7a00 	vldr	s15, [r3]
 8013a28:	edd3 6a01 	vldr	s13, [r3, #4]
 8013a2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013a30:	3a01      	subs	r2, #1
 8013a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a36:	ed83 7a00 	vstr	s14, [r3]
 8013a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a3e:	edc3 7a01 	vstr	s15, [r3, #4]
 8013a42:	e78d      	b.n	8013960 <__kernel_rem_pio2f+0x3dc>
 8013a44:	ed33 7a01 	vldmdb	r3!, {s14}
 8013a48:	3c01      	subs	r4, #1
 8013a4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a4e:	e78f      	b.n	8013970 <__kernel_rem_pio2f+0x3ec>
 8013a50:	eef1 6a66 	vneg.f32	s13, s13
 8013a54:	eeb1 7a47 	vneg.f32	s14, s14
 8013a58:	edc8 6a00 	vstr	s13, [r8]
 8013a5c:	ed88 7a01 	vstr	s14, [r8, #4]
 8013a60:	eef1 7a67 	vneg.f32	s15, s15
 8013a64:	e790      	b.n	8013988 <__kernel_rem_pio2f+0x404>
 8013a66:	bf00      	nop

08013a68 <_init>:
 8013a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a6a:	bf00      	nop
 8013a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a6e:	bc08      	pop	{r3}
 8013a70:	469e      	mov	lr, r3
 8013a72:	4770      	bx	lr

08013a74 <_fini>:
 8013a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a76:	bf00      	nop
 8013a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a7a:	bc08      	pop	{r3}
 8013a7c:	469e      	mov	lr, r3
 8013a7e:	4770      	bx	lr
