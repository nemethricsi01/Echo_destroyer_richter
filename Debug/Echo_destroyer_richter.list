
Echo_destroyer_richter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f254  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800f420  0800f420  0001f420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fac8  0800fac8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fac8  0800fac8  0001fac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fad0  0800fad0  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fad0  0800fad0  0001fad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fad4  0800fad4  0001fad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800fad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  200000c8  0800fba0  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  0800fba0  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b01b  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005879  00000000  00000000  0004b1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000164ef  00000000  00000000  00050a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001aa8  00000000  00000000  00066f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000158b  00000000  00000000  000689e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027c37  00000000  00000000  00069f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034d8a  00000000  00000000  00091ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ebddc  00000000  00000000  000c692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000056cc  00000000  00000000  001b2708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001b7dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e1b  00000000  00000000  001b7e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000040  00000000  00000000  001b8c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000c8 	.word	0x200000c8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800f404 	.word	0x0800f404

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000cc 	.word	0x200000cc
 8000204:	0800f404 	.word	0x0800f404

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b970 	b.w	8000edc <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	460d      	mov	r5, r1
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	460f      	mov	r7, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14a      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c24:	428a      	cmp	r2, r1
 8000c26:	4694      	mov	ip, r2
 8000c28:	d965      	bls.n	8000cf6 <__udivmoddi4+0xe2>
 8000c2a:	fab2 f382 	clz	r3, r2
 8000c2e:	b143      	cbz	r3, 8000c42 <__udivmoddi4+0x2e>
 8000c30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c34:	f1c3 0220 	rsb	r2, r3, #32
 8000c38:	409f      	lsls	r7, r3
 8000c3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	409c      	lsls	r4, r3
 8000c42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c46:	fa1f f58c 	uxth.w	r5, ip
 8000c4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4e:	0c22      	lsrs	r2, r4, #16
 8000c50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c58:	fb01 f005 	mul.w	r0, r1, r5
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x62>
 8000c60:	eb1c 0202 	adds.w	r2, ip, r2
 8000c64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c68:	f080 811c 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f240 8119 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c72:	3902      	subs	r1, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	b2a4      	uxth	r4, r4
 8000c7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c86:	fb00 f505 	mul.w	r5, r0, r5
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x90>
 8000c8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x294>
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x294>
 8000ca0:	4464      	add	r4, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca8:	1b64      	subs	r4, r4, r5
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11e      	cbz	r6, 8000cb6 <__udivmoddi4+0xa2>
 8000cae:	40dc      	lsrs	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0xbc>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80ed 	beq.w	8000e9e <__udivmoddi4+0x28a>
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	fab3 f183 	clz	r1, r3
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	d149      	bne.n	8000d6c <__udivmoddi4+0x158>
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	d302      	bcc.n	8000ce2 <__udivmoddi4+0xce>
 8000cdc:	4282      	cmp	r2, r0
 8000cde:	f200 80f8 	bhi.w	8000ed2 <__udivmoddi4+0x2be>
 8000ce2:	1a84      	subs	r4, r0, r2
 8000ce4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4617      	mov	r7, r2
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d0e2      	beq.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf4:	e7df      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000cf6:	b902      	cbnz	r2, 8000cfa <__udivmoddi4+0xe6>
 8000cf8:	deff      	udf	#255	; 0xff
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d14:	fb07 2015 	mls	r0, r7, r5, r2
 8000d18:	0c22      	lsrs	r2, r4, #16
 8000d1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1e:	fb0e f005 	mul.w	r0, lr, r5
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d26:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2b8>
 8000d36:	4645      	mov	r5, r8
 8000d38:	1a12      	subs	r2, r2, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d40:	fb07 2210 	mls	r2, r7, r0, r2
 8000d44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x14e>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x14c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2c2>
 8000d60:	4610      	mov	r0, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6a:	e79f      	b.n	8000cac <__udivmoddi4+0x98>
 8000d6c:	f1c1 0720 	rsb	r7, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d82:	40fd      	lsrs	r5, r7
 8000d84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	fb09 5518 	mls	r5, r9, r8, r5
 8000d96:	0c1c      	lsrs	r4, r3, #16
 8000d98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	fa00 f001 	lsl.w	r0, r0, r1
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2b4>
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2b4>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4464      	add	r4, ip
 8000dc4:	1b64      	subs	r4, r4, r5
 8000dc6:	b29d      	uxth	r5, r3
 8000dc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dcc:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2ac>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2ac>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	4464      	add	r4, ip
 8000dee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df2:	fba3 9502 	umull	r9, r5, r3, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46ae      	mov	lr, r5
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x29c>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x298>
 8000e04:	b156      	cbz	r6, 8000e1c <__udivmoddi4+0x208>
 8000e06:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e12:	40ca      	lsrs	r2, r1
 8000e14:	40cc      	lsrs	r4, r1
 8000e16:	4317      	orrs	r7, r2
 8000e18:	e9c6 7400 	strd	r7, r4, [r6]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	f1c3 0120 	rsb	r1, r3, #32
 8000e28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e30:	fa25 f101 	lsr.w	r1, r5, r1
 8000e34:	409d      	lsls	r5, r3
 8000e36:	432a      	orrs	r2, r5
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e44:	fb07 1510 	mls	r5, r7, r0, r1
 8000e48:	0c11      	lsrs	r1, r2, #16
 8000e4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e52:	428d      	cmp	r5, r1
 8000e54:	fa04 f403 	lsl.w	r4, r4, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x258>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e64:	428d      	cmp	r5, r1
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	1b49      	subs	r1, r1, r5
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e74:	fb07 1115 	mls	r1, r7, r5, r1
 8000e78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e80:	4291      	cmp	r1, r2
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x282>
 8000e84:	eb1c 0202 	adds.w	r2, ip, r2
 8000e88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2a8>
 8000e8e:	4291      	cmp	r1, r2
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2a8>
 8000e92:	3d02      	subs	r5, #2
 8000e94:	4462      	add	r2, ip
 8000e96:	1a52      	subs	r2, r2, r1
 8000e98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0xfc>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xa2>
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	e6e6      	b.n	8000c76 <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x90>
 8000eac:	4548      	cmp	r0, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000ebc:	4645      	mov	r5, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x282>
 8000ec0:	462b      	mov	r3, r5
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x258>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000ecc:	3d02      	subs	r5, #2
 8000ece:	4462      	add	r2, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e70a      	b.n	8000cec <__udivmoddi4+0xd8>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x14e>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <write_to_flash>:
#include "nvs.h"

#define FLASH_USER_START_ADDR    0x08060000UL   // Adjust based on your flash sector

HAL_StatusTypeDef write_to_flash(uint32_t* data, uint32_t size)
{
 8000ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee4:	b088      	sub	sp, #32
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4606      	mov	r6, r0
 8000eea:	460d      	mov	r5, r1
	volatile HAL_StatusTypeDef status;
    volatile FLASH_EraseInitTypeDef erase_init;
    volatile uint32_t page_error;

    // Initialize FLASH Erase structure
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000eec:	2400      	movs	r4, #0
 8000eee:	60bc      	str	r4, [r7, #8]
    erase_init.Sector = FLASH_SECTOR_7;  // Adjust based on your flash sector
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	613b      	str	r3, [r7, #16]
    erase_init.NbSectors = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // Adjust based on your voltage range
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
    HAL_FLASH_Unlock();
 8000efc:	f007 fdb8 	bl	8008a70 <HAL_FLASH_Unlock>
    // Erase the flash sector
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <write_to_flash+0x84>)
 8000f02:	2240      	movs	r2, #64	; 0x40
 8000f04:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	60da      	str	r2, [r3, #12]
    status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8000f0a:	1d39      	adds	r1, r7, #4
 8000f0c:	f107 0008 	add.w	r0, r7, #8
 8000f10:	f007 feac 	bl	8008c6c <HAL_FLASHEx_Erase>
 8000f14:	77f8      	strb	r0, [r7, #31]
    volatile uint32_t error;
    error = HAL_FLASH_GetError();
 8000f16:	f007 fdcd 	bl	8008ab4 <HAL_FLASH_GetError>
 8000f1a:	6038      	str	r0, [r7, #0]

    // Write data to flash

    uint32_t dummy[size] __attribute__((aligned(4)));
 8000f1c:	00ab      	lsls	r3, r5, #2
 8000f1e:	3307      	adds	r3, #7
 8000f20:	f023 0307 	bic.w	r3, r3, #7
 8000f24:	ebad 0d03 	sub.w	sp, sp, r3
 8000f28:	46e8      	mov	r8, sp
    for (int i = 0; i < size; i++) {
 8000f2a:	e000      	b.n	8000f2e <write_to_flash+0x4e>
 8000f2c:	3401      	adds	r4, #1
 8000f2e:	42ac      	cmp	r4, r5
 8000f30:	d212      	bcs.n	8000f58 <write_to_flash+0x78>
    	dummy[i] = data[i];
 8000f32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000f36:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + i * sizeof(uint32_t), dummy[i]);
 8000f3a:	f104 7100 	add.w	r1, r4, #33554432	; 0x2000000
 8000f3e:	f501 31c0 	add.w	r1, r1, #98304	; 0x18000
 8000f42:	2300      	movs	r3, #0
 8000f44:	0089      	lsls	r1, r1, #2
 8000f46:	2002      	movs	r0, #2
 8000f48:	f007 fdea 	bl	8008b20 <HAL_FLASH_Program>
 8000f4c:	77f8      	strb	r0, [r7, #31]
        if (status != HAL_OK) {
 8000f4e:	7ffb      	ldrb	r3, [r7, #31]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0eb      	beq.n	8000f2c <write_to_flash+0x4c>
            // Error handling
        	return HAL_ERROR;
 8000f54:	2001      	movs	r0, #1
 8000f56:	e001      	b.n	8000f5c <write_to_flash+0x7c>
        }
    }
    HAL_FLASH_Lock();
 8000f58:	f007 fda2 	bl	8008aa0 <HAL_FLASH_Lock>
}
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <read_from_flash>:


// Function to read data from flash memory
HAL_StatusTypeDef read_from_flash(uint32_t* data, uint32_t size) {
    for (int i = 0; i < size; i++) {
 8000f68:	2200      	movs	r2, #0
 8000f6a:	e008      	b.n	8000f7e <read_from_flash+0x16>
        data[i] = *(uint32_t*)(FLASH_USER_START_ADDR + i * sizeof(uint32_t));
 8000f6c:	f102 7300 	add.w	r3, r2, #33554432	; 0x2000000
 8000f70:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for (int i = 0; i < size; i++) {
 8000f7c:	3201      	adds	r2, #1
 8000f7e:	428a      	cmp	r2, r1
 8000f80:	d3f4      	bcc.n	8000f6c <read_from_flash+0x4>
    }
}
 8000f82:	4770      	bx	lr

08000f84 <libSpeexAEC_getMemorySize>:

uint32_t libSpeexAEC_getMemorySize(AcousticEC_Handler_t *pHandler)
{
  uint32_t ret = 0;
  uint32_t byte_offset = sizeof(InternalEchoType);
  uint32_t n = (((pHandler->tail_length + NN_MAX - 1) / NN_MAX) + 1) * NN_MAX * 2;
 8000f84:	8801      	ldrh	r1, [r0, #0]
 8000f86:	f101 027f 	add.w	r2, r1, #127	; 0x7f
 8000f8a:	11d2      	asrs	r2, r2, #7
 8000f8c:	3201      	adds	r2, #1

  byte_offset += n * sizeof(float);
  byte_offset += n * sizeof(float);
 8000f8e:	f244 5350 	movw	r3, #17744	; 0x4550
 8000f92:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
  byte_offset += n * sizeof(float);
 8000f96:	eb03 2382 	add.w	r3, r3, r2, lsl #10
  byte_offset += (pHandler->tail_length) * sizeof(float);
 8000f9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2

  if (pHandler->preprocess_init == 1)
 8000f9e:	6842      	ldr	r2, [r0, #4]
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d002      	beq.n	8000faa <libSpeexAEC_getMemorySize+0x26>
    byte_offset += sizeof(SpeexPreprocessState);
    byte_offset += sizeof(drft_lookup);
    byte_offset += sizeof(FilterBank);
  }

  pHandler->internal_memory_size = byte_offset;
 8000fa4:	6103      	str	r3, [r0, #16]

  return ret;
}
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	4770      	bx	lr
    byte_offset += sizeof(FilterBank);
 8000faa:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8000fae:	3308      	adds	r3, #8
 8000fb0:	e7f8      	b.n	8000fa4 <libSpeexAEC_getMemorySize+0x20>

08000fb2 <libSpeexAEC_setConfig>:
/**
* @brief Library run function, performs audio analysis when all required data has been collected
* @retval 0 if everything is ok, 1 otherwise
*/
uint32_t libSpeexAEC_setConfig(AcousticEC_Handler_t *pHandler, AcousticEC_Config_t *pConfig)
{
 8000fb2:	b510      	push	{r4, lr}
  InternalEchoType *EchoInternal = (InternalEchoType *)(pHandler->pInternalMemory);
 8000fb4:	6940      	ldr	r0, [r0, #20]
  uint32_t ret = 0;

  if (EchoInternal->preprocess_initialized == 1)
 8000fb6:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 8000fba:	f893 3548 	ldrb.w	r3, [r3, #1352]	; 0x548
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d005      	beq.n	8000fce <libSpeexAEC_setConfig+0x1c>
    }
  }
  else
  {
    /*PREPROCESS*/
    if ((pConfig->preprocess_state & ACOUSTIC_EC_PREPROCESS_ENABLE) != 0U)
 8000fc2:	680c      	ldr	r4, [r1, #0]
 8000fc4:	f014 0401 	ands.w	r4, r4, #1
 8000fc8:	d14f      	bne.n	800106a <libSpeexAEC_setConfig+0xb8>
    {
      ret |= ACOUSTIC_EC_PREPROCESS_ERROR;
    }
  }
  return ret;
}
 8000fca:	4620      	mov	r0, r4
 8000fcc:	bd10      	pop	{r4, pc}
    if ((pConfig->preprocess_state & ACOUSTIC_EC_PREPROCESS_ENABLE) != 0U)
 8000fce:	680b      	ldr	r3, [r1, #0]
 8000fd0:	f013 0f01 	tst.w	r3, #1
 8000fd4:	d02c      	beq.n	8001030 <libSpeexAEC_setConfig+0x7e>
      EchoInternal->PREPROCESS = 1;
 8000fd6:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
    if ((pConfig->AGC_value > 0) && (pConfig->AGC_value < 32768))
 8000fe0:	684c      	ldr	r4, [r1, #4]
 8000fe2:	1e62      	subs	r2, r4, #1
 8000fe4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d827      	bhi.n	800103c <libSpeexAEC_setConfig+0x8a>
      EchoInternal->den->agc_enabled = 1;
 8000fec:	6843      	ldr	r3, [r0, #4]
 8000fee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
      EchoInternal->den->agc_level = pConfig->AGC_value;
 8000ff8:	6843      	ldr	r3, [r0, #4]
 8000ffa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000ffe:	edd1 7a01 	vldr	s15, [r1, #4]
 8001002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001006:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
  uint32_t ret = 0;
 800100a:	2400      	movs	r4, #0
    EchoInternal->den->noise_suppress = pConfig->noise_suppress_default;
 800100c:	6843      	ldr	r3, [r0, #4]
 800100e:	68ca      	ldr	r2, [r1, #12]
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
    EchoInternal->den->echo_suppress = pConfig->echo_suppress_default;
 8001012:	6843      	ldr	r3, [r0, #4]
 8001014:	690a      	ldr	r2, [r1, #16]
 8001016:	635a      	str	r2, [r3, #52]	; 0x34
    EchoInternal->den->echo_suppress_active = pConfig->echo_suppress_active;
 8001018:	6843      	ldr	r3, [r0, #4]
 800101a:	694a      	ldr	r2, [r1, #20]
 800101c:	639a      	str	r2, [r3, #56]	; 0x38
    if (pConfig->residual_echo_remove == 1)
 800101e:	688b      	ldr	r3, [r1, #8]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d01b      	beq.n	800105c <libSpeexAEC_setConfig+0xaa>
      Preprocess_setup(EchoInternal->den, SPEEX_PREPROCESS_SET_ECHO_STATE, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2118      	movs	r1, #24
 8001028:	6840      	ldr	r0, [r0, #4]
 800102a:	f002 ffc7 	bl	8003fbc <Preprocess_setup>
 800102e:	e7cc      	b.n	8000fca <libSpeexAEC_setConfig+0x18>
      EchoInternal->PREPROCESS = 0;
 8001030:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 800103a:	e7d1      	b.n	8000fe0 <libSpeexAEC_setConfig+0x2e>
    else if (pConfig->AGC_value == 0)
 800103c:	b934      	cbnz	r4, 800104c <libSpeexAEC_setConfig+0x9a>
      EchoInternal->den->agc_enabled = 0;
 800103e:	6843      	ldr	r3, [r0, #4]
 8001040:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001044:	2200      	movs	r2, #0
 8001046:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800104a:	e7df      	b.n	800100c <libSpeexAEC_setConfig+0x5a>
      EchoInternal->den->agc_enabled = 0;
 800104c:	6843      	ldr	r3, [r0, #4]
 800104e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001052:	2200      	movs	r2, #0
 8001054:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
      ret |= ACOUSTIC_EC_AEC_LEVEL_ERROR;
 8001058:	2402      	movs	r4, #2
 800105a:	e7d7      	b.n	800100c <libSpeexAEC_setConfig+0x5a>
      Preprocess_setup(EchoInternal->den, SPEEX_PREPROCESS_SET_ECHO_STATE, &EchoInternal->st);
 800105c:	f100 020c 	add.w	r2, r0, #12
 8001060:	2118      	movs	r1, #24
 8001062:	6840      	ldr	r0, [r0, #4]
 8001064:	f002 ffaa 	bl	8003fbc <Preprocess_setup>
 8001068:	e7af      	b.n	8000fca <libSpeexAEC_setConfig+0x18>
      ret |= ACOUSTIC_EC_PREPROCESS_ERROR;
 800106a:	2410      	movs	r4, #16
  return ret;
 800106c:	e7ad      	b.n	8000fca <libSpeexAEC_setConfig+0x18>

0800106e <libSpeexAEC_Process>:
  }
  return ret;
}

uint32_t libSpeexAEC_Process(AcousticEC_Handler_t *pHandler)
{
 800106e:	b538      	push	{r3, r4, r5, lr}
  InternalEchoType *echoInstance = (InternalEchoType *)(pHandler->pInternalMemory);
 8001070:	6944      	ldr	r4, [r0, #20]
  uint32_t ret = 0;
  uint8_t ECHO = echoInstance->ECHO;
 8001072:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8001076:	f893 054a 	ldrb.w	r0, [r3, #1354]	; 0x54a
  uint8_t PREPROCESS = echoInstance->PREPROCESS;
 800107a:	f893 5549 	ldrb.w	r5, [r3, #1353]	; 0x549

  if (echoInstance->buffer_state == 1)
 800107e:	f8b3 3546 	ldrh.w	r3, [r3, #1350]	; 0x546
 8001082:	2b01      	cmp	r3, #1
 8001084:	d003      	beq.n	800108e <libSpeexAEC_Process+0x20>
    if (PREPROCESS)
    {
      Preprocess(echoInstance->den, echoInstance->e_buf + ECHO_BUFF);
    }
  }
  else if (echoInstance->buffer_state == 2)
 8001086:	2b02      	cmp	r3, #2
 8001088:	d032      	beq.n	80010f0 <libSpeexAEC_Process+0x82>
  else
  {
    /* do nothing: MISRAC */
  }
  return ret;
}
 800108a:	2000      	movs	r0, #0
 800108c:	bd38      	pop	{r3, r4, r5, pc}
    echoInstance->buffer_state = 0;
 800108e:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8001092:	2200      	movs	r2, #0
 8001094:	f8a3 2546 	strh.w	r2, [r3, #1350]	; 0x546
    if (((PREPROCESS && ECHO) == 0)  || ((PREPROCESS >= 1) && (ECHO == 0)))
 8001098:	b1d5      	cbz	r5, 80010d0 <libSpeexAEC_Process+0x62>
 800109a:	b978      	cbnz	r0, 80010bc <libSpeexAEC_Process+0x4e>
 800109c:	e00c      	b.n	80010b8 <libSpeexAEC_Process+0x4a>
        echoInstance->e_buf[ECHO_BUFF + i] = echoInstance->dir1_buf[i];
 800109e:	f502 53fd 	add.w	r3, r2, #8096	; 0x1fa0
 80010a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80010a6:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80010aa:	f502 5308 	add.w	r3, r2, #8704	; 0x2200
 80010ae:	3320      	adds	r3, #32
 80010b0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80010b4:	80d9      	strh	r1, [r3, #6]
      for (i = 0; i < ECHO_BUFF; i++)
 80010b6:	3201      	adds	r2, #1
 80010b8:	2a7f      	cmp	r2, #127	; 0x7f
 80010ba:	d9f0      	bls.n	800109e <libSpeexAEC_Process+0x30>
    if (ECHO)
 80010bc:	b950      	cbnz	r0, 80010d4 <libSpeexAEC_Process+0x66>
    if (PREPROCESS)
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e3      	beq.n	800108a <libSpeexAEC_Process+0x1c>
      Preprocess(echoInstance->den, echoInstance->e_buf + ECHO_BUFF);
 80010c2:	f504 4188 	add.w	r1, r4, #17408	; 0x4400
 80010c6:	3146      	adds	r1, #70	; 0x46
 80010c8:	6860      	ldr	r0, [r4, #4]
 80010ca:	f002 fb25 	bl	8003718 <Preprocess>
 80010ce:	e7dc      	b.n	800108a <libSpeexAEC_Process+0x1c>
 80010d0:	2200      	movs	r2, #0
 80010d2:	e7f1      	b.n	80010b8 <libSpeexAEC_Process+0x4a>
      Echo_cancellation(&echoInstance->st, echoInstance->dir1_buf, echoInstance->dir2_buf, echoInstance->e_buf + ECHO_BUFF);
 80010d4:	f504 4388 	add.w	r3, r4, #17408	; 0x4400
 80010d8:	3346      	adds	r3, #70	; 0x46
 80010da:	f504 4282 	add.w	r2, r4, #16640	; 0x4100
 80010de:	3246      	adds	r2, #70	; 0x46
 80010e0:	f504 517d 	add.w	r1, r4, #16192	; 0x3f40
 80010e4:	3106      	adds	r1, #6
 80010e6:	f104 000c 	add.w	r0, r4, #12
 80010ea:	f000 fb83 	bl	80017f4 <Echo_cancellation>
 80010ee:	e7e6      	b.n	80010be <libSpeexAEC_Process+0x50>
    echoInstance->buffer_state = 0;
 80010f0:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 2546 	strh.w	r2, [r3, #1350]	; 0x546
    if ((ECHO == 0) || ((PREPROCESS >= 1) && (ECHO == 0)))
 80010fa:	b1d0      	cbz	r0, 8001132 <libSpeexAEC_Process+0xc4>
    if (ECHO)
 80010fc:	b9d8      	cbnz	r0, 8001136 <libSpeexAEC_Process+0xc8>
    if (PREPROCESS)
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d0c3      	beq.n	800108a <libSpeexAEC_Process+0x1c>
      Preprocess(echoInstance->den, echoInstance->e_buf);
 8001102:	f504 4186 	add.w	r1, r4, #17152	; 0x4300
 8001106:	3146      	adds	r1, #70	; 0x46
 8001108:	6860      	ldr	r0, [r4, #4]
 800110a:	f002 fb05 	bl	8003718 <Preprocess>
 800110e:	e7bc      	b.n	800108a <libSpeexAEC_Process+0x1c>
        echoInstance->e_buf[i] = echoInstance->dir1_buf[i + ECHO_BUFF];
 8001110:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
 8001114:	3320      	adds	r3, #32
 8001116:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800111a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800111e:	f502 5306 	add.w	r3, r2, #8576	; 0x2180
 8001122:	3320      	adds	r3, #32
 8001124:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001128:	80d9      	strh	r1, [r3, #6]
      for (i = 0; i < ECHO_BUFF; i++)
 800112a:	3201      	adds	r2, #1
 800112c:	2a7f      	cmp	r2, #127	; 0x7f
 800112e:	d9ef      	bls.n	8001110 <libSpeexAEC_Process+0xa2>
 8001130:	e7e4      	b.n	80010fc <libSpeexAEC_Process+0x8e>
 8001132:	2200      	movs	r2, #0
 8001134:	e7fa      	b.n	800112c <libSpeexAEC_Process+0xbe>
      Echo_cancellation(&echoInstance->st, echoInstance->dir1_buf + ECHO_BUFF, echoInstance->dir2_buf + ECHO_BUFF, echoInstance->e_buf);
 8001136:	f504 4386 	add.w	r3, r4, #17152	; 0x4300
 800113a:	3346      	adds	r3, #70	; 0x46
 800113c:	f504 4284 	add.w	r2, r4, #16896	; 0x4200
 8001140:	3246      	adds	r2, #70	; 0x46
 8001142:	f504 4180 	add.w	r1, r4, #16384	; 0x4000
 8001146:	3146      	adds	r1, #70	; 0x46
 8001148:	f104 000c 	add.w	r0, r4, #12
 800114c:	f000 fb52 	bl	80017f4 <Echo_cancellation>
 8001150:	e7d5      	b.n	80010fe <libSpeexAEC_Process+0x90>

08001152 <libSpeexAEC_Data_Input>:

uint32_t libSpeexAEC_Data_Input(void *ptrPrimary, void *ptrReference, void *ptrBufferOut, AcousticEC_Handler_t *pHandler)
{
 8001152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001156:	4686      	mov	lr, r0
  InternalEchoType *echoInstance = (InternalEchoType *)(pHandler->pInternalMemory);
 8001158:	695c      	ldr	r4, [r3, #20]
  uint8_t ret = 0;
  uint16_t i = 0;

  for (i = 0; i < (FS / 1000); i++)
 800115a:	f04f 0c00 	mov.w	ip, #0
  uint8_t ret = 0;
 800115e:	4660      	mov	r0, ip
  for (i = 0; i < (FS / 1000); i++)
 8001160:	e022      	b.n	80011a8 <libSpeexAEC_Data_Input+0x56>
    echoInstance->dir1_buf[echoInstance->samples_count] = ((int16_t *)ptrPrimary)[i * echoInstance->ptr_primary_channels];
    echoInstance->dir2_buf[echoInstance->samples_count] = ((int16_t *)ptrReference)[i * echoInstance->ptr_reference_channels];
    echoInstance->samples_count++;
    if (echoInstance->samples_count == ECHO_BUFF)
    {
      echoInstance->buffer_state = 1;
 8001162:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8001166:	2001      	movs	r0, #1
 8001168:	f8a3 0546 	strh.w	r0, [r3, #1350]	; 0x546
    {
      /* do nothing: MISRAC */
    }

    /* Output */
    ((int16_t *)ptrBufferOut)[i * echoInstance->ptr_output_channels] = echoInstance->e_buf[echoInstance->samples_count_output];
 800116c:	f504 5540 	add.w	r5, r4, #12288	; 0x3000
 8001170:	f8b5 3f44 	ldrh.w	r3, [r5, #3908]	; 0xf44
 8001174:	f8b5 7f40 	ldrh.w	r7, [r5, #3904]	; 0xf40
 8001178:	fb07 f606 	mul.w	r6, r7, r6
 800117c:	f503 5306 	add.w	r3, r3, #8576	; 0x2180
 8001180:	3320      	adds	r3, #32
 8001182:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001186:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800118a:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
    echoInstance->samples_count_output++;
 800118e:	f8b5 3f44 	ldrh.w	r3, [r5, #3908]	; 0xf44
 8001192:	3301      	adds	r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	f8a5 3f44 	strh.w	r3, [r5, #3908]	; 0xf44
    if (echoInstance->samples_count_output == (ECHO_BUFF * 2))
 800119a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800119e:	d039      	beq.n	8001214 <libSpeexAEC_Data_Input+0xc2>
  for (i = 0; i < (FS / 1000); i++)
 80011a0:	f10c 0c01 	add.w	ip, ip, #1
 80011a4:	fa1f fc8c 	uxth.w	ip, ip
 80011a8:	f1bc 0f0f 	cmp.w	ip, #15
 80011ac:	d837      	bhi.n	800121e <libSpeexAEC_Data_Input+0xcc>
    echoInstance->dir1_buf[echoInstance->samples_count] = ((int16_t *)ptrPrimary)[i * echoInstance->ptr_primary_channels];
 80011ae:	4666      	mov	r6, ip
 80011b0:	f504 5740 	add.w	r7, r4, #12288	; 0x3000
 80011b4:	f8b7 5f3c 	ldrh.w	r5, [r7, #3900]	; 0xf3c
 80011b8:	fb05 f50c 	mul.w	r5, r5, ip
 80011bc:	f8b7 3f42 	ldrh.w	r3, [r7, #3906]	; 0xf42
 80011c0:	f93e 8015 	ldrsh.w	r8, [lr, r5, lsl #1]
 80011c4:	f503 55fd 	add.w	r5, r3, #8096	; 0x1fa0
 80011c8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80011cc:	f8a5 8006 	strh.w	r8, [r5, #6]
    echoInstance->dir2_buf[echoInstance->samples_count] = ((int16_t *)ptrReference)[i * echoInstance->ptr_reference_channels];
 80011d0:	f8b7 5f3e 	ldrh.w	r5, [r7, #3902]	; 0xf3e
 80011d4:	fb05 f50c 	mul.w	r5, r5, ip
 80011d8:	f931 8015 	ldrsh.w	r8, [r1, r5, lsl #1]
 80011dc:	f503 5502 	add.w	r5, r3, #8320	; 0x2080
 80011e0:	3520      	adds	r5, #32
 80011e2:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80011e6:	f8a5 8006 	strh.w	r8, [r5, #6]
    echoInstance->samples_count++;
 80011ea:	3301      	adds	r3, #1
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f8a7 3f42 	strh.w	r3, [r7, #3906]	; 0xf42
    if (echoInstance->samples_count == ECHO_BUFF)
 80011f2:	2b80      	cmp	r3, #128	; 0x80
 80011f4:	d0b5      	beq.n	8001162 <libSpeexAEC_Data_Input+0x10>
    else if (echoInstance->samples_count == (ECHO_BUFF * 2))
 80011f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fa:	d1b7      	bne.n	800116c <libSpeexAEC_Data_Input+0x1a>
      echoInstance->buffer_state = 2;
 80011fc:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8001200:	2002      	movs	r0, #2
 8001202:	f8a3 0546 	strh.w	r0, [r3, #1350]	; 0x546
      echoInstance->samples_count = 0;
 8001206:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800120a:	2000      	movs	r0, #0
 800120c:	f8a3 0f42 	strh.w	r0, [r3, #3906]	; 0xf42
      ret = ACOUSTIC_EC_TAIL_LENGTH_ERROR;
 8001210:	2001      	movs	r0, #1
 8001212:	e7ab      	b.n	800116c <libSpeexAEC_Data_Input+0x1a>
    {
      echoInstance->samples_count_output = 0;
 8001214:	462b      	mov	r3, r5
 8001216:	2500      	movs	r5, #0
 8001218:	f8a3 5f44 	strh.w	r5, [r3, #3908]	; 0xf44
 800121c:	e7c0      	b.n	80011a0 <libSpeexAEC_Data_Input+0x4e>
    }
  }
  return ret;
}
 800121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001222 <libSpeexAEC_fft_init>:

void libSpeexAEC_fft_init(drft_lookup *table, int32_t size)
{
 8001222:	b508      	push	{r3, lr}
  drft_init(table, size);
 8001224:	f005 fafb 	bl	800681e <drft_init>
}
 8001228:	bd08      	pop	{r3, pc}

0800122a <libSpeexAEC_Init>:
{
 800122a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	4606      	mov	r6, r0
  InternalEchoType *echoInstance = (InternalEchoType *)(pHandler->pInternalMemory);
 8001232:	6944      	ldr	r4, [r0, #20]
  memset(pHandler->pInternalMemory, 0, pHandler->internal_memory_size);
 8001234:	6902      	ldr	r2, [r0, #16]
 8001236:	2100      	movs	r1, #0
 8001238:	4620      	mov	r0, r4
 800123a:	f00b fba1 	bl	800c980 <memset>
  echoInstance->preprocess_initialized = pHandler->preprocess_init;
 800123e:	6872      	ldr	r2, [r6, #4]
 8001240:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8001244:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
  if (pHandler->ptr_primary_channels > 0)
 8001248:	8933      	ldrh	r3, [r6, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d06d      	beq.n	800132a <libSpeexAEC_Init+0x100>
    echoInstance->ptr_primary_channels = pHandler->ptr_primary_channels;
 800124e:	f504 5240 	add.w	r2, r4, #12288	; 0x3000
 8001252:	f8a2 3f3c 	strh.w	r3, [r2, #3900]	; 0xf3c
  if (pHandler->ptr_reference_channels > 0)
 8001256:	8973      	ldrh	r3, [r6, #10]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d06c      	beq.n	8001336 <libSpeexAEC_Init+0x10c>
    echoInstance->ptr_reference_channels = pHandler->ptr_reference_channels;
 800125c:	f504 5240 	add.w	r2, r4, #12288	; 0x3000
 8001260:	f8a2 3f3e 	strh.w	r3, [r2, #3902]	; 0xf3e
  if (pHandler->ptr_output_channels > 0)
 8001264:	89b3      	ldrh	r3, [r6, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d06b      	beq.n	8001342 <libSpeexAEC_Init+0x118>
    echoInstance->ptr_output_channels = pHandler->ptr_output_channels;
 800126a:	f504 5240 	add.w	r2, r4, #12288	; 0x3000
 800126e:	f8a2 3f40 	strh.w	r3, [r2, #3904]	; 0xf40
  if (pHandler->tail_length > 0)
 8001272:	8833      	ldrh	r3, [r6, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d06a      	beq.n	800134e <libSpeexAEC_Init+0x124>
    echoInstance->tail_length = pHandler->tail_length;
 8001278:	f504 4280 	add.w	r2, r4, #16384	; 0x4000
 800127c:	f8a2 354c 	strh.w	r3, [r2, #1356]	; 0x54c
  uint8_t *pByte = (uint8_t *)pHandler->pInternalMemory;
 8001280:	6977      	ldr	r7, [r6, #20]
  uint32_t n = (((echoInstance->tail_length + NN_MAX - 1) / NN_MAX) + 1) * NN_MAX * 2;
 8001282:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8001286:	f8b3 154c 	ldrh.w	r1, [r3, #1356]	; 0x54c
 800128a:	f101 037f 	add.w	r3, r1, #127	; 0x7f
 800128e:	11db      	asrs	r3, r3, #7
 8001290:	3301      	adds	r3, #1
  echoInstance->st.X = (float *)(pByte + byte_offset);
 8001292:	f244 5550 	movw	r5, #17744	; 0x4550
 8001296:	197a      	adds	r2, r7, r5
 8001298:	f8c4 2848 	str.w	r2, [r4, #2120]	; 0x848
  byte_offset += n * sizeof(float);
 800129c:	eb05 2583 	add.w	r5, r5, r3, lsl #10
  echoInstance->st.W = (float *)(pByte + byte_offset);
 80012a0:	1978      	adds	r0, r7, r5
 80012a2:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80012a6:	f8c2 0e4c 	str.w	r0, [r2, #3660]	; 0xe4c
  byte_offset += n * sizeof(float);
 80012aa:	eb05 2583 	add.w	r5, r5, r3, lsl #10
  echoInstance->st.foreground = (float *)(pByte + byte_offset);
 80012ae:	1978      	adds	r0, r7, r5
 80012b0:	f8c2 0e50 	str.w	r0, [r2, #3664]	; 0xe50
  byte_offset += n * sizeof(float);
 80012b4:	eb05 2583 	add.w	r5, r5, r3, lsl #10
  echoInstance->st.prop = (float *)(pByte + byte_offset);
 80012b8:	197b      	adds	r3, r7, r5
 80012ba:	f504 5240 	add.w	r2, r4, #12288	; 0x3000
 80012be:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
  byte_offset += echoInstance->tail_length * sizeof(float);
 80012c2:	eb05 0581 	add.w	r5, r5, r1, lsl #2
  echoInstance->samples_count_output = ECHO_BUFF;
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	f8a2 1f44 	strh.w	r1, [r2, #3908]	; 0xf44
  echoInstance->buffer_state = 0;
 80012cc:	f504 4880 	add.w	r8, r4, #16384	; 0x4000
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8a8 3546 	strh.w	r3, [r8, #1350]	; 0x546
  echoInstance->ECHO = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f888 354a 	strb.w	r3, [r8, #1354]	; 0x54a
  uint16_t sampleRate = FS;
 80012dc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80012e0:	f8ad 000e 	strh.w	r0, [sp, #14]
  echoInstance->st.fft_table = &echoInstance->table;
 80012e4:	f504 594a 	add.w	r9, r4, #12928	; 0x3280
 80012e8:	f109 0938 	add.w	r9, r9, #56	; 0x38
 80012ec:	f8c2 928c 	str.w	r9, [r2, #652]	; 0x28c
  Echo_init(&echoInstance->st, NN, pHandler->tail_length, 1, 1);
 80012f0:	f104 0a0c 	add.w	sl, r4, #12
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	8832      	ldrh	r2, [r6, #0]
 80012f8:	4650      	mov	r0, sl
 80012fa:	f000 f959 	bl	80015b0 <Echo_init>
  Echo_ctrl(&echoInstance->st, SPEEX_ECHO_SET_SAMPLING_RATE, &sampleRate);
 80012fe:	f10d 020e 	add.w	r2, sp, #14
 8001302:	2118      	movs	r1, #24
 8001304:	4650      	mov	r0, sl
 8001306:	f001 faed 	bl	80028e4 <Echo_ctrl>
  libSpeexAEC_fft_init(&echoInstance->table, (int)NN_MAX * 2);
 800130a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130e:	4648      	mov	r0, r9
 8001310:	f7ff ff87 	bl	8001222 <libSpeexAEC_fft_init>
  if (echoInstance->preprocess_initialized == 1)
 8001314:	f898 3548 	ldrb.w	r3, [r8, #1352]	; 0x548
 8001318:	2b01      	cmp	r3, #1
 800131a:	d01f      	beq.n	800135c <libSpeexAEC_Init+0x132>
  return (pHandler->internal_memory_size != byte_offset);
 800131c:	6930      	ldr	r0, [r6, #16]
}
 800131e:	1b40      	subs	r0, r0, r5
 8001320:	bf18      	it	ne
 8001322:	2001      	movne	r0, #1
 8001324:	b004      	add	sp, #16
 8001326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    echoInstance->ptr_primary_channels = 1;
 800132a:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800132e:	2201      	movs	r2, #1
 8001330:	f8a3 2f3c 	strh.w	r2, [r3, #3900]	; 0xf3c
    ret |= ACOUSTIC_EC_PTR_CHANNELS_ERROR;
 8001334:	e78f      	b.n	8001256 <libSpeexAEC_Init+0x2c>
    echoInstance->ptr_reference_channels = 1;
 8001336:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800133a:	2201      	movs	r2, #1
 800133c:	f8a3 2f3e 	strh.w	r2, [r3, #3902]	; 0xf3e
    ret |= ACOUSTIC_EC_PTR_CHANNELS_ERROR;
 8001340:	e790      	b.n	8001264 <libSpeexAEC_Init+0x3a>
    echoInstance->ptr_output_channels = 1;
 8001342:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001346:	2201      	movs	r2, #1
 8001348:	f8a3 2f40 	strh.w	r2, [r3, #3904]	; 0xf40
    ret |= ACOUSTIC_EC_PTR_CHANNELS_ERROR;
 800134c:	e791      	b.n	8001272 <libSpeexAEC_Init+0x48>
    echoInstance->tail_length = 512;
 800134e:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8001352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001356:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c
    ret |= ACOUSTIC_EC_TAIL_LENGTH_ERROR;
 800135a:	e791      	b.n	8001280 <libSpeexAEC_Init+0x56>
    echoInstance->PREPROCESS = 1;
 800135c:	4643      	mov	r3, r8
 800135e:	f04f 0801 	mov.w	r8, #1
 8001362:	f883 8549 	strb.w	r8, [r3, #1353]	; 0x549
    echoInstance->den = (SpeexPreprocessState *)(pByte + byte_offset);
 8001366:	197b      	adds	r3, r7, r5
 8001368:	6063      	str	r3, [r4, #4]
    byte_offset += sizeof(SpeexPreprocessState);
 800136a:	f505 5052 	add.w	r0, r5, #13440	; 0x3480
 800136e:	301c      	adds	r0, #28
    echoInstance->table_den = (drft_lookup *)(pByte + byte_offset);
 8001370:	4438      	add	r0, r7
 8001372:	60a0      	str	r0, [r4, #8]
    byte_offset += sizeof(drft_lookup);
 8001374:	f505 4382 	add.w	r3, r5, #16640	; 0x4100
 8001378:	3320      	adds	r3, #32
    echoInstance->filterBank = (FilterBank *)(pByte + byte_offset);
 800137a:	441f      	add	r7, r3
 800137c:	6027      	str	r7, [r4, #0]
    byte_offset += sizeof(FilterBank);
 800137e:	f505 4593 	add.w	r5, r5, #18816	; 0x4980
 8001382:	3508      	adds	r5, #8
    libSpeexAEC_fft_init(echoInstance->table_den, (int)NN_MAX * 2);
 8001384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001388:	f7ff ff4b 	bl	8001222 <libSpeexAEC_fft_init>
    echoInstance->den->fft_lookup = echoInstance->table_den;
 800138c:	6863      	ldr	r3, [r4, #4]
 800138e:	68a2      	ldr	r2, [r4, #8]
 8001390:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001394:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    Preprocess_init(echoInstance->den, NN, sampleRate);
 8001398:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	6860      	ldr	r0, [r4, #4]
 80013a0:	f002 f89c 	bl	80034dc <Preprocess_init>
    filterbank_new(echoInstance->filterBank, NB_BANDS, sampleRate, NN_MAX, 1);
 80013a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80013a8:	ee00 3a10 	vmov	s0, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80013b4:	2118      	movs	r1, #24
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	f001 fb36 	bl	8002a28 <filterbank_new>
    echoInstance->den->bank = echoInstance->filterBank;
 80013bc:	6863      	ldr	r3, [r4, #4]
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	e7ab      	b.n	800131c <libSpeexAEC_Init+0xf2>

080013c4 <libSpeexAEC_fft>:

void libSpeexAEC_fft(drft_lookup *table, float32_t *in, float32_t *out)
{
 80013c4:	b508      	push	{r3, lr}
 80013c6:	468e      	mov	lr, r1
 80013c8:	4611      	mov	r1, r2
  int32_t i;
  float32_t scale = 1.0f / ((float32_t)(table->n));
 80013ca:	edd0 7a00 	vldr	s15, [r0]
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  for (i = 0; i < table->n; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	e00a      	b.n	80013f4 <libSpeexAEC_fft+0x30>
  {
    out[i] = scale * in[i];
 80013de:	eb0e 0c83 	add.w	ip, lr, r3, lsl #2
 80013e2:	eddc 7a00 	vldr	s15, [ip]
 80013e6:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	edcc 7a00 	vstr	s15, [ip]
  for (i = 0; i < table->n; i++)
 80013f2:	3301      	adds	r3, #1
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dcf1      	bgt.n	80013de <libSpeexAEC_fft+0x1a>
  }
  drft_forward(table, out);
 80013fa:	f005 f9ec 	bl	80067d6 <drft_forward>
}
 80013fe:	bd08      	pop	{r3, pc}

08001400 <libSpeexAEC_ifft>:

void libSpeexAEC_ifft(drft_lookup *table, float32_t *in, float32_t *out)
{
 8001400:	b510      	push	{r4, lr}
 8001402:	460c      	mov	r4, r1
 8001404:	4611      	mov	r1, r2
  int32_t i;
  for (i = 0; i < table->n; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	e008      	b.n	800141c <libSpeexAEC_ifft+0x1c>
  {
    out[i] = in[i];
 800140a:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 800140e:	eb04 0e83 	add.w	lr, r4, r3, lsl #2
 8001412:	f8de e000 	ldr.w	lr, [lr]
 8001416:	f8cc e000 	str.w	lr, [ip]
  for (i = 0; i < table->n; i++)
 800141a:	3301      	adds	r3, #1
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	dcf3      	bgt.n	800140a <libSpeexAEC_ifft+0xa>
  }
  drft_backward(table, out);
 8001422:	f005 f9ea 	bl	80067fa <drft_backward>
}
 8001426:	bd10      	pop	{r4, pc}

08001428 <AcousticEC_Init>:
* @retval 0 if everything is fine.
*         different from 0 if erroneous parameters have been passed to the Init function and the default value has been used.
*         The specific error can be recognized by checking the relative bit in the returned word.
*/
uint32_t AcousticEC_Init(AcousticEC_Handler_t *pHandler)
{
 8001428:	b508      	push	{r3, lr}
  return libSpeexAEC_Init(pHandler);
 800142a:	f7ff fefe 	bl	800122a <libSpeexAEC_Init>
}
 800142e:	bd08      	pop	{r3, pc}

08001430 <AcousticEC_Data_Input>:
* @retval 1 if data collection is finished and libSpeexAEC_Process must be called, 0 otherwise.
* @note   Input/output function reads and write samples skipping the required number of values depending on the
*         ptr_Mx_channels configuration
*/
uint32_t AcousticEC_Data_Input(void *ptrPrimary, void *ptrReference, void *ptrBufferOut, AcousticEC_Handler_t *pHandler)
{
 8001430:	b508      	push	{r3, lr}
  return libSpeexAEC_Data_Input(ptrPrimary, ptrReference, ptrBufferOut, pHandler);
 8001432:	f7ff fe8e 	bl	8001152 <libSpeexAEC_Data_Input>
}
 8001436:	bd08      	pop	{r3, pc}

08001438 <AcousticEC_Process>:
* @brief  Library run function, performs audio analysis when all required data has been collected.
* @param  pHandler: pointer to the handler of the current SpeexAEC instance running
* @retval 0 if everything is ok, 1 otherwise.
*/
uint32_t AcousticEC_Process(AcousticEC_Handler_t *pHandler)
{
 8001438:	b508      	push	{r3, lr}
  return libSpeexAEC_Process(pHandler);
 800143a:	f7ff fe18 	bl	800106e <libSpeexAEC_Process>
}
 800143e:	bd08      	pop	{r3, pc}

08001440 <AcousticEC_setConfig>:
* @param  pHandler: AcousticEC_Handler_t filled with desired parameters.
* @param  pConfig: pointer to the dynamic parameters handler that will be filled with the current library configuration.
* @retval 0 if everything is ok, 1 otherwise.
*/
uint32_t AcousticEC_setConfig(AcousticEC_Handler_t *pHandler, AcousticEC_Config_t *pConfig)
{
 8001440:	b508      	push	{r3, lr}
  return libSpeexAEC_setConfig(pHandler, pConfig);
 8001442:	f7ff fdb6 	bl	8000fb2 <libSpeexAEC_setConfig>
}
 8001446:	bd08      	pop	{r3, pc}

08001448 <AcousticEC_getMemorySize>:
*         right amount of memory needed by the library, depending on the specific static parameters adopted.
* @param  pHandler: AcousticEC_Handler_t filled with desired parameters.
* @retval 0 if everything is fine.
*/
uint32_t AcousticEC_getMemorySize(AcousticEC_Handler_t *pHandler)
{
 8001448:	b508      	push	{r3, lr}
  return libSpeexAEC_getMemorySize(pHandler);
 800144a:	f7ff fd9b 	bl	8000f84 <libSpeexAEC_getMemorySize>
}
 800144e:	bd08      	pop	{r3, pc}

08001450 <Echo_state_reset>:
  #endif
}

/** Resets echo canceller state */
static void Echo_state_reset(SpeexEchoState *st)
{
 8001450:	b570      	push	{r4, r5, r6, lr}
  int32_t i, M, N, C, K;
  st->cancel_count = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	60c3      	str	r3, [r0, #12]
  st->screwed_up = 0;
 8001456:	6183      	str	r3, [r0, #24]
  N = st->window_size;
 8001458:	6842      	ldr	r2, [r0, #4]
  M = st->M;
 800145a:	6886      	ldr	r6, [r0, #8]
  C = st->C;
 800145c:	69c4      	ldr	r4, [r0, #28]
  K = st->K;
 800145e:	6a05      	ldr	r5, [r0, #32]
  for (i = 0; i < (N * M); i++)
 8001460:	e00a      	b.n	8001478 <Echo_state_reset+0x28>
  {
    st->W[i] = 0.0f;
 8001462:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
 8001466:	f8d1 1e40 	ldr.w	r1, [r1, #3648]	; 0xe40
 800146a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800146e:	f04f 0c00 	mov.w	ip, #0
 8001472:	f8c1 c000 	str.w	ip, [r1]
  for (i = 0; i < (N * M); i++)
 8001476:	3301      	adds	r3, #1
 8001478:	fb06 fc02 	mul.w	ip, r6, r2
 800147c:	459c      	cmp	ip, r3
 800147e:	dcf0      	bgt.n	8001462 <Echo_state_reset+0x12>
  }
  #ifdef TWO_PATH
  for (i = 0; i < (N * M); i++)
 8001480:	2300      	movs	r3, #0
 8001482:	e00a      	b.n	800149a <Echo_state_reset+0x4a>
  {
    st->foreground[i] = 0.0f;
 8001484:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
 8001488:	f8d1 1e44 	ldr.w	r1, [r1, #3652]	; 0xe44
 800148c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001490:	f04f 0e00 	mov.w	lr, #0
 8001494:	f8c1 e000 	str.w	lr, [r1]
  for (i = 0; i < (N * M); i++)
 8001498:	3301      	adds	r3, #1
 800149a:	459c      	cmp	ip, r3
 800149c:	dcf2      	bgt.n	8001484 <Echo_state_reset+0x34>
  }
  #endif
  for (i = 0; i < (N * (M + 1)); i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	e008      	b.n	80014b4 <Echo_state_reset+0x64>
  {
    st->X[i] = 0.0f;
 80014a2:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80014a6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80014aa:	f04f 0c00 	mov.w	ip, #0
 80014ae:	f8c1 c000 	str.w	ip, [r1]
  for (i = 0; i < (N * (M + 1)); i++)
 80014b2:	3301      	adds	r3, #1
 80014b4:	fb06 2102 	mla	r1, r6, r2, r2
 80014b8:	4299      	cmp	r1, r3
 80014ba:	dcf2      	bgt.n	80014a2 <Echo_state_reset+0x52>
  }
  for (i = 0; i <= st->frame_size; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	e01b      	b.n	80014f8 <Echo_state_reset+0xa8>
  {
    st->power[i] = 0.0f;
 80014c0:	f203 7196 	addw	r1, r3, #1942	; 0x796
 80014c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80014c8:	f04f 0c00 	mov.w	ip, #0
 80014cc:	f8c1 c000 	str.w	ip, [r1]
    st->power_1[i] = FLOAT_ONE;
 80014d0:	f603 0116 	addw	r1, r3, #2070	; 0x816
 80014d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80014d8:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 80014dc:	604e      	str	r6, [r1, #4]
    st->Eh[i] = 0.0f;
 80014de:	f603 219a 	addw	r1, r3, #2714	; 0xa9a
 80014e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80014e6:	f8c1 c004 	str.w	ip, [r1, #4]
    st->Yh[i] = 0.0f;
 80014ea:	f603 311c 	addw	r1, r3, #2844	; 0xb1c
 80014ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80014f2:	f8c1 c000 	str.w	ip, [r1]
  for (i = 0; i <= st->frame_size; i++)
 80014f6:	3301      	adds	r3, #1
 80014f8:	6806      	ldr	r6, [r0, #0]
 80014fa:	429e      	cmp	r6, r3
 80014fc:	dae0      	bge.n	80014c0 <Echo_state_reset+0x70>
  }
  for (i = 0; i < st->frame_size; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	e008      	b.n	8001514 <Echo_state_reset+0xc4>
  {
    st->last_y[i] = 0.0f;
 8001502:	f503 7164 	add.w	r1, r3, #912	; 0x390
 8001506:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800150a:	f04f 0c00 	mov.w	ip, #0
 800150e:	f8c1 c000 	str.w	ip, [r1]
  for (i = 0; i < st->frame_size; i++)
 8001512:	3301      	adds	r3, #1
 8001514:	429e      	cmp	r6, r3
 8001516:	dcf4      	bgt.n	8001502 <Echo_state_reset+0xb2>
  }
  for (i = 0; i < (N * C); i++)
 8001518:	2300      	movs	r3, #0
 800151a:	e006      	b.n	800152a <Echo_state_reset+0xda>
  {
    st->E[i] = 0.0f;
 800151c:	f503 61b2 	add.w	r1, r3, #1424	; 0x590
 8001520:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001524:	2600      	movs	r6, #0
 8001526:	600e      	str	r6, [r1, #0]
  for (i = 0; i < (N * C); i++)
 8001528:	3301      	adds	r3, #1
 800152a:	fb04 f102 	mul.w	r1, r4, r2
 800152e:	4299      	cmp	r1, r3
 8001530:	dcf4      	bgt.n	800151c <Echo_state_reset+0xcc>
  }
  for (i = 0; i < (N * K); i++)
 8001532:	2300      	movs	r3, #0
 8001534:	e006      	b.n	8001544 <Echo_state_reset+0xf4>
  {
    st->x[i] = 0.0f;
 8001536:	f503 7187 	add.w	r1, r3, #270	; 0x10e
 800153a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800153e:	2600      	movs	r6, #0
 8001540:	604e      	str	r6, [r1, #4]
  for (i = 0; i < (N * K); i++)
 8001542:	3301      	adds	r3, #1
 8001544:	fb05 f102 	mul.w	r1, r5, r2
 8001548:	4299      	cmp	r1, r3
 800154a:	dcf4      	bgt.n	8001536 <Echo_state_reset+0xe6>
  }
  for (i = 0; i < (2 * C); i++)
 800154c:	2300      	movs	r3, #0
 800154e:	e006      	b.n	800155e <Echo_state_reset+0x10e>
  {
    st->notch_mem[i] = 0.0f;
 8001550:	f603 42a6 	addw	r2, r3, #3238	; 0xca6
 8001554:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001558:	2100      	movs	r1, #0
 800155a:	6011      	str	r1, [r2, #0]
  for (i = 0; i < (2 * C); i++)
 800155c:	3301      	adds	r3, #1
 800155e:	ebb3 0f44 	cmp.w	r3, r4, lsl #1
 8001562:	dbf5      	blt.n	8001550 <Echo_state_reset+0x100>
  }
  st->memD = 0.0f;
 8001564:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8001568:	2300      	movs	r3, #0
 800156a:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
  st->memE = 0.0f;
 800156e:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
  st->memX = 0.0f;
 8001572:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284

  st->saturated = 0;
 8001576:	2200      	movs	r2, #0
 8001578:	6142      	str	r2, [r0, #20]
  st->adapted = 0;
 800157a:	6102      	str	r2, [r0, #16]
  st->sum_adapt = 0.0f;
 800157c:	6343      	str	r3, [r0, #52]	; 0x34
  st->Pey = FLOAT_ONE;
 800157e:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 8001582:	f602 6474 	addw	r4, r2, #3700	; 0xe74
 8001586:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800158a:	6021      	str	r1, [r4, #0]
  st->Pyy = FLOAT_ONE;
 800158c:	f602 6278 	addw	r2, r2, #3704	; 0xe78
 8001590:	6011      	str	r1, [r2, #0]
  #ifdef TWO_PATH
  st->Davg1 = 0.0f;
 8001592:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001596:	f600 6248 	addw	r2, r0, #3656	; 0xe48
 800159a:	6013      	str	r3, [r2, #0]
  st->Davg2 = 0.0f;
 800159c:	f600 624c 	addw	r2, r0, #3660	; 0xe4c
 80015a0:	6013      	str	r3, [r2, #0]
  st->Dvar1 = FLOAT_ZERO;
 80015a2:	f500 6265 	add.w	r2, r0, #3664	; 0xe50
 80015a6:	6013      	str	r3, [r2, #0]
  st->Dvar2 = FLOAT_ZERO;
 80015a8:	f600 6054 	addw	r0, r0, #3668	; 0xe54
 80015ac:	6003      	str	r3, [r0, #0]
  #endif
}
 80015ae:	bd70      	pop	{r4, r5, r6, pc}

080015b0 <Echo_init>:
{
 80015b0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	4604      	mov	r4, r0
 80015b8:	468a      	mov	sl, r1
 80015ba:	469b      	mov	fp, r3
 80015bc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  st->K = nb_speakers;
 80015c0:	f8c0 8020 	str.w	r8, [r0, #32]
  st->C = nb_mic;
 80015c4:	61c3      	str	r3, [r0, #28]
  st->frame_size = frame_size;
 80015c6:	6001      	str	r1, [r0, #0]
  st->window_size = 2 * frame_size;
 80015c8:	004f      	lsls	r7, r1, #1
 80015ca:	6047      	str	r7, [r0, #4]
  st->M = (filter_length + st->frame_size - 1) / frame_size;
 80015cc:	188d      	adds	r5, r1, r2
 80015ce:	3d01      	subs	r5, #1
 80015d0:	fb95 f5f1 	sdiv	r5, r5, r1
 80015d4:	6085      	str	r5, [r0, #8]
  st->cancel_count = 0;
 80015d6:	2600      	movs	r6, #0
 80015d8:	60c6      	str	r6, [r0, #12]
  st->sum_adapt = 0.0f;
 80015da:	2300      	movs	r3, #0
 80015dc:	6343      	str	r3, [r0, #52]	; 0x34
  st->saturated = 0;
 80015de:	6146      	str	r6, [r0, #20]
  st->screwed_up = 0;
 80015e0:	6186      	str	r6, [r0, #24]
  st->sampling_rate = 16000;
 80015e2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80015e6:	6242      	str	r2, [r0, #36]	; 0x24
  st->spec_average = DIV32_16(SHL32(EXTEND32(st->frame_size), 15), st->sampling_rate);
 80015e8:	ee07 1a90 	vmov	s15, r1
 80015ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f0:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80017d8 <Echo_init+0x228>
 80015f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015f8:	edc0 6a0a 	vstr	s13, [r0, #40]	; 0x28
  st->beta0 = (2.0f * (float32_t)st->frame_size) / (float32_t)st->sampling_rate;
 80015fc:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001600:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8001604:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
  st->beta_max = (.5f * (float32_t)st->frame_size) / (float32_t)st->sampling_rate;
 8001608:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800160c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001610:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001614:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
  st->leak_estimate = 0.0f;
 8001618:	6383      	str	r3, [r0, #56]	; 0x38
  for (i = 0; i < N; i++)
 800161a:	e02f      	b.n	800167c <Echo_init+0xcc>
    st->window[i] = 0.5f - (0.5f * cosf(2.0f * M_PI * (float32_t)i / (float32_t)N));
 800161c:	ee07 6a90 	vmov	s15, r6
 8001620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001624:	ee17 0a90 	vmov	r0, s15
 8001628:	f7fe ff52 	bl	80004d0 <__aeabi_f2d>
 800162c:	a368      	add	r3, pc, #416	; (adr r3, 80017d0 <Echo_init+0x220>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ffa5 	bl	8000580 <__aeabi_dmul>
 8001636:	e9cd 0100 	strd	r0, r1, [sp]
 800163a:	ee07 7a90 	vmov	s15, r7
 800163e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001642:	ee17 0a90 	vmov	r0, s15
 8001646:	f7fe ff43 	bl	80004d0 <__aeabi_f2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001652:	f7ff f8bf 	bl	80007d4 <__aeabi_ddiv>
 8001656:	f7ff fa75 	bl	8000b44 <__aeabi_d2f>
 800165a:	ee00 0a10 	vmov	s0, r0
 800165e:	f00b fcb1 	bl	800cfc4 <cosf>
 8001662:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001666:	ee20 0a27 	vmul.f32	s0, s0, s15
 800166a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800166e:	f606 339e 	addw	r3, r6, #2974	; 0xb9e
 8001672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001676:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < N; i++)
 800167a:	3601      	adds	r6, #1
 800167c:	42b7      	cmp	r7, r6
 800167e:	dccd      	bgt.n	800161c <Echo_init+0x6c>
  for (i = 0; i <= st->frame_size; i++)
 8001680:	2300      	movs	r3, #0
 8001682:	e007      	b.n	8001694 <Echo_init+0xe4>
    st->power_1[i] = FLOAT_ONE;
 8001684:	f603 0216 	addw	r2, r3, #2070	; 0x816
 8001688:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800168c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001690:	6051      	str	r1, [r2, #4]
  for (i = 0; i <= st->frame_size; i++)
 8001692:	3301      	adds	r3, #1
 8001694:	4553      	cmp	r3, sl
 8001696:	ddf5      	ble.n	8001684 <Echo_init+0xd4>
  for (i = 0; i < (N * M * K * C); i++)
 8001698:	2200      	movs	r2, #0
 800169a:	e008      	b.n	80016ae <Echo_init+0xfe>
    st->W[i] = 0.0f;
 800169c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80016a0:	f8d3 3e40 	ldr.w	r3, [r3, #3648]	; 0xe40
 80016a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80016a8:	2100      	movs	r1, #0
 80016aa:	6019      	str	r1, [r3, #0]
  for (i = 0; i < (N * M * K * C); i++)
 80016ac:	3201      	adds	r2, #1
 80016ae:	fb05 f307 	mul.w	r3, r5, r7
 80016b2:	fb08 f303 	mul.w	r3, r8, r3
 80016b6:	fb0b f303 	mul.w	r3, fp, r3
 80016ba:	4293      	cmp	r3, r2
 80016bc:	dcee      	bgt.n	800169c <Echo_init+0xec>
  spx_word16_t decay = SHR32(spx_exp(NEG16(DIV32_16(QCONST16(2.4, 11), M))), 1);
 80016be:	ee07 5a90 	vmov	s15, r5
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80017dc <Echo_init+0x22c>
 80016ca:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80016ce:	eeb1 0a40 	vneg.f32	s0, s0
 80016d2:	f00b fb9d 	bl	800ce10 <expf>
  st->prop[0] = QCONST16(.7f, 15);
 80016d6:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80016da:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
 80016de:	4940      	ldr	r1, [pc, #256]	; (80017e0 <Echo_init+0x230>)
 80016e0:	6011      	str	r1, [r2, #0]
  sum = EXTEND32(st->prop[0]);
 80016e2:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80016e6:	ed93 7a00 	vldr	s14, [r3]
  for (i = 1; i < M; i++)
 80016ea:	2301      	movs	r3, #1
 80016ec:	e019      	b.n	8001722 <Echo_init+0x172>
    st->prop[i] = MULT16_16_Q15(st->prop[i - 1], decay);
 80016ee:	f504 5040 	add.w	r0, r4, #12288	; 0x3000
 80016f2:	f8d0 127c 	ldr.w	r1, [r0, #636]	; 0x27c
 80016f6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80016fa:	3a01      	subs	r2, #1
 80016fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001700:	edd2 7a00 	vldr	s15, [r2]
 8001704:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001708:	ee67 7a80 	vmul.f32	s15, s15, s0
 800170c:	edc1 7a00 	vstr	s15, [r1]
    sum = ADD32(sum, EXTEND32(st->prop[i]));
 8001710:	f8d0 227c 	ldr.w	r2, [r0, #636]	; 0x27c
 8001714:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001718:	edd2 7a00 	vldr	s15, [r2]
 800171c:	ee37 7a27 	vadd.f32	s14, s14, s15
  for (i = 1; i < M; i++)
 8001720:	3301      	adds	r3, #1
 8001722:	429d      	cmp	r5, r3
 8001724:	dce3      	bgt.n	80016ee <Echo_init+0x13e>
  for (i = M - 1; i >= 0; i--)
 8001726:	3d01      	subs	r5, #1
 8001728:	e010      	b.n	800174c <Echo_init+0x19c>
    st->prop[i] = DIV32(MULT16_16(QCONST16(.8f, 15), st->prop[i]), sum);
 800172a:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800172e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8001732:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80017e4 <Echo_init+0x234>
 800173e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001742:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001746:	edc3 6a00 	vstr	s13, [r3]
  for (i = M - 1; i >= 0; i--)
 800174a:	3d01      	subs	r5, #1
 800174c:	2d00      	cmp	r5, #0
 800174e:	daec      	bge.n	800172a <Echo_init+0x17a>
  st->preemph = QCONST16(.9f, 15);
 8001750:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001754:	4a24      	ldr	r2, [pc, #144]	; (80017e8 <Echo_init+0x238>)
 8001756:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  if (st->sampling_rate < 12000)
 800175a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800175c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001760:	4293      	cmp	r3, r2
 8001762:	dc22      	bgt.n	80017aa <Echo_init+0x1fa>
    st->notch_radius = QCONST16(.9f, 15);
 8001764:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <Echo_init+0x238>)
 800176a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  st->adapted = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	6123      	str	r3, [r4, #16]
  st->Pey = FLOAT_ONE;
 8001772:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8001776:	f603 6174 	addw	r1, r3, #3700	; 0xe74
 800177a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800177e:	600a      	str	r2, [r1, #0]
  st->Pyy = FLOAT_ONE;
 8001780:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 8001784:	601a      	str	r2, [r3, #0]
  st->Davg1 = 0.0f;
 8001786:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800178a:	f604 6248 	addw	r2, r4, #3656	; 0xe48
 800178e:	2300      	movs	r3, #0
 8001790:	6013      	str	r3, [r2, #0]
  st->Davg2 = 0.0f;
 8001792:	f604 624c 	addw	r2, r4, #3660	; 0xe4c
 8001796:	6013      	str	r3, [r2, #0]
  st->Dvar1 = FLOAT_ZERO;
 8001798:	f504 6265 	add.w	r2, r4, #3664	; 0xe50
 800179c:	6013      	str	r3, [r2, #0]
  st->Dvar2 = FLOAT_ZERO;
 800179e:	f604 6454 	addw	r4, r4, #3668	; 0xe54
 80017a2:	6023      	str	r3, [r4, #0]
}
 80017a4:	b002      	add	sp, #8
 80017a6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  else if (st->sampling_rate < 24000)
 80017aa:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80017ae:	4293      	cmp	r3, r2
 80017b0:	dc05      	bgt.n	80017be <Echo_init+0x20e>
    st->notch_radius = QCONST16(.982f, 15);
 80017b2:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80017b6:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <Echo_init+0x23c>)
 80017b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 80017bc:	e7d7      	b.n	800176e <Echo_init+0x1be>
    st->notch_radius = QCONST16(.992f, 15);
 80017be:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <Echo_init+0x240>)
 80017c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 80017c8:	e7d1      	b.n	800176e <Echo_init+0x1be>
 80017ca:	bf00      	nop
 80017cc:	f3af 8000 	nop.w
 80017d0:	54442d18 	.word	0x54442d18
 80017d4:	401921fb 	.word	0x401921fb
 80017d8:	467a0000 	.word	0x467a0000
 80017dc:	4019999a 	.word	0x4019999a
 80017e0:	3f333333 	.word	0x3f333333
 80017e4:	3f4ccccd 	.word	0x3f4ccccd
 80017e8:	3f666666 	.word	0x3f666666
 80017ec:	3f7b645a 	.word	0x3f7b645a
 80017f0:	3f7df3b6 	.word	0x3f7df3b6

080017f4 <Echo_cancellation>:

/** Performs echo cancellation on a frame */
void Echo_cancellation(SpeexEchoState *st, const spx_int16_t *in, const spx_int16_t *far_end, spx_int16_t *out)
{
 80017f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f8:	ed2d 8b0a 	vpush	{d8-d12}
 80017fc:	b08d      	sub	sp, #52	; 0x34
 80017fe:	4604      	mov	r4, r0
 8001800:	460f      	mov	r7, r1
 8001802:	9107      	str	r1, [sp, #28]
 8001804:	4611      	mov	r1, r2
 8001806:	9305      	str	r3, [sp, #20]
  spx_float_t alpha, alpha_1;
  spx_word16_t RER;
  spx_word32_t tmp32;

  N = ECHO_BUFF * 2;    /*window_size*/
  M = st->M;      /*M*/
 8001808:	6882      	ldr	r2, [r0, #8]
 800180a:	9203      	str	r2, [sp, #12]
  C = 1;            /*C*/

  st->cancel_count++;
 800180c:	68c3      	ldr	r3, [r0, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60c3      	str	r3, [r0, #12]
  #ifdef FIXED_POINT
  ss = DIV32_16(11469, M);
  ss_1 = SUB16(32767, ss);
  #else
  ss = .35f / (float32_t)M;
 8001812:	ee07 2a90 	vmov	s15, r2
 8001816:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 800181a:	eddf 7acf 	vldr	s15, [pc, #828]	; 8001b58 <Echo_cancellation+0x364>
 800181e:	eec7 8aa9 	vdiv.f32	s17, s15, s19
  ss_1 = 1.0f - ss;
 8001822:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001826:	ee37 9ae8 	vsub.f32	s18, s15, s17
  #endif

  /* Apply a notch filter to make sure DC doesn't end up causing problems */
  filter_dc_notch16(in, st->notch_radius, st->input, st->frame_size, st->notch_mem, C);
 800182a:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 800182e:	ed93 5aa5 	vldr	s10, [r3, #660]	; 0x294
 8001832:	f500 6604 	add.w	r6, r0, #2112	; 0x840
 8001836:	9608      	str	r6, [sp, #32]
 8001838:	6805      	ldr	r5, [r0, #0]
 800183a:	f500 524a 	add.w	r2, r0, #12928	; 0x3280
 800183e:	3218      	adds	r2, #24
  den2 = radius * radius + 0.7f * (1 - radius) * (1 - radius);
 8001840:	ee65 4a05 	vmul.f32	s9, s10, s10
 8001844:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8001848:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001b5c <Echo_cancellation+0x368>
 800184c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001854:	ee74 4aa7 	vadd.f32	s9, s9, s15
  for (i = 0; i < len; i++)
 8001858:	2300      	movs	r3, #0
 800185a:	e020      	b.n	800189e <Echo_cancellation+0xaa>
    spx_word16_t vin = in[i * stride];
 800185c:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
 8001860:	ee07 0a90 	vmov	s15, r0
 8001864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    spx_word32_t vout = mem[0] + SHL32(EXTEND32(vin), 15);
 8001868:	ed92 7a00 	vldr	s14, [r2]
 800186c:	ee37 7a87 	vadd.f32	s14, s15, s14
    mem[0] = mem[1] + 2 * (-vin + radius * vout);
 8001870:	ed92 6a01 	vldr	s12, [r2, #4]
 8001874:	ee65 5a07 	vmul.f32	s11, s10, s14
 8001878:	ee75 6ae7 	vsub.f32	s13, s11, s15
 800187c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8001880:	ee76 6a26 	vadd.f32	s13, s12, s13
 8001884:	edc2 6a00 	vstr	s13, [r2]
    mem[1] = SHL32(EXTEND32(vin), 15) - MULT16_32_Q15(den2, vout);
 8001888:	ee24 7a87 	vmul.f32	s14, s9, s14
 800188c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001890:	edc2 7a01 	vstr	s15, [r2, #4]
    out[i] = SATURATE32(PSHR32(MULT16_32_Q15(radius, vout), 15), 32767);
 8001894:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8001898:	edc0 5a00 	vstr	s11, [r0]
  for (i = 0; i < len; i++)
 800189c:	3301      	adds	r3, #1
 800189e:	429d      	cmp	r5, r3
 80018a0:	dcdc      	bgt.n	800185c <Echo_cancellation+0x68>
  /* Copy input data to buffer and apply pre-emphasis */
  /* Copy input data to buffer */
  for (i = 0; i < st->frame_size; i++)
 80018a2:	2200      	movs	r2, #0
 80018a4:	e014      	b.n	80018d0 <Echo_cancellation+0xdc>
  {
    /* FIXME: This core has chan1ged a bit, need to merge properly */
    tmp32 = SUB32(EXTEND32(st->input[i]), EXTEND32(MULT16_16_P15(st->preemph, st->memD)));
 80018a6:	f502 7304 	add.w	r3, r2, #528	; 0x210
 80018aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80018ae:	ed93 7a00 	vldr	s14, [r3]
 80018b2:	f504 5040 	add.w	r0, r4, #12288	; 0x3000
 80018b6:	edd0 7aa4 	vldr	s15, [r0, #656]	; 0x290
 80018ba:	edd0 6aa2 	vldr	s13, [r0, #648]	; 0x288
 80018be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018c2:	ee77 7a67 	vsub.f32	s15, s14, s15
      {
        st->saturated = 1;
      }
    }
    #endif
    st->memD = st->input[i];
 80018c6:	ed80 7aa2 	vstr	s14, [r0, #648]	; 0x288
    st->input[i] = EXTRACT16(tmp32);
 80018ca:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < st->frame_size; i++)
 80018ce:	3201      	adds	r2, #1
 80018d0:	6820      	ldr	r0, [r4, #0]
 80018d2:	4290      	cmp	r0, r2
 80018d4:	dce7      	bgt.n	80018a6 <Echo_cancellation+0xb2>
  }

  for (i = 0; i < st->frame_size; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	e025      	b.n	8001926 <Echo_cancellation+0x132>
  {
    st->x[i] = st->x[i + st->frame_size];
 80018da:	18c2      	adds	r2, r0, r3
 80018dc:	f502 7287 	add.w	r2, r2, #270	; 0x10e
 80018e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80018e4:	6856      	ldr	r6, [r2, #4]
 80018e6:	f503 7587 	add.w	r5, r3, #270	; 0x10e
 80018ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80018ee:	606e      	str	r6, [r5, #4]
    tmp32 = SUB32(EXTEND32(far_end[i]), EXTEND32(MULT16_16_P15(st->preemph, st->memX)));
 80018f0:	f931 5013 	ldrsh.w	r5, [r1, r3, lsl #1]
 80018f4:	ee07 5a90 	vmov	s15, r5
 80018f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fc:	f504 5540 	add.w	r5, r4, #12288	; 0x3000
 8001900:	ed95 7aa4 	vldr	s14, [r5, #656]	; 0x290
 8001904:	edd5 6aa1 	vldr	s13, [r5, #644]	; 0x284
 8001908:	ee27 7a26 	vmul.f32	s14, s14, s13
 800190c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    {
      tmp32 = -32767;
      st->saturated = M + 1;
    }
    #endif
    st->x[i + st->frame_size] = EXTRACT16(tmp32);
 8001910:	edc2 7a01 	vstr	s15, [r2, #4]
    st->memX = far_end[i];
 8001914:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8001918:	ee07 2a90 	vmov	s15, r2
 800191c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001920:	edc5 7aa1 	vstr	s15, [r5, #644]	; 0x284
  for (i = 0; i < st->frame_size; i++)
 8001924:	3301      	adds	r3, #1
 8001926:	4298      	cmp	r0, r3
 8001928:	dcd7      	bgt.n	80018da <Echo_cancellation+0xe6>
  }

  /* Shift memory: this could be optimized eventually*/
  for (j = M - 1; j >= 0; j--)
 800192a:	9b03      	ldr	r3, [sp, #12]
 800192c:	3b01      	subs	r3, #1
 800192e:	9306      	str	r3, [sp, #24]
 8001930:	4618      	mov	r0, r3
 8001932:	e010      	b.n	8001956 <Echo_cancellation+0x162>
  {
    for (i = 0; i < N; i++)
    {
      st->X[(j + 1)*N + i] = st->X[j * N + i];
 8001934:	f8d4 183c 	ldr.w	r1, [r4, #2108]	; 0x83c
 8001938:	eb02 2500 	add.w	r5, r2, r0, lsl #8
 800193c:	1c43      	adds	r3, r0, #1
 800193e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8001942:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001946:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800194a:	6809      	ldr	r1, [r1, #0]
 800194c:	6019      	str	r1, [r3, #0]
    for (i = 0; i < N; i++)
 800194e:	3201      	adds	r2, #1
 8001950:	2aff      	cmp	r2, #255	; 0xff
 8001952:	ddef      	ble.n	8001934 <Echo_cancellation+0x140>
  for (j = M - 1; j >= 0; j--)
 8001954:	3801      	subs	r0, #1
 8001956:	2800      	cmp	r0, #0
 8001958:	db01      	blt.n	800195e <Echo_cancellation+0x16a>
    for (i = 0; i < N; i++)
 800195a:	2200      	movs	r2, #0
 800195c:	e7f8      	b.n	8001950 <Echo_cancellation+0x15c>
    }
  }

  /* Convert x (echo input) to frequency domain */
  libSpeexAEC_fft(st->fft_table, st->x, &st->X[0]);
 800195e:	f204 433c 	addw	r3, r4, #1084	; 0x43c
 8001962:	461d      	mov	r5, r3
 8001964:	9309      	str	r3, [sp, #36]	; 0x24
 8001966:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800196a:	f8d4 283c 	ldr.w	r2, [r4, #2108]	; 0x83c
 800196e:	4629      	mov	r1, r5
 8001970:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8001974:	f7ff fd26 	bl	80013c4 <libSpeexAEC_fft>
  Sxx = 0.0f;
  Sxx += mdf_inner_prod(st->x + st->frame_size, st->x + st->frame_size, st->frame_size);
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	eb05 0082 	add.w	r0, r5, r2, lsl #2
  spx_word32_t sum = 0.0f;
 800197e:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8001b68 <Echo_cancellation+0x374>
 8001982:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 8001986:	ab0b      	add	r3, sp, #44	; 0x2c
 8001988:	4601      	mov	r1, r0
 800198a:	f00a feed 	bl	800c768 <arm_dot_prod_f32>
  return sum;
 800198e:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
  Sxx += mdf_inner_prod(st->x + st->frame_size, st->x + st->frame_size, st->frame_size);
 8001992:	ee3a aa08 	vadd.f32	s20, s20, s16
  power_spectrum_accum(st->X, st->Xf, N);
 8001996:	f8d4 083c 	ldr.w	r0, [r4, #2108]	; 0x83c
 800199a:	f504 5321 	add.w	r3, r4, #10304	; 0x2840
 800199e:	f103 0628 	add.w	r6, r3, #40	; 0x28
 80019a2:	9604      	str	r6, [sp, #16]
  ps[0] += MULT16_16(X[0], X[0]);
 80019a4:	edd0 7a00 	vldr	s15, [r0]
 80019a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019ac:	ed96 7a00 	vldr	s14, [r6]
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	edc6 7a00 	vstr	s15, [r6]
  int32_t j = 1;
 80019b8:	2101      	movs	r1, #1
  for (i = 1; i < (N - 1); i += 2)
 80019ba:	460b      	mov	r3, r1
 80019bc:	e018      	b.n	80019f0 <Echo_cancellation+0x1fc>
    ps[j] +=  MULT16_16(X[i], X[i]) + MULT16_16(X[i + 1], X[i + 1]);
 80019be:	eb06 0581 	add.w	r5, r6, r1, lsl #2
 80019c2:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80019c6:	edd2 7a00 	vldr	s15, [r2]
 80019ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80019d4:	ed92 7a00 	vldr	s14, [r2]
 80019d8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80019dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e0:	ed95 7a00 	vldr	s14, [r5]
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	edc5 7a00 	vstr	s15, [r5]
    j++;
 80019ec:	3101      	adds	r1, #1
  for (i = 1; i < (N - 1); i += 2)
 80019ee:	3302      	adds	r3, #2
 80019f0:	2bfe      	cmp	r3, #254	; 0xfe
 80019f2:	dde4      	ble.n	80019be <Echo_cancellation+0x1ca>
  if (i < N)
 80019f4:	2bff      	cmp	r3, #255	; 0xff
 80019f6:	dc0e      	bgt.n	8001a16 <Echo_cancellation+0x222>
    ps[j] += MULT16_16(X[i], X[i]);
 80019f8:	9a04      	ldr	r2, [sp, #16]
 80019fa:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80019fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001a02:	edd0 7a00 	vldr	s15, [r0]
 8001a06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a0a:	ed91 7a00 	vldr	s14, [r1]
 8001a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a12:	edc1 7a00 	vstr	s15, [r1]
  Sff = 0.0f;

  #ifdef TWO_PATH
  /* Compute foreground filter */
  spectral_mul_accum16(st->X, st->foreground, st->Y, N, M);
 8001a16:	f8d4 683c 	ldr.w	r6, [r4, #2108]	; 0x83c
 8001a1a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001a1e:	f8d3 5e44 	ldr.w	r5, [r3, #3652]	; 0xe44
 8001a22:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 8001a26:	461f      	mov	r7, r3
 8001a28:	9301      	str	r3, [sp, #4]
  acc[0] = X[0] * Y[0];
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	ecf0 7a01 	vldmia	r0!, {s15}
 8001a30:	4629      	mov	r1, r5
 8001a32:	ecb1 7a01 	vldmia	r1!, {s14}
 8001a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	ece2 7a01 	vstmia	r2!, {s15}
  arm_cmplx_mult_cmplx_f32((float32_t *)&X[1], (float32_t *)&Y[1], &acc[1], (N / 2) - 1);
 8001a40:	237f      	movs	r3, #127	; 0x7f
 8001a42:	f00a fcfd 	bl	800c440 <arm_cmplx_mult_cmplx_f32>
  acc[(N / 2) - 1] = X[(N / 2) - 1] * Y[(N / 2) - 1];
 8001a46:	edd6 7a7f 	vldr	s15, [r6, #508]	; 0x1fc
 8001a4a:	ed95 7a7f 	vldr	s14, [r5, #508]	; 0x1fc
 8001a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a52:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
  libSpeexAEC_ifft(st->fft_table, st->Y, st->e);
 8001a56:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001a62:	4639      	mov	r1, r7
 8001a64:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8001a68:	f7ff fcca 	bl	8001400 <libSpeexAEC_ifft>
  for (i = 0; i < st->frame_size; i++)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	e014      	b.n	8001a9a <Echo_cancellation+0x2a6>
  {
    st->e[i] = SUB16(st->input[i], st->e[i + st->frame_size]);
 8001a70:	f501 7304 	add.w	r3, r1, #528	; 0x210
 8001a74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	1853      	adds	r3, r2, r1
 8001a7e:	330e      	adds	r3, #14
 8001a80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001a84:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a8c:	f101 030e 	add.w	r3, r1, #14
 8001a90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001a94:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < st->frame_size; i++)
 8001a98:	3101      	adds	r1, #1
 8001a9a:	6822      	ldr	r2, [r4, #0]
 8001a9c:	428a      	cmp	r2, r1
 8001a9e:	dce7      	bgt.n	8001a70 <Echo_cancellation+0x27c>
  spx_word32_t sum = 0.0f;
 8001aa0:	eddf aa31 	vldr	s21, [pc, #196]	; 8001b68 <Echo_cancellation+0x374>
 8001aa4:	edcd aa0b 	vstr	s21, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 8001aa8:	ab0b      	add	r3, sp, #44	; 0x2c
 8001aaa:	9902      	ldr	r1, [sp, #8]
 8001aac:	4608      	mov	r0, r1
 8001aae:	f00a fe5b 	bl	800c768 <arm_dot_prod_f32>
  return sum;
 8001ab2:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
  }
  Sff += mdf_inner_prod(st->e, st->e, st->frame_size);
 8001ab6:	ee38 8a2a 	vadd.f32	s16, s16, s21
  #endif

  /* Adjust proportional adaption rate */
  if (st->adapted == 1)
 8001aba:	6923      	ldr	r3, [r4, #16]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d00b      	beq.n	8001ad8 <Echo_cancellation+0x2e4>
  {
    mdf_adjust_prop(st->W, N, M, 1, st->prop);
  }
  /* Compute weight gradient */
  if (st->saturated == 0)
 8001ac0:	6963      	ldr	r3, [r4, #20]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80f7 	beq.w	8001cb8 <Echo_cancellation+0x4c4>
      }
    }
  }
  else
  {
    st->saturated--;
 8001aca:	9b00      	ldr	r3, [sp, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	6163      	str	r3, [r4, #20]
    for (j = M - 1; j >= 0; j--)
 8001ad0:	2500      	movs	r5, #0
 8001ad2:	9f03      	ldr	r7, [sp, #12]
 8001ad4:	9e06      	ldr	r6, [sp, #24]
 8001ad6:	e107      	b.n	8001ce8 <Echo_cancellation+0x4f4>
    mdf_adjust_prop(st->W, N, M, 1, st->prop);
 8001ad8:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001adc:	f8d3 0e40 	ldr.w	r0, [r3, #3648]	; 0xe40
 8001ae0:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001ae4:	f8d3 527c 	ldr.w	r5, [r3, #636]	; 0x27c
  spx_word32_t tmp = 1.0f;
 8001ae8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001aec:	930b      	str	r3, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)W, (float32_t *)W, N, &tmp);
 8001aee:	ab0b      	add	r3, sp, #44	; 0x2c
 8001af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af4:	4601      	mov	r1, r0
 8001af6:	f00a fe37 	bl	800c768 <arm_dot_prod_f32>
  prop[0] = spx_sqrt(tmp);
 8001afa:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001afe:	eeb4 0aea 	vcmpe.f32	s0, s21
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	db23      	blt.n	8001b50 <Echo_cancellation+0x35c>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001b08:	f00b fa3e 	bl	800cf88 <sqrtf>
 8001b0c:	eef0 7a40 	vmov.f32	s15, s0
 8001b10:	edc5 7a00 	vstr	s15, [r5]
  if (prop[0] > max_sum)
 8001b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	dd01      	ble.n	8001b26 <Echo_cancellation+0x332>
    max_sum = prop[0];
 8001b22:	eeb0 7a67 	vmov.f32	s14, s15
  prop[0] += (0.1f * max_sum);
 8001b26:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001b60 <Echo_cancellation+0x36c>
 8001b2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b32:	edc5 7a00 	vstr	s15, [r5]
  prop_sum += prop[0];
 8001b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
  prop[0] = (0.99f * prop[0]) / prop_sum;
 8001b3e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001b64 <Echo_cancellation+0x370>
 8001b42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b4a:	edc5 6a00 	vstr	s13, [r5]
}
 8001b4e:	e7b7      	b.n	8001ac0 <Echo_cancellation+0x2cc>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001b50:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001b68 <Echo_cancellation+0x374>
 8001b54:	e7dc      	b.n	8001b10 <Echo_cancellation+0x31c>
 8001b56:	bf00      	nop
 8001b58:	3eb33333 	.word	0x3eb33333
 8001b5c:	3f333333 	.word	0x3f333333
 8001b60:	3dcccccd 	.word	0x3dcccccd
 8001b64:	3f7d70a4 	.word	0x3f7d70a4
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	3f19999a 	.word	0x3f19999a
 8001b70:	3ecccccd 	.word	0x3ecccccd
 8001b74:	3f59999a 	.word	0x3f59999a
 8001b78:	3e19999a 	.word	0x3e19999a
 8001b7c:	3eb851ec 	.word	0x3eb851ec
 8001b80:	3e23d70a 	.word	0x3e23d70a
 8001b84:	3f38f5c3 	.word	0x3f38f5c3
 8001b88:	3cb851ec 	.word	0x3cb851ec
    W = FLOAT_AMULT(p, w[j]);
 8001b8c:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
 8001b90:	ed91 7a00 	vldr	s14, [r1]
 8001b94:	ee25 7a87 	vmul.f32	s14, s11, s14
    prod[i] = FLOAT_MUL32(W, MAC16_16(MULT16_16(X[i], Y[i]), X[i + 1], Y[i + 1])); //W*(X[i]*Y[i] + X[i+1]*Y[i+1])
 8001b98:	eb0e 0682 	add.w	r6, lr, r2, lsl #2
 8001b9c:	edd6 7a00 	vldr	s15, [r6]
 8001ba0:	eb09 0782 	add.w	r7, r9, r2, lsl #2
 8001ba4:	edd7 6a00 	vldr	s13, [r7]
 8001ba8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bac:	1c51      	adds	r1, r2, #1
 8001bae:	eb0e 0c81 	add.w	ip, lr, r1, lsl #2
 8001bb2:	eddc 6a00 	vldr	s13, [ip]
 8001bb6:	eb09 0581 	add.w	r5, r9, r1, lsl #2
 8001bba:	ed95 6a00 	vldr	s12, [r5]
 8001bbe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bc6:	eb08 0b82 	add.w	fp, r8, r2, lsl #2
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	edcb 7a00 	vstr	s15, [fp]
    prod[i + 1] = FLOAT_MUL32(W, MAC16_16(MULT16_16(-X[i + 1], Y[i]), X[i], Y[i + 1])); //W*(X[i]*Y[i+1]-X[i+1]*Y[i] )
 8001bd2:	eddc 7a00 	vldr	s15, [ip]
 8001bd6:	edd7 6a00 	vldr	s13, [r7]
 8001bda:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8001bde:	edd6 6a00 	vldr	s13, [r6]
 8001be2:	ed95 6a00 	vldr	s12, [r5]
 8001be6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bee:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8001bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf6:	ed81 7a00 	vstr	s14, [r1]
    j++;
 8001bfa:	3001      	adds	r0, #1
  for (i = 1; i < (N - 1); i += 2)
 8001bfc:	3202      	adds	r2, #2
 8001bfe:	2afe      	cmp	r2, #254	; 0xfe
 8001c00:	ddc4      	ble.n	8001b8c <Echo_cancellation+0x398>
  W = FLOAT_AMULT(p, w[j]);
 8001c02:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
 8001c06:	edda 7a00 	vldr	s15, [sl]
 8001c0a:	ee65 5aa7 	vmul.f32	s11, s11, s15
  if (i < N)
 8001c0e:	2aff      	cmp	r2, #255	; 0xff
 8001c10:	dc0f      	bgt.n	8001c32 <Echo_cancellation+0x43e>
    prod[i] = FLOAT_MUL32(W, MULT16_16(X[i], Y[i]));
 8001c12:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8001c16:	edde 7a00 	vldr	s15, [lr]
 8001c1a:	eb09 0182 	add.w	r1, r9, r2, lsl #2
 8001c1e:	ed91 7a00 	vldr	s14, [r1]
 8001c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c26:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8001c2a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001c2e:	edc2 5a00 	vstr	s11, [r2]
      for (i = 0; i < N; i++)
 8001c32:	9a00      	ldr	r2, [sp, #0]
 8001c34:	2aff      	cmp	r2, #255	; 0xff
 8001c36:	dc15      	bgt.n	8001c64 <Echo_cancellation+0x470>
        st->W[j * N + i] += st->PHI[i];
 8001c38:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
 8001c3c:	f8d1 1e40 	ldr.w	r1, [r1, #3648]	; 0xe40
 8001c40:	eb02 2003 	add.w	r0, r2, r3, lsl #8
 8001c44:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8001c48:	f502 60d2 	add.w	r0, r2, #1680	; 0x690
 8001c4c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001c50:	ed90 7a00 	vldr	s14, [r0]
 8001c54:	edd1 7a00 	vldr	s15, [r1]
 8001c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c5c:	edc1 7a00 	vstr	s15, [r1]
      for (i = 0; i < N; i++)
 8001c60:	3201      	adds	r2, #1
 8001c62:	e7e7      	b.n	8001c34 <Echo_cancellation+0x440>
    for (j = M - 1; j >= 0; j--)
 8001c64:	3b01      	subs	r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f6ff af32 	blt.w	8001ad0 <Echo_cancellation+0x2dc>
      weighted_spectral_mul_conj(st->power_1, FLOAT_SHL(PSEUDOFLOAT(st->prop[j]), -15), &st->X[(j + 1)*N], st->E, st->PHI, N);
 8001c6c:	f504 5a01 	add.w	sl, r4, #8256	; 0x2040
 8001c70:	f10a 0a1c 	add.w	sl, sl, #28
 8001c74:	f504 5240 	add.w	r2, r4, #12288	; 0x3000
 8001c78:	f8d2 227c 	ldr.w	r2, [r2, #636]	; 0x27c
 8001c7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001c80:	edd2 5a00 	vldr	s11, [r2]
 8001c84:	f8d4 283c 	ldr.w	r2, [r4, #2108]	; 0x83c
 8001c88:	1c59      	adds	r1, r3, #1
 8001c8a:	eb02 2e81 	add.w	lr, r2, r1, lsl #10
 8001c8e:	f504 59b2 	add.w	r9, r4, #5696	; 0x1640
 8001c92:	f504 58d2 	add.w	r8, r4, #6720	; 0x1a40
  W = FLOAT_AMULT(p, w[0]);
 8001c96:	edda 7a00 	vldr	s15, [sl]
 8001c9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
  prod[0] = FLOAT_MUL32(W, MULT16_16(X[0], Y[0]));
 8001c9e:	ed9e 7a00 	vldr	s14, [lr]
 8001ca2:	edd9 6a00 	vldr	s13, [r9]
 8001ca6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cae:	edc8 7a00 	vstr	s15, [r8]
  int32_t j = 1;
 8001cb2:	2001      	movs	r0, #1
  for (i = 1; i < (N - 1); i += 2)
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	e7a2      	b.n	8001bfe <Echo_cancellation+0x40a>
    for (j = M - 1; j >= 0; j--)
 8001cb8:	9b06      	ldr	r3, [sp, #24]
 8001cba:	e7d4      	b.n	8001c66 <Echo_cancellation+0x472>
      }
      #else
      libSpeexAEC_ifft(st->fft_table, &st->W[j * N], st->wtmp);
      for (i = st->frame_size; i < N; i++)
      {
        st->wtmp[i] = 0;
 8001cbc:	f603 0298 	addw	r2, r3, #2200	; 0x898
 8001cc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	6011      	str	r1, [r2, #0]
      for (i = st->frame_size; i < N; i++)
 8001cc8:	3301      	adds	r3, #1
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	ddf6      	ble.n	8001cbc <Echo_cancellation+0x4c8>
      }
      libSpeexAEC_fft(st->fft_table, st->wtmp, &st->W[j * N]);
 8001cce:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001cd2:	f8d3 2e40 	ldr.w	r2, [r3, #3648]	; 0xe40
 8001cd6:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001cda:	444a      	add	r2, r9
 8001cdc:	4641      	mov	r1, r8
 8001cde:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8001ce2:	f7ff fb6f 	bl	80013c4 <libSpeexAEC_fft>
  for (j = 0; j < M; j++)
 8001ce6:	3501      	adds	r5, #1
 8001ce8:	42bd      	cmp	r5, r7
 8001cea:	da1d      	bge.n	8001d28 <Echo_cancellation+0x534>
    if ((j == 0) || (st->cancel_count % (M - 1) == j - 1))
 8001cec:	b13d      	cbz	r5, 8001cfe <Echo_cancellation+0x50a>
 8001cee:	68e3      	ldr	r3, [r4, #12]
 8001cf0:	fb93 f2f6 	sdiv	r2, r3, r6
 8001cf4:	fb06 3312 	mls	r3, r6, r2, r3
 8001cf8:	1e6a      	subs	r2, r5, #1
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d1f3      	bne.n	8001ce6 <Echo_cancellation+0x4f2>
      libSpeexAEC_ifft(st->fft_table, &st->W[j * N], st->wtmp);
 8001cfe:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001d02:	f8d3 1e40 	ldr.w	r1, [r3, #3648]	; 0xe40
 8001d06:	ea4f 2985 	mov.w	r9, r5, lsl #10
 8001d0a:	f504 5809 	add.w	r8, r4, #8768	; 0x2240
 8001d0e:	f108 0820 	add.w	r8, r8, #32
 8001d12:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001d16:	4642      	mov	r2, r8
 8001d18:	eb01 2185 	add.w	r1, r1, r5, lsl #10
 8001d1c:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8001d20:	f7ff fb6e 	bl	8001400 <libSpeexAEC_ifft>
      for (i = st->frame_size; i < N; i++)
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	e7d0      	b.n	8001cca <Echo_cancellation+0x4d6>
      #endif
    }
  }
  /* So we can use power_spectrum_accum */
  for (i = 0; i <= st->frame_size; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e010      	b.n	8001d4e <Echo_cancellation+0x55a>
  {
    st->Rf[i] = 0.0f;
 8001d2c:	f603 1218 	addw	r2, r3, #2328	; 0x918
 8001d30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001d34:	2100      	movs	r1, #0
 8001d36:	6011      	str	r1, [r2, #0]
    st->Yf[i] = 0.0f;
 8001d38:	f603 1298 	addw	r2, r3, #2456	; 0x998
 8001d3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001d40:	6051      	str	r1, [r2, #4]
    st->Xf[i] = 0.0f;
 8001d42:	f603 221a 	addw	r2, r3, #2586	; 0xa1a
 8001d46:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001d4a:	6011      	str	r1, [r2, #0]
  for (i = 0; i <= st->frame_size; i++)
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	6822      	ldr	r2, [r4, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	daeb      	bge.n	8001d2c <Echo_cancellation+0x538>

  #ifdef TWO_PATH
  Dbf = 0.0f;
  See = 0.0f;
  /* Difference in response, this is used to estimate the variance of our residual power estimate */
  spectral_mul_accum(st->X, st->W, st->Y, N, M);
 8001d54:	f8d4 683c 	ldr.w	r6, [r4, #2108]	; 0x83c
 8001d58:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001d5c:	f8d3 5e40 	ldr.w	r5, [r3, #3648]	; 0xe40
  acc[0] = X[0] * Y[0];
 8001d60:	4630      	mov	r0, r6
 8001d62:	ecf0 7a01 	vldmia	r0!, {s15}
 8001d66:	4629      	mov	r1, r5
 8001d68:	ecb1 7a01 	vldmia	r1!, {s14}
 8001d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d70:	9f01      	ldr	r7, [sp, #4]
 8001d72:	463a      	mov	r2, r7
 8001d74:	ece2 7a01 	vstmia	r2!, {s15}
  arm_cmplx_mult_cmplx_f32((float32_t *)&X[1], (float32_t *)&Y[1], &acc[1], (N / 2) - 1);
 8001d78:	237f      	movs	r3, #127	; 0x7f
 8001d7a:	f00a fb61 	bl	800c440 <arm_cmplx_mult_cmplx_f32>
  acc[(N / 2) - 1] = X[(N / 2) - 1] * Y[(N / 2) - 1];
 8001d7e:	edd6 7a7f 	vldr	s15, [r6, #508]	; 0x1fc
 8001d82:	ed95 7a7f 	vldr	s14, [r5, #508]	; 0x1fc
 8001d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8a:	4639      	mov	r1, r7
 8001d8c:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
  libSpeexAEC_ifft(st->fft_table, st->Y, st->y);
 8001d90:	f504 6624 	add.w	r6, r4, #2624	; 0xa40
 8001d94:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001d98:	4632      	mov	r2, r6
 8001d9a:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8001d9e:	f7ff fb2f 	bl	8001400 <libSpeexAEC_ifft>
  for (i = 0; i < st->frame_size; i++)
 8001da2:	2100      	movs	r1, #0
 8001da4:	e015      	b.n	8001dd2 <Echo_cancellation+0x5de>
  {
    st->e[i] = (st->e[i + st->frame_size] - st->y[i + st->frame_size]);
 8001da6:	440a      	add	r2, r1
 8001da8:	f102 030e 	add.w	r3, r2, #14
 8001dac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db4:	f502 7224 	add.w	r2, r2, #656	; 0x290
 8001db8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8001dbc:	ed93 7a00 	vldr	s14, [r3]
 8001dc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dc4:	f101 030e 	add.w	r3, r1, #14
 8001dc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dcc:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < st->frame_size; i++)
 8001dd0:	3101      	adds	r1, #1
 8001dd2:	6822      	ldr	r2, [r4, #0]
 8001dd4:	428a      	cmp	r2, r1
 8001dd6:	dce6      	bgt.n	8001da6 <Echo_cancellation+0x5b2>
  spx_word32_t sum = 0.0f;
 8001dd8:	ed1f ba9d 	vldr	s22, [pc, #-628]	; 8001b68 <Echo_cancellation+0x374>
 8001ddc:	ed8d ba0b 	vstr	s22, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 8001de0:	ab0b      	add	r3, sp, #44	; 0x2c
 8001de2:	9902      	ldr	r1, [sp, #8]
 8001de4:	4608      	mov	r0, r1
 8001de6:	f00a fcbf 	bl	800c768 <arm_dot_prod_f32>
  }
  Dbf += 10.0f + mdf_inner_prod(st->e, st->e, st->frame_size);
 8001dea:	eddd aa0b 	vldr	s21, [sp, #44]	; 0x2c
 8001dee:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001df2:	ee7a aaa7 	vadd.f32	s21, s21, s15
 8001df6:	ee7a aa8b 	vadd.f32	s21, s21, s22
  for (i = 0; i < st->frame_size; i++)
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	e015      	b.n	8001e2a <Echo_cancellation+0x636>
  {
    st->e[i] = (st->input[i] - st->y[i + st->frame_size]);
 8001dfe:	f501 7304 	add.w	r3, r1, #528	; 0x210
 8001e02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	1853      	adds	r3, r2, r1
 8001e0c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001e10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e1c:	f101 030e 	add.w	r3, r1, #14
 8001e20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e24:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < st->frame_size; i++)
 8001e28:	3101      	adds	r1, #1
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	428a      	cmp	r2, r1
 8001e2e:	dce6      	bgt.n	8001dfe <Echo_cancellation+0x60a>
  spx_word32_t sum = 0.0f;
 8001e30:	ed5f bab3 	vldr	s23, [pc, #-716]	; 8001b68 <Echo_cancellation+0x374>
 8001e34:	edcd ba0b 	vstr	s23, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 8001e38:	ab0b      	add	r3, sp, #44	; 0x2c
 8001e3a:	9902      	ldr	r1, [sp, #8]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	f00a fc93 	bl	800c768 <arm_dot_prod_f32>
  return sum;
 8001e42:	ed9d ba0b 	vldr	s22, [sp, #44]	; 0x2c
  }
  See += mdf_inner_prod(st->e, st->e, st->frame_size);
 8001e46:	ee3b ba2b 	vadd.f32	s22, s22, s23
  #endif

  #ifdef TWO_PATH
  /* Logic for updating the foreground filter */
  /* For two time windows, compute the mean of the energy difference, as well as the variance */
  st->Davg1 = (.6f * st->Davg1) + (.4f * (Sff - See));
 8001e4a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001e4e:	f603 6248 	addw	r2, r3, #3656	; 0xe48
 8001e52:	ed92 7a00 	vldr	s14, [r2]
 8001e56:	ed5f 7abb 	vldr	s15, [pc, #-748]	; 8001b6c <Echo_cancellation+0x378>
 8001e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e5e:	ee78 6a4b 	vsub.f32	s13, s16, s22
 8001e62:	ed5f 7abd 	vldr	s15, [pc, #-756]	; 8001b70 <Echo_cancellation+0x37c>
 8001e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6e:	ed82 7a00 	vstr	s14, [r2]
  st->Davg2 = (.85f * st->Davg2) + (.15f * (Sff - See));
 8001e72:	f603 624c 	addw	r2, r3, #3660	; 0xe4c
 8001e76:	edd2 7a00 	vldr	s15, [r2]
 8001e7a:	ed1f 6ac2 	vldr	s12, [pc, #-776]	; 8001b74 <Echo_cancellation+0x380>
 8001e7e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001e82:	ed1f 6ac3 	vldr	s12, [pc, #-780]	; 8001b78 <Echo_cancellation+0x384>
 8001e86:	ee26 6a86 	vmul.f32	s12, s13, s12
 8001e8a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001e8e:	edc2 7a00 	vstr	s15, [r2]
  st->Dvar1 = (.36f * st->Dvar1) + (.16f * Sff * Dbf);
 8001e92:	f503 6265 	add.w	r2, r3, #3664	; 0xe50
 8001e96:	edd2 5a00 	vldr	s11, [r2]
 8001e9a:	ed1f 6ac8 	vldr	s12, [pc, #-800]	; 8001b7c <Echo_cancellation+0x388>
 8001e9e:	ee65 5a86 	vmul.f32	s11, s11, s12
 8001ea2:	ed1f 6ac9 	vldr	s12, [pc, #-804]	; 8001b80 <Echo_cancellation+0x38c>
 8001ea6:	ee28 6a06 	vmul.f32	s12, s16, s12
 8001eaa:	ee26 6a2a 	vmul.f32	s12, s12, s21
 8001eae:	ee35 5a86 	vadd.f32	s10, s11, s12
 8001eb2:	ed82 5a00 	vstr	s10, [r2]
  st->Dvar2 = (.7225f * st->Dvar2) + (.0225f * Sff * Dbf);
 8001eb6:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8001eba:	ed93 6a00 	vldr	s12, [r3]
 8001ebe:	ed5f 5acf 	vldr	s11, [pc, #-828]	; 8001b84 <Echo_cancellation+0x390>
 8001ec2:	ee26 6a25 	vmul.f32	s12, s12, s11
 8001ec6:	ed5f 5ad0 	vldr	s11, [pc, #-832]	; 8001b88 <Echo_cancellation+0x394>
 8001eca:	ee68 5a25 	vmul.f32	s11, s16, s11
 8001ece:	ee65 5aaa 	vmul.f32	s11, s11, s21
 8001ed2:	ee36 6a25 	vadd.f32	s12, s12, s11
 8001ed6:	ed83 6a00 	vstr	s12, [r3]

  update_foreground = 0;
  /* Check if we have a statistically significant reduction in the residual echo */
  /* Note that this is *not* Gaussian, so we need to be careful about the longer tail */
  if (((Sff - See)*ABS32(Sff - See)) > (Sff * Dbf))
 8001eda:	eef4 6aeb 	vcmpe.f32	s13, s23
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d455      	bmi.n	8001f90 <Echo_cancellation+0x79c>
 8001ee4:	eef0 5a66 	vmov.f32	s11, s13
 8001ee8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001eec:	ee68 aa2a 	vmul.f32	s21, s16, s21
 8001ef0:	eef4 6aea 	vcmpe.f32	s13, s21
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	dc53      	bgt.n	8001fa2 <Echo_cancellation+0x7ae>
  {
    update_foreground = 1;
  }
  else if (FLOAT_GT(FLOAT_MUL32U(st->Davg1, ABS32(st->Davg1)), FLOAT_MULT(VAR1_UPDATE, (st->Dvar1))))
 8001efa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	d448      	bmi.n	8001f96 <Echo_cancellation+0x7a2>
 8001f04:	eef0 5a47 	vmov.f32	s11, s14
 8001f08:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001f0c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001f10:	ee65 5a25 	vmul.f32	s11, s10, s11
 8001f14:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	dc41      	bgt.n	8001fa2 <Echo_cancellation+0x7ae>
  {
    update_foreground = 1;
  }
  else if (FLOAT_GT(FLOAT_MUL32U(st->Davg2, ABS32(st->Davg2)), FLOAT_MULT(VAR2_UPDATE, (st->Dvar2))))
 8001f1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	d439      	bmi.n	8001f9c <Echo_cancellation+0x7a8>
 8001f28:	eef0 5a67 	vmov.f32	s11, s15
 8001f2c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001f30:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
 8001f34:	ee66 5a25 	vmul.f32	s11, s12, s11
 8001f38:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f40:	dc2f      	bgt.n	8001fa2 <Echo_cancellation+0x7ae>
  }
  else
  {
    int32_t reset_background = 0;
    /* Otherwise, check if the background filter is significantly worse */
    if (FLOAT_GT(FLOAT_MUL32U(NEG32(SUB32(Sff, See)), ABS32(SUB32(Sff, See))), FLOAT_MULT(VAR_BACKTRACK, FLOAT_MUL32U(Sff, Dbf))))
 8001f42:	eddf 5ac4 	vldr	s11, [pc, #784]	; 8002254 <Echo_cancellation+0xa60>
 8001f46:	ee6a aaa5 	vmul.f32	s21, s21, s11
 8001f4a:	eef1 6a66 	vneg.f32	s13, s13
 8001f4e:	eef4 aae6 	vcmpe.f32	s21, s13
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d472      	bmi.n	800203e <Echo_cancellation+0x84a>
    int32_t reset_background = 0;
 8001f58:	2300      	movs	r3, #0
    {
      reset_background = 1;
    }
    if (FLOAT_GT(FLOAT_MUL32U(NEG32(st->Davg1), ABS32(st->Davg1)), FLOAT_MULT(VAR_BACKTRACK, st->Dvar1)))
 8001f5a:	eddf 6abe 	vldr	s13, [pc, #760]	; 8002254 <Echo_cancellation+0xa60>
 8001f5e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8001f62:	eeb1 7a47 	vneg.f32	s14, s14
 8001f66:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	d500      	bpl.n	8001f72 <Echo_cancellation+0x77e>
    {
      reset_background = 1;
 8001f70:	2301      	movs	r3, #1
    }
    if (FLOAT_GT(FLOAT_MUL32U(NEG32(st->Davg2), ABS32(st->Davg2)), FLOAT_MULT(VAR_BACKTRACK, st->Dvar2)))
 8001f72:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8002254 <Echo_cancellation+0xa60>
 8001f76:	ee26 6a07 	vmul.f32	s12, s12, s14
 8001f7a:	eef1 7a67 	vneg.f32	s15, s15
 8001f7e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	d46f      	bmi.n	8002068 <Echo_cancellation+0x874>
    {
      reset_background = 1;
    }
    if (reset_background == 1)
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d053      	beq.n	8002034 <Echo_cancellation+0x840>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e065      	b.n	800205c <Echo_cancellation+0x868>
  if (((Sff - See)*ABS32(Sff - See)) > (Sff * Dbf))
 8001f90:	eef1 5a66 	vneg.f32	s11, s13
 8001f94:	e7a8      	b.n	8001ee8 <Echo_cancellation+0x6f4>
  else if (FLOAT_GT(FLOAT_MUL32U(st->Davg1, ABS32(st->Davg1)), FLOAT_MULT(VAR1_UPDATE, (st->Dvar1))))
 8001f96:	eef1 5a47 	vneg.f32	s11, s14
 8001f9a:	e7b5      	b.n	8001f08 <Echo_cancellation+0x714>
  else if (FLOAT_GT(FLOAT_MUL32U(st->Davg2, ABS32(st->Davg2)), FLOAT_MULT(VAR2_UPDATE, (st->Dvar2))))
 8001f9c:	eef1 5a67 	vneg.f32	s11, s15
 8001fa0:	e7c4      	b.n	8001f2c <Echo_cancellation+0x738>
    st->Davg1 = 0.0f;
 8001fa2:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001fa6:	f603 6148 	addw	r1, r3, #3656	; 0xe48
 8001faa:	2200      	movs	r2, #0
 8001fac:	600a      	str	r2, [r1, #0]
    st->Davg2 = 0.0f;
 8001fae:	f603 614c 	addw	r1, r3, #3660	; 0xe4c
 8001fb2:	600a      	str	r2, [r1, #0]
    st->Dvar1 = FLOAT_ZERO;
 8001fb4:	f503 6165 	add.w	r1, r3, #3664	; 0xe50
 8001fb8:	600a      	str	r2, [r1, #0]
    st->Dvar2 = FLOAT_ZERO;
 8001fba:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 8001fbe:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N * M; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9d03      	ldr	r5, [sp, #12]
 8001fc4:	e00c      	b.n	8001fe0 <Echo_cancellation+0x7ec>
      st->foreground[i] = EXTRACT16(PSHR32(st->W[i], 16));
 8001fc6:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8001fca:	f8d0 2e40 	ldr.w	r2, [r0, #3648]	; 0xe40
 8001fce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8001fd2:	f8d0 2e44 	ldr.w	r2, [r0, #3652]	; 0xe44
 8001fd6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001fda:	6809      	ldr	r1, [r1, #0]
 8001fdc:	6011      	str	r1, [r2, #0]
    for (i = 0; i < N * M; i++)
 8001fde:	3301      	adds	r3, #1
 8001fe0:	ebb3 2f05 	cmp.w	r3, r5, lsl #8
 8001fe4:	dbef      	blt.n	8001fc6 <Echo_cancellation+0x7d2>
    for (i = 0; i < st->frame_size; i++)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	e021      	b.n	800202e <Echo_cancellation+0x83a>
      st->e[i + st->frame_size] = MULT16_16_Q15(st->window[i + st->frame_size], st->e[i + st->frame_size]) + MULT16_16_Q15(st->window[i], st->y[i + st->frame_size]);
 8001fea:	4413      	add	r3, r2
 8001fec:	f603 319e 	addw	r1, r3, #2974	; 0xb9e
 8001ff0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001ff4:	edd1 7a01 	vldr	s15, [r1, #4]
 8001ff8:	f103 010e 	add.w	r1, r3, #14
 8001ffc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002000:	ed91 7a01 	vldr	s14, [r1, #4]
 8002004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002008:	f602 309e 	addw	r0, r2, #2974	; 0xb9e
 800200c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002010:	ed90 7a01 	vldr	s14, [r0, #4]
 8002014:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002018:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800201c:	edd3 6a00 	vldr	s13, [r3]
 8002020:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002024:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002028:	edc1 7a01 	vstr	s15, [r1, #4]
    for (i = 0; i < st->frame_size; i++)
 800202c:	3201      	adds	r2, #1
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	4293      	cmp	r3, r2
 8002032:	dcda      	bgt.n	8001fea <Echo_cancellation+0x7f6>

  Sey = 0.0f;
  Syy = 0.0f;
  Sdd = 0.0f;
  /* Compute error signal (for the output with de-emphasis) */
  for (i = 0; i < st->frame_size; i++)
 8002034:	2500      	movs	r5, #0
 8002036:	9f07      	ldr	r7, [sp, #28]
 8002038:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800203c:	e059      	b.n	80020f2 <Echo_cancellation+0x8fe>
      reset_background = 1;
 800203e:	2301      	movs	r3, #1
 8002040:	e78b      	b.n	8001f5a <Echo_cancellation+0x766>
        st->W[i] = SHL32(EXTEND32(st->foreground[i]), 16);
 8002042:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8002046:	f8d0 2e44 	ldr.w	r2, [r0, #3652]	; 0xe44
 800204a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800204e:	f8d0 2e40 	ldr.w	r2, [r0, #3648]	; 0xe40
 8002052:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002056:	6809      	ldr	r1, [r1, #0]
 8002058:	6011      	str	r1, [r2, #0]
      for (i = 0; i < N * M; i++)
 800205a:	3301      	adds	r3, #1
 800205c:	9a03      	ldr	r2, [sp, #12]
 800205e:	ebb3 2f02 	cmp.w	r3, r2, lsl #8
 8002062:	dbee      	blt.n	8002042 <Echo_cancellation+0x84e>
      for (i = 0; i < st->frame_size; i++)
 8002064:	2200      	movs	r2, #0
 8002066:	e00d      	b.n	8002084 <Echo_cancellation+0x890>
 8002068:	2300      	movs	r3, #0
 800206a:	e7f7      	b.n	800205c <Echo_cancellation+0x868>
        st->y[i + st->frame_size] = st->e[i + st->frame_size];
 800206c:	4413      	add	r3, r2
 800206e:	f103 010e 	add.w	r1, r3, #14
 8002072:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002076:	6849      	ldr	r1, [r1, #4]
 8002078:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800207c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002080:	6019      	str	r1, [r3, #0]
      for (i = 0; i < st->frame_size; i++)
 8002082:	3201      	adds	r2, #1
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	4293      	cmp	r3, r2
 8002088:	dcf0      	bgt.n	800206c <Echo_cancellation+0x878>
      for (i = 0; i < st->frame_size; i++)
 800208a:	2100      	movs	r1, #0
 800208c:	e015      	b.n	80020ba <Echo_cancellation+0x8c6>
        st->e[i] = SUB16(st->input[i], st->y[i + st->frame_size]);
 800208e:	f501 7204 	add.w	r2, r1, #528	; 0x210
 8002092:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002096:	edd2 7a00 	vldr	s15, [r2]
 800209a:	185a      	adds	r2, r3, r1
 800209c:	f502 7224 	add.w	r2, r2, #656	; 0x290
 80020a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80020a4:	ed92 7a00 	vldr	s14, [r2]
 80020a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020ac:	f101 020e 	add.w	r2, r1, #14
 80020b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80020b4:	edc2 7a01 	vstr	s15, [r2, #4]
      for (i = 0; i < st->frame_size; i++)
 80020b8:	3101      	adds	r1, #1
 80020ba:	428b      	cmp	r3, r1
 80020bc:	dce7      	bgt.n	800208e <Echo_cancellation+0x89a>
      st->Davg1 = 0.0f;
 80020be:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80020c2:	f603 6148 	addw	r1, r3, #3656	; 0xe48
 80020c6:	2200      	movs	r2, #0
 80020c8:	600a      	str	r2, [r1, #0]
      st->Davg2 = 0.0f;
 80020ca:	f603 614c 	addw	r1, r3, #3660	; 0xe4c
 80020ce:	600a      	str	r2, [r1, #0]
      st->Dvar1 = FLOAT_ZERO;
 80020d0:	f503 6165 	add.w	r1, r3, #3664	; 0xe50
 80020d4:	600a      	str	r2, [r1, #0]
      st->Dvar2 = FLOAT_ZERO;
 80020d6:	f603 6354 	addw	r3, r3, #3668	; 0xe54
 80020da:	601a      	str	r2, [r3, #0]
      See = Sff;
 80020dc:	eeb0 ba48 	vmov.f32	s22, s16
 80020e0:	e7a8      	b.n	8002034 <Echo_cancellation+0x840>
      if (st->saturated == 0)
      {
        st->saturated = 1;
      }
    }
    out[i * C] = WORD2INT(tmp_out);
 80020e2:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <Echo_cancellation+0xa64>)
 80020e4:	f828 3009 	strh.w	r3, [r8, r9]
    st->memE = tmp_out;
 80020e8:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80020ec:	edc3 aaa3 	vstr	s21, [r3, #652]	; 0x28c
  for (i = 0; i < st->frame_size; i++)
 80020f0:	3501      	adds	r5, #1
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	42aa      	cmp	r2, r5
 80020f6:	dd44      	ble.n	8002182 <Echo_cancellation+0x98e>
    tmp_out = SUB32(EXTEND32(st->input[i]), EXTEND32(st->e[i + st->frame_size]));
 80020f8:	f505 7304 	add.w	r3, r5, #528	; 0x210
 80020fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	1953      	adds	r3, r2, r5
 8002106:	330e      	adds	r3, #14
 8002108:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800210c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002110:	ee77 7ac7 	vsub.f32	s15, s15, s14
    tmp_out = ADD32(tmp_out, EXTEND32(MULT16_16_P15(st->preemph, st->memE)));
 8002114:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8002118:	edd3 aaa4 	vldr	s21, [r3, #656]	; 0x290
 800211c:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8002120:	ee6a aa87 	vmul.f32	s21, s21, s14
 8002124:	ee7a aaa7 	vadd.f32	s21, s21, s15
    if ((in[i * C] <= -32000) || (in[i * C] >= 32000))
 8002128:	ea4f 0945 	mov.w	r9, r5, lsl #1
 800212c:	f937 3015 	ldrsh.w	r3, [r7, r5, lsl #1]
 8002130:	f503 43f9 	add.w	r3, r3, #31872	; 0x7c80
 8002134:	337f      	adds	r3, #127	; 0x7f
 8002136:	b29b      	uxth	r3, r3
 8002138:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
 800213c:	4293      	cmp	r3, r2
 800213e:	d903      	bls.n	8002148 <Echo_cancellation+0x954>
      if (st->saturated == 0)
 8002140:	6963      	ldr	r3, [r4, #20]
 8002142:	b90b      	cbnz	r3, 8002148 <Echo_cancellation+0x954>
        st->saturated = 1;
 8002144:	2301      	movs	r3, #1
 8002146:	6163      	str	r3, [r4, #20]
    out[i * C] = WORD2INT(tmp_out);
 8002148:	eddf 7a44 	vldr	s15, [pc, #272]	; 800225c <Echo_cancellation+0xa68>
 800214c:	eef4 aae7 	vcmpe.f32	s21, s15
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	d4c5      	bmi.n	80020e2 <Echo_cancellation+0x8ee>
 8002156:	eddf 7a42 	vldr	s15, [pc, #264]	; 8002260 <Echo_cancellation+0xa6c>
 800215a:	eef4 aae7 	vcmpe.f32	s21, s15
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	dc0b      	bgt.n	800217c <Echo_cancellation+0x988>
 8002164:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002168:	ee3a 0a80 	vadd.f32	s0, s21, s0
 800216c:	f00b f84c 	bl	800d208 <floorf>
 8002170:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002174:	ee17 3a90 	vmov	r3, s15
 8002178:	b21b      	sxth	r3, r3
 800217a:	e7b3      	b.n	80020e4 <Echo_cancellation+0x8f0>
 800217c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002180:	e7b0      	b.n	80020e4 <Echo_cancellation+0x8f0>
  #ifdef DUMP_ECHO_CANCEL_DATA
  dump_audio(in, far_end, out, st->frame_size);
  #endif

  /* Compute error signal (filter update version) */
  for (i = 0; i < st->frame_size; i++)
 8002182:	2100      	movs	r1, #0
 8002184:	e00c      	b.n	80021a0 <Echo_cancellation+0x9ac>
  {
    st->e[i + st->frame_size] = st->e[i];
 8002186:	1853      	adds	r3, r2, r1
 8002188:	f101 000e 	add.w	r0, r1, #14
 800218c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002190:	6845      	ldr	r5, [r0, #4]
 8002192:	330e      	adds	r3, #14
 8002194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002198:	605d      	str	r5, [r3, #4]
    st->e[i] = 0.0f;
 800219a:	2300      	movs	r3, #0
 800219c:	6043      	str	r3, [r0, #4]
  for (i = 0; i < st->frame_size; i++)
 800219e:	3101      	adds	r1, #1
 80021a0:	428a      	cmp	r2, r1
 80021a2:	dcf0      	bgt.n	8002186 <Echo_cancellation+0x992>
  spx_word32_t sum = 0.0f;
 80021a4:	ed9f ca2f 	vldr	s24, [pc, #188]	; 8002264 <Echo_cancellation+0xa70>
 80021a8:	ed8d ca0b 	vstr	s24, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 80021ac:	ab0b      	add	r3, sp, #44	; 0x2c
 80021ae:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80021b2:	9f02      	ldr	r7, [sp, #8]
 80021b4:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 80021b8:	f00a fad6 	bl	800c768 <arm_dot_prod_f32>
  return sum;
 80021bc:	eddd ba0b 	vldr	s23, [sp, #44]	; 0x2c
  }

  /* Compute a bunch of correlations */
  /* FIXME: bad merge */
  Sey += mdf_inner_prod(st->e + st->frame_size, st->y + st->frame_size, st->frame_size);
 80021c0:	ee7b ba8c 	vadd.f32	s23, s23, s24
  Syy += mdf_inner_prod(st->y + st->frame_size, st->y + st->frame_size, st->frame_size);
 80021c4:	6822      	ldr	r2, [r4, #0]
 80021c6:	eb06 0082 	add.w	r0, r6, r2, lsl #2
  spx_word32_t sum = 0.0f;
 80021ca:	ed8d ca0b 	vstr	s24, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 80021ce:	ab0b      	add	r3, sp, #44	; 0x2c
 80021d0:	4601      	mov	r1, r0
 80021d2:	f00a fac9 	bl	800c768 <arm_dot_prod_f32>
  return sum;
 80021d6:	eddd aa0b 	vldr	s21, [sp, #44]	; 0x2c
  Syy += mdf_inner_prod(st->y + st->frame_size, st->y + st->frame_size, st->frame_size);
 80021da:	ee7a aa8c 	vadd.f32	s21, s21, s24
  spx_word32_t sum = 0.0f;
 80021de:	ed8d ca0b 	vstr	s24, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 80021e2:	ab0b      	add	r3, sp, #44	; 0x2c
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	9908      	ldr	r1, [sp, #32]
 80021e8:	4608      	mov	r0, r1
 80021ea:	f00a fabd 	bl	800c768 <arm_dot_prod_f32>
  return sum;
 80021ee:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
  Sdd += mdf_inner_prod(st->input, st->input, st->frame_size);
 80021f2:	ee37 ca8c 	vadd.f32	s24, s15, s24

  /* Convert error to frequency domain */
  libSpeexAEC_fft(st->fft_table, st->e, st->E);
 80021f6:	f504 55b2 	add.w	r5, r4, #5696	; 0x1640
 80021fa:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80021fe:	462a      	mov	r2, r5
 8002200:	4639      	mov	r1, r7
 8002202:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8002206:	f7ff f8dd 	bl	80013c4 <libSpeexAEC_fft>
  for (i = 0; i < st->frame_size; i++)
 800220a:	2300      	movs	r3, #0
 800220c:	e006      	b.n	800221c <Echo_cancellation+0xa28>
  {
    st->y[i] = 0.0f;
 800220e:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8002212:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002216:	2100      	movs	r1, #0
 8002218:	6011      	str	r1, [r2, #0]
  for (i = 0; i < st->frame_size; i++)
 800221a:	3301      	adds	r3, #1
 800221c:	6822      	ldr	r2, [r4, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	dcf5      	bgt.n	800220e <Echo_cancellation+0xa1a>
  }
  libSpeexAEC_fft(st->fft_table, st->y, st->Y);
 8002222:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8002226:	9a01      	ldr	r2, [sp, #4]
 8002228:	4631      	mov	r1, r6
 800222a:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 800222e:	f7ff f8c9 	bl	80013c4 <libSpeexAEC_fft>

  /* Compute power spectrum of echo (X), error (E) and filter response (Y) */
  power_spectrum_accum(st->E, st->Rf, N);
 8002232:	f504 5611 	add.w	r6, r4, #9280	; 0x2440
 8002236:	3620      	adds	r6, #32
  ps[0] += MULT16_16(X[0], X[0]);
 8002238:	edd5 7a00 	vldr	s15, [r5]
 800223c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002240:	ed96 7a00 	vldr	s14, [r6]
 8002244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002248:	edc6 7a00 	vstr	s15, [r6]
  int32_t j = 1;
 800224c:	2101      	movs	r1, #1
  for (i = 1; i < (N - 1); i += 2)
 800224e:	460b      	mov	r3, r1
 8002250:	e02b      	b.n	80022aa <Echo_cancellation+0xab6>
 8002252:	bf00      	nop
 8002254:	3e4ccccd 	.word	0x3e4ccccd
 8002258:	ffff8000 	.word	0xffff8000
 800225c:	c6ffff00 	.word	0xc6ffff00
 8002260:	46fffd00 	.word	0x46fffd00
 8002264:	00000000 	.word	0x00000000
 8002268:	526e6b28 	.word	0x526e6b28
 800226c:	46c80000 	.word	0x46c80000
 8002270:	4a1c4000 	.word	0x4a1c4000
 8002274:	3ba3d70a 	.word	0x3ba3d70a
    ps[j] +=  MULT16_16(X[i], X[i]) + MULT16_16(X[i + 1], X[i + 1]);
 8002278:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800227c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8002280:	edd2 7a00 	vldr	s15, [r2]
 8002284:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800228e:	ed92 7a00 	vldr	s14, [r2]
 8002292:	ee27 7a07 	vmul.f32	s14, s14, s14
 8002296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800229a:	ed90 7a00 	vldr	s14, [r0]
 800229e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a2:	edc0 7a00 	vstr	s15, [r0]
    j++;
 80022a6:	3101      	adds	r1, #1
  for (i = 1; i < (N - 1); i += 2)
 80022a8:	3302      	adds	r3, #2
 80022aa:	2bfe      	cmp	r3, #254	; 0xfe
 80022ac:	dde4      	ble.n	8002278 <Echo_cancellation+0xa84>
  if (i < N)
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	dc0d      	bgt.n	80022ce <Echo_cancellation+0xada>
    ps[j] += MULT16_16(X[i], X[i]);
 80022b2:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 80022b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80022ba:	edd5 7a00 	vldr	s15, [r5]
 80022be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022c2:	ed96 7a00 	vldr	s14, [r6]
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	edc6 7a00 	vstr	s15, [r6]
  power_spectrum_accum(st->Y, st->Yf, N);
 80022ce:	f504 5519 	add.w	r5, r4, #9792	; 0x2640
 80022d2:	3524      	adds	r5, #36	; 0x24
  ps[0] += MULT16_16(X[0], X[0]);
 80022d4:	9e01      	ldr	r6, [sp, #4]
 80022d6:	edd6 7a00 	vldr	s15, [r6]
 80022da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022de:	ed95 7a00 	vldr	s14, [r5]
 80022e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e6:	edc5 7a00 	vstr	s15, [r5]
  int32_t j = 1;
 80022ea:	2101      	movs	r1, #1
  for (i = 1; i < (N - 1); i += 2)
 80022ec:	460b      	mov	r3, r1
 80022ee:	e018      	b.n	8002322 <Echo_cancellation+0xb2e>
    ps[j] +=  MULT16_16(X[i], X[i]) + MULT16_16(X[i + 1], X[i + 1]);
 80022f0:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 80022f4:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80022f8:	edd2 7a00 	vldr	s15, [r2]
 80022fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002306:	ed92 7a00 	vldr	s14, [r2]
 800230a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800230e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002312:	ed90 7a00 	vldr	s14, [r0]
 8002316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231a:	edc0 7a00 	vstr	s15, [r0]
    j++;
 800231e:	3101      	adds	r1, #1
  for (i = 1; i < (N - 1); i += 2)
 8002320:	3302      	adds	r3, #2
 8002322:	2bfe      	cmp	r3, #254	; 0xfe
 8002324:	dde4      	ble.n	80022f0 <Echo_cancellation+0xafc>
  if (i < N)
 8002326:	2bff      	cmp	r3, #255	; 0xff
 8002328:	dc0e      	bgt.n	8002348 <Echo_cancellation+0xb54>
    ps[j] += MULT16_16(X[i], X[i]);
 800232a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800232e:	9a01      	ldr	r2, [sp, #4]
 8002330:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800233c:	ed95 7a00 	vldr	s14, [r5]
 8002340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002344:	edc5 7a00 	vstr	s15, [r5]

  /* Do some sanity check */
  if ((Syy < 0) || (Sxx < 0) || (See < 0)
 8002348:	eef5 aac0 	vcmpe.f32	s21, #0.0
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	d41a      	bmi.n	8002388 <Echo_cancellation+0xb94>
 8002352:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8002356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235a:	d415      	bmi.n	8002388 <Echo_cancellation+0xb94>
 800235c:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002364:	d410      	bmi.n	8002388 <Echo_cancellation+0xb94>
    #ifndef FIXED_POINT
      || (Sff >= N * 1e9) || (Syy >= N * 1e9) || (Sxx >= N * 1e9)
 8002366:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8002268 <Echo_cancellation+0xa74>
 800236a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	da09      	bge.n	8002388 <Echo_cancellation+0xb94>
 8002374:	eef4 aae7 	vcmpe.f32	s21, s15
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	da04      	bge.n	8002388 <Echo_cancellation+0xb94>
 800237e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	db36      	blt.n	80023f6 <Echo_cancellation+0xc02>
    #endif
     )
  {
    /* Things have gone really bad */
    st->screwed_up += 50;
 8002388:	69a3      	ldr	r3, [r4, #24]
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	61a3      	str	r3, [r4, #24]
    for (i = 0; i < (st->frame_size * C); i++)
 800238e:	2300      	movs	r3, #0
 8002390:	9905      	ldr	r1, [sp, #20]
 8002392:	e003      	b.n	800239c <Echo_cancellation+0xba8>
    {
      out[i] = 0;
 8002394:	2200      	movs	r2, #0
 8002396:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (i = 0; i < (st->frame_size * C); i++)
 800239a:	3301      	adds	r3, #1
 800239c:	6822      	ldr	r2, [r4, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	dcf8      	bgt.n	8002394 <Echo_cancellation+0xba0>
  else
  {
    /* Everything's fine */
    st->screwed_up = 0;
  }
  if (st->screwed_up >= 50)
 80023a2:	69a3      	ldr	r3, [r4, #24]
 80023a4:	2b31      	cmp	r3, #49	; 0x31
 80023a6:	dc36      	bgt.n	8002416 <Echo_cancellation+0xc22>
    Echo_state_reset(st);
  }
  else
  {
    /* Add a small noise floor to make sure not to have problems when dividing */
    See = MAX32(See, SHR32(MULT16_16(N, 100), 6));
 80023a8:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800226c <Echo_cancellation+0xa78>
 80023ac:	eeb4 bae7 	vcmpe.f32	s22, s15
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	dc01      	bgt.n	80023ba <Echo_cancellation+0xbc6>
 80023b6:	eeb0 ba67 	vmov.f32	s22, s15
    Sxx += mdf_inner_prod(st->x + st->frame_size, st->x + st->frame_size, st->frame_size);
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023be:	eb03 0082 	add.w	r0, r3, r2, lsl #2
  spx_word32_t sum = 0.0f;
 80023c2:	2300      	movs	r3, #0
 80023c4:	930b      	str	r3, [sp, #44]	; 0x2c
  arm_dot_prod_f32((float32_t *)x, (float32_t *)y, (uint32_t)len, &sum);
 80023c6:	ab0b      	add	r3, sp, #44	; 0x2c
 80023c8:	4601      	mov	r1, r0
 80023ca:	f00a f9cd 	bl	800c768 <arm_dot_prod_f32>
  return sum;
 80023ce:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
    Sxx += mdf_inner_prod(st->x + st->frame_size, st->x + st->frame_size, st->frame_size);
 80023d2:	ee3a 8a08 	vadd.f32	s16, s20, s16
    power_spectrum_accum(st->X, st->Xf, N);
 80023d6:	f8d4 583c 	ldr.w	r5, [r4, #2108]	; 0x83c
  ps[0] += MULT16_16(X[0], X[0]);
 80023da:	edd5 7a00 	vldr	s15, [r5]
 80023de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023e2:	9e04      	ldr	r6, [sp, #16]
 80023e4:	ed96 7a00 	vldr	s14, [r6]
 80023e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ec:	edc6 7a00 	vstr	s15, [r6]
  int32_t j = 1;
 80023f0:	2101      	movs	r1, #1
  for (i = 1; i < (N - 1); i += 2)
 80023f2:	460b      	mov	r3, r1
 80023f4:	e02c      	b.n	8002450 <Echo_cancellation+0xc5c>
  else if (SHR32(Sff, 2) > ADD32(Sdd, SHR32(MULT16_16(N, 10000), 6)))
 80023f6:	ed5f 7a62 	vldr	s15, [pc, #-392]	; 8002270 <Echo_cancellation+0xa7c>
 80023fa:	ee3c ca27 	vadd.f32	s24, s24, s15
 80023fe:	eeb4 cac8 	vcmpe.f32	s24, s16
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	d503      	bpl.n	8002410 <Echo_cancellation+0xc1c>
    st->screwed_up++;
 8002408:	69a3      	ldr	r3, [r4, #24]
 800240a:	3301      	adds	r3, #1
 800240c:	61a3      	str	r3, [r4, #24]
 800240e:	e7c8      	b.n	80023a2 <Echo_cancellation+0xbae>
    st->screwed_up = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	61a3      	str	r3, [r4, #24]
 8002414:	e7c5      	b.n	80023a2 <Echo_cancellation+0xbae>
    Echo_state_reset(st);
 8002416:	4620      	mov	r0, r4
 8002418:	f7ff f81a 	bl	8001450 <Echo_state_reset>
 800241c:	e1d1      	b.n	80027c2 <Echo_cancellation+0xfce>
    ps[j] +=  MULT16_16(X[i], X[i]) + MULT16_16(X[i + 1], X[i + 1]);
 800241e:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 8002422:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8002426:	edd2 7a00 	vldr	s15, [r2]
 800242a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002434:	ed92 7a00 	vldr	s14, [r2]
 8002438:	ee27 7a07 	vmul.f32	s14, s14, s14
 800243c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002440:	ed90 7a00 	vldr	s14, [r0]
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	edc0 7a00 	vstr	s15, [r0]
    j++;
 800244c:	3101      	adds	r1, #1
  for (i = 1; i < (N - 1); i += 2)
 800244e:	3302      	adds	r3, #2
 8002450:	2bfe      	cmp	r3, #254	; 0xfe
 8002452:	dde4      	ble.n	800241e <Echo_cancellation+0xc2a>
  if (i < N)
 8002454:	2bff      	cmp	r3, #255	; 0xff
 8002456:	dc0e      	bgt.n	8002476 <Echo_cancellation+0xc82>
    ps[j] += MULT16_16(X[i], X[i]);
 8002458:	9a04      	ldr	r2, [sp, #16]
 800245a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800245e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8002462:	edd5 7a00 	vldr	s15, [r5]
 8002466:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800246a:	ed92 7a00 	vldr	s14, [r2]
 800246e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002472:	edc2 7a00 	vstr	s15, [r2]
    /* Smooth far end energy estimate over time */
    for (j = 0; j <= st->frame_size; j++)
 8002476:	2300      	movs	r3, #0
}
 8002478:	e018      	b.n	80024ac <Echo_cancellation+0xcb8>
    {
      st->power[j] = MULT16_32_Q15(ss_1, st->power[j]) + 1.0f + MULT16_32_Q15(ss, st->Xf[j]);
 800247a:	f203 7296 	addw	r2, r3, #1942	; 0x796
 800247e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002482:	edd2 7a00 	vldr	s15, [r2]
 8002486:	ee67 7a89 	vmul.f32	s15, s15, s18
 800248a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800248e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002492:	f603 211a 	addw	r1, r3, #2586	; 0xa1a
 8002496:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800249a:	ed91 7a00 	vldr	s14, [r1]
 800249e:	ee27 7a28 	vmul.f32	s14, s14, s17
 80024a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a6:	edc2 7a00 	vstr	s15, [r2]
    for (j = 0; j <= st->frame_size; j++)
 80024aa:	3301      	adds	r3, #1
 80024ac:	6825      	ldr	r5, [r4, #0]
 80024ae:	429d      	cmp	r5, r3
 80024b0:	dae3      	bge.n	800247a <Echo_cancellation+0xc86>
    }
    /* Compute filtered spectra and (cross-)correlations */
    for (j = st->frame_size; j >= 0; j--)
 80024b2:	462b      	mov	r3, r5
  spx_float_t Pey = FLOAT_ONE, Pyy = FLOAT_ONE;
 80024b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024b8:	eef0 8a40 	vmov.f32	s17, s0
 80024bc:	e03a      	b.n	8002534 <Echo_cancellation+0xd40>
    {
      spx_float_t Eh, Yh;
      Eh = PSEUDOFLOAT(st->Rf[j] - st->Eh[j]);
 80024be:	f603 1218 	addw	r2, r3, #2328	; 0x918
 80024c2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80024c6:	edd2 5a00 	vldr	s11, [r2]
 80024ca:	f603 219a 	addw	r1, r3, #2714	; 0xa9a
 80024ce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80024d2:	ed91 7a01 	vldr	s14, [r1, #4]
 80024d6:	ee35 5ac7 	vsub.f32	s10, s11, s14
      Yh = PSEUDOFLOAT(st->Yf[j] - st->Yh[j]);
 80024da:	f603 1298 	addw	r2, r3, #2456	; 0x998
 80024de:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80024e2:	ed92 6a01 	vldr	s12, [r2, #4]
 80024e6:	f603 321c 	addw	r2, r3, #2844	; 0xb1c
 80024ea:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80024ee:	edd2 7a00 	vldr	s15, [r2]
 80024f2:	ee76 6a67 	vsub.f32	s13, s12, s15
      Pey = FLOAT_ADD(Pey, FLOAT_MULT(Eh, Yh));
 80024f6:	ee25 5a26 	vmul.f32	s10, s10, s13
 80024fa:	ee78 8a85 	vadd.f32	s17, s17, s10
      Pyy = FLOAT_ADD(Pyy, FLOAT_MULT(Yh, Yh));
 80024fe:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002502:	ee30 0a26 	vadd.f32	s0, s0, s13
      #ifdef FIXED_POINT
      st->Eh[j] = MAC16_32_Q15(MULT16_32_Q15(SUB16(32767, st->spec_average), st->Eh[j]), st->spec_average, st->Rf[j]);
      st->Yh[j] = MAC16_32_Q15(MULT16_32_Q15(SUB16(32767, st->spec_average), st->Yh[j]), st->spec_average, st->Yf[j]);
      #else
      st->Eh[j] = ((1.0f - st->spec_average) * st->Eh[j]) + (st->spec_average * st->Rf[j]);
 8002506:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 800250a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8002512:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002516:	ee65 5a85 	vmul.f32	s11, s11, s10
 800251a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800251e:	ed81 7a01 	vstr	s14, [r1, #4]
      st->Yh[j] = ((1.0f - st->spec_average) * st->Yh[j]) + (st->spec_average * st->Yf[j]);
 8002522:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002526:	ee26 6a05 	vmul.f32	s12, s12, s10
 800252a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800252e:	edc2 7a00 	vstr	s15, [r2]
    for (j = st->frame_size; j >= 0; j--)
 8002532:	3b01      	subs	r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	dac2      	bge.n	80024be <Echo_cancellation+0xcca>
    if (in >= 0.0f)
 8002538:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	f2c0 80c4 	blt.w	80026cc <Echo_cancellation+0xed8>
      *pOut = __builtin_sqrtf(in);
 8002544:	f00a fd20 	bl	800cf88 <sqrtf>
 8002548:	eeb0 6a40 	vmov.f32	s12, s0
      #endif
    }

    Pyy = FLOAT_SQRT(Pyy);
    Pey = FLOAT_DIVU(Pey, Pyy);
 800254c:	eec8 5a86 	vdiv.f32	s11, s17, s12

    /* Compute correlation updatete rate */
    tmp32 = MULT16_32_Q15(st->beta0, Syy);
 8002550:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8002554:	ee27 7a2a 	vmul.f32	s14, s14, s21
    if (tmp32 > MULT16_32_Q15(st->beta_max, See))
 8002558:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800255c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8002560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002568:	d401      	bmi.n	800256e <Echo_cancellation+0xd7a>
    tmp32 = MULT16_32_Q15(st->beta0, Syy);
 800256a:	eef0 7a47 	vmov.f32	s15, s14
    {
      tmp32 = MULT16_32_Q15(st->beta_max, See);
    }
    alpha = FLOAT_DIV32(tmp32, See);
 800256e:	eec7 6a8b 	vdiv.f32	s13, s15, s22
    alpha_1 = FLOAT_SUB(FLOAT_ONE, alpha);
 8002572:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002576:	ee75 4a66 	vsub.f32	s9, s10, s13
    /* Update correlations (recursive average) */
    st->Pey = FLOAT_ADD(FLOAT_MULT(alpha_1, st->Pey), FLOAT_MULT(alpha, Pey));
 800257a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 800257e:	f603 6274 	addw	r2, r3, #3700	; 0xe74
 8002582:	edd2 7a00 	vldr	s15, [r2]
 8002586:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800258a:	ee25 7aa6 	vmul.f32	s14, s11, s13
 800258e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002592:	edc2 7a00 	vstr	s15, [r2]
    st->Pyy = FLOAT_ADD(FLOAT_MULT(alpha_1, st->Pyy), FLOAT_MULT(alpha, Pyy));
 8002596:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 800259a:	ed93 7a00 	vldr	s14, [r3]
 800259e:	ee27 7a24 	vmul.f32	s14, s14, s9
 80025a2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80025a6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80025aa:	ed83 7a00 	vstr	s14, [r3]
    if (FLOAT_LT(st->Pyy, FLOAT_ONE))
 80025ae:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80025b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b6:	f100 808c 	bmi.w	80026d2 <Echo_cancellation+0xede>
    {
      st->Pyy = FLOAT_ONE;
    }
    /* We don't really hope to get better than 33 dB (MIN_LEAK-3dB) attenuation anyway */
    if (FLOAT_LT(st->Pey, FLOAT_MULT(MIN_LEAK, st->Pyy)))
 80025ba:	f504 5339 	add.w	r3, r4, #11840	; 0x2e40
 80025be:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80025c2:	ed5f 6ad4 	vldr	s13, [pc, #-848]	; 8002274 <Echo_cancellation+0xa80>
 80025c6:	ee67 6a26 	vmul.f32	s13, s14, s13
 80025ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	d503      	bpl.n	80025dc <Echo_cancellation+0xde8>
    {
      st->Pey = FLOAT_MULT(MIN_LEAK, st->Pyy);
 80025d4:	f504 5339 	add.w	r3, r4, #11840	; 0x2e40
 80025d8:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
    }
    if (FLOAT_GT(st->Pey, st->Pyy))
 80025dc:	f504 5339 	add.w	r3, r4, #11840	; 0x2e40
 80025e0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80025e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	d503      	bpl.n	80025f6 <Echo_cancellation+0xe02>
    {
      st->Pey = st->Pyy;
 80025ee:	f504 5339 	add.w	r3, r4, #11840	; 0x2e40
 80025f2:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
    }
    /* leak_estimate is the linear regression result */
    st->leak_estimate = FLOAT_EXTRACT16(FLOAT_SHL(FLOAT_DIVU(st->Pey, st->Pyy), 14));
 80025f6:	f504 5339 	add.w	r3, r4, #11840	; 0x2e40
 80025fa:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80025fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002602:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    /* This looks like a stupid bug, but it's right (because we convert from Q14 to Q15) */
    if (st->leak_estimate > 16383.0f)
 8002606:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002808 <Echo_cancellation+0x1014>
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	dd01      	ble.n	8002618 <Echo_cancellation+0xe24>
    {
      st->leak_estimate = 32767.0f;
 8002614:	4b7d      	ldr	r3, [pc, #500]	; (800280c <Echo_cancellation+0x1018>)
 8002616:	63a3      	str	r3, [r4, #56]	; 0x38
    {
      tmp32 = SHR32(See, 1);
    }
    RER = FLOAT_EXTRACT16(FLOAT_SHL(FLOAT_DIV32(tmp32, See), 15));
    #else
    RER = ((.0001f * Sxx) + (3.0f * MULT16_32_Q15(st->leak_estimate, Syy))) / See;
 8002618:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8002810 <Echo_cancellation+0x101c>
 800261c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002620:	edd4 5a0e 	vldr	s11, [r4, #56]	; 0x38
 8002624:	ee65 6aaa 	vmul.f32	s13, s11, s21
 8002628:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800262c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002634:	ee87 7a8b 	vdiv.f32	s14, s15, s22
    /* Check for y in e (lower bound on RER) */
    if (RER < (Sey * Sey / (1.0f + (See * Syy))))
 8002638:	ee6b baab 	vmul.f32	s23, s23, s23
 800263c:	ee6b 7a2a 	vmul.f32	s15, s22, s21
 8002640:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002644:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002648:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800264c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	dc01      	bgt.n	800265a <Echo_cancellation+0xe66>
    RER = ((.0001f * Sxx) + (3.0f * MULT16_32_Q15(st->leak_estimate, Syy))) / See;
 8002656:	eeb0 6a47 	vmov.f32	s12, s14
    {
      RER = Sey * Sey / (1.0f + (See * Syy));
    }
    if (RER > 0.5f)
 800265a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800265e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	dd01      	ble.n	800266c <Echo_cancellation+0xe78>
    {
      RER = .5f;
 8002668:	eeb0 6a67 	vmov.f32	s12, s15
    }
    #endif

    /* We consider that the filter has had minimal adaptation if the following is true*/
    if ((st->adapted != 1) && (st->sum_adapt > SHL32(EXTEND32(M), 15)) && (MULT16_32_Q15(st->leak_estimate, Syy) > MULT16_32_Q15(QCONST16(.03f, 15), Syy)))
 800266c:	6923      	ldr	r3, [r4, #16]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d011      	beq.n	8002696 <Echo_cancellation+0xea2>
 8002672:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8002676:	eef4 9ae7 	vcmpe.f32	s19, s15
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	d50a      	bpl.n	8002696 <Echo_cancellation+0xea2>
 8002680:	eddf 7a64 	vldr	s15, [pc, #400]	; 8002814 <Echo_cancellation+0x1020>
 8002684:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8002688:	eef4 6aea 	vcmpe.f32	s13, s21
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	dd01      	ble.n	8002696 <Echo_cancellation+0xea2>
    {
      st->adapted = 1;
 8002692:	2301      	movs	r3, #1
 8002694:	6123      	str	r3, [r4, #16]
    }

    if (st->adapted == 1)
 8002696:	6921      	ldr	r1, [r4, #16]
 8002698:	2901      	cmp	r1, #1
 800269a:	d060      	beq.n	800275e <Echo_cancellation+0xf6a>
    else
    {
      /* Temporary adaption rate if filter is not yet adapted enough */
      spx_word16_t adapt_rate = 0.0f;

      if (Sxx > SHR32(MULT16_16(N, 1000), 6))
 800269c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8002818 <Echo_cancellation+0x1024>
 80026a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	dd5b      	ble.n	8002762 <Echo_cancellation+0xf6e>
      {
        tmp32 = MULT16_32_Q15(QCONST16(.25f, 15), Sxx);
 80026aa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80026ae:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (tmp32 > SHR32(See, 2))
        {
          tmp32 = SHR32(See, 2);
        }
        #else
        if (tmp32 > (.25f * See))
 80026b2:	ee6b 7a27 	vmul.f32	s15, s22, s15
 80026b6:	eef4 7ac8 	vcmpe.f32	s15, s16
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	d401      	bmi.n	80026c4 <Echo_cancellation+0xed0>
        tmp32 = MULT16_32_Q15(QCONST16(.25f, 15), Sxx);
 80026c0:	eef0 7a48 	vmov.f32	s15, s16
        {
          tmp32 = .25f * See;
        }
        #endif
        adapt_rate = FLOAT_EXTRACT16(FLOAT_SHL(FLOAT_DIV32(tmp32, See), 15));
 80026c4:	eec7 6a8b 	vdiv.f32	s13, s15, s22
      }
      for (i = 0; i <= st->frame_size; i++)
 80026c8:	2300      	movs	r3, #0
 80026ca:	e060      	b.n	800278e <Echo_cancellation+0xf9a>
      *pOut = 0.0f;
 80026cc:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800281c <Echo_cancellation+0x1028>
 80026d0:	e73c      	b.n	800254c <Echo_cancellation+0xd58>
      st->Pyy = FLOAT_ONE;
 80026d2:	f504 5339 	add.w	r3, r4, #11840	; 0x2e40
 80026d6:	ed83 5a0e 	vstr	s10, [r3, #56]	; 0x38
 80026da:	e76e      	b.n	80025ba <Echo_cancellation+0xdc6>
        r = MULT16_32_Q15(QCONST16(0.7f, 15), r) + MULT16_32_Q15(QCONST16(0.3f, 15), (spx_word32_t)(MULT16_32_Q15(RER, e)));
 80026dc:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002820 <Echo_cancellation+0x102c>
 80026e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e4:	ee26 7a26 	vmul.f32	s14, s12, s13
 80026e8:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 8002824 <Echo_cancellation+0x1030>
 80026ec:	ee27 7a05 	vmul.f32	s14, s14, s10
 80026f0:	ee77 7a87 	vadd.f32	s15, s15, s14
        st->power_1[i] = FLOAT_SHL(FLOAT_DIV32_FLOAT(r, FLOAT_MUL32U(e, st->power[i] + 10.0f)), WEIGHT_SHIFT + 16);
 80026f4:	f203 7296 	addw	r2, r3, #1942	; 0x796
 80026f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80026fc:	ed92 7a00 	vldr	s14, [r2]
 8002700:	eeb2 5a04 	vmov.f32	s10, #36	; 0x41200000  10.0
 8002704:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002708:	ee27 7a26 	vmul.f32	s14, s14, s13
 800270c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002710:	f603 0216 	addw	r2, r3, #2070	; 0x816
 8002714:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002718:	edc2 6a01 	vstr	s13, [r2, #4]
      for (i = 0; i <= st->frame_size; i++)
 800271c:	3301      	adds	r3, #1
 800271e:	429d      	cmp	r5, r3
 8002720:	db3d      	blt.n	800279e <Echo_cancellation+0xfaa>
        r = MULT16_32_Q15(st->leak_estimate, SHL32(st->Yf[i], 3));
 8002722:	f603 1298 	addw	r2, r3, #2456	; 0x998
 8002726:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800272a:	ed92 7a01 	vldr	s14, [r2, #4]
 800272e:	ee25 7a87 	vmul.f32	s14, s11, s14
        e = SHL32(st->Rf[i], 3) + 1.0f;
 8002732:	f603 1218 	addw	r2, r3, #2328	; 0x918
 8002736:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800273a:	edd2 6a00 	vldr	s13, [r2]
 800273e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002742:	ee76 6aa7 	vadd.f32	s13, s13, s15
        if (r > (0.5f * e))
 8002746:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800274a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	d4c1      	bmi.n	80026dc <Echo_cancellation+0xee8>
        r = MULT16_32_Q15(st->leak_estimate, SHL32(st->Yf[i], 3));
 8002758:	eef0 7a47 	vmov.f32	s15, s14
 800275c:	e7be      	b.n	80026dc <Echo_cancellation+0xee8>
      for (i = 0; i <= st->frame_size; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	e7dd      	b.n	800271e <Echo_cancellation+0xf2a>
      spx_word16_t adapt_rate = 0.0f;
 8002762:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800281c <Echo_cancellation+0x1028>
 8002766:	e7af      	b.n	80026c8 <Echo_cancellation+0xed4>
      {
        st->power_1[i] = FLOAT_SHL(FLOAT_DIV32(EXTEND32(adapt_rate), ADD32(st->power[i], 10.0f)), WEIGHT_SHIFT + 1);
 8002768:	f203 7296 	addw	r2, r3, #1942	; 0x796
 800276c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002770:	edd2 7a00 	vldr	s15, [r2]
 8002774:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800277c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002780:	f603 0216 	addw	r2, r3, #2070	; 0x816
 8002784:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002788:	ed82 7a01 	vstr	s14, [r2, #4]
      for (i = 0; i <= st->frame_size; i++)
 800278c:	3301      	adds	r3, #1
 800278e:	429d      	cmp	r5, r3
 8002790:	daea      	bge.n	8002768 <Echo_cancellation+0xf74>
      }
      /* How much have we adapted so far? */
      st->sum_adapt = ADD32(st->sum_adapt, adapt_rate);
 8002792:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8002796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
      for (i = 0; i <= st->frame_size; i++)
 800279e:	2200      	movs	r2, #0
 80027a0:	e00b      	b.n	80027ba <Echo_cancellation+0xfc6>
    }
    /* FIXME: MC conversion required */
    for (i = 0; i < st->frame_size; i++)
    {
      st->last_y[i] = st->last_y[st->frame_size + i];
 80027a2:	18ab      	adds	r3, r5, r2
 80027a4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80027a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	f502 7364 	add.w	r3, r2, #912	; 0x390
 80027b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80027b6:	6018      	str	r0, [r3, #0]
    for (i = 0; i < st->frame_size; i++)
 80027b8:	3201      	adds	r2, #1
 80027ba:	4295      	cmp	r5, r2
 80027bc:	dcf1      	bgt.n	80027a2 <Echo_cancellation+0xfae>
    }
    if (st->adapted == 1)
 80027be:	2901      	cmp	r1, #1
 80027c0:	d01d      	beq.n	80027fe <Echo_cancellation+0x100a>
      {
        st->last_y[st->frame_size + i] = (float32_t)in[i] - (float32_t)out[i];
      }
    }
  }
}
 80027c2:	b00d      	add	sp, #52	; 0x34
 80027c4:	ecbd 8b0a 	vpop	{d8-d12}
 80027c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        st->last_y[st->frame_size + i] = (float32_t)in[i] - (float32_t)out[i];
 80027cc:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80027d0:	ee07 2a90 	vmov	s15, r2
 80027d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d8:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 80027dc:	ee07 2a10 	vmov	s14, r2
 80027e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027e4:	18ea      	adds	r2, r5, r3
 80027e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027ea:	f502 7264 	add.w	r2, r2, #912	; 0x390
 80027ee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80027f2:	edc2 7a00 	vstr	s15, [r2]
      for (i = 0; i < st->frame_size; i++)
 80027f6:	3301      	adds	r3, #1
 80027f8:	429d      	cmp	r5, r3
 80027fa:	dce7      	bgt.n	80027cc <Echo_cancellation+0xfd8>
 80027fc:	e7e1      	b.n	80027c2 <Echo_cancellation+0xfce>
 80027fe:	2300      	movs	r3, #0
 8002800:	9907      	ldr	r1, [sp, #28]
 8002802:	9805      	ldr	r0, [sp, #20]
 8002804:	e7f8      	b.n	80027f8 <Echo_cancellation+0x1004>
 8002806:	bf00      	nop
 8002808:	467ffc00 	.word	0x467ffc00
 800280c:	46fffe00 	.word	0x46fffe00
 8002810:	38d1b717 	.word	0x38d1b717
 8002814:	3cf5c28f 	.word	0x3cf5c28f
 8002818:	487a0000 	.word	0x487a0000
 800281c:	00000000 	.word	0x00000000
 8002820:	3f333333 	.word	0x3f333333
 8002824:	3e99999a 	.word	0x3e99999a

08002828 <Echo_get_residual>:

/* Compute spectrum of estimated echo for use in an echo post-filter */
void Echo_get_residual(SpeexEchoState *st, spx_word32_t *residual_echo, int len)
{
 8002828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800282c:	4604      	mov	r4, r0
 800282e:	460d      	mov	r5, r1
  //UNUSED(len);
  int32_t i;
  spx_word16_t leak2;
  int32_t N;
  N = st->window_size;
 8002830:	6846      	ldr	r6, [r0, #4]
  /* Apply hanning window (should pre-compute it)*/
  arm_mult_f32(st->window, st->last_y, st->y, (uint32_t)N);
 8002832:	f500 6824 	add.w	r8, r0, #2624	; 0xa40
 8002836:	4633      	mov	r3, r6
 8002838:	4642      	mov	r2, r8
 800283a:	f500 6164 	add.w	r1, r0, #3648	; 0xe40
 800283e:	f500 5039 	add.w	r0, r0, #11840	; 0x2e40
 8002842:	303c      	adds	r0, #60	; 0x3c
 8002844:	f009 ff36 	bl	800c6b4 <arm_mult_f32>
  /* Compute power spectrum of the echo */
  libSpeexAEC_fft(st->fft_table, st->y, st->Y);
 8002848:	f504 5792 	add.w	r7, r4, #4672	; 0x1240
 800284c:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8002850:	463a      	mov	r2, r7
 8002852:	4641      	mov	r1, r8
 8002854:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8002858:	f7fe fdb4 	bl	80013c4 <libSpeexAEC_fft>
  ps[0] += X[0] * X[0];
 800285c:	4638      	mov	r0, r7
 800285e:	ecf0 7a01 	vldmia	r0!, {s15}
 8002862:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002866:	ed95 7a00 	vldr	s14, [r5]
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	4629      	mov	r1, r5
 8002870:	ece1 7a01 	vstmia	r1!, {s15}
  arm_cmplx_mag_squared_f32((float32_t *)&X[1], &ps[1], ((uint32_t)N / 2U) - 1U);
 8002874:	0872      	lsrs	r2, r6, #1
 8002876:	3a01      	subs	r2, #1
 8002878:	f009 feac 	bl	800c5d4 <arm_cmplx_mag_squared_f32>
  ps[(N / 2) - 1] += X[N - 1] * X[N - 1];
 800287c:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 8002880:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002884:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8002888:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800288c:	4416      	add	r6, r2
 800288e:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 8002892:	edd7 7a00 	vldr	s15, [r7]
 8002896:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800289a:	ed93 7a00 	vldr	s14, [r3]
 800289e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a2:	edc3 7a00 	vstr	s15, [r3]
  power_spectrum(st->Y, residual_echo, N);

  if (st->leak_estimate > 0.5f)
 80028a6:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 80028aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80028ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	dc03      	bgt.n	80028c0 <Echo_get_residual+0x98>
  {
    leak2 = 1.0f;
  }
  else
  {
    leak2 = 2.0f * st->leak_estimate;
 80028b8:	ee37 7a07 	vadd.f32	s14, s14, s14
  }

  /* Estimate residual echo */
  for (i = 0; i <= st->frame_size; i++)
 80028bc:	2300      	movs	r3, #0
 80028be:	e00b      	b.n	80028d8 <Echo_get_residual+0xb0>
    leak2 = 1.0f;
 80028c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028c4:	e7fa      	b.n	80028bc <Echo_get_residual+0x94>
  {
    residual_echo[i] = MULT16_32_Q15(leak2, residual_echo[i]);
 80028c6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80028ca:	edd2 7a00 	vldr	s15, [r2]
 80028ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d2:	edc2 7a00 	vstr	s15, [r2]
  for (i = 0; i <= st->frame_size; i++)
 80028d6:	3301      	adds	r3, #1
 80028d8:	6822      	ldr	r2, [r4, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	daf3      	bge.n	80028c6 <Echo_get_residual+0x9e>
  }
}
 80028de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080028e4 <Echo_ctrl>:

int Echo_ctrl(SpeexEchoState *st, int request, void *ptr)
{
 80028e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028e8:	4605      	mov	r5, r0
 80028ea:	4617      	mov	r7, r2
  int ret = 0;
  switch (request)
 80028ec:	3903      	subs	r1, #3
 80028ee:	291a      	cmp	r1, #26
 80028f0:	f200 808c 	bhi.w	8002a0c <Echo_ctrl+0x128>
 80028f4:	e8df f001 	tbb	[pc, r1]
 80028f8:	8a8a8a0e 	.word	0x8a8a8a0e
 80028fc:	8a8a8a8a 	.word	0x8a8a8a8a
 8002900:	8a8a8a8a 	.word	0x8a8a8a8a
 8002904:	8a8a8a8a 	.word	0x8a8a8a8a
 8002908:	8a8a8a8a 	.word	0x8a8a8a8a
 800290c:	8a4b128a 	.word	0x8a4b128a
 8002910:	8a4f      	.short	0x8a4f
 8002912:	56          	.byte	0x56
 8002913:	00          	.byte	0x00
  {
    case SPEEX_ECHO_GET_FRAME_SIZE:
      (*(int *)ptr) = st->frame_size;
 8002914:	6803      	ldr	r3, [r0, #0]
 8002916:	6013      	str	r3, [r2, #0]
  int ret = 0;
 8002918:	2000      	movs	r0, #0
      break;
 800291a:	e079      	b.n	8002a10 <Echo_ctrl+0x12c>
    case SPEEX_ECHO_SET_SAMPLING_RATE:
      st->sampling_rate = (*(int *)ptr);
 800291c:	6813      	ldr	r3, [r2, #0]
 800291e:	6243      	str	r3, [r0, #36]	; 0x24
      st->spec_average = DIV32_16(SHL32(EXTEND32(st->frame_size), 15), st->sampling_rate);
 8002920:	edd0 7a00 	vldr	s15, [r0]
 8002924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002928:	ee07 3a10 	vmov	s14, r3
 800292c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002930:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002934:	edc0 6a0a 	vstr	s13, [r0, #40]	; 0x28
      #ifdef FIXED_POINT
      st->beta0 = DIV32_16(SHL32(EXTEND32(st->frame_size), 16), st->sampling_rate);
      st->beta_max = DIV32_16(SHL32(EXTEND32(st->frame_size), 14), st->sampling_rate);
      #else
      st->beta0 = (2.0f * st->frame_size) / st->sampling_rate;
 8002938:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800293c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002940:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
      st->beta_max = (.5f * st->frame_size) / st->sampling_rate;
 8002944:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002948:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800294c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002950:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
      #endif
      if (st->sampling_rate < 12000)
 8002954:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002958:	4293      	cmp	r3, r2
 800295a:	dc06      	bgt.n	800296a <Echo_ctrl+0x86>
      {
        st->notch_radius = QCONST16(.9f, 15);
 800295c:	f500 5540 	add.w	r5, r0, #12288	; 0x3000
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <Echo_ctrl+0x130>)
 8002962:	f8c5 3294 	str.w	r3, [r5, #660]	; 0x294
  int ret = 0;
 8002966:	2000      	movs	r0, #0
 8002968:	e052      	b.n	8002a10 <Echo_ctrl+0x12c>
      }
      else if (st->sampling_rate < 24000)
 800296a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800296e:	4293      	cmp	r3, r2
 8002970:	dc06      	bgt.n	8002980 <Echo_ctrl+0x9c>
      {
        st->notch_radius = QCONST16(.982f, 15);
 8002972:	f500 5540 	add.w	r5, r0, #12288	; 0x3000
 8002976:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <Echo_ctrl+0x134>)
 8002978:	f8c5 3294 	str.w	r3, [r5, #660]	; 0x294
  int ret = 0;
 800297c:	2000      	movs	r0, #0
 800297e:	e047      	b.n	8002a10 <Echo_ctrl+0x12c>
      }
      else
      {
        st->notch_radius = QCONST16(.992f, 15);
 8002980:	f500 5540 	add.w	r5, r0, #12288	; 0x3000
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <Echo_ctrl+0x138>)
 8002986:	f8c5 3294 	str.w	r3, [r5, #660]	; 0x294
  int ret = 0;
 800298a:	2000      	movs	r0, #0
 800298c:	e040      	b.n	8002a10 <Echo_ctrl+0x12c>
      }
      break;
    case SPEEX_ECHO_GET_SAMPLING_RATE:
      (*(int *)ptr) = st->sampling_rate;
 800298e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002990:	6013      	str	r3, [r2, #0]
  int ret = 0;
 8002992:	2000      	movs	r0, #0
      break;
 8002994:	e03c      	b.n	8002a10 <Echo_ctrl+0x12c>
    case SPEEX_ECHO_GET_IMPULSE_RESPONSE_SIZE:
      /*FIXME: Implement this for multiple channels */
      *((spx_int32_t *)ptr) = st->M * st->frame_size;
 8002996:	6883      	ldr	r3, [r0, #8]
 8002998:	6802      	ldr	r2, [r0, #0]
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	603b      	str	r3, [r7, #0]
  int ret = 0;
 80029a0:	2000      	movs	r0, #0
      break;
 80029a2:	e035      	b.n	8002a10 <Echo_ctrl+0x12c>
    case SPEEX_ECHO_GET_IMPULSE_RESPONSE:
    {
      int M = st->M, N = st->window_size, n = st->frame_size, i, j;
 80029a4:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80029a8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80029ac:	6804      	ldr	r4, [r0, #0]
      spx_int32_t *filt = (spx_int32_t *) ptr;
      for (j = 0; j < M; j++)
 80029ae:	2600      	movs	r6, #0
 80029b0:	e015      	b.n	80029de <Echo_ctrl+0xfa>
        #else
        libSpeexAEC_ifft((drft_lookup *)st->fft_table, &st->W[j * N], st->wtmp);
        #endif
        for (i = 0; i < n; i++)
        {
          filt[j * n + i] = (spx_int32_t)PSHR32(MULT16_16(32767, st->wtmp[i]), WEIGHT_SHIFT - NORMALIZE_SCALEDOWN);
 80029b2:	f603 0298 	addw	r2, r3, #2200	; 0x898
 80029b6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80029ba:	edd2 7a00 	vldr	s15, [r2]
 80029be:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002a20 <Echo_ctrl+0x13c>
 80029c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c6:	fb04 3206 	mla	r2, r4, r6, r3
 80029ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ce:	ee17 1a90 	vmov	r1, s15
 80029d2:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
        for (i = 0; i < n; i++)
 80029d6:	3301      	adds	r3, #1
 80029d8:	42a3      	cmp	r3, r4
 80029da:	dbea      	blt.n	80029b2 <Echo_ctrl+0xce>
      for (j = 0; j < M; j++)
 80029dc:	3601      	adds	r6, #1
 80029de:	4546      	cmp	r6, r8
 80029e0:	da12      	bge.n	8002a08 <Echo_ctrl+0x124>
        libSpeexAEC_ifft((drft_lookup *)st->fft_table, &st->W[j * N], st->wtmp);
 80029e2:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 80029e6:	f8d3 0e40 	ldr.w	r0, [r3, #3648]	; 0xe40
 80029ea:	fb09 f106 	mul.w	r1, r9, r6
 80029ee:	f505 5340 	add.w	r3, r5, #12288	; 0x3000
 80029f2:	f505 5209 	add.w	r2, r5, #8768	; 0x2240
 80029f6:	3220      	adds	r2, #32
 80029f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80029fc:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
 8002a00:	f7fe fcfe 	bl	8001400 <libSpeexAEC_ifft>
        for (i = 0; i < n; i++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	e7e7      	b.n	80029d8 <Echo_ctrl+0xf4>
  int ret = 0;
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e001      	b.n	8002a10 <Echo_ctrl+0x12c>
  switch (request)
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
    default:
      ret = -1;
      break;
  }
  return ret;
}
 8002a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a14:	3f666666 	.word	0x3f666666
 8002a18:	3f7b645a 	.word	0x3f7b645a
 8002a1c:	3f7df3b6 	.word	0x3f7df3b6
 8002a20:	46fffe00 	.word	0x46fffe00
 8002a24:	00000000 	.word	0x00000000

08002a28 <filterbank_new>:
#define toBARK(n)   ((13.1f*atan(.00074f*(n))) + (2.24f*atan((n)*(n)*1.85e-8f)) + (1e-4f*(n)))
#define toMEL(n)    (2595.f*log10(1.f+(n)/700.f))


void filterbank_new(FilterBank *bank, int32_t banks, spx_word32_t sampling, int32_t len, int32_t type)
{
 8002a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2c:	ed2d 8b04 	vpush	{d8-d9}
 8002a30:	4604      	mov	r4, r0
 8002a32:	468a      	mov	sl, r1
 8002a34:	4693      	mov	fp, r2
  int32_t id1;
  int32_t id2;
  spx_word32_t df;
  spx_word32_t max_mel, mel_interval;

  df = DIV32(SHL32(sampling, 15), MULT16_16(2, len));
 8002a36:	ee07 2a90 	vmov	s15, r2
 8002a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a42:	eec0 9a27 	vdiv.f32	s19, s0, s15
  max_mel = (float32_t)(toBARK((float64_t)(EXTRACT16((float64_t)sampling / 2.0f))));
 8002a46:	ee10 0a10 	vmov	r0, s0
 8002a4a:	f7fd fd41 	bl	80004d0 <__aeabi_f2d>
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4ba7      	ldr	r3, [pc, #668]	; (8002cf0 <filterbank_new+0x2c8>)
 8002a52:	f7fd fd95 	bl	8000580 <__aeabi_dmul>
 8002a56:	4606      	mov	r6, r0
 8002a58:	460f      	mov	r7, r1
 8002a5a:	a39b      	add	r3, pc, #620	; (adr r3, 8002cc8 <filterbank_new+0x2a0>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f7fd fd8e 	bl	8000580 <__aeabi_dmul>
 8002a64:	ec41 0b10 	vmov	d0, r0, r1
 8002a68:	f009 ffce 	bl	800ca08 <atan>
 8002a6c:	ec51 0b10 	vmov	r0, r1, d0
 8002a70:	a397      	add	r3, pc, #604	; (adr r3, 8002cd0 <filterbank_new+0x2a8>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fd83 	bl	8000580 <__aeabi_dmul>
 8002a7a:	4680      	mov	r8, r0
 8002a7c:	4689      	mov	r9, r1
 8002a7e:	4632      	mov	r2, r6
 8002a80:	463b      	mov	r3, r7
 8002a82:	4630      	mov	r0, r6
 8002a84:	4639      	mov	r1, r7
 8002a86:	f7fd fd7b 	bl	8000580 <__aeabi_dmul>
 8002a8a:	a393      	add	r3, pc, #588	; (adr r3, 8002cd8 <filterbank_new+0x2b0>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fd76 	bl	8000580 <__aeabi_dmul>
 8002a94:	ec41 0b10 	vmov	d0, r0, r1
 8002a98:	f009 ffb6 	bl	800ca08 <atan>
 8002a9c:	ec51 0b10 	vmov	r0, r1, d0
 8002aa0:	a38f      	add	r3, pc, #572	; (adr r3, 8002ce0 <filterbank_new+0x2b8>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f7fd fd6b 	bl	8000580 <__aeabi_dmul>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4640      	mov	r0, r8
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	f7fd fbaf 	bl	8000214 <__adddf3>
 8002ab6:	4680      	mov	r8, r0
 8002ab8:	4689      	mov	r9, r1
 8002aba:	a38b      	add	r3, pc, #556	; (adr r3, 8002ce8 <filterbank_new+0x2c0>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	f7fd fd5c 	bl	8000580 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4640      	mov	r0, r8
 8002ace:	4649      	mov	r1, r9
 8002ad0:	f7fd fba0 	bl	8000214 <__adddf3>
 8002ad4:	f7fe f836 	bl	8000b44 <__aeabi_d2f>
 8002ad8:	ee09 0a10 	vmov	s18, r0
  mel_interval = PDIV32(max_mel, (float32_t)banks - 1.0f);
 8002adc:	ee07 aa90 	vmov	s15, sl
 8002ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aec:	eec9 8a27 	vdiv.f32	s17, s18, s15
  bank->nb_banks = banks;
 8002af0:	f8c4 a860 	str.w	sl, [r4, #2144]	; 0x860
  bank->len = len;
 8002af4:	f8c4 b864 	str.w	fp, [r4, #2148]	; 0x864

  for (i = 0; i < len; i++)
 8002af8:	2500      	movs	r5, #0
 8002afa:	e021      	b.n	8002b40 <filterbank_new+0x118>
      id1 = banks - 2;
      val = Q15_ONE;
    }
    else
    {
      val = DIV32_16(mel - ((float32_t)id1 * mel_interval), EXTRACT16(PSHR32(mel_interval, 15)));
 8002afc:	ee07 0a90 	vmov	s15, r0
 8002b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b04:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002b08:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002b0c:	ee88 7a28 	vdiv.f32	s14, s16, s17
    }

    id2 = id1 + 1;
 8002b10:	1c42      	adds	r2, r0, #1
    bank->bank_left[i] = id1;
 8002b12:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    bank->filter_left[i] = SUB16(Q15_ONE, val);
 8002b16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002b1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b1e:	f505 7380 	add.w	r3, r5, #256	; 0x100
 8002b22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002b26:	edc3 7a00 	vstr	s15, [r3]
    bank->bank_right[i] = id2;
 8002b2a:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8002b2e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    bank->filter_right[i] = val;
 8002b32:	f505 73c0 	add.w	r3, r5, #384	; 0x180
 8002b36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002b3a:	ed83 7a00 	vstr	s14, [r3]
  for (i = 0; i < len; i++)
 8002b3e:	3501      	adds	r5, #1
 8002b40:	455d      	cmp	r5, fp
 8002b42:	da71      	bge.n	8002c28 <filterbank_new+0x200>
    curr_freq = EXTRACT16(MULT16_32_P15((float32_t)i, df));
 8002b44:	ee07 5a90 	vmov	s15, r5
 8002b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mel = (float32_t)(toBARK((float64_t)curr_freq));
 8002b4c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8002b50:	ee17 0a90 	vmov	r0, s15
 8002b54:	f7fd fcbc 	bl	80004d0 <__aeabi_f2d>
 8002b58:	4606      	mov	r6, r0
 8002b5a:	460f      	mov	r7, r1
 8002b5c:	a35a      	add	r3, pc, #360	; (adr r3, 8002cc8 <filterbank_new+0x2a0>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f7fd fd0d 	bl	8000580 <__aeabi_dmul>
 8002b66:	ec41 0b10 	vmov	d0, r0, r1
 8002b6a:	f009 ff4d 	bl	800ca08 <atan>
 8002b6e:	a358      	add	r3, pc, #352	; (adr r3, 8002cd0 <filterbank_new+0x2a8>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	ec51 0b10 	vmov	r0, r1, d0
 8002b78:	f7fd fd02 	bl	8000580 <__aeabi_dmul>
 8002b7c:	4680      	mov	r8, r0
 8002b7e:	4689      	mov	r9, r1
 8002b80:	4632      	mov	r2, r6
 8002b82:	463b      	mov	r3, r7
 8002b84:	4630      	mov	r0, r6
 8002b86:	4639      	mov	r1, r7
 8002b88:	f7fd fcfa 	bl	8000580 <__aeabi_dmul>
 8002b8c:	a352      	add	r3, pc, #328	; (adr r3, 8002cd8 <filterbank_new+0x2b0>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	f7fd fcf5 	bl	8000580 <__aeabi_dmul>
 8002b96:	ec41 0b10 	vmov	d0, r0, r1
 8002b9a:	f009 ff35 	bl	800ca08 <atan>
 8002b9e:	a350      	add	r3, pc, #320	; (adr r3, 8002ce0 <filterbank_new+0x2b8>)
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	ec51 0b10 	vmov	r0, r1, d0
 8002ba8:	f7fd fcea 	bl	8000580 <__aeabi_dmul>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	f7fd fb2e 	bl	8000214 <__adddf3>
 8002bb8:	4680      	mov	r8, r0
 8002bba:	4689      	mov	r9, r1
 8002bbc:	a34a      	add	r3, pc, #296	; (adr r3, 8002ce8 <filterbank_new+0x2c0>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	4639      	mov	r1, r7
 8002bc6:	f7fd fcdb 	bl	8000580 <__aeabi_dmul>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4640      	mov	r0, r8
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	f7fd fb1f 	bl	8000214 <__adddf3>
 8002bd6:	f7fd ffb5 	bl	8000b44 <__aeabi_d2f>
 8002bda:	ee08 0a10 	vmov	s16, r0
    if (mel > max_mel)
 8002bde:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8002be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be6:	d42a      	bmi.n	8002c3e <filterbank_new+0x216>
    id1 = (int32_t)(floor((float64_t)mel / (float64_t)mel_interval));
 8002be8:	f7fd fc72 	bl	80004d0 <__aeabi_f2d>
 8002bec:	4606      	mov	r6, r0
 8002bee:	460f      	mov	r7, r1
 8002bf0:	ee18 0a90 	vmov	r0, s17
 8002bf4:	f7fd fc6c 	bl	80004d0 <__aeabi_f2d>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	4639      	mov	r1, r7
 8002c00:	f7fd fde8 	bl	80007d4 <__aeabi_ddiv>
 8002c04:	ec41 0b10 	vmov	d0, r0, r1
 8002c08:	f00a fa7e 	bl	800d108 <floor>
 8002c0c:	ec51 0b10 	vmov	r0, r1, d0
 8002c10:	f7fd ff50 	bl	8000ab4 <__aeabi_d2iz>
    if (id1 > (banks - 2))
 8002c14:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002c18:	4283      	cmp	r3, r0
 8002c1a:	f73f af6f 	bgt.w	8002afc <filterbank_new+0xd4>
      id1 = banks - 2;
 8002c1e:	f1aa 0002 	sub.w	r0, sl, #2
      val = Q15_ONE;
 8002c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c26:	e773      	b.n	8002b10 <filterbank_new+0xe8>
 8002c28:	2300      	movs	r3, #0
  }

  for (i = 0; i < bank->nb_banks; i++)
 8002c2a:	4553      	cmp	r3, sl
 8002c2c:	da09      	bge.n	8002c42 <filterbank_new+0x21a>
  {
    bank->scaling[i] = 0.0f;
 8002c2e:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8002c32:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002c36:	2100      	movs	r1, #0
 8002c38:	6011      	str	r1, [r2, #0]
  for (i = 0; i < bank->nb_banks; i++)
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	e7f5      	b.n	8002c2a <filterbank_new+0x202>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e7f3      	b.n	8002c2a <filterbank_new+0x202>
  }

  for (i = 0; i < bank->len; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	455b      	cmp	r3, fp
 8002c46:	da27      	bge.n	8002c98 <filterbank_new+0x270>
  {
    int32_t id = bank->bank_left[i];
 8002c48:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    bank->scaling[id] += bank->filter_left[i];
 8002c4c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8002c50:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002c54:	ed91 7a00 	vldr	s14, [r1]
 8002c58:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002c5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002c60:	edd2 7a00 	vldr	s15, [r2]
 8002c64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c68:	edc2 7a00 	vstr	s15, [r2]
    id = bank->bank_right[i];
 8002c6c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002c70:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    bank->scaling[id] += bank->filter_right[i];
 8002c74:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 8002c78:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002c7c:	ed91 7a00 	vldr	s14, [r1]
 8002c80:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002c84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002c88:	edd2 7a00 	vldr	s15, [r2]
 8002c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c90:	edc2 7a00 	vstr	s15, [r2]
  for (i = 0; i < bank->len; i++)
 8002c94:	3301      	adds	r3, #1
 8002c96:	e7d5      	b.n	8002c44 <filterbank_new+0x21c>
  }

  for (i = 0; i < bank->nb_banks; i++)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4552      	cmp	r2, sl
 8002c9c:	da0d      	bge.n	8002cba <filterbank_new+0x292>
  {
    bank->scaling[i] = Q15_ONE / (bank->scaling[i]);
 8002c9e:	f502 7300 	add.w	r3, r2, #512	; 0x200
 8002ca2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002ca6:	ed93 7a00 	vldr	s14, [r3]
 8002caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb2:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < bank->nb_banks; i++)
 8002cb6:	3201      	adds	r2, #1
 8002cb8:	e7ef      	b.n	8002c9a <filterbank_new+0x272>
  }
}
 8002cba:	ecbd 8b04 	vpop	{d8-d9}
 8002cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc2:	bf00      	nop
 8002cc4:	f3af 8000 	nop.w
 8002cc8:	e0000000 	.word	0xe0000000
 8002ccc:	3f483f91 	.word	0x3f483f91
 8002cd0:	40000000 	.word	0x40000000
 8002cd4:	402a3333 	.word	0x402a3333
 8002cd8:	c0000000 	.word	0xc0000000
 8002cdc:	3e53dd3d 	.word	0x3e53dd3d
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	4001eb85 	.word	0x4001eb85
 8002ce8:	e0000000 	.word	0xe0000000
 8002cec:	3f1a36e2 	.word	0x3f1a36e2
 8002cf0:	3fe00000 	.word	0x3fe00000

08002cf4 <filterbank_compute_bank32>:

void filterbank_compute_bank32(FilterBank *bank, spx_word32_t *ps, spx_word32_t *mel)
{
 8002cf4:	b510      	push	{r4, lr}
  int32_t i;
  for (i = 0; i < bank->nb_banks; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e006      	b.n	8002d08 <filterbank_compute_bank32+0x14>
  {
    mel[i] = 0.0f;
 8002cfa:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8002cfe:	f04f 0c00 	mov.w	ip, #0
 8002d02:	f8c4 c000 	str.w	ip, [r4]
  for (i = 0; i < bank->nb_banks; i++)
 8002d06:	3301      	adds	r3, #1
 8002d08:	f8d0 4860 	ldr.w	r4, [r0, #2144]	; 0x860
 8002d0c:	429c      	cmp	r4, r3
 8002d0e:	dcf4      	bgt.n	8002cfa <filterbank_compute_bank32+0x6>
  }

  for (i = 0; i < bank->len; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	e02c      	b.n	8002d6e <filterbank_compute_bank32+0x7a>
  {
    int32_t id;
    id = bank->bank_left[i];
 8002d14:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    mel[id] += MULT16_32_P15(bank->filter_left[i], ps[i]);
 8002d18:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002d1c:	f503 7c80 	add.w	ip, r3, #256	; 0x100
 8002d20:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002d24:	ed9c 7a00 	vldr	s14, [ip]
 8002d28:	eb01 0e83 	add.w	lr, r1, r3, lsl #2
 8002d2c:	edde 7a00 	vldr	s15, [lr]
 8002d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d34:	edd4 7a00 	vldr	s15, [r4]
 8002d38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d3c:	edc4 7a00 	vstr	s15, [r4]
    id = bank->bank_right[i];
 8002d40:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002d44:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    mel[id] += MULT16_32_P15(bank->filter_right[i], ps[i]);
 8002d48:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8002d4c:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 8002d50:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8002d54:	ed94 7a00 	vldr	s14, [r4]
 8002d58:	edde 7a00 	vldr	s15, [lr]
 8002d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d60:	eddc 7a00 	vldr	s15, [ip]
 8002d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d68:	edcc 7a00 	vstr	s15, [ip]
  for (i = 0; i < bank->len; i++)
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f8d0 4864 	ldr.w	r4, [r0, #2148]	; 0x864
 8002d72:	429c      	cmp	r4, r3
 8002d74:	dcce      	bgt.n	8002d14 <filterbank_compute_bank32+0x20>
  }
}
 8002d76:	bd10      	pop	{r4, pc}

08002d78 <filterbank_compute_psd16>:

void filterbank_compute_psd16(FilterBank *bank, spx_word16_t *mel, spx_word16_t *ps)
{
 8002d78:	b430      	push	{r4, r5}
  int32_t i;
  for (i = 0; i < bank->len; i++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e024      	b.n	8002dc8 <filterbank_compute_psd16+0x50>
  {
    spx_word32_t tmp;
    int32_t id1, id2;
    id1 = bank->bank_left[i];
    id2 = bank->bank_right[i];
 8002d7e:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002d82:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    tmp = MULT16_16(mel[id1], bank->filter_left[i]);
 8002d86:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8002d8a:	eb01 0c85 	add.w	ip, r1, r5, lsl #2
 8002d8e:	ed9c 7a00 	vldr	s14, [ip]
 8002d92:	f503 7c80 	add.w	ip, r3, #256	; 0x100
 8002d96:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002d9a:	eddc 7a00 	vldr	s15, [ip]
 8002d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
    tmp += MULT16_16(mel[id2], bank->filter_right[i]);
 8002da2:	eb01 0c84 	add.w	ip, r1, r4, lsl #2
 8002da6:	eddc 7a00 	vldr	s15, [ip]
 8002daa:	f503 7cc0 	add.w	ip, r3, #384	; 0x180
 8002dae:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002db2:	eddc 6a00 	vldr	s13, [ip]
 8002db6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dba:	ee77 7a87 	vadd.f32	s15, s15, s14
    ps[i] = EXTRACT16(PSHR32(tmp, 15));
 8002dbe:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8002dc2:	edc4 7a00 	vstr	s15, [r4]
  for (i = 0; i < bank->len; i++)
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f8d0 4864 	ldr.w	r4, [r0, #2148]	; 0x864
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	dcd6      	bgt.n	8002d7e <filterbank_compute_psd16+0x6>
  }
}
 8002dd0:	bc30      	pop	{r4, r5}
 8002dd2:	4770      	bx	lr

08002dd4 <update_noise_prob>:

  filterbank_compute_bank32(st->bank, ps, ps + N);
}

static void update_noise_prob(SpeexPreprocessState *st)
{
 8002dd4:	b430      	push	{r4, r5}
  int32_t i;
  int32_t min_range;
  int32_t N = st->ps_size;
 8002dd6:	6844      	ldr	r4, [r0, #4]

  for (i = 1; i < (N - 1); i++)
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e02e      	b.n	8002e3a <update_noise_prob+0x66>
  {
    st->S[i] =  MULT16_32_Q15(QCONST16(.8f, 15), st->S[i]) + MULT16_32_Q15(QCONST16(.05f, 15), st->ps[i - 1])
 8002ddc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8002de0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002de4:	edd2 7a01 	vldr	s15, [r2, #4]
 8002de8:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002ff4 <update_noise_prob+0x220>
 8002dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df0:	f203 210f 	addw	r1, r3, #527	; 0x20f
 8002df4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002df8:	ed91 7a01 	vldr	s14, [r1, #4]
 8002dfc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002ff8 <update_noise_prob+0x224>
 8002e00:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002e04:	ee77 7a87 	vadd.f32	s15, s15, s14
                + MULT16_32_Q15(QCONST16(.1f, 15), st->ps[i]) + MULT16_32_Q15(QCONST16(.05f, 15), st->ps[i + 1]);
 8002e08:	f503 7104 	add.w	r1, r3, #528	; 0x210
 8002e0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002e10:	ed91 7a01 	vldr	s14, [r1, #4]
 8002e14:	ed9f 6a79 	vldr	s12, [pc, #484]	; 8002ffc <update_noise_prob+0x228>
 8002e18:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e20:	f203 2111 	addw	r1, r3, #529	; 0x211
 8002e24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002e28:	ed91 7a01 	vldr	s14, [r1, #4]
 8002e2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002e30:	ee77 7a87 	vadd.f32	s15, s15, s14
    st->S[i] =  MULT16_32_Q15(QCONST16(.8f, 15), st->S[i]) + MULT16_32_Q15(QCONST16(.05f, 15), st->ps[i - 1])
 8002e34:	edc2 7a01 	vstr	s15, [r2, #4]
  for (i = 1; i < (N - 1); i++)
 8002e38:	3301      	adds	r3, #1
 8002e3a:	1e62      	subs	r2, r4, #1
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	dccd      	bgt.n	8002ddc <update_noise_prob+0x8>
  }
  st->S[0] =  MULT16_32_Q15(QCONST16(.8f, 15), st->S[0]) + MULT16_32_Q15(QCONST16(.2f, 15), st->ps[0]);
 8002e40:	f500 53fa 	add.w	r3, r0, #8000	; 0x1f40
 8002e44:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e48:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 8002ff4 <update_noise_prob+0x220>
 8002e4c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002e50:	f600 0144 	addw	r1, r0, #2116	; 0x844
 8002e54:	ed91 7a00 	vldr	s14, [r1]
 8002e58:	eddf 6a69 	vldr	s13, [pc, #420]	; 8003000 <update_noise_prob+0x22c>
 8002e5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002e60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e64:	edc3 7a01 	vstr	s15, [r3, #4]
  st->S[N - 1] =  MULT16_32_Q15(QCONST16(.8f, 15), st->S[N - 1]) + MULT16_32_Q15(QCONST16(.2f, 15), st->ps[N - 1]);
 8002e68:	f204 73cf 	addw	r3, r4, #1999	; 0x7cf
 8002e6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002e70:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002e78:	f204 220f 	addw	r2, r4, #527	; 0x20f
 8002e7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e80:	ed92 7a01 	vldr	s14, [r2, #4]
 8002e84:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e8c:	edc3 7a01 	vstr	s15, [r3, #4]

  if (st->nb_adapt == 1)
 8002e90:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8002e94:	f8d3 548c 	ldr.w	r5, [r3, #1164]	; 0x48c
 8002e98:	2d01      	cmp	r5, #1
 8002e9a:	d019      	beq.n	8002ed0 <update_noise_prob+0xfc>
      st->Smin[i] = 0.0f;
      st->Stmp[i] = 0.0f;
    }
  }

  if (st->nb_adapt < 100)
 8002e9c:	2d63      	cmp	r5, #99	; 0x63
 8002e9e:	dd19      	ble.n	8002ed4 <update_noise_prob+0x100>
  {
    min_range = 15;
  }
  else if (st->nb_adapt < 1000)
 8002ea0:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8002ea4:	db23      	blt.n	8002eee <update_noise_prob+0x11a>
  {
    min_range = 50;
  }
  else if (st->nb_adapt < 10000)
 8002ea6:	f242 730f 	movw	r3, #9999	; 0x270f
 8002eaa:	429d      	cmp	r5, r3
 8002eac:	dc21      	bgt.n	8002ef2 <update_noise_prob+0x11e>
  {
    min_range = 150;
 8002eae:	2296      	movs	r2, #150	; 0x96
 8002eb0:	e011      	b.n	8002ed6 <update_noise_prob+0x102>
      st->Smin[i] = 0.0f;
 8002eb2:	f503 6205 	add.w	r2, r3, #2128	; 0x850
 8002eb6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002eba:	2100      	movs	r1, #0
 8002ebc:	6051      	str	r1, [r2, #4]
      st->Stmp[i] = 0.0f;
 8002ebe:	f503 620d 	add.w	r2, r3, #2256	; 0x8d0
 8002ec2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002ec6:	6051      	str	r1, [r2, #4]
    for (i = 0; i < N; i++)
 8002ec8:	3301      	adds	r3, #1
 8002eca:	42a3      	cmp	r3, r4
 8002ecc:	dbf1      	blt.n	8002eb2 <update_noise_prob+0xde>
 8002ece:	e7e5      	b.n	8002e9c <update_noise_prob+0xc8>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e7fa      	b.n	8002eca <update_noise_prob+0xf6>
    min_range = 15;
 8002ed4:	220f      	movs	r2, #15
  }
  else
  {
    min_range = 300;
  }
  if (st->min_count > min_range)
 8002ed6:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8002eda:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	dd5d      	ble.n	8002f9e <update_noise_prob+0x1ca>
  {
    st->min_count = 0;
 8002ee2:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c2 3494 	str.w	r3, [r2, #1172]	; 0x494
    for (i = 0; i < N; i++)
 8002eec:	e011      	b.n	8002f12 <update_noise_prob+0x13e>
    min_range = 50;
 8002eee:	2232      	movs	r2, #50	; 0x32
 8002ef0:	e7f1      	b.n	8002ed6 <update_noise_prob+0x102>
    min_range = 300;
 8002ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ef6:	e7ee      	b.n	8002ed6 <update_noise_prob+0x102>
    {
      st->Smin[i] = MIN32(st->Stmp[i], st->S[i]);
 8002ef8:	f503 6205 	add.w	r2, r3, #2128	; 0x850
 8002efc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f00:	ed82 7a01 	vstr	s14, [r2, #4]
      st->Stmp[i] = st->S[i];
 8002f04:	f503 620d 	add.w	r2, r3, #2256	; 0x8d0
 8002f08:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f0c:	edc2 7a01 	vstr	s15, [r2, #4]
    for (i = 0; i < N; i++)
 8002f10:	3301      	adds	r3, #1
 8002f12:	42a3      	cmp	r3, r4
 8002f14:	da45      	bge.n	8002fa2 <update_noise_prob+0x1ce>
      st->Smin[i] = MIN32(st->Stmp[i], st->S[i]);
 8002f16:	f503 620d 	add.w	r2, r3, #2256	; 0x8d0
 8002f1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f1e:	ed92 7a01 	vldr	s14, [r2, #4]
 8002f22:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8002f26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f2a:	edd2 7a01 	vldr	s15, [r2, #4]
 8002f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f36:	d4df      	bmi.n	8002ef8 <update_noise_prob+0x124>
 8002f38:	eeb0 7a67 	vmov.f32	s14, s15
 8002f3c:	e7dc      	b.n	8002ef8 <update_noise_prob+0x124>
  else
  {
    for (i = 0; i < N; i++)
    {
      st->Smin[i] = MIN32(st->Smin[i], st->S[i]);
      st->Stmp[i] = MIN32(st->Stmp[i], st->S[i]);
 8002f3e:	f503 620d 	add.w	r2, r3, #2256	; 0x8d0
 8002f42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f46:	edc2 7a01 	vstr	s15, [r2, #4]
    for (i = 0; i < N; i++)
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	42a3      	cmp	r3, r4
 8002f4e:	da28      	bge.n	8002fa2 <update_noise_prob+0x1ce>
      st->Smin[i] = MIN32(st->Smin[i], st->S[i]);
 8002f50:	f503 6205 	add.w	r2, r3, #2128	; 0x850
 8002f54:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f58:	ed92 7a01 	vldr	s14, [r2, #4]
 8002f5c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8002f60:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f64:	edd2 7a01 	vldr	s15, [r2, #4]
 8002f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f70:	d401      	bmi.n	8002f76 <update_noise_prob+0x1a2>
 8002f72:	eeb0 7a67 	vmov.f32	s14, s15
 8002f76:	f503 6205 	add.w	r2, r3, #2128	; 0x850
 8002f7a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f7e:	ed82 7a01 	vstr	s14, [r2, #4]
      st->Stmp[i] = MIN32(st->Stmp[i], st->S[i]);
 8002f82:	f503 620d 	add.w	r2, r3, #2256	; 0x8d0
 8002f86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f8a:	ed92 7a01 	vldr	s14, [r2, #4]
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	ddd2      	ble.n	8002f3e <update_noise_prob+0x16a>
 8002f98:	eef0 7a47 	vmov.f32	s15, s14
 8002f9c:	e7cf      	b.n	8002f3e <update_noise_prob+0x16a>
    for (i = 0; i < N; i++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e7d4      	b.n	8002f4c <update_noise_prob+0x178>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e006      	b.n	8002fb4 <update_noise_prob+0x1e0>
    {
      st->update_prob[i] = 1;
    }
    else
    {
      st->update_prob[i] = 0;
 8002fa6:	f503 6215 	add.w	r2, r3, #2384	; 0x950
 8002faa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002fae:	2100      	movs	r1, #0
 8002fb0:	6051      	str	r1, [r2, #4]
  for (i = 0; i < N; i++)
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	da1b      	bge.n	8002ff0 <update_noise_prob+0x21c>
    if (MULT16_32_Q15(QCONST16(.4f, 15), st->S[i]) > st->Smin[i])
 8002fb8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8002fbc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002fc0:	edd2 7a01 	vldr	s15, [r2, #4]
 8002fc4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003004 <update_noise_prob+0x230>
 8002fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fcc:	f503 6205 	add.w	r2, r3, #2128	; 0x850
 8002fd0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002fd4:	ed92 7a01 	vldr	s14, [r2, #4]
 8002fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	dde1      	ble.n	8002fa6 <update_noise_prob+0x1d2>
      st->update_prob[i] = 1;
 8002fe2:	f503 6215 	add.w	r2, r3, #2384	; 0x950
 8002fe6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002fea:	2101      	movs	r1, #1
 8002fec:	6051      	str	r1, [r2, #4]
 8002fee:	e7e0      	b.n	8002fb2 <update_noise_prob+0x1de>
    }
  }
}
 8002ff0:	bc30      	pop	{r4, r5}
 8002ff2:	4770      	bx	lr
 8002ff4:	3f4ccccd 	.word	0x3f4ccccd
 8002ff8:	3d4ccccd 	.word	0x3d4ccccd
 8002ffc:	3dcccccd 	.word	0x3dcccccd
 8003000:	3e4ccccd 	.word	0x3e4ccccd
 8003004:	3ecccccd 	.word	0x3ecccccd

08003008 <conj_window>:
{
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	4607      	mov	r7, r0
 800300c:	460d      	mov	r5, r1
  for (i = 0; i < len; i++)
 800300e:	2400      	movs	r4, #0
 8003010:	e03d      	b.n	800308e <conj_window+0x86>
    else if (x < QCONST16(3.f, 13))
 8003012:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	d505      	bpl.n	800302c <conj_window+0x24>
      x = x - QCONST16(2.f, 13);
 8003020:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003024:	ee77 7ac7 	vsub.f32	s15, s15, s14
      inv = 1;
 8003028:	2601      	movs	r6, #1
 800302a:	e008      	b.n	800303e <conj_window+0x36>
      x = QCONST16(2.f, 13) - x + QCONST16(2.f, 13); /* 4 - x */
 800302c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003034:	ee77 7a87 	vadd.f32	s15, s15, s14
    int32_t inv = 0;
 8003038:	2600      	movs	r6, #0
 800303a:	e000      	b.n	800303e <conj_window+0x36>
 800303c:	2600      	movs	r6, #0
    tmp = SQR16_Q15(QCONST16(0.5f, 15.0f) - MULT16_16_P15(QCONST16(0.5f, 15.0f), spx_cos_norm(SHL32(EXTEND32(x), 2))));
 800303e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80030f0 <conj_window+0xe8>
 8003042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003046:	ee17 0a90 	vmov	r0, s15
 800304a:	f7fd fa41 	bl	80004d0 <__aeabi_f2d>
 800304e:	a326      	add	r3, pc, #152	; (adr r3, 80030e8 <conj_window+0xe0>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd fa94 	bl	8000580 <__aeabi_dmul>
 8003058:	f7fd fd74 	bl	8000b44 <__aeabi_d2f>
 800305c:	ee00 0a10 	vmov	s0, r0
 8003060:	f009 ffb0 	bl	800cfc4 <cosf>
 8003064:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003068:	ee20 0a27 	vmul.f32	s0, s0, s15
 800306c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003070:	ee20 0a00 	vmul.f32	s0, s0, s0
    if (inv == 1)
 8003074:	bb6e      	cbnz	r6, 80030d2 <conj_window+0xca>
    w[i] = spx_sqrt(SHL32(EXTEND32(tmp), 15));
 8003076:	eb07 0684 	add.w	r6, r7, r4, lsl #2
    if (in >= 0.0f)
 800307a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	db2b      	blt.n	80030dc <conj_window+0xd4>
      *pOut = __builtin_sqrtf(in);
 8003084:	f009 ff80 	bl	800cf88 <sqrtf>
 8003088:	ed86 0a00 	vstr	s0, [r6]
  for (i = 0; i < len; i++)
 800308c:	3401      	adds	r4, #1
 800308e:	42ac      	cmp	r4, r5
 8003090:	da27      	bge.n	80030e2 <conj_window+0xda>
    spx_word16_t x = DIV32_16(MULT16_16(QCONST16(4.f, 13), i), len);
 8003092:	ee07 4a90 	vmov	s15, r4
 8003096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800309a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800309e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a2:	ee07 5a90 	vmov	s15, r5
 80030a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
    if (x < QCONST16(1.f, 13))
 80030ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ba:	d4bf      	bmi.n	800303c <conj_window+0x34>
    else if (x < QCONST16(2.f, 13))
 80030bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80030c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	d5a3      	bpl.n	8003012 <conj_window+0xa>
      x = QCONST16(2.f, 13) - x;
 80030ca:	ee77 7a67 	vsub.f32	s15, s14, s15
      inv = 1;
 80030ce:	2601      	movs	r6, #1
 80030d0:	e7b5      	b.n	800303e <conj_window+0x36>
      tmp = SUB16(Q15_ONE, tmp);
 80030d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80030d6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80030da:	e7cc      	b.n	8003076 <conj_window+0x6e>
      *pOut = 0.0f;
 80030dc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80030f4 <conj_window+0xec>
 80030e0:	e7d2      	b.n	8003088 <conj_window+0x80>
}
 80030e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e4:	f3af 8000 	nop.w
 80030e8:	54442d18 	.word	0x54442d18
 80030ec:	3ff921fb 	.word	0x3ff921fb
 80030f0:	3fa2cdb8 	.word	0x3fa2cdb8
 80030f4:	00000000 	.word	0x00000000

080030f8 <Preprocess_analize>:
{
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	4604      	mov	r4, r0
  int N = st->ps_size;
 80030fc:	6845      	ldr	r5, [r0, #4]
  int N3 = 2 * N - st->frame_size;
 80030fe:	0068      	lsls	r0, r5, #1
 8003100:	6827      	ldr	r7, [r4, #0]
 8003102:	ebc7 0c45 	rsb	ip, r7, r5, lsl #1
  int N4 = st->frame_size - N3;
 8003106:	eba7 0e0c 	sub.w	lr, r7, ip
  spx_word32_t *ps = st->ps;
 800310a:	f604 0644 	addw	r6, r4, #2116	; 0x844
  for (i = 0; i < N3; i++)
 800310e:	2300      	movs	r3, #0
 8003110:	e00c      	b.n	800312c <Preprocess_analize+0x34>
    st->frame[i] = st->inbuf[i];
 8003112:	f603 3298 	addw	r2, r3, #2968	; 0xb98
 8003116:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800311a:	edd2 7a01 	vldr	s15, [r2, #4]
 800311e:	f103 0210 	add.w	r2, r3, #16
 8003122:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003126:	edc2 7a01 	vstr	s15, [r2, #4]
  for (i = 0; i < N3; i++)
 800312a:	3301      	adds	r3, #1
 800312c:	4563      	cmp	r3, ip
 800312e:	dbf0      	blt.n	8003112 <Preprocess_analize+0x1a>
  for (i = 0; i < st->frame_size; i++)
 8003130:	2200      	movs	r2, #0
 8003132:	e00d      	b.n	8003150 <Preprocess_analize+0x58>
    st->frame[N3 + i] = x[i];
 8003134:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eb02 030c 	add.w	r3, r2, ip
 8003140:	3310      	adds	r3, #16
 8003142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800314a:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 0; i < st->frame_size; i++)
 800314e:	3201      	adds	r2, #1
 8003150:	4297      	cmp	r7, r2
 8003152:	dcef      	bgt.n	8003134 <Preprocess_analize+0x3c>
  for (i = 0; i < N3; i++)
 8003154:	2300      	movs	r3, #0
 8003156:	e00e      	b.n	8003176 <Preprocess_analize+0x7e>
    st->inbuf[i] = x[N4 + i];
 8003158:	eb03 020e 	add.w	r2, r3, lr
 800315c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8003160:	ee07 2a90 	vmov	s15, r2
 8003164:	f603 3298 	addw	r2, r3, #2968	; 0xb98
 8003168:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800316c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003170:	edc2 7a01 	vstr	s15, [r2, #4]
  for (i = 0; i < N3; i++)
 8003174:	3301      	adds	r3, #1
 8003176:	4563      	cmp	r3, ip
 8003178:	dbee      	blt.n	8003158 <Preprocess_analize+0x60>
  for (i = 0; i < 2 * N; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	e010      	b.n	80031a0 <Preprocess_analize+0xa8>
    st->frame[i] = MULT16_16_Q15(st->frame[i], st->window[i]);
 800317e:	f103 0210 	add.w	r2, r3, #16
 8003182:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003186:	edd2 7a01 	vldr	s15, [r2, #4]
 800318a:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 800318e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003192:	ed91 7a01 	vldr	s14, [r1, #4]
 8003196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319a:	edc2 7a01 	vstr	s15, [r2, #4]
  for (i = 0; i < 2 * N; i++)
 800319e:	3301      	adds	r3, #1
 80031a0:	4298      	cmp	r0, r3
 80031a2:	dcec      	bgt.n	800317e <Preprocess_analize+0x86>
  libSpeexAEC_fft((st->fft_lookup), st->frame, st->ft);
 80031a4:	f204 4744 	addw	r7, r4, #1092	; 0x444
 80031a8:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80031ac:	463a      	mov	r2, r7
 80031ae:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80031b2:	f8d3 0498 	ldr.w	r0, [r3, #1176]	; 0x498
 80031b6:	f7fe f905 	bl	80013c4 <libSpeexAEC_fft>
  ps[0] = MULT16_16(st->ft[0], st->ft[0]);
 80031ba:	edd7 7a00 	vldr	s15, [r7]
 80031be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031c2:	f604 0344 	addw	r3, r4, #2116	; 0x844
 80031c6:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < N; i++)
 80031ca:	2201      	movs	r2, #1
 80031cc:	e017      	b.n	80031fe <Preprocess_analize+0x106>
    ps[i] = MULT16_16(st->ft[2 * i - 1], st->ft[2 * i - 1]) + MULT16_16(st->ft[2 * i], st->ft[2 * i]);
 80031ce:	0053      	lsls	r3, r2, #1
 80031d0:	f203 110f 	addw	r1, r3, #271	; 0x10f
 80031d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80031d8:	edd1 7a01 	vldr	s15, [r1, #4]
 80031dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031e0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80031e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80031e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80031ec:	ee27 7a07 	vmul.f32	s14, s14, s14
 80031f0:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80031f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031f8:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < N; i++)
 80031fc:	3201      	adds	r2, #1
 80031fe:	42aa      	cmp	r2, r5
 8003200:	dbe5      	blt.n	80031ce <Preprocess_analize+0xd6>
  for (i = 0; i < N; i++)
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <Preprocess_analize+0x110>
 8003206:	3301      	adds	r3, #1
 8003208:	42ab      	cmp	r3, r5
 800320a:	dbfc      	blt.n	8003206 <Preprocess_analize+0x10e>
  filterbank_compute_bank32(st->bank, ps, ps + N);
 800320c:	eb06 0285 	add.w	r2, r6, r5, lsl #2
 8003210:	4631      	mov	r1, r6
 8003212:	6920      	ldr	r0, [r4, #16]
 8003214:	f7ff fd6e 	bl	8002cf4 <filterbank_compute_bank32>
}
 8003218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800321c <compute_gain_floor>:
{
 800321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003220:	ed2d 8b06 	vpush	{d8-d10}
 8003224:	eeb0 8a60 	vmov.f32	s16, s1
 8003228:	4681      	mov	r9, r0
 800322a:	4688      	mov	r8, r1
 800322c:	4617      	mov	r7, r2
 800322e:	461e      	mov	r6, r3
  noise_floor = expf(.2302585f * noise_suppress);
 8003230:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80032a0 <compute_gain_floor+0x84>
 8003234:	ee20 0a28 	vmul.f32	s0, s0, s17
 8003238:	f009 fdea 	bl	800ce10 <expf>
 800323c:	eeb0 aa40 	vmov.f32	s20, s0
  echo_floor = expf(.2302585f * effective_echo_suppress);
 8003240:	ee28 0a28 	vmul.f32	s0, s16, s17
 8003244:	f009 fde4 	bl	800ce10 <expf>
 8003248:	eef0 9a40 	vmov.f32	s19, s0
  for (i = 0; i < len; i++)
 800324c:	2400      	movs	r4, #0
 800324e:	e020      	b.n	8003292 <compute_gain_floor+0x76>
    gain_floor[i] = FRAC_SCALING * sqrtf(noise_floor * PSHR32(noise[i], NOISE_SHIFT) + echo_floor * echo[i]) / sqrtf(1 + PSHR32(noise[i], NOISE_SHIFT) + echo[i]);
 8003250:	00a5      	lsls	r5, r4, #2
 8003252:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8003256:	ed93 8a00 	vldr	s16, [r3]
 800325a:	ee28 0a0a 	vmul.f32	s0, s16, s20
 800325e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8003262:	ed9c 9a00 	vldr	s18, [ip]
 8003266:	ee69 7a29 	vmul.f32	s15, s18, s19
 800326a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800326e:	f009 fe8b 	bl	800cf88 <sqrtf>
 8003272:	eef0 8a40 	vmov.f32	s17, s0
 8003276:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800327a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800327e:	ee39 0a08 	vadd.f32	s0, s18, s16
 8003282:	f009 fe81 	bl	800cf88 <sqrtf>
 8003286:	443d      	add	r5, r7
 8003288:	eec8 7a80 	vdiv.f32	s15, s17, s0
 800328c:	edc5 7a00 	vstr	s15, [r5]
  for (i = 0; i < len; i++)
 8003290:	3401      	adds	r4, #1
 8003292:	42b4      	cmp	r4, r6
 8003294:	dbdc      	blt.n	8003250 <compute_gain_floor+0x34>
}
 8003296:	ecbd 8b06 	vpop	{d8-d10}
 800329a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800329e:	bf00      	nop
 80032a0:	3e6bc8e2 	.word	0x3e6bc8e2

080032a4 <simple_agc>:
{
 80032a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a8:	ed2d 8b06 	vpush	{d8-d10}
 80032ac:	4604      	mov	r4, r0
 80032ae:	eef0 8a40 	vmov.f32	s17, s0
 80032b2:	460e      	mov	r6, r1
  int N = st->ps_size;
 80032b4:	6845      	ldr	r5, [r0, #4]
  float loudness = 1.f;
 80032b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  for (i = 2; i < N; i++)
 80032ba:	2302      	movs	r3, #2
 80032bc:	e018      	b.n	80032f0 <simple_agc+0x4c>
    loudness += 2.f * N * st->ps[i] * st->loudness_weight[i];
 80032be:	ee07 5a90 	vmov	s15, r5
 80032c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032ca:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80032ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80032d2:	ed92 7a01 	vldr	s14, [r2, #4]
 80032d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032da:	f603 429c 	addw	r2, r3, #3228	; 0xc9c
 80032de:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80032e2:	ed92 7a00 	vldr	s14, [r2]
 80032e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ea:	ee30 0a27 	vadd.f32	s0, s0, s15
  for (i = 2; i < N; i++)
 80032ee:	3301      	adds	r3, #1
 80032f0:	42ab      	cmp	r3, r5
 80032f2:	dbe4      	blt.n	80032be <simple_agc+0x1a>
  loudness = sqrtf(loudness);
 80032f4:	f009 fe48 	bl	800cf88 <sqrtf>
 80032f8:	eeb0 9a40 	vmov.f32	s18, s0
  if (Pframe > .3f)
 80032fc:	eddf 7a71 	vldr	s15, [pc, #452]	; 80034c4 <simple_agc+0x220>
 8003300:	eef4 8ae7 	vcmpe.f32	s17, s15
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	dc76      	bgt.n	80033f8 <simple_agc+0x154>
  target_gain = AMP_SCALE * st->agc_level * powf(st->loudness / (1e-4f + st->loudness_accum), -1.0f / LOUDNESS_EXP);
 800330a:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800330e:	edd3 7a9a 	vldr	s15, [r3, #616]	; 0x268
 8003312:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80034c8 <simple_agc+0x224>
 8003316:	ee27 8a87 	vmul.f32	s16, s15, s14
 800331a:	f503 628e 	add.w	r2, r3, #1136	; 0x470
 800331e:	ed92 0a00 	vldr	s0, [r2]
 8003322:	edd3 7a9b 	vldr	s15, [r3, #620]	; 0x26c
 8003326:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80034cc <simple_agc+0x228>
 800332a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800332e:	eddf 0a68 	vldr	s1, [pc, #416]	; 80034d0 <simple_agc+0x22c>
 8003332:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003336:	f009 fdcf 	bl	800ced8 <powf>
 800333a:	ee68 7a00 	vmul.f32	s15, s16, s0
  if (((Pframe > .5f) && (st->nb_adapt > 20)) || (target_gain < st->agc_gain))
 800333e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003342:	eef4 8ac7 	vcmpe.f32	s17, s14
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	dd05      	ble.n	8003358 <simple_agc+0xb4>
 800334c:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8003350:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8003354:	2b14      	cmp	r3, #20
 8003356:	dc08      	bgt.n	800336a <simple_agc+0xc6>
 8003358:	f504 5351 	add.w	r3, r4, #13376	; 0x3440
 800335c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	dd44      	ble.n	80033f4 <simple_agc+0x150>
    if (target_gain > st->max_increase_step * st->agc_gain)
 800336a:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800336e:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 8003372:	ed92 7a00 	vldr	s14, [r2]
 8003376:	f203 4374 	addw	r3, r3, #1140	; 0x474
 800337a:	edd3 6a00 	vldr	s13, [r3]
 800337e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d401      	bmi.n	8003390 <simple_agc+0xec>
  target_gain = AMP_SCALE * st->agc_level * powf(st->loudness / (1e-4f + st->loudness_accum), -1.0f / LOUDNESS_EXP);
 800338c:	eeb0 7a67 	vmov.f32	s14, s15
    if ((target_gain < st->max_decrease_step * st->agc_gain) && (loudness < 10 * st->prev_loudness))
 8003390:	f504 5352 	add.w	r3, r4, #13440	; 0x3480
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800339c:	eef4 6ac7 	vcmpe.f32	s13, s14
 80033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a4:	dd0c      	ble.n	80033c0 <simple_agc+0x11c>
 80033a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80033aa:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80033ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80033b2:	eef4 7ac9 	vcmpe.f32	s15, s18
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	dd01      	ble.n	80033c0 <simple_agc+0x11c>
      target_gain = st->max_decrease_step * st->agc_gain;
 80033bc:	eeb0 7a66 	vmov.f32	s14, s13
    if (target_gain > st->max_gain)
 80033c0:	f504 5351 	add.w	r3, r4, #13376	; 0x3440
 80033c4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80033c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d0:	d401      	bmi.n	80033d6 <simple_agc+0x132>
 80033d2:	eef0 7a47 	vmov.f32	s15, s14
    if (target_gain > st->init_max)
 80033d6:	f504 5352 	add.w	r3, r4, #13440	; 0x3480
 80033da:	ed93 7a02 	vldr	s14, [r3, #8]
 80033de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e6:	d401      	bmi.n	80033ec <simple_agc+0x148>
 80033e8:	eeb0 7a67 	vmov.f32	s14, s15
    st->agc_gain = target_gain;
 80033ec:	f504 5351 	add.w	r3, r4, #13376	; 0x3440
 80033f0:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
    if (target_gain > st->init_max)
 80033f4:	2300      	movs	r3, #0
 80033f6:	e05a      	b.n	80034ae <simple_agc+0x20a>
    rate = .03f * Pframe * Pframe;
 80033f8:	eddf 9a36 	vldr	s19, [pc, #216]	; 80034d4 <simple_agc+0x230>
 80033fc:	ee68 9aa9 	vmul.f32	s19, s17, s19
 8003400:	ee69 9aa8 	vmul.f32	s19, s19, s17
    st->loudness = (1 - rate) * st->loudness + (rate) * powf(AMP_SCALE * loudness, LOUDNESS_EXP);
 8003404:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003408:	ee38 8a69 	vsub.f32	s16, s16, s19
 800340c:	f504 5740 	add.w	r7, r4, #12288	; 0x3000
 8003410:	f507 688e 	add.w	r8, r7, #1136	; 0x470
 8003414:	ed98 aa00 	vldr	s20, [r8]
 8003418:	ee28 aa0a 	vmul.f32	s20, s16, s20
 800341c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003420:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80034c8 <simple_agc+0x224>
 8003424:	ee29 0a00 	vmul.f32	s0, s18, s0
 8003428:	f009 fd56 	bl	800ced8 <powf>
 800342c:	ee20 0a29 	vmul.f32	s0, s0, s19
 8003430:	ee3a aa00 	vadd.f32	s20, s20, s0
 8003434:	ed88 aa00 	vstr	s20, [r8]
    st->loudness_accum = (1 - rate) * st->loudness_accum + rate;
 8003438:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 800343c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003440:	ee38 8a29 	vadd.f32	s16, s16, s19
 8003444:	ed87 8a9b 	vstr	s16, [r7, #620]	; 0x26c
    if ((st->init_max < st->max_gain) && (st->nb_adapt > 20))
 8003448:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	f507 678f 	add.w	r7, r7, #1144	; 0x478
 8003454:	ed97 7a00 	vldr	s14, [r7]
 8003458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003460:	f57f af53 	bpl.w	800330a <simple_agc+0x66>
 8003464:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8003468:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800346c:	2b14      	cmp	r3, #20
 800346e:	f77f af4c 	ble.w	800330a <simple_agc+0x66>
      st->init_max *= 1.f + .1f * Pframe * Pframe;
 8003472:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80034d8 <simple_agc+0x234>
 8003476:	ee28 7a87 	vmul.f32	s14, s17, s14
 800347a:	ee27 7a28 	vmul.f32	s14, s14, s17
 800347e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003482:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003486:	f504 5352 	add.w	r3, r4, #13440	; 0x3480
 800348a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800348e:	edc3 7a02 	vstr	s15, [r3, #8]
 8003492:	e73a      	b.n	800330a <simple_agc+0x66>
    ft[i] *= st->agc_gain;
 8003494:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 8003498:	f504 5251 	add.w	r2, r4, #13376	; 0x3440
 800349c:	ed92 7a0d 	vldr	s14, [r2, #52]	; 0x34
 80034a0:	edd1 7a00 	vldr	s15, [r1]
 80034a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a8:	edc1 7a00 	vstr	s15, [r1]
  for (i = 0; i < 2 * N; i++)
 80034ac:	3301      	adds	r3, #1
 80034ae:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 80034b2:	dbef      	blt.n	8003494 <simple_agc+0x1f0>
  st->prev_loudness = loudness;
 80034b4:	f504 5452 	add.w	r4, r4, #13440	; 0x3480
 80034b8:	ed84 9a01 	vstr	s18, [r4, #4]
}
 80034bc:	ecbd 8b06 	vpop	{d8-d10}
 80034c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c4:	3e99999a 	.word	0x3e99999a
 80034c8:	3a83126f 	.word	0x3a83126f
 80034cc:	38d1b717 	.word	0x38d1b717
 80034d0:	be4ccccd 	.word	0xbe4ccccd
 80034d4:	3cf5c28f 	.word	0x3cf5c28f
 80034d8:	3dcccccd 	.word	0x3dcccccd

080034dc <Preprocess_init>:
{
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	ed2d 8b02 	vpush	{d8}
 80034e2:	4604      	mov	r4, r0
 80034e4:	460e      	mov	r6, r1
 80034e6:	ee08 2a90 	vmov	s17, r2
  st->frame_size = frame_size;
 80034ea:	6001      	str	r1, [r0, #0]
  st->ps_size = st->frame_size;
 80034ec:	6041      	str	r1, [r0, #4]
  N3 = (2 * N) - st->frame_size;
 80034ee:	004d      	lsls	r5, r1, #1
  st->sampling_rate = sampling_rate;
 80034f0:	6082      	str	r2, [r0, #8]
  st->denoise_enabled = 1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	6143      	str	r3, [r0, #20]
  st->dereverb_enabled = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61c3      	str	r3, [r0, #28]
  st->reverb_decay = 0.0f;
 80034fa:	2200      	movs	r2, #0
 80034fc:	6202      	str	r2, [r0, #32]
  st->reverb_level = 0.0f;
 80034fe:	6242      	str	r2, [r0, #36]	; 0x24
  st->noise_suppress = NOISE_SUPPRESS_DEFAULT;
 8003500:	f06f 020e 	mvn.w	r2, #14
 8003504:	6302      	str	r2, [r0, #48]	; 0x30
  st->echo_suppress = ECHO_SUPPRESS_DEFAULT;
 8003506:	f06f 0127 	mvn.w	r1, #39	; 0x27
 800350a:	6341      	str	r1, [r0, #52]	; 0x34
  st->echo_suppress_active = ECHO_SUPPRESS_ACTIVE_DEFAULT;
 800350c:	6382      	str	r2, [r0, #56]	; 0x38
  st->speech_prob_start = SPEECH_PROB_START_DEFAULT;
 800350e:	4a76      	ldr	r2, [pc, #472]	; (80036e8 <Preprocess_init+0x20c>)
 8003510:	6282      	str	r2, [r0, #40]	; 0x28
  st->speech_prob_continue = SPEECH_PROB_CONTINUE_DEFAULT;
 8003512:	4a76      	ldr	r2, [pc, #472]	; (80036ec <Preprocess_init+0x210>)
 8003514:	62c2      	str	r2, [r0, #44]	; 0x2c
  st->echo_state = NULL;
 8003516:	63c3      	str	r3, [r0, #60]	; 0x3c
  st->nbands = NB_BANDS;
 8003518:	2318      	movs	r3, #24
 800351a:	60c3      	str	r3, [r0, #12]
  conj_window(st->window, 2 * N3);
 800351c:	4629      	mov	r1, r5
 800351e:	f600 7064 	addw	r0, r0, #3940	; 0xf64
 8003522:	f7ff fd71 	bl	8003008 <conj_window>
  for (i = 2 * N3; i < (2 * st->ps_size); i++)
 8003526:	e000      	b.n	800352a <Preprocess_init+0x4e>
 8003528:	3501      	adds	r5, #1
 800352a:	6863      	ldr	r3, [r4, #4]
 800352c:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 8003530:	da09      	bge.n	8003546 <Preprocess_init+0x6a>
    if (i < (2 * NN_MAX))
 8003532:	2dff      	cmp	r5, #255	; 0xff
 8003534:	dcf8      	bgt.n	8003528 <Preprocess_init+0x4c>
      st->window[i] = Q15_ONE;
 8003536:	f505 7376 	add.w	r3, r5, #984	; 0x3d8
 800353a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800353e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	e7f0      	b.n	8003528 <Preprocess_init+0x4c>
  for (i = 0; i < (N + M); i++)
 8003546:	2300      	movs	r3, #0
 8003548:	e01b      	b.n	8003582 <Preprocess_init+0xa6>
    st->noise[i] = QCONST32(1.f, NOISE_SHIFT);
 800354a:	f503 629b 	add.w	r2, r3, #1240	; 0x4d8
 800354e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003552:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003556:	6051      	str	r1, [r2, #4]
    st->old_ps[i] = 1.0f;
 8003558:	f503 62ae 	add.w	r2, r3, #1392	; 0x570
 800355c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003560:	6051      	str	r1, [r2, #4]
    st->gain[i] = Q15_ONE;
 8003562:	f503 62c1 	add.w	r2, r3, #1544	; 0x608
 8003566:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800356a:	6051      	str	r1, [r2, #4]
    st->post[i] = SHL16(1.0f, SNR_SHIFT);
 800356c:	f503 62e7 	add.w	r2, r3, #1848	; 0x738
 8003570:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003574:	6051      	str	r1, [r2, #4]
    st->prior[i] = SHL16(1.0f, SNR_SHIFT);
 8003576:	f503 62d4 	add.w	r2, r3, #1696	; 0x6a0
 800357a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800357e:	6051      	str	r1, [r2, #4]
  for (i = 0; i < (N + M); i++)
 8003580:	3301      	adds	r3, #1
 8003582:	f106 0218 	add.w	r2, r6, #24
 8003586:	429a      	cmp	r2, r3
 8003588:	dcdf      	bgt.n	800354a <Preprocess_init+0x6e>
  for (i = 0; i < N; i++)
 800358a:	2300      	movs	r3, #0
 800358c:	e006      	b.n	800359c <Preprocess_init+0xc0>
    st->update_prob[i] = 1;
 800358e:	f503 6215 	add.w	r2, r3, #2384	; 0x950
 8003592:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003596:	2101      	movs	r1, #1
 8003598:	6051      	str	r1, [r2, #4]
  for (i = 0; i < N; i++)
 800359a:	440b      	add	r3, r1
 800359c:	42b3      	cmp	r3, r6
 800359e:	dbf6      	blt.n	800358e <Preprocess_init+0xb2>
  for (i = 0; i < N3; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	e00b      	b.n	80035bc <Preprocess_init+0xe0>
    st->inbuf[i] = 0.0f;
 80035a4:	f603 3298 	addw	r2, r3, #2968	; 0xb98
 80035a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80035ac:	2100      	movs	r1, #0
 80035ae:	6051      	str	r1, [r2, #4]
    st->outbuf[i] = 0.0f;
 80035b0:	f603 4218 	addw	r2, r3, #3096	; 0xc18
 80035b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80035b8:	6051      	str	r1, [r2, #4]
  for (i = 0; i < N3; i++)
 80035ba:	3301      	adds	r3, #1
 80035bc:	42b3      	cmp	r3, r6
 80035be:	dbf1      	blt.n	80035a4 <Preprocess_init+0xc8>
  for (i = 0; i < N; i++)
 80035c0:	2500      	movs	r5, #0
 80035c2:	e00a      	b.n	80035da <Preprocess_init+0xfe>
    st->loudness_weight[i] *= st->loudness_weight[i];
 80035c4:	f605 439c 	addw	r3, r5, #3228	; 0xc9c
 80035c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035d4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < N; i++)
 80035d8:	3501      	adds	r5, #1
 80035da:	42b5      	cmp	r5, r6
 80035dc:	da45      	bge.n	800366a <Preprocess_init+0x18e>
    float ff = ((float)i) * 0.5f * sampling_rate / ((float)N);
 80035de:	ee07 5a90 	vmov	s15, r5
 80035e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80035ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ee:	eef8 7ae8 	vcvt.f32.s32	s15, s17
 80035f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f6:	ee07 6a10 	vmov	s14, r6
 80035fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
    st->loudness_weight[i] = .35f - .35f * ff / 16000.f + .73f * expf(-.5f * (ff - 3800) * (ff - 3800) / 9e5f);
 8003602:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80036f0 <Preprocess_init+0x214>
 8003606:	ee20 6a27 	vmul.f32	s12, s0, s15
 800360a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80036f4 <Preprocess_init+0x218>
 800360e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003612:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8003616:	eddf 7a38 	vldr	s15, [pc, #224]	; 80036f8 <Preprocess_init+0x21c>
 800361a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800361e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8003622:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003626:	ee20 0a27 	vmul.f32	s0, s0, s15
 800362a:	eddf 7a34 	vldr	s15, [pc, #208]	; 80036fc <Preprocess_init+0x220>
 800362e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003632:	f009 fbed 	bl	800ce10 <expf>
 8003636:	eddf 7a32 	vldr	s15, [pc, #200]	; 8003700 <Preprocess_init+0x224>
 800363a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800363e:	ee78 7a00 	vadd.f32	s15, s16, s0
 8003642:	f605 439c 	addw	r3, r5, #3228	; 0xc9c
 8003646:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800364a:	edc3 7a00 	vstr	s15, [r3]
    if (st->loudness_weight[i] < .01f)
 800364e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003704 <Preprocess_init+0x228>
 8003652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	d5b3      	bpl.n	80035c4 <Preprocess_init+0xe8>
      st->loudness_weight[i] = .01f;
 800365c:	f605 439c 	addw	r3, r5, #3228	; 0xc9c
 8003660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003664:	ed83 7a00 	vstr	s14, [r3]
 8003668:	e7ac      	b.n	80035c4 <Preprocess_init+0xe8>
  st->loudness = 1e-15f;
 800366a:	f504 5540 	add.w	r5, r4, #12288	; 0x3000
 800366e:	f505 638e 	add.w	r3, r5, #1136	; 0x470
 8003672:	4a25      	ldr	r2, [pc, #148]	; (8003708 <Preprocess_init+0x22c>)
 8003674:	601a      	str	r2, [r3, #0]
  st->agc_gain = 1.0f;
 8003676:	f205 4374 	addw	r3, r5, #1140	; 0x474
 800367a:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 800367e:	601e      	str	r6, [r3, #0]
  st->max_gain = 30.0f;
 8003680:	f505 638f 	add.w	r3, r5, #1144	; 0x478
 8003684:	4a21      	ldr	r2, [pc, #132]	; (800370c <Preprocess_init+0x230>)
 8003686:	601a      	str	r2, [r3, #0]
  st->max_increase_step = expf(0.11513f * 12.f * (float32_t)st->frame_size / (float32_t)st->sampling_rate);
 8003688:	edd4 7a00 	vldr	s15, [r4]
 800368c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003690:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003710 <Preprocess_init+0x234>
 8003694:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003698:	edd4 7a02 	vldr	s15, [r4, #8]
 800369c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80036a0:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80036a4:	f009 fbb4 	bl	800ce10 <expf>
 80036a8:	f205 437c 	addw	r3, r5, #1148	; 0x47c
 80036ac:	ed83 0a00 	vstr	s0, [r3]
  st->max_decrease_step = expf(-0.11513f * 40.f * (float32_t)st->frame_size / (float32_t)st->sampling_rate);
 80036b0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003714 <Preprocess_init+0x238>
 80036b4:	ee28 0a27 	vmul.f32	s0, s16, s15
 80036b8:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80036bc:	f009 fba8 	bl	800ce10 <expf>
 80036c0:	f504 5452 	add.w	r4, r4, #13440	; 0x3480
 80036c4:	ed84 0a00 	vstr	s0, [r4]
  st->prev_loudness = 1.0f;
 80036c8:	f205 4384 	addw	r3, r5, #1156	; 0x484
 80036cc:	601e      	str	r6, [r3, #0]
  st->init_max = 1.0f;
 80036ce:	f505 6391 	add.w	r3, r5, #1160	; 0x488
 80036d2:	601e      	str	r6, [r3, #0]
  st->was_speech = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c5 3490 	str.w	r3, [r5, #1168]	; 0x490
  st->nb_adapt = 0;
 80036da:	f8c5 348c 	str.w	r3, [r5, #1164]	; 0x48c
  st->min_count = 0;
 80036de:	f8c5 3494 	str.w	r3, [r5, #1172]	; 0x494
}
 80036e2:	ecbd 8b02 	vpop	{d8}
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	3eb33333 	.word	0x3eb33333
 80036ec:	3e4ccccd 	.word	0x3e4ccccd
 80036f0:	3eb33333 	.word	0x3eb33333
 80036f4:	467a0000 	.word	0x467a0000
 80036f8:	456d8000 	.word	0x456d8000
 80036fc:	495bba00 	.word	0x495bba00
 8003700:	3f3ae148 	.word	0x3f3ae148
 8003704:	3c23d70a 	.word	0x3c23d70a
 8003708:	26901d7d 	.word	0x26901d7d
 800370c:	41f00000 	.word	0x41f00000
 8003710:	3fb0d6f5 	.word	0x3fb0d6f5
 8003714:	c0935dcc 	.word	0xc0935dcc

08003718 <Preprocess>:

#define NOISE_OVERCOMPENS 1.

int Preprocess(SpeexPreprocessState *st, spx_int16_t *x)
{
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	ed2d 8b06 	vpush	{d8-d10}
 8003720:	b085      	sub	sp, #20
 8003722:	4604      	mov	r4, r0
 8003724:	468a      	mov	sl, r1
  int32_t i;
  int32_t M;
  int32_t N = st->ps_size;
 8003726:	6846      	ldr	r6, [r0, #4]
  int32_t N3 = (2 * N) - st->frame_size;
 8003728:	0073      	lsls	r3, r6, #1
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	6803      	ldr	r3, [r0, #0]
 800372e:	ebc3 0846 	rsb	r8, r3, r6, lsl #1
  int32_t N4 = st->frame_size - N3;
 8003732:	eba3 0308 	sub.w	r3, r3, r8
 8003736:	9303      	str	r3, [sp, #12]
  spx_word32_t *ps = st->ps;
 8003738:	f600 0b44 	addw	fp, r0, #2116	; 0x844
  spx_word32_t Zframe;
  spx_word16_t Pframe;
  spx_word16_t beta, beta_1;
  spx_word16_t effective_echo_suppress;

  st->nb_adapt++;
 800373c:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8003740:	f8d2 348c 	ldr.w	r3, [r2, #1164]	; 0x48c
 8003744:	3301      	adds	r3, #1
 8003746:	f8c2 348c 	str.w	r3, [r2, #1164]	; 0x48c
  if (st->nb_adapt > 20000)
 800374a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800374e:	4293      	cmp	r3, r2
 8003750:	dd03      	ble.n	800375a <Preprocess+0x42>
  {
    st->nb_adapt = 20000;
 8003752:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8003756:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
  }
  st->min_count++;
 800375a:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800375e:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8003762:	3201      	adds	r2, #1
 8003764:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  beta = MAX16(QCONST16(.03f, 15), DIV32_16(Q15_ONE, st->nb_adapt));
 8003768:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800376c:	edd3 7a00 	vldr	s15, [r3]
 8003770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003778:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800377c:	eddf 7ada 	vldr	s15, [pc, #872]	; 8003ae8 <Preprocess+0x3d0>
 8003780:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003788:	d501      	bpl.n	800378e <Preprocess+0x76>
 800378a:	eeb0 8a67 	vmov.f32	s16, s15
  beta_1 = Q15_ONE - beta;
 800378e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8003792:	ee78 8ac8 	vsub.f32	s17, s17, s16
  M = st->nbands;
 8003796:	68e5      	ldr	r5, [r4, #12]
  /* Deal with residual echo if provided */
  if (st->echo_state != NULL)
 8003798:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800379a:	2800      	cmp	r0, #0
 800379c:	d067      	beq.n	800386e <Preprocess+0x156>
  {
    Echo_get_residual(st->echo_state, st->residual_echo, N);
 800379e:	4632      	mov	r2, r6
 80037a0:	f504 5130 	add.w	r1, r4, #11264	; 0x2c00
 80037a4:	3104      	adds	r1, #4
 80037a6:	f7ff f83f 	bl	8002828 <Echo_get_residual>

    /* If there are NaNs or ridiculous values, it'll show up in the DC and we just reset everything to zero */
    if (!((st->residual_echo[0] >= 0.0f) && (st->residual_echo[0] < ((float32_t)N * 1e9f))))
 80037aa:	f504 5330 	add.w	r3, r4, #11264	; 0x2c00
 80037ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80037b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	db0e      	blt.n	80037da <Preprocess+0xc2>
 80037bc:	ee07 6a10 	vmov	s14, r6
 80037c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80037c4:	eddf 6ac9 	vldr	s13, [pc, #804]	; 8003aec <Preprocess+0x3d4>
 80037c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80037cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d4:	d42d      	bmi.n	8003832 <Preprocess+0x11a>
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <Preprocess+0xc4>
 80037da:	2300      	movs	r3, #0
    {
      for (i = 0; i < N; i++)
 80037dc:	42b3      	cmp	r3, r6
 80037de:	da28      	bge.n	8003832 <Preprocess+0x11a>
      {
        st->residual_echo[i] = 0.0f;
 80037e0:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 80037e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80037e8:	2100      	movs	r1, #0
 80037ea:	6051      	str	r1, [r2, #4]
      for (i = 0; i < N; i++)
 80037ec:	3301      	adds	r3, #1
 80037ee:	e7f5      	b.n	80037dc <Preprocess+0xc4>
      }
    }

    for (i = 0; i < N; i++)
    {
      st->echo_noise[i] = MAX32(MULT16_32_Q15(QCONST16(.6f, 15), st->echo_noise[i]), st->residual_echo[i]);
 80037f0:	f603 2268 	addw	r2, r3, #2664	; 0xa68
 80037f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80037f8:	ed82 7a01 	vstr	s14, [r2, #4]
    for (i = 0; i < N; i++)
 80037fc:	3301      	adds	r3, #1
 80037fe:	42b3      	cmp	r3, r6
 8003800:	da19      	bge.n	8003836 <Preprocess+0x11e>
      st->echo_noise[i] = MAX32(MULT16_32_Q15(QCONST16(.6f, 15), st->echo_noise[i]), st->residual_echo[i]);
 8003802:	f603 2268 	addw	r2, r3, #2664	; 0xa68
 8003806:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800380a:	edd2 7a01 	vldr	s15, [r2, #4]
 800380e:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8003af0 <Preprocess+0x3d8>
 8003812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003816:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 800381a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800381e:	ed92 7a01 	vldr	s14, [r2, #4]
 8003822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	dde1      	ble.n	80037f0 <Preprocess+0xd8>
 800382c:	eeb0 7a67 	vmov.f32	s14, s15
 8003830:	e7de      	b.n	80037f0 <Preprocess+0xd8>
 8003832:	2300      	movs	r3, #0
 8003834:	e7e3      	b.n	80037fe <Preprocess+0xe6>
    }

    filterbank_compute_bank32(st->bank, st->echo_noise, st->echo_noise + N); //OPTIMIZE
 8003836:	f504 5126 	add.w	r1, r4, #10624	; 0x2980
 800383a:	3124      	adds	r1, #36	; 0x24
 800383c:	eb01 0286 	add.w	r2, r1, r6, lsl #2
 8003840:	6920      	ldr	r0, [r4, #16]
 8003842:	f7ff fa57 	bl	8002cf4 <filterbank_compute_bank32>
    {
      st->echo_noise[i] = 0.0f;
    }
  }

  Preprocess_analize((SpeexPreprocessState *)st, x); //SOME OPTIMIZATION USING ARM, STILL TO BE OPTIMIZED (libSpeexAEC_fft)
 8003846:	4651      	mov	r1, sl
 8003848:	4620      	mov	r0, r4
 800384a:	f7ff fc55 	bl	80030f8 <Preprocess_analize>
  update_noise_prob((SpeexPreprocessState *)st); //OPTIMIZE
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff fac0 	bl	8002dd4 <update_noise_prob>

  /* Update the noise estimate for the frequencies where it can be */
  for (i = 0; i < N; i++)
 8003854:	2300      	movs	r3, #0
 8003856:	e02a      	b.n	80038ae <Preprocess+0x196>
      st->echo_noise[i] = 0.0f;
 8003858:	f603 2268 	addw	r2, r3, #2664	; 0xa68
 800385c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003860:	2100      	movs	r1, #0
 8003862:	6051      	str	r1, [r2, #4]
    for (i = 0; i < (N + M); i++)
 8003864:	3301      	adds	r3, #1
 8003866:	1972      	adds	r2, r6, r5
 8003868:	429a      	cmp	r2, r3
 800386a:	dcf5      	bgt.n	8003858 <Preprocess+0x140>
 800386c:	e7eb      	b.n	8003846 <Preprocess+0x12e>
 800386e:	2300      	movs	r3, #0
 8003870:	e7f9      	b.n	8003866 <Preprocess+0x14e>
  {
    if ((st->update_prob[i] == 0) || (st->ps[i] < PSHR32(st->noise[i], NOISE_SHIFT)))
    {
      st->noise[i] = MAX32(EXTEND32(0), MULT16_32_Q15(beta_1, st->noise[i]) + MULT16_32_Q15(beta, SHL32(st->ps[i], NOISE_SHIFT)));
 8003872:	f503 629b 	add.w	r2, r3, #1240	; 0x4d8
 8003876:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800387a:	edd2 7a01 	vldr	s15, [r2, #4]
 800387e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003882:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8003886:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800388a:	ed92 7a01 	vldr	s14, [r2, #4]
 800388e:	ee27 7a08 	vmul.f32	s14, s14, s16
 8003892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003896:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800389a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389e:	d421      	bmi.n	80038e4 <Preprocess+0x1cc>
 80038a0:	f503 629b 	add.w	r2, r3, #1240	; 0x4d8
 80038a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80038a8:	edc2 7a01 	vstr	s15, [r2, #4]
  for (i = 0; i < N; i++)
 80038ac:	3301      	adds	r3, #1
 80038ae:	42b3      	cmp	r3, r6
 80038b0:	da1b      	bge.n	80038ea <Preprocess+0x1d2>
    if ((st->update_prob[i] == 0) || (st->ps[i] < PSHR32(st->noise[i], NOISE_SHIFT)))
 80038b2:	f503 6215 	add.w	r2, r3, #2384	; 0x950
 80038b6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80038ba:	6852      	ldr	r2, [r2, #4]
 80038bc:	2a00      	cmp	r2, #0
 80038be:	d0d8      	beq.n	8003872 <Preprocess+0x15a>
 80038c0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80038c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80038c8:	ed92 7a01 	vldr	s14, [r2, #4]
 80038cc:	f503 629b 	add.w	r2, r3, #1240	; 0x4d8
 80038d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80038d4:	edd2 7a01 	vldr	s15, [r2, #4]
 80038d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e0:	d5e4      	bpl.n	80038ac <Preprocess+0x194>
 80038e2:	e7c6      	b.n	8003872 <Preprocess+0x15a>
      st->noise[i] = MAX32(EXTEND32(0), MULT16_32_Q15(beta_1, st->noise[i]) + MULT16_32_Q15(beta, SHL32(st->ps[i], NOISE_SHIFT)));
 80038e4:	eddf 7a83 	vldr	s15, [pc, #524]	; 8003af4 <Preprocess+0x3dc>
 80038e8:	e7da      	b.n	80038a0 <Preprocess+0x188>
    }
  }

  filterbank_compute_bank32(st->bank, st->noise, st->noise + N); //OPTIMIZE
 80038ea:	f504 519b 	add.w	r1, r4, #4960	; 0x1360
 80038ee:	3104      	adds	r1, #4
 80038f0:	00b3      	lsls	r3, r6, #2
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	eb01 0386 	add.w	r3, r1, r6, lsl #2
 80038f8:	9302      	str	r3, [sp, #8]
 80038fa:	461a      	mov	r2, r3
 80038fc:	6920      	ldr	r0, [r4, #16]
 80038fe:	f7ff f9f9 	bl	8002cf4 <filterbank_compute_bank32>


  /* Special case for first frame */
  if (st->nb_adapt == 1)
 8003902:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8003906:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d00e      	beq.n	800392c <Preprocess+0x214>
    /* Computing update gamma = .1 + .9*(old/(old+noise))^2 */
    gamma = 0.1f + (0.89f * SQR16_Q15((st->old_ps[i] / (st->old_ps[i] + tot_noise))));

    /* A priori SNR update = gamma*max(0,post) + (1-gamma)*old/noise */
    st->prior[i] = (gamma * (MAX16(0.0f, st->post[i]))) + ((1.0f - gamma) * (st->old_ps[i] / tot_noise));
    st->prior[i] = MIN16(st->prior[i], 100.0f);
 800390e:	2300      	movs	r3, #0
 8003910:	e018      	b.n	8003944 <Preprocess+0x22c>
      st->old_ps[i] = ps[i];
 8003912:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 8003916:	6811      	ldr	r1, [r2, #0]
 8003918:	f503 62ae 	add.w	r2, r3, #1392	; 0x570
 800391c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003920:	6051      	str	r1, [r2, #4]
    for (i = 0; i < (N + M); i++)
 8003922:	3301      	adds	r3, #1
 8003924:	1972      	adds	r2, r6, r5
 8003926:	429a      	cmp	r2, r3
 8003928:	dcf3      	bgt.n	8003912 <Preprocess+0x1fa>
 800392a:	e7f0      	b.n	800390e <Preprocess+0x1f6>
 800392c:	2300      	movs	r3, #0
 800392e:	e7f9      	b.n	8003924 <Preprocess+0x20c>
    st->prior[i] = (gamma * (MAX16(0.0f, st->post[i]))) + ((1.0f - gamma) * (st->old_ps[i] / tot_noise));
 8003930:	eddf 7a70 	vldr	s15, [pc, #448]	; 8003af4 <Preprocess+0x3dc>
 8003934:	e051      	b.n	80039da <Preprocess+0x2c2>
    st->prior[i] = MIN16(st->prior[i], 100.0f);
 8003936:	f503 62d4 	add.w	r2, r3, #1696	; 0x6a0
 800393a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800393e:	edc2 7a01 	vstr	s15, [r2, #4]
  for (i = 0; i < (N + M); i++)
 8003942:	3301      	adds	r3, #1
 8003944:	1977      	adds	r7, r6, r5
 8003946:	429f      	cmp	r7, r3
 8003948:	dd63      	ble.n	8003a12 <Preprocess+0x2fa>
    spx_word32_t tot_noise = 1.0f + st->noise[i] + st->echo_noise[i];
 800394a:	f503 629b 	add.w	r2, r3, #1240	; 0x4d8
 800394e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003952:	edd2 6a01 	vldr	s13, [r2, #4]
 8003956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800395a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800395e:	f603 2268 	addw	r2, r3, #2664	; 0xa68
 8003962:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003966:	edd2 7a01 	vldr	s15, [r2, #4]
 800396a:	ee76 6aa7 	vadd.f32	s13, s13, s15
    st->post[i] = (ps[i] / tot_noise) - 1.0f;
 800396e:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 8003972:	ed92 6a00 	vldr	s12, [r2]
 8003976:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800397a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800397e:	f503 62e7 	add.w	r2, r3, #1848	; 0x738
 8003982:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003986:	edc2 7a01 	vstr	s15, [r2, #4]
    st->post[i] = MIN16(st->post[i], 100.0f);
 800398a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003af8 <Preprocess+0x3e0>
 800398e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003996:	d401      	bmi.n	800399c <Preprocess+0x284>
 8003998:	eef0 7a47 	vmov.f32	s15, s14
 800399c:	f503 62e7 	add.w	r2, r3, #1848	; 0x738
 80039a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80039a4:	edc2 7a01 	vstr	s15, [r2, #4]
    gamma = 0.1f + (0.89f * SQR16_Q15((st->old_ps[i] / (st->old_ps[i] + tot_noise))));
 80039a8:	f503 62ae 	add.w	r2, r3, #1392	; 0x570
 80039ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80039b0:	edd2 5a01 	vldr	s11, [r2, #4]
 80039b4:	ee35 6aa6 	vadd.f32	s12, s11, s13
 80039b8:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80039bc:	ee27 7a07 	vmul.f32	s14, s14, s14
 80039c0:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003afc <Preprocess+0x3e4>
 80039c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80039c8:	ed9f 6a51 	vldr	s12, [pc, #324]	; 8003b10 <Preprocess+0x3f8>
 80039cc:	ee37 7a06 	vadd.f32	s14, s14, s12
    st->prior[i] = (gamma * (MAX16(0.0f, st->post[i]))) + ((1.0f - gamma) * (st->old_ps[i] / tot_noise));
 80039d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	d4aa      	bmi.n	8003930 <Preprocess+0x218>
 80039da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80039e2:	ee36 7a47 	vsub.f32	s14, s12, s14
 80039e6:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80039ea:	ee27 7a06 	vmul.f32	s14, s14, s12
 80039ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039f2:	f503 62d4 	add.w	r2, r3, #1696	; 0x6a0
 80039f6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80039fa:	edc2 7a01 	vstr	s15, [r2, #4]
    st->prior[i] = MIN16(st->prior[i], 100.0f);
 80039fe:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003af8 <Preprocess+0x3e0>
 8003a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	d494      	bmi.n	8003936 <Preprocess+0x21e>
 8003a0c:	eef0 7a47 	vmov.f32	s15, s14
 8003a10:	e791      	b.n	8003936 <Preprocess+0x21e>
  }

  /* Recursive average of the a priori SNR. A bit smoothed for the psd components */
  st->zeta[0] = (0.7f * st->zeta[0]) + (0.3f * st->prior[0]);
 8003a12:	f504 531d 	add.w	r3, r4, #10048	; 0x2740
 8003a16:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a1a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003b00 <Preprocess+0x3e8>
 8003a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a22:	f504 52d4 	add.w	r2, r4, #6784	; 0x1a80
 8003a26:	ed92 7a01 	vldr	s14, [r2, #4]
 8003a2a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003b04 <Preprocess+0x3ec>
 8003a2e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a36:	edc3 7a01 	vstr	s15, [r3, #4]

  for (i = 1; i < (N - 1); i++)
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e02e      	b.n	8003a9c <Preprocess+0x384>
  {
    st->zeta[i] = (0.7f * st->zeta[i]) + (0.15f * st->prior[i]) + (0.75f * st->prior[i - 1]) + (0.75f * st->prior[i + 1]);
 8003a3e:	f503 621d 	add.w	r2, r3, #2512	; 0x9d0
 8003a42:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003a46:	edd2 7a01 	vldr	s15, [r2, #4]
 8003a4a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003b00 <Preprocess+0x3e8>
 8003a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a52:	f503 61d4 	add.w	r1, r3, #1696	; 0x6a0
 8003a56:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003a5a:	ed91 7a01 	vldr	s14, [r1, #4]
 8003a5e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003b08 <Preprocess+0x3f0>
 8003a62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a6a:	f203 619f 	addw	r1, r3, #1695	; 0x69f
 8003a6e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003a72:	ed91 7a01 	vldr	s14, [r1, #4]
 8003a76:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 8003a7a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a82:	f203 61a1 	addw	r1, r3, #1697	; 0x6a1
 8003a86:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003a8a:	ed91 7a01 	vldr	s14, [r1, #4]
 8003a8e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a96:	edc2 7a01 	vstr	s15, [r2, #4]
  for (i = 1; i < (N - 1); i++)
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f106 39ff 	add.w	r9, r6, #4294967295
 8003aa0:	4599      	cmp	r9, r3
 8003aa2:	dccc      	bgt.n	8003a3e <Preprocess+0x326>
  }

  for (i = N - 1; i < (N + M); i++)
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	e018      	b.n	8003ada <Preprocess+0x3c2>
  {
    st->zeta[i] = (0.7f * st->zeta[i]) + (0.3f * st->prior[i]);
 8003aa8:	f503 621d 	add.w	r2, r3, #2512	; 0x9d0
 8003aac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003ab0:	edd2 7a01 	vldr	s15, [r2, #4]
 8003ab4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003b00 <Preprocess+0x3e8>
 8003ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003abc:	f503 61d4 	add.w	r1, r3, #1696	; 0x6a0
 8003ac0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003ac4:	ed91 7a01 	vldr	s14, [r1, #4]
 8003ac8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003b04 <Preprocess+0x3ec>
 8003acc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ad4:	edc2 7a01 	vstr	s15, [r2, #4]
  for (i = N - 1; i < (N + M); i++)
 8003ad8:	3301      	adds	r3, #1
 8003ada:	429f      	cmp	r7, r3
 8003adc:	dce4      	bgt.n	8003aa8 <Preprocess+0x390>
  }

  /* Speech probability of presence for the entire frame is based on the average filterbank a priori SNR */
  Zframe = 0.0f;
  for (i = N; i < (N + M); i++)
 8003ade:	4633      	mov	r3, r6
  Zframe = 0.0f;
 8003ae0:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003af4 <Preprocess+0x3dc>
 8003ae4:	e01f      	b.n	8003b26 <Preprocess+0x40e>
 8003ae6:	bf00      	nop
 8003ae8:	3cf5c28f 	.word	0x3cf5c28f
 8003aec:	4e6e6b28 	.word	0x4e6e6b28
 8003af0:	3f19999a 	.word	0x3f19999a
 8003af4:	00000000 	.word	0x00000000
 8003af8:	42c80000 	.word	0x42c80000
 8003afc:	3f63d70a 	.word	0x3f63d70a
 8003b00:	3f333333 	.word	0x3f333333
 8003b04:	3e99999a 	.word	0x3e99999a
 8003b08:	3e19999a 	.word	0x3e19999a
 8003b0c:	3f6624dd 	.word	0x3f6624dd
 8003b10:	3dcccccd 	.word	0x3dcccccd
  {
    Zframe = (Zframe + st->zeta[i]);
 8003b14:	f503 621d 	add.w	r2, r3, #2512	; 0x9d0
 8003b18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003b1c:	ed92 7a01 	vldr	s14, [r2, #4]
 8003b20:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (i = N; i < (N + M); i++)
 8003b24:	3301      	adds	r3, #1
 8003b26:	429f      	cmp	r7, r3
 8003b28:	dcf4      	bgt.n	8003b14 <Preprocess+0x3fc>
  }
  Pframe = 0.1f + (0.899f * qcurve(Zframe / (float32_t)st->nbands));
 8003b2a:	ed94 7a03 	vldr	s14, [r4, #12]
 8003b2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003b32:	eec7 6a87 	vdiv.f32	s13, s15, s14
  return 1.f / (1.f + (.15f / (SNR_SCALING_1 * x)));
 8003b36:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8003b08 <Preprocess+0x3f0>
 8003b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b3e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003b42:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8003b46:	eec0 8aa7 	vdiv.f32	s17, s1, s15
  Pframe = 0.1f + (0.899f * qcurve(Zframe / (float32_t)st->nbands));
 8003b4a:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8003b0c <Preprocess+0x3f4>
 8003b4e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8003b52:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8003b10 <Preprocess+0x3f8>
 8003b56:	ee78 8aa7 	vadd.f32	s17, s17, s15
  effective_echo_suppress = ((1.0f - Pframe) * (float32_t)st->echo_suppress) + (Pframe * (float32_t)st->echo_suppress_active);
 8003b5a:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8003b5e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8003b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b66:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8003b6a:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8003b6e:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 8003b72:	ee60 0aa8 	vmul.f32	s1, s1, s17
  compute_gain_floor((float32_t)st->noise_suppress, effective_echo_suppress, st->noise + N, st->echo_noise + N, st->gain_floor + N, M); //OPTIMIZED REMOVING M (24) SQRTs
 8003b76:	f504 5126 	add.w	r1, r4, #10624	; 0x2980
 8003b7a:	3124      	adds	r1, #36	; 0x24
 8003b7c:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 8003b80:	462b      	mov	r3, r5
 8003b82:	9800      	ldr	r0, [sp, #0]
 8003b84:	4402      	add	r2, r0
 8003b86:	4401      	add	r1, r0
 8003b88:	9802      	ldr	r0, [sp, #8]
 8003b8a:	ee77 0aa0 	vadd.f32	s1, s15, s1
 8003b8e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8003b92:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003b96:	f7ff fb41 	bl	800321c <compute_gain_floor>

  /* Compute Ephraim & Malah gain speech probability of presence for each critical band (Bark scale)
  Technically this is actually wrong because the EM gaim assumes a slightly different probability
  distribution */
  for (i = N; i < (N + M); i++)
 8003b9a:	4635      	mov	r5, r6
 8003b9c:	e08c      	b.n	8003cb8 <Preprocess+0x5a0>
    frac = (2.0f * x) - integer;
 8003b9e:	ee79 9ac0 	vsub.f32	s19, s19, s0
    ret = FRAC_SCALING * (((1.0f - frac) * table[ind]) + (frac * table[ind + 1])) / spx_sqrt(x + 0.0001f);
 8003ba2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003ba6:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8003baa:	4ad7      	ldr	r2, [pc, #860]	; (8003f08 <Preprocess+0x7f0>)
 8003bac:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003bb0:	ed91 7a00 	vldr	s14, [r1]
 8003bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb8:	3301      	adds	r3, #1
 8003bba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003bbe:	ed92 7a00 	vldr	s14, [r2]
 8003bc2:	ee69 9a87 	vmul.f32	s19, s19, s14
 8003bc6:	ee77 9aa9 	vadd.f32	s19, s15, s19
 8003bca:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8003f0c <Preprocess+0x7f4>
 8003bce:	ee39 0a00 	vadd.f32	s0, s18, s0
    if (in >= 0.0f)
 8003bd2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	db04      	blt.n	8003be6 <Preprocess+0x4ce>
      *pOut = __builtin_sqrtf(in);
 8003bdc:	f009 f9d4 	bl	800cf88 <sqrtf>
 8003be0:	eec9 7a80 	vdiv.f32	s15, s19, s0
 8003be4:	e004      	b.n	8003bf0 <Preprocess+0x4d8>
      *pOut = 0.0f;
 8003be6:	ed9f 0aca 	vldr	s0, [pc, #808]	; 8003f10 <Preprocess+0x7f8>
 8003bea:	e7f9      	b.n	8003be0 <Preprocess+0x4c8>
    ret = FRAC_SCALING;
 8003bec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    prior_ratio = PDIV32_16(SHL32(EXTEND32(st->prior[i]), 15), ADD16(st->prior[i], SHL32(1, SNR_SHIFT)));
    theta = MULT16_32_P15(prior_ratio, QCONST32(1.f, EXPIN_SHIFT) + SHL32(EXTEND32(st->post[i]), EXPIN_SHIFT - SNR_SHIFT));

    MM = hypergeom_gain(theta);  //REMOVED LOOKUP TABLE FROM FLASH
    /* Gain with bound */
    st->gain[i] = EXTRACT16(MIN32(Q15_ONE, MULT16_32_Q15(prior_ratio, MM)));
 8003bf0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	dd01      	ble.n	8003c06 <Preprocess+0x4ee>
 8003c02:	eef0 7a47 	vmov.f32	s15, s14
 8003c06:	f505 63c1 	add.w	r3, r5, #1544	; 0x608
 8003c0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003c0e:	edc3 7a01 	vstr	s15, [r3, #4]
    /* Save old Bark power spectrum */
    st->old_ps[i] = MULT16_32_P15(QCONST16(.2f, 15), st->old_ps[i]) + MULT16_32_P15(MULT16_16_P15(QCONST16(.8f, 15), SQR16_Q15(st->gain[i])), ps[i]);
 8003c12:	f505 63ae 	add.w	r3, r5, #1392	; 0x570
 8003c16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003c1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c1e:	eddf 6abd 	vldr	s13, [pc, #756]	; 8003f14 <Preprocess+0x7fc>
 8003c22:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003c26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c2a:	eddf 6abb 	vldr	s13, [pc, #748]	; 8003f18 <Preprocess+0x800>
 8003c2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c32:	eb0b 0285 	add.w	r2, fp, r5, lsl #2
 8003c36:	ed92 6a00 	vldr	s12, [r2]
 8003c3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c42:	edc3 7a01 	vstr	s15, [r3, #4]

    P1 = QCONST16(.199f, 15) + MULT16_16_Q15(QCONST16(.8f, 15), qcurve(st->zeta[i]));
 8003c46:	f505 631d 	add.w	r3, r5, #2512	; 0x9d0
 8003c4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003c4e:	edd3 7a01 	vldr	s15, [r3, #4]
  return 1.f / (1.f + (.15f / (SNR_SCALING_1 * x)));
 8003c52:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8003f1c <Preprocess+0x804>
 8003c56:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8003c5a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8003c5e:	ee37 7a29 	vadd.f32	s14, s14, s19
 8003c62:	eec9 7a87 	vdiv.f32	s15, s19, s14
    P1 = QCONST16(.199f, 15) + MULT16_16_Q15(QCONST16(.8f, 15), qcurve(st->zeta[i]));
 8003c66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c6a:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8003f20 <Preprocess+0x808>
 8003c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
    q = Q15_ONE - MULT16_16_Q15(Pframe, P1);
 8003c72:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003c76:	ee79 7ae7 	vsub.f32	s15, s19, s15

    st->gain2[i] = 1.0f / (1.f + ((q / (1.f - q)) * (1.0f + st->prior[i]) * expf(-theta)));
 8003c7a:	ee39 7ae7 	vsub.f32	s14, s19, s15
 8003c7e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8003c82:	f505 63d4 	add.w	r3, r5, #1696	; 0x6a0
 8003c86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003c8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c8e:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8003c92:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003c96:	eeb1 0a49 	vneg.f32	s0, s18
 8003c9a:	f009 f8b9 	bl	800ce10 <expf>
 8003c9e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8003ca2:	ee38 8a29 	vadd.f32	s16, s16, s19
 8003ca6:	eec9 7a88 	vdiv.f32	s15, s19, s16
 8003caa:	f505 732a 	add.w	r3, r5, #680	; 0x2a8
 8003cae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003cb2:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = N; i < (N + M); i++)
 8003cb6:	3501      	adds	r5, #1
 8003cb8:	42af      	cmp	r7, r5
 8003cba:	dd2e      	ble.n	8003d1a <Preprocess+0x602>
    prior_ratio = PDIV32_16(SHL32(EXTEND32(st->prior[i]), 15), ADD16(st->prior[i], SHL32(1, SNR_SHIFT)));
 8003cbc:	f505 63d4 	add.w	r3, r5, #1696	; 0x6a0
 8003cc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003cc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003cc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003ccc:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003cd0:	ee87 8a26 	vdiv.f32	s16, s14, s13
    theta = MULT16_32_P15(prior_ratio, QCONST32(1.f, EXPIN_SHIFT) + SHL32(EXTEND32(st->post[i]), EXPIN_SHIFT - SNR_SHIFT));
 8003cd4:	f505 63e7 	add.w	r3, r5, #1848	; 0x738
 8003cd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003cdc:	ed93 9a01 	vldr	s18, [r3, #4]
 8003ce0:	ee39 9a27 	vadd.f32	s18, s18, s15
 8003ce4:	ee29 9a08 	vmul.f32	s18, s18, s16
  integer = floorf(2.0f * x);
 8003ce8:	ee79 9a09 	vadd.f32	s19, s18, s18
 8003cec:	eeb0 0a69 	vmov.f32	s0, s19
 8003cf0:	f009 fa8a 	bl	800d208 <floorf>
  ind = (int)integer;
 8003cf4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003cf8:	ee17 3a90 	vmov	r3, s15
  if (ind < 0)
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f6ff af75 	blt.w	8003bec <Preprocess+0x4d4>
  else if (ind > 19)
 8003d02:	2b13      	cmp	r3, #19
 8003d04:	f77f af4b 	ble.w	8003b9e <Preprocess+0x486>
    ret = FRAC_SCALING * (1.0f + 0.1296f / x);
 8003d08:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003f24 <Preprocess+0x80c>
 8003d0c:	eec7 7a09 	vdiv.f32	s15, s14, s18
 8003d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d18:	e76a      	b.n	8003bf0 <Preprocess+0x4d8>
  }

  /* Convert the EM gains and speech prob to linear frequency */ //440us
  filterbank_compute_psd16(st->bank, st->gain2 + N, st->gain2);
 8003d1a:	f604 2ba4 	addw	fp, r4, #2724	; 0xaa4
 8003d1e:	9d00      	ldr	r5, [sp, #0]
 8003d20:	eb0b 0305 	add.w	r3, fp, r5
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	465a      	mov	r2, fp
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6920      	ldr	r0, [r4, #16]
 8003d2c:	f7ff f824 	bl	8002d78 <filterbank_compute_psd16>
  filterbank_compute_psd16(st->bank, st->gain + N, st->gain);
 8003d30:	f504 52c1 	add.w	r2, r4, #6176	; 0x1820
 8003d34:	3204      	adds	r2, #4
 8003d36:	1951      	adds	r1, r2, r5
 8003d38:	6920      	ldr	r0, [r4, #16]
 8003d3a:	f7ff f81d 	bl	8002d78 <filterbank_compute_psd16>

  /* Use linear gain resolution */
  for (i = N; i < (N + M); i++)
 8003d3e:	4635      	mov	r5, r6
 8003d40:	e028      	b.n	8003d94 <Preprocess+0x67c>
  {
    spx_word16_t tmp;
    spx_word16_t p = st->gain2[i];
    st->gain[i] = MAX16(st->gain[i], st->gain_floor[i]);// CHECKING THIS RESULT WE CAN PERFORM 1 SQRT LESS IN THE NEXT INSTRUCTION
 8003d42:	f505 63c1 	add.w	r3, r5, #1544	; 0x608
 8003d46:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d4a:	ed83 0a01 	vstr	s0, [r3, #4]
    if (in >= 0.0f)
 8003d4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d56:	db39      	blt.n	8003dcc <Preprocess+0x6b4>
      *pOut = __builtin_sqrtf(in);
 8003d58:	f009 f916 	bl	800cf88 <sqrtf>
    tmp = (p * spx_sqrt(st->gain[i])) + ((1.0f - p) * spx_sqrt(st->gain_floor[i]));
 8003d5c:	ee2a 8a00 	vmul.f32	s16, s20, s0
 8003d60:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8003d64:	ee39 9a4a 	vsub.f32	s18, s18, s20
    if (in >= 0.0f)
 8003d68:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8003d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d70:	db2f      	blt.n	8003dd2 <Preprocess+0x6ba>
      *pOut = __builtin_sqrtf(in);
 8003d72:	eeb0 0a69 	vmov.f32	s0, s19
 8003d76:	f009 f907 	bl	800cf88 <sqrtf>
 8003d7a:	ee29 9a00 	vmul.f32	s18, s18, s0
 8003d7e:	ee38 0a09 	vadd.f32	s0, s16, s18
    st->gain2[i] = SQR16_Q15(tmp);
 8003d82:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003d86:	f505 732a 	add.w	r3, r5, #680	; 0x2a8
 8003d8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d8e:	ed83 0a01 	vstr	s0, [r3, #4]
  for (i = N; i < (N + M); i++)
 8003d92:	3501      	adds	r5, #1
 8003d94:	42af      	cmp	r7, r5
 8003d96:	dd1f      	ble.n	8003dd8 <Preprocess+0x6c0>
    spx_word16_t p = st->gain2[i];
 8003d98:	f505 732a 	add.w	r3, r5, #680	; 0x2a8
 8003d9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003da0:	ed93 aa01 	vldr	s20, [r3, #4]
    st->gain[i] = MAX16(st->gain[i], st->gain_floor[i]);// CHECKING THIS RESULT WE CAN PERFORM 1 SQRT LESS IN THE NEXT INSTRUCTION
 8003da4:	f505 63c1 	add.w	r3, r5, #1544	; 0x608
 8003da8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003dac:	ed93 0a01 	vldr	s0, [r3, #4]
 8003db0:	f505 7350 	add.w	r3, r5, #832	; 0x340
 8003db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003db8:	edd3 9a01 	vldr	s19, [r3, #4]
 8003dbc:	eeb4 0ae9 	vcmpe.f32	s0, s19
 8003dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc4:	dcbd      	bgt.n	8003d42 <Preprocess+0x62a>
 8003dc6:	eeb0 0a69 	vmov.f32	s0, s19
 8003dca:	e7ba      	b.n	8003d42 <Preprocess+0x62a>
      *pOut = 0.0f;
 8003dcc:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8003f10 <Preprocess+0x7f8>
 8003dd0:	e7c4      	b.n	8003d5c <Preprocess+0x644>
 8003dd2:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8003f10 <Preprocess+0x7f8>
 8003dd6:	e7d0      	b.n	8003d7a <Preprocess+0x662>
  }

  filterbank_compute_psd16(st->bank, st->gain2 + N, st->gain2);
 8003dd8:	465a      	mov	r2, fp
 8003dda:	9900      	ldr	r1, [sp, #0]
 8003ddc:	6920      	ldr	r0, [r4, #16]
 8003dde:	f7fe ffcb 	bl	8002d78 <filterbank_compute_psd16>

  /* Apply computed gain */ //180us
  for (i = 1; i < N; i++)
 8003de2:	2201      	movs	r2, #1
 8003de4:	e01b      	b.n	8003e1e <Preprocess+0x706>
  {
    st->ft[(2 * i) - 1] = MULT16_16_P15(st->gain2[i], st->ft[(2 * i) - 1]);
 8003de6:	f502 732a 	add.w	r3, r2, #680	; 0x2a8
 8003dea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003dee:	edd3 7a01 	vldr	s15, [r3, #4]
 8003df2:	0053      	lsls	r3, r2, #1
 8003df4:	f203 110f 	addw	r1, r3, #271	; 0x10f
 8003df8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003dfc:	ed91 7a01 	vldr	s14, [r1, #4]
 8003e00:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e04:	ed81 7a01 	vstr	s14, [r1, #4]
    st->ft[2 * i] = MULT16_16_P15(st->gain2[i], st->ft[2 * i]);
 8003e08:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003e0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e10:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e18:	edc3 7a01 	vstr	s15, [r3, #4]
  for (i = 1; i < N; i++)
 8003e1c:	3201      	adds	r2, #1
 8003e1e:	42b2      	cmp	r2, r6
 8003e20:	dbe1      	blt.n	8003de6 <Preprocess+0x6ce>
  }
  st->ft[0] = MULT16_16_P15(st->gain2[0], st->ft[0]);
 8003e22:	f604 23a4 	addw	r3, r4, #2724	; 0xaa4
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	f204 4344 	addw	r3, r4, #1092	; 0x444
 8003e2e:	ed93 7a00 	vldr	s14, [r3]
 8003e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e36:	edc3 7a00 	vstr	s15, [r3]
  st->ft[(2 * N) - 1] = MULT16_16_P15(st->gain2[N - 1], st->ft[(2 * N) - 1]);
 8003e3a:	f509 792a 	add.w	r9, r9, #680	; 0x2a8
 8003e3e:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 8003e42:	edd9 7a01 	vldr	s15, [r9, #4]
 8003e46:	9b01      	ldr	r3, [sp, #4]
 8003e48:	f203 130f 	addw	r3, r3, #271	; 0x10f
 8003e4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e50:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e58:	edc3 7a01 	vstr	s15, [r3, #4]

  //  AGC RELATED
  if (st->agc_enabled)
 8003e5c:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8003e60:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8003e64:	b9b3      	cbnz	r3, 8003e94 <Preprocess+0x77c>
  {
    simple_agc(st, Pframe, st->ft);
  }

  /* Inverse FFT with 1/N scaling */
  libSpeexAEC_ifft(st->fft_lookup, st->ft, st->frame);
 8003e66:	f104 0544 	add.w	r5, r4, #68	; 0x44
 8003e6a:	f504 5740 	add.w	r7, r4, #12288	; 0x3000
 8003e6e:	462a      	mov	r2, r5
 8003e70:	f204 4144 	addw	r1, r4, #1092	; 0x444
 8003e74:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8003e78:	f7fd fac2 	bl	8001400 <libSpeexAEC_ifft>

  //  AGC RELATED
  if (st->agc_enabled)
 8003e7c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003e80:	bb1b      	cbnz	r3, 8003eca <Preprocess+0x7b2>
      }
    }
  }

  /* Synthesis window (for WOLA) */
  arm_mult_f32((float32_t *)st->window, st->frame, st->frame, (uint32_t)N * 2U);
 8003e82:	0073      	lsls	r3, r6, #1
 8003e84:	462a      	mov	r2, r5
 8003e86:	4629      	mov	r1, r5
 8003e88:	f604 7064 	addw	r0, r4, #3940	; 0xf64
 8003e8c:	f008 fc12 	bl	800c6b4 <arm_mult_f32>

  /* Perform overlap and add */
  for (i = 0; i < N3; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	e065      	b.n	8003f60 <Preprocess+0x848>
    simple_agc(st, Pframe, st->ft);
 8003e94:	f204 4144 	addw	r1, r4, #1092	; 0x444
 8003e98:	eeb0 0a68 	vmov.f32	s0, s17
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f7ff fa01 	bl	80032a4 <simple_agc>
 8003ea2:	e7e0      	b.n	8003e66 <Preprocess+0x74e>
    for (i = 0; i < 2 * N; i++)
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	dd14      	ble.n	8003ed4 <Preprocess+0x7bc>
      if (fabsf(st->frame[i]) > max_sample)
 8003eaa:	f103 0210 	add.w	r2, r3, #16
 8003eae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003eb2:	edd2 7a01 	vldr	s15, [r2, #4]
 8003eb6:	eef0 7ae7 	vabs.f32	s15, s15
 8003eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec2:	ddef      	ble.n	8003ea4 <Preprocess+0x78c>
        max_sample = fabsf(st->frame[i]);
 8003ec4:	eeb0 7a67 	vmov.f32	s14, s15
 8003ec8:	e7ec      	b.n	8003ea4 <Preprocess+0x78c>
    float max_sample = 0;
 8003eca:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003f10 <Preprocess+0x7f8>
    for (i = 0; i < 2 * N; i++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9901      	ldr	r1, [sp, #4]
 8003ed2:	e7e8      	b.n	8003ea6 <Preprocess+0x78e>
    if (max_sample > 28000.f)
 8003ed4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003f28 <Preprocess+0x810>
 8003ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	ddcf      	ble.n	8003e82 <Preprocess+0x76a>
      float damp = 28000.f / max_sample;
 8003ee2:	eec7 6a87 	vdiv.f32	s13, s15, s14
      for (i = 0; i < 2 * N; i++)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	9901      	ldr	r1, [sp, #4]
 8003eea:	e00a      	b.n	8003f02 <Preprocess+0x7ea>
        st->frame[i] *= damp;
 8003eec:	f102 0310 	add.w	r3, r2, #16
 8003ef0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003ef4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ef8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003efc:	edc3 7a01 	vstr	s15, [r3, #4]
      for (i = 0; i < 2 * N; i++)
 8003f00:	3201      	adds	r2, #1
 8003f02:	4291      	cmp	r1, r2
 8003f04:	dcf2      	bgt.n	8003eec <Preprocess+0x7d4>
 8003f06:	e7bc      	b.n	8003e82 <Preprocess+0x76a>
 8003f08:	0800f420 	.word	0x0800f420
 8003f0c:	38d1b717 	.word	0x38d1b717
 8003f10:	00000000 	.word	0x00000000
 8003f14:	3e4ccccd 	.word	0x3e4ccccd
 8003f18:	3f4ccccd 	.word	0x3f4ccccd
 8003f1c:	3e19999a 	.word	0x3e19999a
 8003f20:	3e4bc6a8 	.word	0x3e4bc6a8
 8003f24:	3e04b5dd 	.word	0x3e04b5dd
 8003f28:	46dac000 	.word	0x46dac000
  {
    x[i] = (spx_int16_t)st->outbuf[i] + (spx_int16_t)st->frame[i];
 8003f2c:	f603 4218 	addw	r2, r3, #3096	; 0xc18
 8003f30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003f34:	edd2 7a01 	vldr	s15, [r2, #4]
 8003f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f3c:	ee17 2a90 	vmov	r2, s15
 8003f40:	f103 0110 	add.w	r1, r3, #16
 8003f44:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003f48:	edd1 7a01 	vldr	s15, [r1, #4]
 8003f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f50:	ee17 1a90 	vmov	r1, s15
 8003f54:	b289      	uxth	r1, r1
 8003f56:	fa11 f282 	uxtah	r2, r1, r2
 8003f5a:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
  for (i = 0; i < N3; i++)
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4543      	cmp	r3, r8
 8003f62:	dbe3      	blt.n	8003f2c <Preprocess+0x814>
  }
  for (i = 0; i < N4; i++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	9803      	ldr	r0, [sp, #12]
 8003f68:	e00e      	b.n	8003f88 <Preprocess+0x870>
  {
    x[N3 + i] = (spx_int16_t)(st->frame[N3 + i]);
 8003f6a:	eb03 0108 	add.w	r1, r3, r8
 8003f6e:	f101 0210 	add.w	r2, r1, #16
 8003f72:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003f76:	edd2 7a01 	vldr	s15, [r2, #4]
 8003f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f7e:	ee17 2a90 	vmov	r2, s15
 8003f82:	f82a 2011 	strh.w	r2, [sl, r1, lsl #1]
  for (i = 0; i < N4; i++)
 8003f86:	3301      	adds	r3, #1
 8003f88:	4283      	cmp	r3, r0
 8003f8a:	dbee      	blt.n	8003f6a <Preprocess+0x852>
  }

  /* Update outbuf */
  for (i = 0; i < N3; i++)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	e00b      	b.n	8003fa8 <Preprocess+0x890>
  {
    st->outbuf[i] = st->frame[st->frame_size + i];
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	4413      	add	r3, r2
 8003f94:	3310      	adds	r3, #16
 8003f96:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	f602 4318 	addw	r3, r2, #3096	; 0xc18
 8003fa0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003fa4:	6059      	str	r1, [r3, #4]
  for (i = 0; i < N3; i++)
 8003fa6:	3201      	adds	r2, #1
 8003fa8:	4542      	cmp	r2, r8
 8003faa:	dbf1      	blt.n	8003f90 <Preprocess+0x878>
  }

  /* FIXME: This VAD is a kludge */
  st->speech_prob = Pframe;
 8003fac:	edc4 8a10 	vstr	s17, [r4, #64]	; 0x40

  return 1;
}
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	b005      	add	sp, #20
 8003fb4:	ecbd 8b06 	vpop	{d8-d10}
 8003fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003fbc <Preprocess_setup>:

int Preprocess_setup(SpeexPreprocessState *state, int request, void *ptr)
{
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	4615      	mov	r5, r2
  float *ptr_float = (float *)ptr;
  int ret = 0;
  int i;
  SpeexPreprocessState *st;
  st = (SpeexPreprocessState *)state;
  switch (request)
 8003fc2:	292f      	cmp	r1, #47	; 0x2f
 8003fc4:	f200 821d 	bhi.w	8004402 <Preprocess_setup+0x446>
 8003fc8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003fcc:	00360032 	.word	0x00360032
 8003fd0:	0041003a 	.word	0x0041003a
 8003fd4:	01150111 	.word	0x01150111
 8003fd8:	00680048 	.word	0x00680048
 8003fdc:	011d0119 	.word	0x011d0119
 8003fe0:	00300030 	.word	0x00300030
 8003fe4:	00300030 	.word	0x00300030
 8003fe8:	01350121 	.word	0x01350121
 8003fec:	01550141 	.word	0x01550141
 8003ff0:	01680161 	.word	0x01680161
 8003ff4:	0173016c 	.word	0x0173016c
 8003ff8:	017e0177 	.word	0x017e0177
 8003ffc:	01850182 	.word	0x01850182
 8004000:	008b006f 	.word	0x008b006f
 8004004:	00c900ad 	.word	0x00c900ad
 8004008:	00fb00eb 	.word	0x00fb00eb
 800400c:	0189021b 	.word	0x0189021b
 8004010:	0197021b 	.word	0x0197021b
 8004014:	01ad021b 	.word	0x01ad021b
 8004018:	01c3021b 	.word	0x01c3021b
 800401c:	01ad021b 	.word	0x01ad021b
 8004020:	01d7021b 	.word	0x01d7021b
 8004024:	01d9021b 	.word	0x01d9021b
 8004028:	021101f0 	.word	0x021101f0
 800402c:	2000      	movs	r0, #0
    default:
      ret = -1;
      break;
  }
  return ret;
}
 800402e:	bd38      	pop	{r3, r4, r5, pc}
      st->denoise_enabled = *ptr_int32;
 8004030:	6813      	ldr	r3, [r2, #0]
 8004032:	6143      	str	r3, [r0, #20]
  int ret = 0;
 8004034:	4608      	mov	r0, r1
      break;
 8004036:	e7fa      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = st->denoise_enabled;
 8004038:	6943      	ldr	r3, [r0, #20]
 800403a:	6013      	str	r3, [r2, #0]
  int ret = 0;
 800403c:	2000      	movs	r0, #0
      break;
 800403e:	e7f6      	b.n	800402e <Preprocess_setup+0x72>
      st->agc_enabled = *ptr_int32;
 8004040:	6813      	ldr	r3, [r2, #0]
 8004042:	f500 5440 	add.w	r4, r0, #12288	; 0x3000
 8004046:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  int ret = 0;
 800404a:	2000      	movs	r0, #0
      break;
 800404c:	e7ef      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = st->agc_enabled;
 800404e:	f500 5440 	add.w	r4, r0, #12288	; 0x3000
 8004052:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8004056:	6013      	str	r3, [r2, #0]
  int ret = 0;
 8004058:	2000      	movs	r0, #0
      break;
 800405a:	e7e8      	b.n	800402e <Preprocess_setup+0x72>
      st->agc_level = *ptr_float;
 800405c:	edd2 7a00 	vldr	s15, [r2]
 8004060:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8004064:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
      if (st->agc_level < 1)
 8004068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800406c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004074:	d40f      	bmi.n	8004096 <Preprocess_setup+0xda>
      if (st->agc_level > 32768)
 8004076:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800407a:	ed93 7a9a 	vldr	s14, [r3, #616]	; 0x268
 800407e:	eddf 7aca 	vldr	s15, [pc, #808]	; 80043a8 <Preprocess_setup+0x3ec>
 8004082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408a:	f340 81bd 	ble.w	8004408 <Preprocess_setup+0x44c>
        st->agc_level = 32768;
 800408e:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
  int ret = 0;
 8004092:	2000      	movs	r0, #0
 8004094:	e7cb      	b.n	800402e <Preprocess_setup+0x72>
        st->agc_level = 1;
 8004096:	ed83 7a9a 	vstr	s14, [r3, #616]	; 0x268
 800409a:	e7ec      	b.n	8004076 <Preprocess_setup+0xba>
      *ptr_float = st->agc_level;
 800409c:	f500 5440 	add.w	r4, r0, #12288	; 0x3000
 80040a0:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 80040a4:	6013      	str	r3, [r2, #0]
  int ret = 0;
 80040a6:	2000      	movs	r0, #0
      break;
 80040a8:	e7c1      	b.n	800402e <Preprocess_setup+0x72>
      st->max_increase_step = expf(0.11513f * (*ptr_int32) * st->frame_size / st->sampling_rate);
 80040aa:	ed92 7a00 	vldr	s14, [r2]
 80040ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040b2:	eddf 7ab9 	vldr	s15, [pc, #740]	; 8004398 <Preprocess_setup+0x3dc>
 80040b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ba:	edd0 7a00 	vldr	s15, [r0]
 80040be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040c6:	ed90 7a02 	vldr	s14, [r0, #8]
 80040ca:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80040ce:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80040d2:	f008 fe9d 	bl	800ce10 <expf>
 80040d6:	f504 5451 	add.w	r4, r4, #13376	; 0x3440
 80040da:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
  int ret = 0;
 80040de:	2000      	movs	r0, #0
      break;
 80040e0:	e7a5      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = (spx_int32_t)floorf(.5f + 8.6858f * logf(st->max_increase_step) * st->sampling_rate / st->frame_size);
 80040e2:	f500 5351 	add.w	r3, r0, #13376	; 0x3440
 80040e6:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80040ea:	f008 fec7 	bl	800ce7c <logf>
 80040ee:	eddf 7aab 	vldr	s15, [pc, #684]	; 800439c <Preprocess_setup+0x3e0>
 80040f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80040f6:	edd4 7a02 	vldr	s15, [r4, #8]
 80040fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004102:	ed94 7a00 	vldr	s14, [r4]
 8004106:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800410a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800410e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004112:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004116:	f009 f877 	bl	800d208 <floorf>
 800411a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800411e:	ed85 0a00 	vstr	s0, [r5]
  int ret = 0;
 8004122:	2000      	movs	r0, #0
      break;
 8004124:	e783      	b.n	800402e <Preprocess_setup+0x72>
      st->max_decrease_step = expf(0.11513f * (*ptr_int32) * st->frame_size / st->sampling_rate);
 8004126:	ed92 7a00 	vldr	s14, [r2]
 800412a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800412e:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8004398 <Preprocess_setup+0x3dc>
 8004132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004136:	edd0 7a00 	vldr	s15, [r0]
 800413a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800413e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004142:	ed90 7a02 	vldr	s14, [r0, #8]
 8004146:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800414a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800414e:	f008 fe5f 	bl	800ce10 <expf>
 8004152:	f504 5452 	add.w	r4, r4, #13440	; 0x3480
 8004156:	ed84 0a00 	vstr	s0, [r4]
  int ret = 0;
 800415a:	2000      	movs	r0, #0
      break;
 800415c:	e767      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = (spx_int32_t)floorf(.5f + 8.6858f * logf(st->max_decrease_step) * st->sampling_rate / st->frame_size);
 800415e:	f500 5352 	add.w	r3, r0, #13440	; 0x3480
 8004162:	ed93 0a00 	vldr	s0, [r3]
 8004166:	f008 fe89 	bl	800ce7c <logf>
 800416a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800439c <Preprocess_setup+0x3e0>
 800416e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004172:	edd4 7a02 	vldr	s15, [r4, #8]
 8004176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800417a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800417e:	ed94 7a00 	vldr	s14, [r4]
 8004182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004186:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800418a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800418e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004192:	f009 f839 	bl	800d208 <floorf>
 8004196:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800419a:	ed85 0a00 	vstr	s0, [r5]
  int ret = 0;
 800419e:	2000      	movs	r0, #0
      break;
 80041a0:	e745      	b.n	800402e <Preprocess_setup+0x72>
      st->max_gain = expf(0.11513f * (*ptr_int32));
 80041a2:	edd2 7a00 	vldr	s15, [r2]
 80041a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041aa:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8004398 <Preprocess_setup+0x3dc>
 80041ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 80041b2:	f008 fe2d 	bl	800ce10 <expf>
 80041b6:	f504 5451 	add.w	r4, r4, #13376	; 0x3440
 80041ba:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
  int ret = 0;
 80041be:	2000      	movs	r0, #0
      break;
 80041c0:	e735      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = (spx_int32_t)floorf(.5f + 8.6858f * logf(st->max_gain));
 80041c2:	f500 5451 	add.w	r4, r0, #13376	; 0x3440
 80041c6:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 80041ca:	f008 fe57 	bl	800ce7c <logf>
 80041ce:	eddf 7a73 	vldr	s15, [pc, #460]	; 800439c <Preprocess_setup+0x3e0>
 80041d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80041d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80041da:	ee30 0a27 	vadd.f32	s0, s0, s15
 80041de:	f009 f813 	bl	800d208 <floorf>
 80041e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80041e6:	ed85 0a00 	vstr	s0, [r5]
  int ret = 0;
 80041ea:	2000      	movs	r0, #0
      break;
 80041ec:	e71f      	b.n	800402e <Preprocess_setup+0x72>
      st->vad_enabled = *ptr_int32;
 80041ee:	6813      	ldr	r3, [r2, #0]
 80041f0:	6183      	str	r3, [r0, #24]
  int ret = 0;
 80041f2:	2000      	movs	r0, #0
      break;
 80041f4:	e71b      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = st->vad_enabled;
 80041f6:	6983      	ldr	r3, [r0, #24]
 80041f8:	6013      	str	r3, [r2, #0]
  int ret = 0;
 80041fa:	2000      	movs	r0, #0
      break;
 80041fc:	e717      	b.n	800402e <Preprocess_setup+0x72>
      st->dereverb_enabled = *ptr_int32;
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	61c3      	str	r3, [r0, #28]
  int ret = 0;
 8004202:	2000      	movs	r0, #0
      break;
 8004204:	e713      	b.n	800402e <Preprocess_setup+0x72>
      (*(spx_int32_t *)ptr) = st->dereverb_enabled;
 8004206:	69c3      	ldr	r3, [r0, #28]
 8004208:	6013      	str	r3, [r2, #0]
  int ret = 0;
 800420a:	2000      	movs	r0, #0
      break;
 800420c:	e70f      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = MIN32FIXED(100, MAX32FIXED(0, *ptr_int32));
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	2b64      	cmp	r3, #100	; 0x64
 8004212:	dc0e      	bgt.n	8004232 <Preprocess_setup+0x276>
 8004214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004218:	602b      	str	r3, [r5, #0]
      st->speech_prob_start = DIV32_16(MULT16_16(Q15ONE, *ptr_int32), 100);
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004222:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043a0 <Preprocess_setup+0x3e4>
 8004226:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800422a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
  int ret = 0;
 800422e:	2000      	movs	r0, #0
      break;
 8004230:	e6fd      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = MIN32FIXED(100, MAX32FIXED(0, *ptr_int32));
 8004232:	2364      	movs	r3, #100	; 0x64
 8004234:	e7f0      	b.n	8004218 <Preprocess_setup+0x25c>
      *ptr_int32 = (spx_int32_t)MULT16_16_Q15(st->speech_prob_start, 100);
 8004236:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 800423a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80043a0 <Preprocess_setup+0x3e4>
 800423e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004246:	edc2 7a00 	vstr	s15, [r2]
  int ret = 0;
 800424a:	2000      	movs	r0, #0
      break;
 800424c:	e6ef      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = MIN32FIXED(100, MAX32FIXED(0, *ptr_int32));
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	dc0e      	bgt.n	8004272 <Preprocess_setup+0x2b6>
 8004254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004258:	602b      	str	r3, [r5, #0]
      st->speech_prob_continue = DIV32_16(MULT16_16(Q15ONE, *ptr_int32), 100);
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004262:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80043a0 <Preprocess_setup+0x3e4>
 8004266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800426a:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
  int ret = 0;
 800426e:	2000      	movs	r0, #0
      break;
 8004270:	e6dd      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = MIN32FIXED(100, MAX32FIXED(0, *ptr_int32));
 8004272:	2364      	movs	r3, #100	; 0x64
 8004274:	e7f0      	b.n	8004258 <Preprocess_setup+0x29c>
      *ptr_int32 = (spx_int32_t)MULT16_16_Q15(st->speech_prob_continue, 100);
 8004276:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 800427a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80043a0 <Preprocess_setup+0x3e4>
 800427e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004286:	edc2 7a00 	vstr	s15, [r2]
  int ret = 0;
 800428a:	2000      	movs	r0, #0
      break;
 800428c:	e6cf      	b.n	800402e <Preprocess_setup+0x72>
      st->noise_suppress = -ABS(*ptr_int32);
 800428e:	6813      	ldr	r3, [r2, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	bfc8      	it	gt
 8004294:	425b      	neggt	r3, r3
 8004296:	6303      	str	r3, [r0, #48]	; 0x30
  int ret = 0;
 8004298:	2000      	movs	r0, #0
      break;
 800429a:	e6c8      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = st->noise_suppress;
 800429c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800429e:	6013      	str	r3, [r2, #0]
  int ret = 0;
 80042a0:	2000      	movs	r0, #0
      break;
 80042a2:	e6c4      	b.n	800402e <Preprocess_setup+0x72>
      st->echo_suppress = -ABS(*ptr_int32);
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfc8      	it	gt
 80042aa:	425b      	neggt	r3, r3
 80042ac:	6343      	str	r3, [r0, #52]	; 0x34
  int ret = 0;
 80042ae:	2000      	movs	r0, #0
      break;
 80042b0:	e6bd      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = st->echo_suppress;
 80042b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042b4:	6013      	str	r3, [r2, #0]
  int ret = 0;
 80042b6:	2000      	movs	r0, #0
      break;
 80042b8:	e6b9      	b.n	800402e <Preprocess_setup+0x72>
      st->echo_suppress_active = -ABS(*ptr_int32);
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bfc8      	it	gt
 80042c0:	425b      	neggt	r3, r3
 80042c2:	6383      	str	r3, [r0, #56]	; 0x38
  int ret = 0;
 80042c4:	2000      	movs	r0, #0
      break;
 80042c6:	e6b2      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = st->echo_suppress_active;
 80042c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042ca:	6013      	str	r3, [r2, #0]
  int ret = 0;
 80042cc:	2000      	movs	r0, #0
      break;
 80042ce:	e6ae      	b.n	800402e <Preprocess_setup+0x72>
      st->echo_state = (SpeexEchoState *)ptr;
 80042d0:	63e2      	str	r2, [r4, #60]	; 0x3c
  int ret = 0;
 80042d2:	2000      	movs	r0, #0
      break;
 80042d4:	e6ab      	b.n	800402e <Preprocess_setup+0x72>
      (*(SpeexEchoState **)ptr) = (SpeexEchoState *)st->echo_state;
 80042d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80042d8:	6013      	str	r3, [r2, #0]
  int ret = 0;
 80042da:	2000      	movs	r0, #0
      break;
 80042dc:	e6a7      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = (spx_int32_t)powf(st->loudness, 1.0f / LOUDNESS_EXP);
 80042de:	f500 5451 	add.w	r4, r0, #13376	; 0x3440
 80042e2:	eddf 0a30 	vldr	s1, [pc, #192]	; 80043a4 <Preprocess_setup+0x3e8>
 80042e6:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80042ea:	f008 fdf5 	bl	800ced8 <powf>
 80042ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80042f2:	ed85 0a00 	vstr	s0, [r5]
  int ret = 0;
 80042f6:	2000      	movs	r0, #0
      break;
 80042f8:	e699      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = (spx_int32_t)floorf(.5f + 8.6858f * logf(st->agc_gain));
 80042fa:	f500 5451 	add.w	r4, r0, #13376	; 0x3440
 80042fe:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8004302:	f008 fdbb 	bl	800ce7c <logf>
 8004306:	eddf 7a25 	vldr	s15, [pc, #148]	; 800439c <Preprocess_setup+0x3e0>
 800430a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800430e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004312:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004316:	f008 ff77 	bl	800d208 <floorf>
 800431a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800431e:	ed85 0a00 	vstr	s0, [r5]
  int ret = 0;
 8004322:	2000      	movs	r0, #0
      break;
 8004324:	e683      	b.n	800402e <Preprocess_setup+0x72>
      *ptr_int32 = st->ps_size;
 8004326:	6843      	ldr	r3, [r0, #4]
 8004328:	6013      	str	r3, [r2, #0]
  int ret = 0;
 800432a:	2000      	movs	r0, #0
      break;
 800432c:	e67f      	b.n	800402e <Preprocess_setup+0x72>
        ptr_int32[i] = (spx_int32_t) st->ps[i];
 800432e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004332:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004336:	edd2 7a01 	vldr	s15, [r2, #4]
 800433a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800433e:	ee17 2a90 	vmov	r2, s15
 8004342:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
      for (i = 0; i < st->ps_size; i++)
 8004346:	3301      	adds	r3, #1
 8004348:	6862      	ldr	r2, [r4, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	dcef      	bgt.n	800432e <Preprocess_setup+0x372>
  int ret = 0;
 800434e:	2000      	movs	r0, #0
 8004350:	e66d      	b.n	800402e <Preprocess_setup+0x72>
  switch (request)
 8004352:	2300      	movs	r3, #0
 8004354:	e7f8      	b.n	8004348 <Preprocess_setup+0x38c>
        ptr_int32[i] = (spx_int32_t) PSHR32(st->noise[i], NOISE_SHIFT);
 8004356:	f503 629b 	add.w	r2, r3, #1240	; 0x4d8
 800435a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800435e:	edd2 7a01 	vldr	s15, [r2, #4]
 8004362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004366:	ee17 2a90 	vmov	r2, s15
 800436a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
      for (i = 0; i < st->ps_size; i++)
 800436e:	3301      	adds	r3, #1
 8004370:	6862      	ldr	r2, [r4, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	dcef      	bgt.n	8004356 <Preprocess_setup+0x39a>
  int ret = 0;
 8004376:	2000      	movs	r0, #0
 8004378:	e659      	b.n	800402e <Preprocess_setup+0x72>
  switch (request)
 800437a:	2300      	movs	r3, #0
 800437c:	e7f8      	b.n	8004370 <Preprocess_setup+0x3b4>
      *ptr_int32 = (spx_int32_t)MULT16_16_Q15(st->speech_prob, 100);
 800437e:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8004382:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80043a0 <Preprocess_setup+0x3e4>
 8004386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800438a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800438e:	edc2 7a00 	vstr	s15, [r2]
  int ret = 0;
 8004392:	2000      	movs	r0, #0
      break;
 8004394:	e64b      	b.n	800402e <Preprocess_setup+0x72>
 8004396:	bf00      	nop
 8004398:	3debc947 	.word	0x3debc947
 800439c:	410af909 	.word	0x410af909
 80043a0:	42c80000 	.word	0x42c80000
 80043a4:	3e4ccccd 	.word	0x3e4ccccd
 80043a8:	47000000 	.word	0x47000000
      st->agc_level = (*(spx_int32_t *)ptr);
 80043ac:	edd2 7a00 	vldr	s15, [r2]
 80043b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b4:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 80043b8:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
      if (st->agc_level < 1)
 80043bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d40e      	bmi.n	80043e8 <Preprocess_setup+0x42c>
      if (st->agc_level > 32768)
 80043ca:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80043ce:	ed93 7a9a 	vldr	s14, [r3, #616]	; 0x268
 80043d2:	ed5f 7a0b 	vldr	s15, [pc, #-44]	; 80043a8 <Preprocess_setup+0x3ec>
 80043d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	dd15      	ble.n	800440c <Preprocess_setup+0x450>
        st->agc_level = 32768;
 80043e0:	edc3 7a9a 	vstr	s15, [r3, #616]	; 0x268
  int ret = 0;
 80043e4:	2000      	movs	r0, #0
 80043e6:	e622      	b.n	800402e <Preprocess_setup+0x72>
        st->agc_level = 1;
 80043e8:	ed83 7a9a 	vstr	s14, [r3, #616]	; 0x268
 80043ec:	e7ed      	b.n	80043ca <Preprocess_setup+0x40e>
      (*(spx_int32_t *)ptr) = (spx_int32_t)st->agc_level;
 80043ee:	f500 5440 	add.w	r4, r0, #12288	; 0x3000
 80043f2:	edd4 7a9a 	vldr	s15, [r4, #616]	; 0x268
 80043f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043fa:	edc2 7a00 	vstr	s15, [r2]
  int ret = 0;
 80043fe:	2000      	movs	r0, #0
      break;
 8004400:	e615      	b.n	800402e <Preprocess_setup+0x72>
      ret = -1;
 8004402:	f04f 30ff 	mov.w	r0, #4294967295
 8004406:	e612      	b.n	800402e <Preprocess_setup+0x72>
  int ret = 0;
 8004408:	2000      	movs	r0, #0
 800440a:	e610      	b.n	800402e <Preprocess_setup+0x72>
 800440c:	2000      	movs	r0, #0
  return ret;
 800440e:	e60e      	b.n	800402e <Preprocess_setup+0x72>

08004410 <dradf2>:
{
  if (n != 1) { drfti1(n, wsave + n, ifac); }
}

static void dradf2(int ido, int l1, float *cc, float *ch, float *wa1)
{
 8004410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004414:	b087      	sub	sp, #28
 8004416:	4680      	mov	r8, r0
 8004418:	460f      	mov	r7, r1
 800441a:	9103      	str	r1, [sp, #12]
 800441c:	4614      	mov	r4, r2
 800441e:	461d      	mov	r5, r3
 8004420:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
  int i, k;
  float ti2, tr2;
  int t0, t1, t2, t3, t4, t5, t6;

  t1 = 0;
  t0 = (t2 = l1 * ido);
 8004424:	fb00 f001 	mul.w	r0, r0, r1
 8004428:	9005      	str	r0, [sp, #20]
  t3 = ido << 1;
 800442a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800442e:	9304      	str	r3, [sp, #16]
  t1 = 0;
 8004430:	2200      	movs	r2, #0
  for (k = 0; k < l1; k++)
 8004432:	4611      	mov	r1, r2
 8004434:	469c      	mov	ip, r3
 8004436:	e01f      	b.n	8004478 <dradf2+0x68>
  {
    ch[t1 << 1] = cc[t1] + cc[t2];
 8004438:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 800443c:	edd6 7a00 	vldr	s15, [r6]
 8004440:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8004444:	ed93 7a00 	vldr	s14, [r3]
 8004448:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800444c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004450:	edce 7a00 	vstr	s15, [lr]
    ch[(t1 << 1) + t3 - 1] = cc[t1] - cc[t2];
 8004454:	edd6 7a00 	vldr	s15, [r6]
 8004458:	ed93 7a00 	vldr	s14, [r3]
 800445c:	eb0c 0342 	add.w	r3, ip, r2, lsl #1
 8004460:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004464:	3b01      	subs	r3, #1
 8004466:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800446a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800446e:	edc3 7a00 	vstr	s15, [r3]
    t1 += ido;
 8004472:	4442      	add	r2, r8
    t2 += ido;
 8004474:	4440      	add	r0, r8
  for (k = 0; k < l1; k++)
 8004476:	3101      	adds	r1, #1
 8004478:	42b9      	cmp	r1, r7
 800447a:	dbdd      	blt.n	8004438 <dradf2+0x28>
  }

  if (ido < 2) { return; }
 800447c:	f1b8 0f01 	cmp.w	r8, #1
 8004480:	f340 80ac 	ble.w	80045dc <dradf2+0x1cc>
  if (ido == 2) { goto L105; }
 8004484:	f1b8 0f02 	cmp.w	r8, #2
 8004488:	f000 8084 	beq.w	8004594 <dradf2+0x184>

  t1 = 0;
  t2 = t0;
 800448c:	9b05      	ldr	r3, [sp, #20]
 800448e:	9302      	str	r3, [sp, #8]
  t1 = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	9301      	str	r3, [sp, #4]
  for (k = 0; k < l1; k++)
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	e069      	b.n	800456c <dradf2+0x15c>
    t4 = (t1 << 1) + (ido << 1);
    t5 = t1;
    t6 = t1 + t1;
    for (i = 2; i < ido; i += 2)
    {
      t3 += 2;
 8004498:	1c96      	adds	r6, r2, #2
      t4 -= 2;
 800449a:	f1a0 0c02 	sub.w	ip, r0, #2
      t5 += 2;
 800449e:	f103 0e02 	add.w	lr, r3, #2
      t6 += 2;
 80044a2:	f101 0902 	add.w	r9, r1, #2
      tr2 = wa1[i - 2] * cc[t3 - 1] + wa1[i - 1] * cc[t3];
 80044a6:	f107 4a80 	add.w	sl, r7, #1073741824	; 0x40000000
 80044aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80044ae:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
 80044b2:	edda 7a00 	vldr	s15, [sl]
 80044b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80044ba:	3201      	adds	r2, #1
 80044bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80044c0:	edd2 6a00 	vldr	s13, [r2]
 80044c4:	ee27 7aa6 	vmul.f32	s14, s15, s13
 80044c8:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80044cc:	3a01      	subs	r2, #1
 80044ce:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 80044d2:	ed92 6a00 	vldr	s12, [r2]
 80044d6:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 80044da:	edd2 5a00 	vldr	s11, [r2]
 80044de:	ee26 5a25 	vmul.f32	s10, s12, s11
 80044e2:	ee37 7a05 	vadd.f32	s14, s14, s10
      ti2 = wa1[i - 2] * cc[t3] - wa1[i - 1] * cc[t3 - 1];
 80044e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80044ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 80044ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
      ch[t6] = cc[t5] + ti2;
 80044f2:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 80044f6:	edd2 6a00 	vldr	s13, [r2]
 80044fa:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 80044fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004502:	edca 6a00 	vstr	s13, [sl]
      ch[t4] = ti2 - cc[t5];
 8004506:	edd2 6a00 	vldr	s13, [r2]
 800450a:	eb05 028c 	add.w	r2, r5, ip, lsl #2
 800450e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004512:	edc2 7a00 	vstr	s15, [r2]
      ch[t6 - 1] = cc[t5 - 1] + tr2;
 8004516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800451a:	3301      	adds	r3, #1
 800451c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004520:	edd3 7a00 	vldr	s15, [r3]
 8004524:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004528:	3101      	adds	r1, #1
 800452a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800452e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004532:	edc1 7a00 	vstr	s15, [r1]
      ch[t4 - 1] = cc[t5 - 1] - tr2;
 8004536:	edd3 7a00 	vldr	s15, [r3]
 800453a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800453e:	3803      	subs	r0, #3
 8004540:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8004544:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004548:	edc0 7a00 	vstr	s15, [r0]
    for (i = 2; i < ido; i += 2)
 800454c:	3702      	adds	r7, #2
      t6 += 2;
 800454e:	4649      	mov	r1, r9
      t5 += 2;
 8004550:	4673      	mov	r3, lr
      t4 -= 2;
 8004552:	4660      	mov	r0, ip
      t3 += 2;
 8004554:	4632      	mov	r2, r6
    for (i = 2; i < ido; i += 2)
 8004556:	4547      	cmp	r7, r8
 8004558:	db9e      	blt.n	8004498 <dradf2+0x88>
    }
    t1 += ido;
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	4443      	add	r3, r8
 800455e:	9301      	str	r3, [sp, #4]
    t2 += ido;
 8004560:	9b02      	ldr	r3, [sp, #8]
 8004562:	4443      	add	r3, r8
 8004564:	9302      	str	r3, [sp, #8]
  for (k = 0; k < l1; k++)
 8004566:	9b00      	ldr	r3, [sp, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	9b00      	ldr	r3, [sp, #0]
 800456e:	9a03      	ldr	r2, [sp, #12]
 8004570:	4293      	cmp	r3, r2
 8004572:	da07      	bge.n	8004584 <dradf2+0x174>
    t4 = (t1 << 1) + (ido << 1);
 8004574:	9a04      	ldr	r2, [sp, #16]
 8004576:	9b01      	ldr	r3, [sp, #4]
 8004578:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    t6 = t1 + t1;
 800457c:	0059      	lsls	r1, r3, #1
    t3 = t2;
 800457e:	9a02      	ldr	r2, [sp, #8]
    for (i = 2; i < ido; i += 2)
 8004580:	2702      	movs	r7, #2
 8004582:	e7e8      	b.n	8004556 <dradf2+0x146>
  }

  if (ido % 2 == 1) { return; }
 8004584:	f1b8 0f00 	cmp.w	r8, #0
 8004588:	f008 0301 	and.w	r3, r8, #1
 800458c:	bfb8      	it	lt
 800458e:	425b      	neglt	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d023      	beq.n	80045dc <dradf2+0x1cc>

L105:
  t3 = (t2 = (t1 = ido) - 1);
 8004594:	f108 30ff 	add.w	r0, r8, #4294967295
  t2 += t0;
 8004598:	9e05      	ldr	r6, [sp, #20]
 800459a:	4406      	add	r6, r0
  t3 = (t2 = (t1 = ido) - 1);
 800459c:	4642      	mov	r2, r8
  for (k = 0; k < l1; k++)
 800459e:	2100      	movs	r1, #0
 80045a0:	f8dd e010 	ldr.w	lr, [sp, #16]
 80045a4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80045a8:	4561      	cmp	r1, ip
 80045aa:	da17      	bge.n	80045dc <dradf2+0x1cc>
  {
    ch[t1] = -cc[t2];
 80045ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80045b8:	eef1 7a67 	vneg.f32	s15, s15
 80045bc:	edc3 7a00 	vstr	s15, [r3]
    ch[t1 - 1] = cc[t3];
 80045c0:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80045c4:	3b01      	subs	r3, #1
 80045c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80045ca:	eb04 0780 	add.w	r7, r4, r0, lsl #2
 80045ce:	683f      	ldr	r7, [r7, #0]
 80045d0:	601f      	str	r7, [r3, #0]
    t1 += ido << 1;
 80045d2:	4472      	add	r2, lr
    t2 += ido;
 80045d4:	4446      	add	r6, r8
    t3 += ido;
 80045d6:	4440      	add	r0, r8
  for (k = 0; k < l1; k++)
 80045d8:	3101      	adds	r1, #1
 80045da:	e7e5      	b.n	80045a8 <dradf2+0x198>
  }
}
 80045dc:	b007      	add	sp, #28
 80045de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080045e4 <dradf4>:

static void dradf4(int ido, int l1, float *cc, float *ch, float *wa1,
                   float *wa2, float *wa3)
{
 80045e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e8:	b08b      	sub	sp, #44	; 0x2c
 80045ea:	4607      	mov	r7, r0
 80045ec:	9003      	str	r0, [sp, #12]
 80045ee:	9105      	str	r1, [sp, #20]
 80045f0:	4693      	mov	fp, r2
  static float hsqt2 = .70710678118654752f;
  int i, k, t0, t1, t2, t3, t4, t5, t6;
  float ci2, ci3, ci4, cr2, cr3, cr4, ti1, ti2, ti3, ti4, tr1, tr2, tr3, tr4;
  t0 = l1 * ido;
 80045f2:	460a      	mov	r2, r1
 80045f4:	fb00 f202 	mul.w	r2, r0, r2
 80045f8:	9208      	str	r2, [sp, #32]

  t1 = t0;
  t4 = t1 << 1;
 80045fa:	0055      	lsls	r5, r2, #1
 80045fc:	9509      	str	r5, [sp, #36]	; 0x24
  t2 = t1 + (t1 << 1);
 80045fe:	eb02 0642 	add.w	r6, r2, r2, lsl #1
  t1 = t0;
 8004602:	4691      	mov	r9, r2
  t3 = 0;
 8004604:	2000      	movs	r0, #0

  for (k = 0; k < l1; k++)
 8004606:	4604      	mov	r4, r0
 8004608:	e042      	b.n	8004690 <dradf4+0xac>
  {
    tr1 = cc[t1] + cc[t2];
 800460a:	eb0b 0c89 	add.w	ip, fp, r9, lsl #2
 800460e:	ed9c 7a00 	vldr	s14, [ip]
 8004612:	eb0b 0e86 	add.w	lr, fp, r6, lsl #2
 8004616:	edde 7a00 	vldr	s15, [lr]
 800461a:	ee37 7a27 	vadd.f32	s14, s14, s15
    tr2 = cc[t3] + cc[t4];
 800461e:	eb0b 0a80 	add.w	sl, fp, r0, lsl #2
 8004622:	edda 7a00 	vldr	s15, [sl]
 8004626:	eb0b 0885 	add.w	r8, fp, r5, lsl #2
 800462a:	edd8 6a00 	vldr	s13, [r8]
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13

    ch[t5 = t3 << 2] = tr1 + tr2;
 8004632:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 8004636:	ee77 6a27 	vadd.f32	s13, s14, s15
 800463a:	edc2 6a00 	vstr	s13, [r2]
    ch[(ido << 2) + t5 - 1] = tr2 - tr1;
 800463e:	00ba      	lsls	r2, r7, #2
 8004640:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004644:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8004648:	440a      	add	r2, r1
 800464a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800464e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004652:	edc2 7a00 	vstr	s15, [r2]
    ch[(t5 += (ido << 1)) - 1] = cc[t3] - cc[t4];
 8004656:	edda 7a00 	vldr	s15, [sl]
 800465a:	ed98 7a00 	vldr	s14, [r8]
 800465e:	007a      	lsls	r2, r7, #1
 8004660:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004664:	4411      	add	r1, r2
 8004666:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800466a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800466e:	edc1 7a00 	vstr	s15, [r1]
    ch[t5] = cc[t2] - cc[t1];
 8004672:	edde 7a00 	vldr	s15, [lr]
 8004676:	ed9c 7a00 	vldr	s14, [ip]
 800467a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800467e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004682:	edc2 7a00 	vstr	s15, [r2]

    t1 += ido;
 8004686:	44b9      	add	r9, r7
    t2 += ido;
 8004688:	443e      	add	r6, r7
    t3 += ido;
 800468a:	4438      	add	r0, r7
    t4 += ido;
 800468c:	443d      	add	r5, r7
  for (k = 0; k < l1; k++)
 800468e:	3401      	adds	r4, #1
 8004690:	9a05      	ldr	r2, [sp, #20]
 8004692:	4294      	cmp	r4, r2
 8004694:	dbb9      	blt.n	800460a <dradf4+0x26>
  }

  if (ido < 2) { return; }
 8004696:	9a03      	ldr	r2, [sp, #12]
 8004698:	2a01      	cmp	r2, #1
 800469a:	f340 814f 	ble.w	800493c <dradf4+0x358>
  if (ido == 2) { goto L105; }
 800469e:	2a02      	cmp	r2, #2
 80046a0:	f000 80f2 	beq.w	8004888 <dradf4+0x2a4>


  t1 = 0;
 80046a4:	2200      	movs	r2, #0
 80046a6:	9207      	str	r2, [sp, #28]
  for (k = 0; k < l1; k++)
 80046a8:	9206      	str	r2, [sp, #24]
 80046aa:	f8dd a020 	ldr.w	sl, [sp, #32]
 80046ae:	e0d8      	b.n	8004862 <dradf4+0x27e>
    t2 = t1;
    t4 = t1 << 2;
    t5 = (t6 = ido << 1) + t4;
    for (i = 2; i < ido; i += 2)
    {
      t3 = (t2 += 2);
 80046b0:	9a02      	ldr	r2, [sp, #8]
 80046b2:	f102 0c02 	add.w	ip, r2, #2
      t4 += 2;
 80046b6:	f104 0e02 	add.w	lr, r4, #2
      t5 -= 2;
 80046ba:	9a01      	ldr	r2, [sp, #4]
 80046bc:	f1a2 0802 	sub.w	r8, r2, #2

      t3 += t0;
 80046c0:	eb0a 020c 	add.w	r2, sl, ip
      cr2 = wa1[i - 2] * cc[t3 - 1] + wa1[i - 1] * cc[t3];
 80046c4:	f107 4580 	add.w	r5, r7, #1073741824	; 0x40000000
 80046c8:	3d02      	subs	r5, #2
 80046ca:	9914      	ldr	r1, [sp, #80]	; 0x50
 80046cc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80046d0:	edd1 7a00 	vldr	s15, [r1]
 80046d4:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 80046d8:	1856      	adds	r6, r2, r1
 80046da:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 80046de:	ed96 7a00 	vldr	s14, [r6]
 80046e2:	ee67 5a87 	vmul.f32	s11, s15, s14
 80046e6:	187e      	adds	r6, r7, r1
 80046e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80046ea:	eb00 0986 	add.w	r9, r0, r6, lsl #2
 80046ee:	edd9 6a00 	vldr	s13, [r9]
 80046f2:	eb0b 0982 	add.w	r9, fp, r2, lsl #2
 80046f6:	ed99 6a00 	vldr	s12, [r9]
 80046fa:	ee26 5a86 	vmul.f32	s10, s13, s12
 80046fe:	ee75 5a85 	vadd.f32	s11, s11, s10
      ci2 = wa1[i - 2] * cc[t3] - wa1[i - 1] * cc[t3 - 1];
 8004702:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004706:	ee27 7a26 	vmul.f32	s14, s14, s13
 800470a:	ee77 7ac7 	vsub.f32	s15, s15, s14
      t3 += t0;
 800470e:	4452      	add	r2, sl
      cr3 = wa2[i - 2] * cc[t3 - 1] + wa2[i - 1] * cc[t3];
 8004710:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004712:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 8004716:	edd9 6a00 	vldr	s13, [r9]
 800471a:	eb02 0901 	add.w	r9, r2, r1
 800471e:	eb0b 0989 	add.w	r9, fp, r9, lsl #2
 8004722:	ed99 7a00 	vldr	s14, [r9]
 8004726:	ee66 4a87 	vmul.f32	s9, s13, s14
 800472a:	eb00 0986 	add.w	r9, r0, r6, lsl #2
 800472e:	ed99 6a00 	vldr	s12, [r9]
 8004732:	eb0b 0982 	add.w	r9, fp, r2, lsl #2
 8004736:	ed99 5a00 	vldr	s10, [r9]
 800473a:	ee26 4a05 	vmul.f32	s8, s12, s10
 800473e:	ee74 4a84 	vadd.f32	s9, s9, s8
      ci3 = wa2[i - 2] * cc[t3] - wa2[i - 1] * cc[t3 - 1];
 8004742:	ee66 6a85 	vmul.f32	s13, s13, s10
 8004746:	ee27 7a06 	vmul.f32	s14, s14, s12
 800474a:	ee76 6ac7 	vsub.f32	s13, s13, s14
      t3 += t0;
 800474e:	4452      	add	r2, sl
      cr4 = wa3[i - 2] * cc[t3 - 1] + wa3[i - 1] * cc[t3];
 8004750:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004752:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004756:	ed95 6a00 	vldr	s12, [r5]
 800475a:	1855      	adds	r5, r2, r1
 800475c:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8004760:	ed95 5a00 	vldr	s10, [r5]
 8004764:	ee26 7a05 	vmul.f32	s14, s12, s10
 8004768:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800476c:	ed96 4a00 	vldr	s8, [r6]
 8004770:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8004774:	edd2 3a00 	vldr	s7, [r2]
 8004778:	ee24 3a23 	vmul.f32	s6, s8, s7
 800477c:	ee37 7a03 	vadd.f32	s14, s14, s6
      ci4 = wa3[i - 2] * cc[t3] - wa3[i - 1] * cc[t3 - 1];
 8004780:	ee26 6a23 	vmul.f32	s12, s12, s7
 8004784:	ee25 5a04 	vmul.f32	s10, s10, s8
 8004788:	ee36 6a45 	vsub.f32	s12, s12, s10

      tr1 = cr2 + cr4;
 800478c:	ee75 3a87 	vadd.f32	s7, s11, s14
      tr4 = cr4 - cr2;
 8004790:	ee37 7a65 	vsub.f32	s14, s14, s11
      ti1 = ci2 + ci4;
 8004794:	ee77 5a86 	vadd.f32	s11, s15, s12
      ti4 = ci2 - ci4;
 8004798:	ee77 7ac6 	vsub.f32	s15, s15, s12

      ti2 = cc[t2] + ci3;
 800479c:	eb0b 028c 	add.w	r2, fp, ip, lsl #2
 80047a0:	ed92 6a00 	vldr	s12, [r2]
 80047a4:	ee36 4a26 	vadd.f32	s8, s12, s13
      ti3 = cc[t2] - ci3;
 80047a8:	ee76 6a66 	vsub.f32	s13, s12, s13
      tr2 = cc[t2 - 1] + cr3;
 80047ac:	9a02      	ldr	r2, [sp, #8]
 80047ae:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 80047b2:	3001      	adds	r0, #1
 80047b4:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
 80047b8:	ed90 6a00 	vldr	s12, [r0]
 80047bc:	ee36 5a24 	vadd.f32	s10, s12, s9
      tr3 = cc[t2 - 1] - cr3;
 80047c0:	ee36 6a64 	vsub.f32	s12, s12, s9

      ch[t4 - 1] = tr1 + tr2;
 80047c4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80047c8:	3401      	adds	r4, #1
 80047ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80047ce:	ee73 4a85 	vadd.f32	s9, s7, s10
 80047d2:	edc4 4a00 	vstr	s9, [r4]
      ch[t4] = ti1 + ti2;
 80047d6:	eb03 028e 	add.w	r2, r3, lr, lsl #2
 80047da:	ee75 4a84 	vadd.f32	s9, s11, s8
 80047de:	edc2 4a00 	vstr	s9, [r2]

      ch[t5 - 1] = tr3 - ti4;
 80047e2:	9a01      	ldr	r2, [sp, #4]
 80047e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80047e8:	3a03      	subs	r2, #3
 80047ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80047ee:	ee76 4a67 	vsub.f32	s9, s12, s15
 80047f2:	edc2 4a00 	vstr	s9, [r2]
      ch[t5] = tr4 - ti3;
 80047f6:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 80047fa:	ee77 4a66 	vsub.f32	s9, s14, s13
 80047fe:	edc2 4a00 	vstr	s9, [r2]

      ch[t4 + t6 - 1] = ti4 + tr3;
 8004802:	9c04      	ldr	r4, [sp, #16]
 8004804:	eb04 020e 	add.w	r2, r4, lr
 8004808:	1850      	adds	r0, r2, r1
 800480a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800480e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004812:	edc0 7a00 	vstr	s15, [r0]
      ch[t4 + t6] = tr4 + ti3;
 8004816:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800481a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800481e:	ed82 7a00 	vstr	s14, [r2]

      ch[t5 + t6 - 1] = tr2 - tr1;
 8004822:	eb04 0208 	add.w	r2, r4, r8
 8004826:	4411      	add	r1, r2
 8004828:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800482c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004830:	ed81 5a00 	vstr	s10, [r1]
      ch[t5 + t6] = ti1 - ti2;
 8004834:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004838:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800483c:	edc2 5a00 	vstr	s11, [r2]
    for (i = 2; i < ido; i += 2)
 8004840:	3702      	adds	r7, #2
      t5 -= 2;
 8004842:	f8cd 8004 	str.w	r8, [sp, #4]
      t4 += 2;
 8004846:	4674      	mov	r4, lr
      t3 = (t2 += 2);
 8004848:	f8cd c008 	str.w	ip, [sp, #8]
    for (i = 2; i < ido; i += 2)
 800484c:	9a03      	ldr	r2, [sp, #12]
 800484e:	4297      	cmp	r7, r2
 8004850:	f6ff af2e 	blt.w	80046b0 <dradf4+0xcc>
    }
    t1 += ido;
 8004854:	9a07      	ldr	r2, [sp, #28]
 8004856:	9903      	ldr	r1, [sp, #12]
 8004858:	440a      	add	r2, r1
 800485a:	9207      	str	r2, [sp, #28]
  for (k = 0; k < l1; k++)
 800485c:	9a06      	ldr	r2, [sp, #24]
 800485e:	3201      	adds	r2, #1
 8004860:	9206      	str	r2, [sp, #24]
 8004862:	9a06      	ldr	r2, [sp, #24]
 8004864:	9905      	ldr	r1, [sp, #20]
 8004866:	428a      	cmp	r2, r1
 8004868:	da0a      	bge.n	8004880 <dradf4+0x29c>
    t4 = t1 << 2;
 800486a:	9a07      	ldr	r2, [sp, #28]
 800486c:	0094      	lsls	r4, r2, #2
    t5 = (t6 = ido << 1) + t4;
 800486e:	9903      	ldr	r1, [sp, #12]
 8004870:	0049      	lsls	r1, r1, #1
 8004872:	9104      	str	r1, [sp, #16]
 8004874:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004878:	9101      	str	r1, [sp, #4]
    for (i = 2; i < ido; i += 2)
 800487a:	2702      	movs	r7, #2
 800487c:	9202      	str	r2, [sp, #8]
 800487e:	e7e5      	b.n	800484c <dradf4+0x268>
  }
  if ((ido & 1) != 0) { return; }
 8004880:	9a03      	ldr	r2, [sp, #12]
 8004882:	f012 0f01 	tst.w	r2, #1
 8004886:	d159      	bne.n	800493c <dradf4+0x358>

L105:

  t2 = (t1 = t0 + ido - 1) + (t0 << 1);
 8004888:	9a03      	ldr	r2, [sp, #12]
 800488a:	9908      	ldr	r1, [sp, #32]
 800488c:	1854      	adds	r4, r2, r1
 800488e:	3c01      	subs	r4, #1
 8004890:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004892:	4427      	add	r7, r4
  t3 = ido << 2;
 8004894:	ea4f 0e82 	mov.w	lr, r2, lsl #2
  t4 = ido;
  t5 = ido << 1;
 8004898:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  t6 = ido;
 800489c:	4616      	mov	r6, r2
  t4 = ido;
 800489e:	4690      	mov	r8, r2
 80048a0:	4611      	mov	r1, r2

  for (k = 0; k < l1; k++)
 80048a2:	2500      	movs	r5, #0
 80048a4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80048a8:	e046      	b.n	8004938 <dradf4+0x354>
  {
    ti1 = -hsqt2 * (cc[t1] + cc[t2]);
 80048aa:	eb0b 0284 	add.w	r2, fp, r4, lsl #2
 80048ae:	edd2 7a00 	vldr	s15, [r2]
 80048b2:	eb0b 0287 	add.w	r2, fp, r7, lsl #2
 80048b6:	edd2 6a00 	vldr	s13, [r2]
 80048ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80048be:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8004944 <dradf4+0x360>
 80048c2:	ee27 7a06 	vmul.f32	s14, s14, s12
    tr1 = hsqt2 * (cc[t1] - cc[t2]);
 80048c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80048ca:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004948 <dradf4+0x364>
 80048ce:	ee67 7aa6 	vmul.f32	s15, s15, s13

    ch[t4 - 1] = tr1 + cc[t6 - 1];
 80048d2:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80048d6:	18b0      	adds	r0, r6, r2
 80048d8:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
 80048dc:	edd0 6a00 	vldr	s13, [r0]
 80048e0:	eb01 0a02 	add.w	sl, r1, r2
 80048e4:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 80048e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80048ec:	edca 6a00 	vstr	s13, [sl]
    ch[t4 + t5 - 1] = cc[t6 - 1] - tr1;
 80048f0:	edd0 6a00 	vldr	s13, [r0]
 80048f4:	eb01 000c 	add.w	r0, r1, ip
 80048f8:	4402      	add	r2, r0
 80048fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80048fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004902:	edc2 7a00 	vstr	s15, [r2]

    ch[t4] = ti1 - cc[t1 + t0];
 8004906:	9a08      	ldr	r2, [sp, #32]
 8004908:	18a2      	adds	r2, r4, r2
 800490a:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800490e:	edd2 7a00 	vldr	s15, [r2]
 8004912:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 8004916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800491a:	edca 7a00 	vstr	s15, [sl]
    ch[t4 + t5] = ti1 + cc[t1 + t0];
 800491e:	edd2 7a00 	vldr	s15, [r2]
 8004922:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800492a:	edc0 7a00 	vstr	s15, [r0]

    t1 += ido;
 800492e:	4444      	add	r4, r8
    t2 += ido;
 8004930:	4447      	add	r7, r8
    t4 += t3;
 8004932:	4471      	add	r1, lr
    t6 += ido;
 8004934:	4446      	add	r6, r8
  for (k = 0; k < l1; k++)
 8004936:	3501      	adds	r5, #1
 8004938:	454d      	cmp	r5, r9
 800493a:	dbb6      	blt.n	80048aa <dradf4+0x2c6>
  }
}
 800493c:	b00b      	add	sp, #44	; 0x2c
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004942:	bf00      	nop
 8004944:	bf3504f3 	.word	0xbf3504f3
 8004948:	3f3504f3 	.word	0x3f3504f3

0800494c <dradb2>:
    for (i = 0; i < n; i++) { c[i] = ch[i]; }
  }
}

static void dradb2(int ido, int l1, float *cc, float *ch, float *wa1)
{
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	b085      	sub	sp, #20
 8004952:	4680      	mov	r8, r0
 8004954:	4689      	mov	r9, r1
 8004956:	4610      	mov	r0, r2
 8004958:	461c      	mov	r4, r3
 800495a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  int i, k, t0, t1, t2, t3, t4, t5, t6;
  float ti2, tr2;

  t0 = l1 * ido;
 800495e:	fb08 f601 	mul.w	r6, r8, r1
 8004962:	9603      	str	r6, [sp, #12]

  t1 = 0;
  t2 = 0;
  t3 = (ido << 1) - 1;
 8004964:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	1e5d      	subs	r5, r3, #1
  t2 = 0;
 800496c:	2300      	movs	r3, #0
  t1 = 0;
 800496e:	461a      	mov	r2, r3
  for (k = 0; k < l1; k++)
 8004970:	4619      	mov	r1, r3
 8004972:	e01c      	b.n	80049ae <dradb2+0x62>
  {
    ch[t1] = cc[t2] + cc[t3 + t2];
 8004974:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8004978:	edd7 7a00 	vldr	s15, [r7]
 800497c:	442b      	add	r3, r5
 800497e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004982:	ed93 7a00 	vldr	s14, [r3]
 8004986:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800498a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800498e:	edcc 7a00 	vstr	s15, [ip]
    ch[t1 + t0] = cc[t2] - cc[t3 + t2];
 8004992:	edd7 7a00 	vldr	s15, [r7]
 8004996:	ed93 7a00 	vldr	s14, [r3]
 800499a:	1993      	adds	r3, r2, r6
 800499c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80049a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049a4:	edc3 7a00 	vstr	s15, [r3]
    t2 = (t1 += ido) << 1;
 80049a8:	4442      	add	r2, r8
 80049aa:	0053      	lsls	r3, r2, #1
  for (k = 0; k < l1; k++)
 80049ac:	3101      	adds	r1, #1
 80049ae:	4549      	cmp	r1, r9
 80049b0:	dbe0      	blt.n	8004974 <dradb2+0x28>
  }

  if (ido < 2) { return; }
 80049b2:	f1b8 0f01 	cmp.w	r8, #1
 80049b6:	f340 80b3 	ble.w	8004b20 <dradb2+0x1d4>
  if (ido == 2) { goto L105; }
 80049ba:	f1b8 0f02 	cmp.w	r8, #2
 80049be:	f000 808b 	beq.w	8004ad8 <dradb2+0x18c>

  t1 = 0;
  t2 = 0;
 80049c2:	f04f 0c00 	mov.w	ip, #0
  for (k = 0; k < l1; k++)
 80049c6:	f8cd c000 	str.w	ip, [sp]
 80049ca:	4663      	mov	r3, ip
 80049cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80049d0:	e06d      	b.n	8004aae <dradb2+0x162>
    t3 = t1;
    t5 = (t4 = t2) + (ido << 1);
    t6 = t0 + t1;
    for (i = 2; i < ido; i += 2)
    {
      t3 += 2;
 80049d2:	1c8f      	adds	r7, r1, #2
      t4 += 2;
 80049d4:	f103 0e02 	add.w	lr, r3, #2
      t5 -= 2;
 80049d8:	f1a2 0902 	sub.w	r9, r2, #2
      t6 += 2;
 80049dc:	f105 0a02 	add.w	sl, r5, #2
      ch[t3 - 1] = cc[t4 - 1] + cc[t5 - 1];
 80049e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049e4:	3301      	adds	r3, #1
 80049e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80049ea:	edd3 7a00 	vldr	s15, [r3]
 80049ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80049f2:	3a03      	subs	r2, #3
 80049f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80049f8:	ed92 7a00 	vldr	s14, [r2]
 80049fc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004a00:	3101      	adds	r1, #1
 8004a02:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004a06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a0a:	edc1 7a00 	vstr	s15, [r1]
      tr2 = cc[t4 - 1] - cc[t5 - 1];
 8004a0e:	ed93 7a00 	vldr	s14, [r3]
 8004a12:	edd2 7a00 	vldr	s15, [r2]
 8004a16:	ee37 7a67 	vsub.f32	s14, s14, s15
      ch[t3] = cc[t4] - cc[t5];
 8004a1a:	eb00 028e 	add.w	r2, r0, lr, lsl #2
 8004a1e:	edd2 7a00 	vldr	s15, [r2]
 8004a22:	eb00 0389 	add.w	r3, r0, r9, lsl #2
 8004a26:	edd3 6a00 	vldr	s13, [r3]
 8004a2a:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 8004a2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a32:	edc1 7a00 	vstr	s15, [r1]
      ti2 = cc[t4] + cc[t5];
 8004a36:	edd2 6a00 	vldr	s13, [r2]
 8004a3a:	edd3 7a00 	vldr	s15, [r3]
 8004a3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
      ch[t6 - 1] = wa1[i - 2] * tr2 - wa1[i - 1] * ti2;
 8004a42:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
 8004a46:	3a02      	subs	r2, #2
 8004a48:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8004a4c:	edd2 7a00 	vldr	s15, [r2]
 8004a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a54:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8004a5e:	ed93 6a00 	vldr	s12, [r3]
 8004a62:	ee26 6a26 	vmul.f32	s12, s12, s13
 8004a66:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004a6a:	3501      	adds	r5, #1
 8004a6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a70:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004a74:	edc5 7a00 	vstr	s15, [r5]
      ch[t6] = wa1[i - 2] * ti2 + wa1[i - 1] * tr2;
 8004a78:	edd2 7a00 	vldr	s15, [r2]
 8004a7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a80:	edd3 6a00 	vldr	s13, [r3]
 8004a84:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004a88:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 8004a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a90:	edc3 7a00 	vstr	s15, [r3]
    for (i = 2; i < ido; i += 2)
 8004a94:	3602      	adds	r6, #2
      t6 += 2;
 8004a96:	4655      	mov	r5, sl
      t5 -= 2;
 8004a98:	464a      	mov	r2, r9
      t4 += 2;
 8004a9a:	4673      	mov	r3, lr
      t3 += 2;
 8004a9c:	4639      	mov	r1, r7
    for (i = 2; i < ido; i += 2)
 8004a9e:	4546      	cmp	r6, r8
 8004aa0:	db97      	blt.n	80049d2 <dradb2+0x86>
    }
    t2 = (t1 += ido) << 1;
 8004aa2:	44c4      	add	ip, r8
 8004aa4:	ea4f 034c 	mov.w	r3, ip, lsl #1
  for (k = 0; k < l1; k++)
 8004aa8:	9a00      	ldr	r2, [sp, #0]
 8004aaa:	3201      	adds	r2, #1
 8004aac:	9200      	str	r2, [sp, #0]
 8004aae:	9a00      	ldr	r2, [sp, #0]
 8004ab0:	9901      	ldr	r1, [sp, #4]
 8004ab2:	428a      	cmp	r2, r1
 8004ab4:	da07      	bge.n	8004ac6 <dradb2+0x17a>
    t5 = (t4 = t2) + (ido << 1);
 8004ab6:	9a02      	ldr	r2, [sp, #8]
 8004ab8:	441a      	add	r2, r3
    t6 = t0 + t1;
 8004aba:	9903      	ldr	r1, [sp, #12]
 8004abc:	eb0c 0501 	add.w	r5, ip, r1
    t3 = t1;
 8004ac0:	4661      	mov	r1, ip
    for (i = 2; i < ido; i += 2)
 8004ac2:	2602      	movs	r6, #2
 8004ac4:	e7eb      	b.n	8004a9e <dradb2+0x152>
  }

  if (ido % 2 == 1) { return; }
 8004ac6:	4689      	mov	r9, r1
 8004ac8:	f1b8 0f00 	cmp.w	r8, #0
 8004acc:	f008 0301 	and.w	r3, r8, #1
 8004ad0:	bfb8      	it	lt
 8004ad2:	425b      	neglt	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d023      	beq.n	8004b20 <dradb2+0x1d4>

L105:
  t1 = ido - 1;
 8004ad8:	f108 33ff 	add.w	r3, r8, #4294967295
  t2 = ido - 1;
 8004adc:	461a      	mov	r2, r3
  for (k = 0; k < l1; k++)
 8004ade:	2500      	movs	r5, #0
 8004ae0:	9e02      	ldr	r6, [sp, #8]
 8004ae2:	9f03      	ldr	r7, [sp, #12]
 8004ae4:	454d      	cmp	r5, r9
 8004ae6:	da1b      	bge.n	8004b20 <dradb2+0x1d4>
  {
    ch[t1] = cc[t2] + cc[t2];
 8004ae8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004aec:	edd1 7a00 	vldr	s15, [r1]
 8004af0:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8004af4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004af8:	edc1 7a00 	vstr	s15, [r1]
    ch[t1 + t0] = -(cc[t2 + 1] + cc[t2 + 1]);
 8004afc:	1c51      	adds	r1, r2, #1
 8004afe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004b02:	edd1 7a00 	vldr	s15, [r1]
 8004b06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b0a:	19d9      	adds	r1, r3, r7
 8004b0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b10:	eef1 7a67 	vneg.f32	s15, s15
 8004b14:	edc1 7a00 	vstr	s15, [r1]
    t1 += ido;
 8004b18:	4443      	add	r3, r8
    t2 += ido << 1;
 8004b1a:	4432      	add	r2, r6
  for (k = 0; k < l1; k++)
 8004b1c:	3501      	adds	r5, #1
 8004b1e:	e7e1      	b.n	8004ae4 <dradb2+0x198>
  }
}
 8004b20:	b005      	add	sp, #20
 8004b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004b28 <dradb3>:

static void dradb3(int ido, int l1, float *cc, float *ch, float *wa1,
                   float *wa2)
{
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	b089      	sub	sp, #36	; 0x24
 8004b2e:	9002      	str	r0, [sp, #8]
 8004b30:	4617      	mov	r7, r2
 8004b32:	469e      	mov	lr, r3
  static float taur = -.5f;
  static float taui = .8660254037844386f;
  int i, k, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  float ci2, ci3, di2, di3, cr2, cr3, dr2, dr3, ti2, tr2;
  t0 = l1 * ido;
 8004b34:	9105      	str	r1, [sp, #20]
 8004b36:	460a      	mov	r2, r1
 8004b38:	4603      	mov	r3, r0
 8004b3a:	fb00 f202 	mul.w	r2, r0, r2

  t1 = 0;
  t2 = t0 << 1;
 8004b3e:	9206      	str	r2, [sp, #24]
 8004b40:	0056      	lsls	r6, r2, #1
  t3 = ido << 1;
 8004b42:	0041      	lsls	r1, r0, #1
 8004b44:	9107      	str	r1, [sp, #28]
  t4 = ido + (ido << 1);
 8004b46:	eb00 0540 	add.w	r5, r0, r0, lsl #1
  t5 = 0;
 8004b4a:	2000      	movs	r0, #0
  t1 = 0;
 8004b4c:	4602      	mov	r2, r0
  for (k = 0; k < l1; k++)
 8004b4e:	4604      	mov	r4, r0
 8004b50:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004b54:	4699      	mov	r9, r3
 8004b56:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004b5a:	4564      	cmp	r4, ip
 8004b5c:	da36      	bge.n	8004bcc <dradb3+0xa4>
  {
    tr2 = cc[t3 - 1] + cc[t3 - 1];
 8004b5e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8004b62:	3b01      	subs	r3, #1
 8004b64:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004b68:	ed93 7a00 	vldr	s14, [r3]
 8004b6c:	ee37 7a07 	vadd.f32	s14, s14, s14
    cr2 = cc[t5] + (taur * tr2);
 8004b70:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8004b74:	edd3 6a00 	vldr	s13, [r3]
 8004b78:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8004b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
    ch[t1] = cc[t5] + tr2;
 8004b84:	eb0e 0382 	add.w	r3, lr, r2, lsl #2
 8004b88:	ee76 6a87 	vadd.f32	s13, s13, s14
 8004b8c:	edc3 6a00 	vstr	s13, [r3]
    ci3 = taui * (cc[t3] + cc[t3]);
 8004b90:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004b94:	ed93 7a00 	vldr	s14, [r3]
 8004b98:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004b9c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004d98 <dradb3+0x270>
 8004ba0:	ee27 7a26 	vmul.f32	s14, s14, s13
    ch[t1 + t0] = cr2 - ci3;
 8004ba4:	eb02 0308 	add.w	r3, r2, r8
 8004ba8:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8004bac:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004bb0:	edc3 6a00 	vstr	s13, [r3]
    ch[t1 + t2] = cr2 + ci3;
 8004bb4:	1993      	adds	r3, r2, r6
 8004bb6:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8004bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bbe:	edc3 7a00 	vstr	s15, [r3]
    t1 += ido;
 8004bc2:	444a      	add	r2, r9
    t3 += t4;
 8004bc4:	4429      	add	r1, r5
    t5 += t4;
 8004bc6:	4428      	add	r0, r5
  for (k = 0; k < l1; k++)
 8004bc8:	3401      	adds	r4, #1
 8004bca:	e7c6      	b.n	8004b5a <dradb3+0x32>
  }

  if (ido == 1) { return; }
 8004bcc:	9b02      	ldr	r3, [sp, #8]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	f000 80df 	beq.w	8004d92 <dradb3+0x26a>

  t1 = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9304      	str	r3, [sp, #16]
  t3 = ido << 1;
  for (k = 0; k < l1; k++)
 8004bd8:	9303      	str	r3, [sp, #12]
 8004bda:	e0c8      	b.n	8004d6e <dradb3+0x246>
    t8 = t1;
    t10 = (t9 = t1 + t0) + t0;

    for (i = 2; i < ido; i += 2)
    {
      t5 += 2;
 8004bdc:	1cab      	adds	r3, r5, #2
 8004bde:	9300      	str	r3, [sp, #0]
      t6 -= 2;
 8004be0:	1e96      	subs	r6, r2, #2
 8004be2:	9601      	str	r6, [sp, #4]
      t7 += 2;
 8004be4:	f109 0602 	add.w	r6, r9, #2
      t8 += 2;
 8004be8:	f10a 0c02 	add.w	ip, sl, #2
      t9 += 2;
 8004bec:	f104 0802 	add.w	r8, r4, #2
      t10 += 2;
 8004bf0:	f100 0b02 	add.w	fp, r0, #2
      tr2 = cc[t5 - 1] + cc[t6 - 1];
 8004bf4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004bfe:	ed95 6a00 	vldr	s12, [r5]
 8004c02:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8004c06:	3b03      	subs	r3, #3
 8004c08:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004c0c:	edd3 7a00 	vldr	s15, [r3]
 8004c10:	ee36 6a27 	vadd.f32	s12, s12, s15
      cr2 = cc[t7 - 1] + (taur * tr2);
 8004c14:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8004c18:	f109 0901 	add.w	r9, r9, #1
 8004c1c:	eb07 0989 	add.w	r9, r7, r9, lsl #2
 8004c20:	edd9 6a00 	vldr	s13, [r9]
 8004c24:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8004c28:	ee26 7a27 	vmul.f32	s14, s12, s15
 8004c2c:	ee36 7a87 	vadd.f32	s14, s13, s14
      ch[t8 - 1] = cc[t7 - 1] + tr2;
 8004c30:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 8004c34:	f10a 0a01 	add.w	sl, sl, #1
 8004c38:	eb0e 0a8a 	add.w	sl, lr, sl, lsl #2
 8004c3c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004c40:	edca 6a00 	vstr	s13, [sl]
      ti2 = cc[t5] - cc[t6];
 8004c44:	9a00      	ldr	r2, [sp, #0]
 8004c46:	eb07 0982 	add.w	r9, r7, r2, lsl #2
 8004c4a:	ed99 6a00 	vldr	s12, [r9]
 8004c4e:	9a01      	ldr	r2, [sp, #4]
 8004c50:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8004c54:	edd2 6a00 	vldr	s13, [r2]
 8004c58:	ee36 6a66 	vsub.f32	s12, s12, s13
      ci2 = cc[t7] + (taur * ti2);
 8004c5c:	eb07 0a86 	add.w	sl, r7, r6, lsl #2
 8004c60:	edda 6a00 	vldr	s13, [sl]
 8004c64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
      ch[t8] = cc[t7] + ti2;
 8004c6c:	eb0e 0a8c 	add.w	sl, lr, ip, lsl #2
 8004c70:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004c74:	edca 6a00 	vstr	s13, [sl]
      cr3 = taui * (cc[t5 - 1] - cc[t6 - 1]);
 8004c78:	edd5 6a00 	vldr	s13, [r5]
 8004c7c:	ed93 6a00 	vldr	s12, [r3]
 8004c80:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8004c84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004d98 <dradb3+0x270>
 8004c88:	ee66 6aa5 	vmul.f32	s13, s13, s11
      ci3 = taui * (cc[t5] + cc[t6]);
 8004c8c:	ed99 6a00 	vldr	s12, [r9]
 8004c90:	ed92 5a00 	vldr	s10, [r2]
 8004c94:	ee36 6a05 	vadd.f32	s12, s12, s10
 8004c98:	ee26 6a25 	vmul.f32	s12, s12, s11
      dr2 = cr2 - ci3;
 8004c9c:	ee77 5a46 	vsub.f32	s11, s14, s12
      dr3 = cr2 + ci3;
 8004ca0:	ee37 7a06 	vadd.f32	s14, s14, s12
      di2 = ci2 + cr3;
 8004ca4:	ee37 5aa6 	vadd.f32	s10, s15, s13
      di3 = ci2 - cr3;
 8004ca8:	ee77 7ae6 	vsub.f32	s15, s15, s13
      ch[t9 - 1] = wa1[i - 2] * dr2 - wa1[i - 1] * di2;
 8004cac:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8004cb0:	3a02      	subs	r2, #2
 8004cb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cb4:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8004cb8:	edd9 6a00 	vldr	s13, [r9]
 8004cbc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004cc0:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004cc8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8004ccc:	ed95 6a00 	vldr	s12, [r5]
 8004cd0:	ee26 6a05 	vmul.f32	s12, s12, s10
 8004cd4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004cd8:	3401      	adds	r4, #1
 8004cda:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 8004cde:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8004ce2:	edc4 6a00 	vstr	s13, [r4]
      ch[t9] = wa1[i - 2] * di2 + wa1[i - 1] * dr2;
 8004ce6:	edd9 6a00 	vldr	s13, [r9]
 8004cea:	ee66 6a85 	vmul.f32	s13, s13, s10
 8004cee:	ed95 6a00 	vldr	s12, [r5]
 8004cf2:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004cf6:	eb0e 0488 	add.w	r4, lr, r8, lsl #2
 8004cfa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004cfe:	edc4 6a00 	vstr	s13, [r4]
      ch[t10 - 1] = wa2[i - 2] * dr3 - wa2[i - 1] * di3;
 8004d02:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8004d04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004d08:	edd2 6a00 	vldr	s13, [r2]
 8004d0c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8004d10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d14:	ed93 6a00 	vldr	s12, [r3]
 8004d18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004d1c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004d20:	3001      	adds	r0, #1
 8004d22:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8004d26:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8004d2a:	edc0 6a00 	vstr	s13, [r0]
      ch[t10] = wa2[i - 2] * di3 + wa2[i - 1] * dr3;
 8004d2e:	edd2 6a00 	vldr	s13, [r2]
 8004d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d36:	edd3 6a00 	vldr	s13, [r3]
 8004d3a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004d3e:	eb0e 038b 	add.w	r3, lr, fp, lsl #2
 8004d42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d46:	edc3 7a00 	vstr	s15, [r3]
    for (i = 2; i < ido; i += 2)
 8004d4a:	3102      	adds	r1, #2
      t10 += 2;
 8004d4c:	4658      	mov	r0, fp
      t9 += 2;
 8004d4e:	4644      	mov	r4, r8
      t8 += 2;
 8004d50:	46e2      	mov	sl, ip
      t7 += 2;
 8004d52:	46b1      	mov	r9, r6
      t6 -= 2;
 8004d54:	9a01      	ldr	r2, [sp, #4]
      t5 += 2;
 8004d56:	9d00      	ldr	r5, [sp, #0]
    for (i = 2; i < ido; i += 2)
 8004d58:	9b02      	ldr	r3, [sp, #8]
 8004d5a:	4299      	cmp	r1, r3
 8004d5c:	f6ff af3e 	blt.w	8004bdc <dradb3+0xb4>
    }
    t1 += ido;
 8004d60:	9b04      	ldr	r3, [sp, #16]
 8004d62:	9a02      	ldr	r2, [sp, #8]
 8004d64:	4413      	add	r3, r2
 8004d66:	9304      	str	r3, [sp, #16]
  for (k = 0; k < l1; k++)
 8004d68:	9b03      	ldr	r3, [sp, #12]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	9303      	str	r3, [sp, #12]
 8004d6e:	9b03      	ldr	r3, [sp, #12]
 8004d70:	9a05      	ldr	r2, [sp, #20]
 8004d72:	4293      	cmp	r3, r2
 8004d74:	da0d      	bge.n	8004d92 <dradb3+0x26a>
    t7 = t1 + (t1 << 1);
 8004d76:	9a04      	ldr	r2, [sp, #16]
 8004d78:	eb02 0942 	add.w	r9, r2, r2, lsl #1
    t6 = (t5 = t7 + t3);
 8004d7c:	9b07      	ldr	r3, [sp, #28]
 8004d7e:	444b      	add	r3, r9
    t10 = (t9 = t1 + t0) + t0;
 8004d80:	9906      	ldr	r1, [sp, #24]
 8004d82:	1854      	adds	r4, r2, r1
 8004d84:	eb02 0041 	add.w	r0, r2, r1, lsl #1
    t8 = t1;
 8004d88:	4692      	mov	sl, r2
    t6 = (t5 = t7 + t3);
 8004d8a:	461a      	mov	r2, r3
    for (i = 2; i < ido; i += 2)
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	461d      	mov	r5, r3
 8004d90:	e7e2      	b.n	8004d58 <dradb3+0x230>
  }
}
 8004d92:	b009      	add	sp, #36	; 0x24
 8004d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d98:	3f5db3d7 	.word	0x3f5db3d7

08004d9c <dradb4>:

static void dradb4(int ido, int l1, float *cc, float *ch, float *wa1,
                   float *wa2, float *wa3)
{
 8004d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da0:	b08b      	sub	sp, #44	; 0x2c
 8004da2:	9004      	str	r0, [sp, #16]
 8004da4:	460e      	mov	r6, r1
 8004da6:	9107      	str	r1, [sp, #28]
 8004da8:	4690      	mov	r8, r2
  static float sqrt2 = 1.414213562373095f;
  int i, k, t0, t1, t2, t3, t4, t5, t6, t7, t8;
  float ci2, ci3, ci4, cr2, cr3, cr4, ti1, ti2, ti3, ti4, tr1, tr2, tr3, tr4;
  t0 = l1 * ido;
 8004daa:	4602      	mov	r2, r0
 8004dac:	fb00 f701 	mul.w	r7, r0, r1

  t1 = 0;
  t2 = ido << 2;
 8004db0:	0084      	lsls	r4, r0, #2
 8004db2:	9409      	str	r4, [sp, #36]	; 0x24
  t3 = 0;
  t6 = ido << 1;
 8004db4:	0041      	lsls	r1, r0, #1
 8004db6:	9108      	str	r1, [sp, #32]
  t3 = 0;
 8004db8:	2100      	movs	r1, #0
  t1 = 0;
 8004dba:	4608      	mov	r0, r1
  for (k = 0; k < l1; k++)
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	46a4      	mov	ip, r4
 8004dc0:	9c08      	ldr	r4, [sp, #32]
 8004dc2:	4696      	mov	lr, r2
 8004dc4:	e03c      	b.n	8004e40 <dradb4+0xa4>
  {
    t4 = t3 + t6;
 8004dc6:	190a      	adds	r2, r1, r4
    t5 = t1;
    tr3 = cc[t4 - 1] + cc[t4 - 1];
 8004dc8:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8004dcc:	eb02 090a 	add.w	r9, r2, sl
 8004dd0:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8004dd4:	edd9 6a00 	vldr	s13, [r9]
 8004dd8:	ee76 6aa6 	vadd.f32	s13, s13, s13
    tr4 = cc[t4] + cc[t4];
 8004ddc:	eb08 0982 	add.w	r9, r8, r2, lsl #2
 8004de0:	edd9 7a00 	vldr	s15, [r9]
 8004de4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    tr1 = cc[t3] - cc[(t4 += t6) - 1];
 8004de8:	eb08 0981 	add.w	r9, r8, r1, lsl #2
 8004dec:	ed99 7a00 	vldr	s14, [r9]
 8004df0:	4422      	add	r2, r4
 8004df2:	4452      	add	r2, sl
 8004df4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8004df8:	edd2 5a00 	vldr	s11, [r2]
 8004dfc:	ee37 6a65 	vsub.f32	s12, s14, s11
    tr2 = cc[t3] + cc[t4 - 1];
 8004e00:	ee37 7a25 	vadd.f32	s14, s14, s11
    ch[t5] = tr2 + tr3;
 8004e04:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8004e08:	ee76 5a87 	vadd.f32	s11, s13, s14
 8004e0c:	edc2 5a00 	vstr	s11, [r2]
    ch[t5 += t0] = tr1 - tr4;
 8004e10:	19c2      	adds	r2, r0, r7
 8004e12:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8004e16:	ee76 5a67 	vsub.f32	s11, s12, s15
 8004e1a:	edc9 5a00 	vstr	s11, [r9]
    ch[t5 += t0] = tr2 - tr3;
 8004e1e:	443a      	add	r2, r7
 8004e20:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8004e24:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004e28:	ed89 7a00 	vstr	s14, [r9]
    ch[t5 += t0] = tr1 + tr4;
 8004e2c:	443a      	add	r2, r7
 8004e2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004e32:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004e36:	edc2 7a00 	vstr	s15, [r2]
    t1 += ido;
 8004e3a:	4470      	add	r0, lr
    t3 += t2;
 8004e3c:	4461      	add	r1, ip
  for (k = 0; k < l1; k++)
 8004e3e:	3501      	adds	r5, #1
 8004e40:	42b5      	cmp	r5, r6
 8004e42:	dbc0      	blt.n	8004dc6 <dradb4+0x2a>
  }

  if (ido < 2) { return; }
 8004e44:	9a04      	ldr	r2, [sp, #16]
 8004e46:	2a01      	cmp	r2, #1
 8004e48:	f340 8156 	ble.w	80050f8 <dradb4+0x35c>
  if (ido == 2) { goto L105; }
 8004e4c:	2a02      	cmp	r2, #2
 8004e4e:	f000 8102 	beq.w	8005056 <dradb4+0x2ba>

  t1 = 0;
 8004e52:	2200      	movs	r2, #0
 8004e54:	9206      	str	r2, [sp, #24]
  for (k = 0; k < l1; k++)
 8004e56:	9205      	str	r2, [sp, #20]
 8004e58:	e0e6      	b.n	8005028 <dradb4+0x28c>
  {
    t5 = (t4 = (t3 = (t2 = t1 << 2) + t6)) + t6;
    t7 = t1;
    for (i = 2; i < ido; i += 2)
    {
      t2 += 2;
 8004e5a:	1cb5      	adds	r5, r6, #2
 8004e5c:	9502      	str	r5, [sp, #8]
      t3 += 2;
 8004e5e:	1c97      	adds	r7, r2, #2
 8004e60:	9703      	str	r7, [sp, #12]
      t4 -= 2;
 8004e62:	f1a1 0e02 	sub.w	lr, r1, #2
      t5 -= 2;
 8004e66:	f1a4 0902 	sub.w	r9, r4, #2
      t7 += 2;
 8004e6a:	1c85      	adds	r5, r0, #2
      ti1 = cc[t2] + cc[t5];
 8004e6c:	9f02      	ldr	r7, [sp, #8]
 8004e6e:	eb08 0a87 	add.w	sl, r8, r7, lsl #2
 8004e72:	edda 6a00 	vldr	s13, [sl]
 8004e76:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
 8004e7a:	edda 7a00 	vldr	s15, [sl]
 8004e7e:	ee36 6aa7 	vadd.f32	s12, s13, s15
      ti2 = cc[t2] - cc[t5];
 8004e82:	ee76 6ae7 	vsub.f32	s13, s13, s15
      ti3 = cc[t3] - cc[t4];
 8004e86:	9f03      	ldr	r7, [sp, #12]
 8004e88:	eb08 0a87 	add.w	sl, r8, r7, lsl #2
 8004e8c:	edda 7a00 	vldr	s15, [sl]
 8004e90:	eb08 0a8e 	add.w	sl, r8, lr, lsl #2
 8004e94:	ed9a 7a00 	vldr	s14, [sl]
 8004e98:	ee77 4ac7 	vsub.f32	s9, s15, s14
      tr4 = cc[t3] + cc[t4];
 8004e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
      tr1 = cc[t2 - 1] - cc[t5 - 1];
 8004ea0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004ea4:	3601      	adds	r6, #1
 8004ea6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8004eaa:	ed96 7a00 	vldr	s14, [r6]
 8004eae:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004eb2:	3c03      	subs	r4, #3
 8004eb4:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8004eb8:	edd4 5a00 	vldr	s11, [r4]
 8004ebc:	ee37 4a65 	vsub.f32	s8, s14, s11
      tr2 = cc[t2 - 1] + cc[t5 - 1];
 8004ec0:	ee37 7a25 	vadd.f32	s14, s14, s11
      ti4 = cc[t3 - 1] - cc[t4 - 1];
 8004ec4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004ec8:	3201      	adds	r2, #1
 8004eca:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8004ece:	edd2 5a00 	vldr	s11, [r2]
 8004ed2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004ed6:	3903      	subs	r1, #3
 8004ed8:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8004edc:	edd1 3a00 	vldr	s7, [r1]
 8004ee0:	ee35 5ae3 	vsub.f32	s10, s11, s7
      tr3 = cc[t3 - 1] + cc[t4 - 1];
 8004ee4:	ee75 5aa3 	vadd.f32	s11, s11, s7
      ch[t7 - 1] = tr2 + tr3;
 8004ee8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004eec:	3001      	adds	r0, #1
 8004eee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ef2:	ee77 3a25 	vadd.f32	s7, s14, s11
 8004ef6:	edc0 3a00 	vstr	s7, [r0]
      cr3 = tr2 - tr3;
 8004efa:	ee37 7a65 	vsub.f32	s14, s14, s11
      ch[t7] = ti2 + ti3;
 8004efe:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 8004f02:	ee76 5aa4 	vadd.f32	s11, s13, s9
 8004f06:	edc2 5a00 	vstr	s11, [r2]
      ci3 = ti2 - ti3;
 8004f0a:	ee76 6ae4 	vsub.f32	s13, s13, s9
      cr2 = tr1 - tr4;
 8004f0e:	ee74 4a67 	vsub.f32	s9, s8, s15
      cr4 = tr1 + tr4;
 8004f12:	ee77 7a84 	vadd.f32	s15, s15, s8
      ci2 = ti1 + ti4;
 8004f16:	ee36 4a05 	vadd.f32	s8, s12, s10
      ci4 = ti1 - ti4;
 8004f1a:	ee36 6a45 	vsub.f32	s12, s12, s10

      ch[(t8 = t7 + t0) - 1] = wa1[i - 2] * cr2 - wa1[i - 1] * ci2;
 8004f1e:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
 8004f22:	3902      	subs	r1, #2
 8004f24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004f26:	eb02 0b81 	add.w	fp, r2, r1, lsl #2
 8004f2a:	eddb 5a00 	vldr	s11, [fp]
 8004f2e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004f32:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8004f36:	eb0c 0400 	add.w	r4, ip, r0
 8004f3a:	eb02 0a84 	add.w	sl, r2, r4, lsl #2
 8004f3e:	ed9a 5a00 	vldr	s10, [sl]
 8004f42:	ee25 5a04 	vmul.f32	s10, s10, s8
 8004f46:	9a01      	ldr	r2, [sp, #4]
 8004f48:	442a      	add	r2, r5
 8004f4a:	1816      	adds	r6, r2, r0
 8004f4c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8004f50:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004f54:	edc6 5a00 	vstr	s11, [r6]
      ch[t8] = wa1[i - 2] * ci2 + wa1[i - 1] * cr2;
 8004f58:	eddb 5a00 	vldr	s11, [fp]
 8004f5c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004f60:	ed9a 5a00 	vldr	s10, [sl]
 8004f64:	ee25 5a24 	vmul.f32	s10, s10, s9
 8004f68:	eb03 0682 	add.w	r6, r3, r2, lsl #2
 8004f6c:	ee75 5a85 	vadd.f32	s11, s11, s10
 8004f70:	edc6 5a00 	vstr	s11, [r6]
      ch[(t8 += t0) - 1] = wa2[i - 2] * cr3 - wa2[i - 1] * ci3;
 8004f74:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004f76:	eb06 0b81 	add.w	fp, r6, r1, lsl #2
 8004f7a:	eddb 5a00 	vldr	s11, [fp]
 8004f7e:	ee65 5a87 	vmul.f32	s11, s11, s14
 8004f82:	eb06 0a84 	add.w	sl, r6, r4, lsl #2
 8004f86:	ed9a 5a00 	vldr	s10, [sl]
 8004f8a:	ee25 5a26 	vmul.f32	s10, s10, s13
 8004f8e:	9e01      	ldr	r6, [sp, #4]
 8004f90:	4432      	add	r2, r6
 8004f92:	1816      	adds	r6, r2, r0
 8004f94:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8004f98:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004f9c:	edc6 5a00 	vstr	s11, [r6]
      ch[t8] = wa2[i - 2] * ci3 + wa2[i - 1] * cr3;
 8004fa0:	eddb 5a00 	vldr	s11, [fp]
 8004fa4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8004fa8:	edda 5a00 	vldr	s11, [sl]
 8004fac:	ee25 7a87 	vmul.f32	s14, s11, s14
 8004fb0:	eb03 0682 	add.w	r6, r3, r2, lsl #2
 8004fb4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004fb8:	ed86 7a00 	vstr	s14, [r6]
      ch[(t8 += t0) - 1] = wa3[i - 2] * cr4 - wa3[i - 1] * ci4;
 8004fbc:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8004fbe:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8004fc2:	ed91 7a00 	vldr	s14, [r1]
 8004fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fca:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004fce:	edd4 6a00 	vldr	s13, [r4]
 8004fd2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004fd6:	9e01      	ldr	r6, [sp, #4]
 8004fd8:	4432      	add	r2, r6
 8004fda:	4410      	add	r0, r2
 8004fdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004fe0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004fe4:	ed80 7a00 	vstr	s14, [r0]
      ch[t8] = wa3[i - 2] * ci4 + wa3[i - 1] * cr4;
 8004fe8:	ed91 7a00 	vldr	s14, [r1]
 8004fec:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004ff0:	edd4 6a00 	vldr	s13, [r4]
 8004ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ff8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005000:	edc2 7a00 	vstr	s15, [r2]
    for (i = 2; i < ido; i += 2)
 8005004:	f10c 0c02 	add.w	ip, ip, #2
      t7 += 2;
 8005008:	4628      	mov	r0, r5
      t5 -= 2;
 800500a:	464c      	mov	r4, r9
      t4 -= 2;
 800500c:	4671      	mov	r1, lr
      t3 += 2;
 800500e:	463a      	mov	r2, r7
      t2 += 2;
 8005010:	9e02      	ldr	r6, [sp, #8]
    for (i = 2; i < ido; i += 2)
 8005012:	9d04      	ldr	r5, [sp, #16]
 8005014:	45ac      	cmp	ip, r5
 8005016:	f6ff af20 	blt.w	8004e5a <dradb4+0xbe>
    }
    t1 += ido;
 800501a:	9f01      	ldr	r7, [sp, #4]
 800501c:	9a06      	ldr	r2, [sp, #24]
 800501e:	442a      	add	r2, r5
 8005020:	9206      	str	r2, [sp, #24]
  for (k = 0; k < l1; k++)
 8005022:	9a05      	ldr	r2, [sp, #20]
 8005024:	3201      	adds	r2, #1
 8005026:	9205      	str	r2, [sp, #20]
 8005028:	9a05      	ldr	r2, [sp, #20]
 800502a:	9907      	ldr	r1, [sp, #28]
 800502c:	428a      	cmp	r2, r1
 800502e:	da0a      	bge.n	8005046 <dradb4+0x2aa>
    t5 = (t4 = (t3 = (t2 = t1 << 2) + t6)) + t6;
 8005030:	9806      	ldr	r0, [sp, #24]
 8005032:	0086      	lsls	r6, r0, #2
 8005034:	9908      	ldr	r1, [sp, #32]
 8005036:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800503a:	188c      	adds	r4, r1, r2
 800503c:	4611      	mov	r1, r2
    for (i = 2; i < ido; i += 2)
 800503e:	f04f 0c02 	mov.w	ip, #2
 8005042:	9701      	str	r7, [sp, #4]
 8005044:	e7e5      	b.n	8005012 <dradb4+0x276>
  }

  if (ido % 2 == 1) { return; }
 8005046:	9a04      	ldr	r2, [sp, #16]
 8005048:	2a00      	cmp	r2, #0
 800504a:	f002 0201 	and.w	r2, r2, #1
 800504e:	bfb8      	it	lt
 8005050:	4252      	neglt	r2, r2
 8005052:	2a01      	cmp	r2, #1
 8005054:	d050      	beq.n	80050f8 <dradb4+0x35c>

L105:

  t1 = ido;
  t2 = ido << 2;
  t3 = ido - 1;
 8005056:	9a04      	ldr	r2, [sp, #16]
 8005058:	1e54      	subs	r4, r2, #1
  t4 = ido + (ido << 1);
 800505a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
  t1 = ido;
 800505e:	4611      	mov	r1, r2
  for (k = 0; k < l1; k++)
 8005060:	2500      	movs	r5, #0
 8005062:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005064:	4696      	mov	lr, r2
 8005066:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800506a:	4565      	cmp	r5, ip
 800506c:	da44      	bge.n	80050f8 <dradb4+0x35c>
  {
    t5 = t3;
    ti1 = cc[t1] + cc[t4];
 800506e:	eb08 0281 	add.w	r2, r8, r1, lsl #2
 8005072:	ed92 7a00 	vldr	s14, [r2]
 8005076:	eb08 0280 	add.w	r2, r8, r0, lsl #2
 800507a:	edd2 7a00 	vldr	s15, [r2]
 800507e:	ee77 6a27 	vadd.f32	s13, s14, s15
    ti2 = cc[t4] - cc[t1];
 8005082:	ee77 7ac7 	vsub.f32	s15, s15, s14
    tr1 = cc[t1 - 1] - cc[t4 - 1];
 8005086:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800508a:	eb01 0902 	add.w	r9, r1, r2
 800508e:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8005092:	ed99 7a00 	vldr	s14, [r9]
 8005096:	4402      	add	r2, r0
 8005098:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800509c:	edd2 5a00 	vldr	s11, [r2]
 80050a0:	ee37 6a65 	vsub.f32	s12, s14, s11
    tr2 = cc[t1 - 1] + cc[t4 - 1];
 80050a4:	ee37 7a25 	vadd.f32	s14, s14, s11
    ch[t5] = tr2 + tr2;
 80050a8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 80050ac:	ee37 7a07 	vadd.f32	s14, s14, s14
 80050b0:	ed82 7a00 	vstr	s14, [r2]
    ch[t5 += t0] = sqrt2 * (tr1 - ti1);
 80050b4:	ee36 7a66 	vsub.f32	s14, s12, s13
 80050b8:	19e2      	adds	r2, r4, r7
 80050ba:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 80050be:	eddf 5a10 	vldr	s11, [pc, #64]	; 8005100 <dradb4+0x364>
 80050c2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80050c6:	ed89 7a00 	vstr	s14, [r9]
    ch[t5 += t0] = ti2 + ti2;
 80050ca:	443a      	add	r2, r7
 80050cc:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 80050d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050d4:	edc9 7a00 	vstr	s15, [r9]
    ch[t5 += t0] = -sqrt2 * (tr1 + ti1);
 80050d8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80050dc:	443a      	add	r2, r7
 80050de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80050e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005104 <dradb4+0x368>
 80050e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80050ea:	edc2 6a00 	vstr	s13, [r2]

    t3 += ido;
 80050ee:	4474      	add	r4, lr
    t1 += t2;
 80050f0:	4431      	add	r1, r6
    t4 += t2;
 80050f2:	4430      	add	r0, r6
  for (k = 0; k < l1; k++)
 80050f4:	3501      	adds	r5, #1
 80050f6:	e7b8      	b.n	800506a <dradb4+0x2ce>
  }
}
 80050f8:	b00b      	add	sp, #44	; 0x2c
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fe:	bf00      	nop
 8005100:	3fb504f3 	.word	0x3fb504f3
 8005104:	bfb504f3 	.word	0xbfb504f3

08005108 <dradfg>:
{
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	ed2d 8b02 	vpush	{d8}
 8005110:	b08f      	sub	sp, #60	; 0x3c
 8005112:	4682      	mov	sl, r0
 8005114:	9109      	str	r1, [sp, #36]	; 0x24
 8005116:	4616      	mov	r6, r2
 8005118:	9204      	str	r2, [sp, #16]
 800511a:	930b      	str	r3, [sp, #44]	; 0x2c
 800511c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005120:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005122:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 8005126:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800512a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  arg = tpi / (float)ip;
 800512c:	ee07 1a90 	vmov	s15, r1
 8005130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005134:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 800544c <dradfg+0x344>
 8005138:	eec7 8a27 	vdiv.f32	s17, s14, s15
  dcp = cosf(arg);
 800513c:	eeb0 0a68 	vmov.f32	s0, s17
 8005140:	f007 ff40 	bl	800cfc4 <cosf>
 8005144:	eeb0 8a40 	vmov.f32	s16, s0
  dsp = sinf(arg);
 8005148:	eeb0 0a68 	vmov.f32	s0, s17
 800514c:	f007 ff7e 	bl	800d04c <sinf>
 8005150:	eeb0 6a40 	vmov.f32	s12, s0
  ipph = (ip + 1) >> 1;
 8005154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005156:	1c4b      	adds	r3, r1, #1
 8005158:	105b      	asrs	r3, r3, #1
 800515a:	9306      	str	r3, [sp, #24]
  nbd = (ido - 1) >> 1;
 800515c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005160:	105b      	asrs	r3, r3, #1
 8005162:	930c      	str	r3, [sp, #48]	; 0x30
  t0 = l1 * ido;
 8005164:	fb06 f30a 	mul.w	r3, r6, sl
 8005168:	9308      	str	r3, [sp, #32]
  t10 = ip * ido;
 800516a:	fb0a f301 	mul.w	r3, sl, r1
 800516e:	9305      	str	r3, [sp, #20]
  if (ido == 1) { goto L119; }
 8005170:	f1ba 0f01 	cmp.w	sl, #1
 8005174:	f000 817d 	beq.w	8005472 <dradfg+0x36a>
  for (ik = 0; ik < idl1; ik++) { ch2[ik] = c2[ik]; }
 8005178:	2300      	movs	r3, #0
 800517a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800517c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800517e:	e006      	b.n	800518e <dradfg+0x86>
 8005180:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8005184:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 8005188:	6809      	ldr	r1, [r1, #0]
 800518a:	6011      	str	r1, [r2, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	4283      	cmp	r3, r0
 8005190:	dbf6      	blt.n	8005180 <dradfg+0x78>
  t1 = 0;
 8005192:	2700      	movs	r7, #0
  for (j = 1; j < ip; j++)
 8005194:	2601      	movs	r6, #1
 8005196:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800519a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800519e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80051a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051a6:	e00a      	b.n	80051be <dradfg+0xb6>
      ch[t2] = c1[t2];
 80051a8:	eb09 0183 	add.w	r1, r9, r3, lsl #2
 80051ac:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	6008      	str	r0, [r1, #0]
      t2 += ido;
 80051b4:	4453      	add	r3, sl
    for (k = 0; k < l1; k++)
 80051b6:	3201      	adds	r2, #1
 80051b8:	4562      	cmp	r2, ip
 80051ba:	dbf5      	blt.n	80051a8 <dradfg+0xa0>
  for (j = 1; j < ip; j++)
 80051bc:	3601      	adds	r6, #1
 80051be:	4576      	cmp	r6, lr
 80051c0:	da03      	bge.n	80051ca <dradfg+0xc2>
    t1 += t0;
 80051c2:	4447      	add	r7, r8
    t2 = t1;
 80051c4:	463b      	mov	r3, r7
    for (k = 0; k < l1; k++)
 80051c6:	2200      	movs	r2, #0
 80051c8:	e7f6      	b.n	80051b8 <dradfg+0xb0>
  is = -ido;
 80051ca:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051ce:	f1ca 0300 	rsb	r3, sl, #0
 80051d2:	9303      	str	r3, [sp, #12]
  if (nbd > l1)
 80051d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051d6:	9b04      	ldr	r3, [sp, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	dc5e      	bgt.n	800529a <dradfg+0x192>
  t1 = 0;
 80051dc:	2200      	movs	r2, #0
 80051de:	920a      	str	r2, [sp, #40]	; 0x28
    for (j = 1; j < ip; j++)
 80051e0:	2201      	movs	r2, #1
 80051e2:	9207      	str	r2, [sp, #28]
 80051e4:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 80051e8:	469b      	mov	fp, r3
 80051ea:	e0be      	b.n	800536a <dradfg+0x262>
          idij += 2;
 80051ec:	1c9e      	adds	r6, r3, #2
          t3 += 2;
 80051ee:	1c91      	adds	r1, r2, #2
          ch[t3 - 1] = wa[idij - 1] * c1[t3 - 1] + wa[idij] * c1[t3];
 80051f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051f4:	3301      	adds	r3, #1
 80051f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80051fa:	edd3 7a00 	vldr	s15, [r3]
 80051fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005202:	3201      	adds	r2, #1
 8005204:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8005208:	ed97 7a00 	vldr	s14, [r7]
 800520c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005210:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8005214:	ed9c 7a00 	vldr	s14, [ip]
 8005218:	eb04 0e81 	add.w	lr, r4, r1, lsl #2
 800521c:	edde 6a00 	vldr	s13, [lr]
 8005220:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005224:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8005228:	ee77 7a87 	vadd.f32	s15, s15, s14
 800522c:	edc2 7a00 	vstr	s15, [r2]
          ch[t3] = wa[idij - 1] * c1[t3] - wa[idij] * c1[t3 - 1];
 8005230:	edd3 7a00 	vldr	s15, [r3]
 8005234:	ed9e 7a00 	vldr	s14, [lr]
 8005238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800523c:	ed9c 7a00 	vldr	s14, [ip]
 8005240:	edd7 6a00 	vldr	s13, [r7]
 8005244:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005248:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800524c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005250:	edc3 7a00 	vstr	s15, [r3]
        for (i = 2; i < ido; i += 2)
 8005254:	3002      	adds	r0, #2
          t3 += 2;
 8005256:	460a      	mov	r2, r1
          idij += 2;
 8005258:	4633      	mov	r3, r6
        for (i = 2; i < ido; i += 2)
 800525a:	4550      	cmp	r0, sl
 800525c:	dbc6      	blt.n	80051ec <dradfg+0xe4>
      for (k = 0; k < l1; k++)
 800525e:	f108 0801 	add.w	r8, r8, #1
 8005262:	9b04      	ldr	r3, [sp, #16]
 8005264:	4598      	cmp	r8, r3
 8005266:	da05      	bge.n	8005274 <dradfg+0x16c>
        idij = is - 1;
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	3b01      	subs	r3, #1
        t2 += ido;
 800526c:	44d3      	add	fp, sl
        t3 = t2;
 800526e:	465a      	mov	r2, fp
        for (i = 2; i < ido; i += 2)
 8005270:	2002      	movs	r0, #2
 8005272:	e7f2      	b.n	800525a <dradfg+0x152>
    for (j = 1; j < ip; j++)
 8005274:	9b01      	ldr	r3, [sp, #4]
 8005276:	3301      	adds	r3, #1
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	9b01      	ldr	r3, [sp, #4]
 800527c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800527e:	4293      	cmp	r3, r2
 8005280:	da14      	bge.n	80052ac <dradfg+0x1a4>
      t1 += t0;
 8005282:	9b02      	ldr	r3, [sp, #8]
 8005284:	9a08      	ldr	r2, [sp, #32]
 8005286:	4413      	add	r3, r2
 8005288:	9302      	str	r3, [sp, #8]
      is += ido;
 800528a:	9a03      	ldr	r2, [sp, #12]
 800528c:	4452      	add	r2, sl
 800528e:	9203      	str	r2, [sp, #12]
      t2 = -ido + t1;
 8005290:	eba3 0b0a 	sub.w	fp, r3, sl
      for (k = 0; k < l1; k++)
 8005294:	f04f 0800 	mov.w	r8, #0
 8005298:	e7e3      	b.n	8005262 <dradfg+0x15a>
  t1 = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	9302      	str	r3, [sp, #8]
    for (j = 1; j < ip; j++)
 800529e:	2301      	movs	r3, #1
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80052a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 80052aa:	e7e6      	b.n	800527a <dradfg+0x172>
 80052ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80052b0:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
  t2 = ipp2 * t0;
 80052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b6:	9a08      	ldr	r2, [sp, #32]
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	9302      	str	r3, [sp, #8]
  if (nbd < l1)
 80052be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052c0:	9a04      	ldr	r2, [sp, #16]
 80052c2:	4293      	cmp	r3, r2
 80052c4:	f2c0 80c6 	blt.w	8005454 <dradfg+0x34c>
  t1 = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	9303      	str	r3, [sp, #12]
    for (j = 1; j < ipph; j++)
 80052cc:	2301      	movs	r3, #1
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80052d4:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 80052d8:	e11a      	b.n	8005510 <dradfg+0x408>
          ch[t3 - 1] = wa[idij - 1] * c1[t3 - 1] + wa[idij] * c1[t3];
 80052da:	f10e 4380 	add.w	r3, lr, #1073741824	; 0x40000000
 80052de:	3301      	adds	r3, #1
 80052e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80052e4:	edd3 7a00 	vldr	s15, [r3]
 80052e8:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 80052ec:	3a01      	subs	r2, #1
 80052ee:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 80052f2:	ed96 7a00 	vldr	s14, [r6]
 80052f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052fa:	eb05 0788 	add.w	r7, r5, r8, lsl #2
 80052fe:	ed97 7a00 	vldr	s14, [r7]
 8005302:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
 8005306:	eddc 6a00 	vldr	s13, [ip]
 800530a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800530e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8005312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005316:	edc2 7a00 	vstr	s15, [r2]
          ch[t3] = wa[idij - 1] * c1[t3] - wa[idij] * c1[t3 - 1];
 800531a:	edd3 7a00 	vldr	s15, [r3]
 800531e:	ed9c 7a00 	vldr	s14, [ip]
 8005322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005326:	ed97 7a00 	vldr	s14, [r7]
 800532a:	edd6 6a00 	vldr	s13, [r6]
 800532e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005332:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8005336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800533a:	edc3 7a00 	vstr	s15, [r3]
          t3 += ido;
 800533e:	4451      	add	r1, sl
        for (k = 0; k < l1; k++)
 8005340:	3001      	adds	r0, #1
 8005342:	4558      	cmp	r0, fp
 8005344:	dbc9      	blt.n	80052da <dradfg+0x1d2>
      for (i = 2; i < ido; i += 2)
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	3302      	adds	r3, #2
 800534a:	9301      	str	r3, [sp, #4]
        idij += 2;
 800534c:	46c6      	mov	lr, r8
      for (i = 2; i < ido; i += 2)
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	4553      	cmp	r3, sl
 8005352:	da07      	bge.n	8005364 <dradfg+0x25c>
        idij += 2;
 8005354:	f10e 0802 	add.w	r8, lr, #2
        t2 += 2;
 8005358:	9b02      	ldr	r3, [sp, #8]
 800535a:	3302      	adds	r3, #2
 800535c:	9302      	str	r3, [sp, #8]
        t3 = t2;
 800535e:	4619      	mov	r1, r3
        for (k = 0; k < l1; k++)
 8005360:	2000      	movs	r0, #0
 8005362:	e7ee      	b.n	8005342 <dradfg+0x23a>
    for (j = 1; j < ip; j++)
 8005364:	9b07      	ldr	r3, [sp, #28]
 8005366:	3301      	adds	r3, #1
 8005368:	9307      	str	r3, [sp, #28]
 800536a:	9b07      	ldr	r3, [sp, #28]
 800536c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800536e:	4293      	cmp	r3, r2
 8005370:	da0c      	bge.n	800538c <dradfg+0x284>
      is += ido;
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	4453      	add	r3, sl
 8005376:	9303      	str	r3, [sp, #12]
      idij = is - 1;
 8005378:	f103 3eff 	add.w	lr, r3, #4294967295
      t1 += t0;
 800537c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537e:	9a08      	ldr	r2, [sp, #32]
 8005380:	4413      	add	r3, r2
 8005382:	930a      	str	r3, [sp, #40]	; 0x28
      t2 = t1;
 8005384:	9302      	str	r3, [sp, #8]
      for (i = 2; i < ido; i += 2)
 8005386:	2302      	movs	r3, #2
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	e7e0      	b.n	800534e <dradfg+0x246>
 800538c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005390:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 8005394:	e78e      	b.n	80052b4 <dradfg+0x1ac>
          t5 += ido;
 8005396:	4451      	add	r1, sl
          t6 += ido;
 8005398:	4452      	add	r2, sl
          c1[t5 - 1] = ch[t5 - 1] + ch[t6 - 1];
 800539a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800539e:	18cf      	adds	r7, r1, r3
 80053a0:	eb09 0587 	add.w	r5, r9, r7, lsl #2
 80053a4:	edd5 7a00 	vldr	s15, [r5]
 80053a8:	4413      	add	r3, r2
 80053aa:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 80053ae:	ed96 7a00 	vldr	s14, [r6]
 80053b2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80053b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053ba:	edc7 7a00 	vstr	s15, [r7]
          c1[t6 - 1] = ch[t5] - ch[t6];
 80053be:	eb09 0c81 	add.w	ip, r9, r1, lsl #2
 80053c2:	eddc 7a00 	vldr	s15, [ip]
 80053c6:	eb09 0782 	add.w	r7, r9, r2, lsl #2
 80053ca:	ed97 7a00 	vldr	s14, [r7]
 80053ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053d6:	edc3 7a00 	vstr	s15, [r3]
          c1[t5] = ch[t5] + ch[t6];
 80053da:	eddc 7a00 	vldr	s15, [ip]
 80053de:	ed97 7a00 	vldr	s14, [r7]
 80053e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80053e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053ea:	edc3 7a00 	vstr	s15, [r3]
          c1[t6] = ch[t6 - 1] - ch[t5 - 1];
 80053ee:	edd6 7a00 	vldr	s15, [r6]
 80053f2:	ed95 7a00 	vldr	s14, [r5]
 80053f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80053fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053fe:	edc3 7a00 	vstr	s15, [r3]
        for (k = 0; k < l1; k++)
 8005402:	3001      	adds	r0, #1
 8005404:	4570      	cmp	r0, lr
 8005406:	dbc6      	blt.n	8005396 <dradfg+0x28e>
      for (i = 2; i < ido; i += 2)
 8005408:	f108 0802 	add.w	r8, r8, #2
 800540c:	45d0      	cmp	r8, sl
 800540e:	da0a      	bge.n	8005426 <dradfg+0x31e>
        t3 += 2;
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	3302      	adds	r3, #2
 8005414:	9301      	str	r3, [sp, #4]
        t4 += 2;
 8005416:	f10b 0b02 	add.w	fp, fp, #2
        t5 = t3 - ido;
 800541a:	eba3 010a 	sub.w	r1, r3, sl
        t6 = t4 - ido;
 800541e:	ebab 020a 	sub.w	r2, fp, sl
        for (k = 0; k < l1; k++)
 8005422:	2000      	movs	r0, #0
 8005424:	e7ee      	b.n	8005404 <dradfg+0x2fc>
    for (j = 1; j < ipph; j++)
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	3301      	adds	r3, #1
 800542a:	9303      	str	r3, [sp, #12]
 800542c:	9b03      	ldr	r3, [sp, #12]
 800542e:	9a06      	ldr	r2, [sp, #24]
 8005430:	4293      	cmp	r3, r2
 8005432:	da1a      	bge.n	800546a <dradfg+0x362>
      t1 += t0;
 8005434:	9b07      	ldr	r3, [sp, #28]
 8005436:	9a08      	ldr	r2, [sp, #32]
 8005438:	4413      	add	r3, r2
 800543a:	9307      	str	r3, [sp, #28]
      t2 -= t0;
 800543c:	9902      	ldr	r1, [sp, #8]
 800543e:	1a8a      	subs	r2, r1, r2
 8005440:	9202      	str	r2, [sp, #8]
      t4 = t2;
 8005442:	4693      	mov	fp, r2
      t3 = t1;
 8005444:	9301      	str	r3, [sp, #4]
      for (i = 2; i < ido; i += 2)
 8005446:	f04f 0802 	mov.w	r8, #2
 800544a:	e7df      	b.n	800540c <dradfg+0x304>
 800544c:	40c90fdb 	.word	0x40c90fdb
 8005450:	00000000 	.word	0x00000000
  t1 = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	9307      	str	r3, [sp, #28]
    for (j = 1; j < ipph; j++)
 8005458:	2301      	movs	r3, #1
 800545a:	9303      	str	r3, [sp, #12]
 800545c:	f8dd e010 	ldr.w	lr, [sp, #16]
 8005460:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005464:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 8005468:	e7e0      	b.n	800542c <dradfg+0x324>
 800546a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800546e:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
    for (j = 1; j < ipph; j++)
 8005472:	2300      	movs	r3, #0
 8005474:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005476:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8005478:	e066      	b.n	8005548 <dradfg+0x440>
          t5 += 2;
 800547a:	1cba      	adds	r2, r7, #2
          t6 += 2;
 800547c:	1c99      	adds	r1, r3, #2
          c1[t5 - 1] = ch[t5 - 1] + ch[t6 - 1];
 800547e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8005482:	3701      	adds	r7, #1
 8005484:	eb09 0587 	add.w	r5, r9, r7, lsl #2
 8005488:	edd5 7a00 	vldr	s15, [r5]
 800548c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005490:	3301      	adds	r3, #1
 8005492:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 8005496:	ed96 7a00 	vldr	s14, [r6]
 800549a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800549e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054a2:	edc7 7a00 	vstr	s15, [r7]
          c1[t6 - 1] = ch[t5] - ch[t6];
 80054a6:	eb09 0c82 	add.w	ip, r9, r2, lsl #2
 80054aa:	eddc 7a00 	vldr	s15, [ip]
 80054ae:	eb09 0781 	add.w	r7, r9, r1, lsl #2
 80054b2:	ed97 7a00 	vldr	s14, [r7]
 80054b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054be:	edc3 7a00 	vstr	s15, [r3]
          c1[t5] = ch[t5] + ch[t6];
 80054c2:	eddc 7a00 	vldr	s15, [ip]
 80054c6:	ed97 7a00 	vldr	s14, [r7]
 80054ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80054ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054d2:	edc3 7a00 	vstr	s15, [r3]
          c1[t6] = ch[t6 - 1] - ch[t5 - 1];
 80054d6:	edd6 7a00 	vldr	s15, [r6]
 80054da:	ed95 7a00 	vldr	s14, [r5]
 80054de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80054e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054e6:	edc3 7a00 	vstr	s15, [r3]
        for (i = 2; i < ido; i += 2)
 80054ea:	3002      	adds	r0, #2
          t6 += 2;
 80054ec:	460b      	mov	r3, r1
          t5 += 2;
 80054ee:	4617      	mov	r7, r2
        for (i = 2; i < ido; i += 2)
 80054f0:	4550      	cmp	r0, sl
 80054f2:	dbc2      	blt.n	800547a <dradfg+0x372>
        t3 += ido;
 80054f4:	44d0      	add	r8, sl
        t4 += ido;
 80054f6:	44d3      	add	fp, sl
      for (k = 0; k < l1; k++)
 80054f8:	f10e 0e01 	add.w	lr, lr, #1
 80054fc:	9b04      	ldr	r3, [sp, #16]
 80054fe:	459e      	cmp	lr, r3
 8005500:	da03      	bge.n	800550a <dradfg+0x402>
        t6 = t4;
 8005502:	465b      	mov	r3, fp
        t5 = t3;
 8005504:	4647      	mov	r7, r8
        for (i = 2; i < ido; i += 2)
 8005506:	2002      	movs	r0, #2
 8005508:	e7f2      	b.n	80054f0 <dradfg+0x3e8>
    for (j = 1; j < ipph; j++)
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	3301      	adds	r3, #1
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	9b01      	ldr	r3, [sp, #4]
 8005512:	9a06      	ldr	r2, [sp, #24]
 8005514:	4293      	cmp	r3, r2
 8005516:	da0b      	bge.n	8005530 <dradfg+0x428>
      t1 += t0;
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	9a08      	ldr	r2, [sp, #32]
 800551c:	4413      	add	r3, r2
 800551e:	9303      	str	r3, [sp, #12]
      t2 -= t0;
 8005520:	9902      	ldr	r1, [sp, #8]
 8005522:	1a8a      	subs	r2, r1, r2
 8005524:	9202      	str	r2, [sp, #8]
      t4 = t2;
 8005526:	4693      	mov	fp, r2
      t3 = t1;
 8005528:	4698      	mov	r8, r3
      for (k = 0; k < l1; k++)
 800552a:	f04f 0e00 	mov.w	lr, #0
 800552e:	e7e5      	b.n	80054fc <dradfg+0x3f4>
L119:
 8005530:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005534:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 8005538:	e79b      	b.n	8005472 <dradfg+0x36a>
  for (ik = 0; ik < idl1; ik++) { c2[ik] = ch2[ik]; }
 800553a:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 800553e:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8005542:	6809      	ldr	r1, [r1, #0]
 8005544:	6011      	str	r1, [r2, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	4283      	cmp	r3, r0
 800554a:	dbf6      	blt.n	800553a <dradfg+0x432>
  t2 = ipp2 * idl1;
 800554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	9302      	str	r3, [sp, #8]
 8005556:	469e      	mov	lr, r3
  t1 = 0;
 8005558:	f04f 0c00 	mov.w	ip, #0
  for (j = 1; j < ipph; j++)
 800555c:	2701      	movs	r7, #1
 800555e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005562:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005566:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 800556a:	f8dd b020 	ldr.w	fp, [sp, #32]
 800556e:	e01d      	b.n	80055ac <dradfg+0x4a4>
      t3 += ido;
 8005570:	4452      	add	r2, sl
      t4 += ido;
 8005572:	4453      	add	r3, sl
      c1[t3] = ch[t3] + ch[t4];
 8005574:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 8005578:	edd0 7a00 	vldr	s15, [r0]
 800557c:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 8005580:	ed95 7a00 	vldr	s14, [r5]
 8005584:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8005588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800558c:	edc6 7a00 	vstr	s15, [r6]
      c1[t4] = ch[t4] - ch[t3];
 8005590:	edd5 7a00 	vldr	s15, [r5]
 8005594:	ed90 7a00 	vldr	s14, [r0]
 8005598:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 800559c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055a0:	edc0 7a00 	vstr	s15, [r0]
    for (k = 0; k < l1; k++)
 80055a4:	3101      	adds	r1, #1
 80055a6:	4541      	cmp	r1, r8
 80055a8:	dbe2      	blt.n	8005570 <dradfg+0x468>
  for (j = 1; j < ipph; j++)
 80055aa:	3701      	adds	r7, #1
 80055ac:	9b06      	ldr	r3, [sp, #24]
 80055ae:	429f      	cmp	r7, r3
 80055b0:	da08      	bge.n	80055c4 <dradfg+0x4bc>
    t1 += t0;
 80055b2:	44dc      	add	ip, fp
    t2 -= t0;
 80055b4:	ebae 0e0b 	sub.w	lr, lr, fp
    t3 = t1 - ido;
 80055b8:	ebac 020a 	sub.w	r2, ip, sl
    t4 = t2 - ido;
 80055bc:	ebae 030a 	sub.w	r3, lr, sl
    for (k = 0; k < l1; k++)
 80055c0:	2100      	movs	r1, #0
 80055c2:	e7f0      	b.n	80055a6 <dradfg+0x49e>
  t3 = (ip - 1) * idl1;
 80055c4:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 80055c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ca:	3b01      	subs	r3, #1
 80055cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80055ce:	fb07 f303 	mul.w	r3, r7, r3
 80055d2:	9307      	str	r3, [sp, #28]
  ar1 = 1.f;
 80055d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  ai1 = 0.f;
 80055d8:	ed1f 5a63 	vldr	s10, [pc, #-396]	; 8005450 <dradfg+0x348>
  t1 = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	9301      	str	r3, [sp, #4]
  for (l = 1; l < ipph; l++)
 80055e0:	2301      	movs	r3, #1
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80055e8:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 80055ec:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80055f0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80055f2:	e06d      	b.n	80056d0 <dradfg+0x5c8>
      ch2[t4] = c2[ik] + ar1 * c2[t7];  t4++; t7++;
 80055f4:	eb0b 0583 	add.w	r5, fp, r3, lsl #2
 80055f8:	edd5 7a00 	vldr	s15, [r5]
 80055fc:	eb0b 0584 	add.w	r5, fp, r4, lsl #2
 8005600:	ed95 7a00 	vldr	s14, [r5]
 8005604:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005608:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 800560c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005610:	edc5 7a00 	vstr	s15, [r5]
 8005614:	3201      	adds	r2, #1
 8005616:	3401      	adds	r4, #1
      ch2[t5] = ai1 * c2[t6];           t5++; t6++;
 8005618:	eb0b 0580 	add.w	r5, fp, r0, lsl #2
 800561c:	edd5 7a00 	vldr	s15, [r5]
 8005620:	eb06 0581 	add.w	r5, r6, r1, lsl #2
 8005624:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005628:	edc5 7a00 	vstr	s15, [r5]
 800562c:	3101      	adds	r1, #1
 800562e:	3001      	adds	r0, #1
    for (ik = 0; ik < idl1; ik++)
 8005630:	3301      	adds	r3, #1
 8005632:	42bb      	cmp	r3, r7
 8005634:	dbde      	blt.n	80055f4 <dradfg+0x4ec>
    ar2 = ar1;
 8005636:	eef0 7a64 	vmov.f32	s15, s9
    ai2 = ai1;
 800563a:	eef0 6a45 	vmov.f32	s13, s10
    t5 = (ipp2 - 1) * idl1;
 800563e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    t4 = idl1;
 8005642:	46be      	mov	lr, r7
    for (j = 2; j < ipph; j++)
 8005644:	f04f 0c02 	mov.w	ip, #2
 8005648:	e026      	b.n	8005698 <dradfg+0x590>
        ch2[t6] += ar2 * c2[t8];  t6++; t8++;
 800564a:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 800564e:	eb0b 0a80 	add.w	sl, fp, r0, lsl #2
 8005652:	ed9a 7a00 	vldr	s14, [sl]
 8005656:	ee27 7a25 	vmul.f32	s14, s14, s11
 800565a:	edd5 7a00 	vldr	s15, [r5]
 800565e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005662:	edc5 7a00 	vstr	s15, [r5]
 8005666:	3201      	adds	r2, #1
 8005668:	3001      	adds	r0, #1
        ch2[t7] += ai2 * c2[t9];  t7++; t9++;
 800566a:	eb06 0581 	add.w	r5, r6, r1, lsl #2
 800566e:	eb0b 0a84 	add.w	sl, fp, r4, lsl #2
 8005672:	ed9a 7a00 	vldr	s14, [sl]
 8005676:	ee27 7a26 	vmul.f32	s14, s14, s13
 800567a:	edd5 7a00 	vldr	s15, [r5]
 800567e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005682:	edc5 7a00 	vstr	s15, [r5]
 8005686:	3101      	adds	r1, #1
 8005688:	3401      	adds	r4, #1
      for (ik = 0; ik < idl1; ik++)
 800568a:	3301      	adds	r3, #1
 800568c:	42bb      	cmp	r3, r7
 800568e:	dbdc      	blt.n	800564a <dradfg+0x542>
    for (j = 2; j < ipph; j++)
 8005690:	f10c 0c01 	add.w	ip, ip, #1
      ar2 = ar2h;
 8005694:	eef0 7a65 	vmov.f32	s15, s11
    for (j = 2; j < ipph; j++)
 8005698:	45cc      	cmp	ip, r9
 800569a:	da14      	bge.n	80056c6 <dradfg+0x5be>
      t4 += idl1;
 800569c:	44be      	add	lr, r7
      t5 -= idl1;
 800569e:	eba8 0807 	sub.w	r8, r8, r7
      ar2h = dc2 * ar2 - ds2 * ai2;
 80056a2:	ee67 5aa4 	vmul.f32	s11, s15, s9
 80056a6:	ee26 7a85 	vmul.f32	s14, s13, s10
 80056aa:	ee75 5ac7 	vsub.f32	s11, s11, s14
      ai2 = dc2 * ai2 + ds2 * ar2;
 80056ae:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80056b2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80056b6:	ee76 6aa7 	vadd.f32	s13, s13, s15
      t9 = t5;
 80056ba:	4644      	mov	r4, r8
      t8 = t4;
 80056bc:	4670      	mov	r0, lr
      t7 = t2;
 80056be:	9902      	ldr	r1, [sp, #8]
      t6 = t1;
 80056c0:	9a01      	ldr	r2, [sp, #4]
      for (ik = 0; ik < idl1; ik++)
 80056c2:	2300      	movs	r3, #0
 80056c4:	e7e2      	b.n	800568c <dradfg+0x584>
  for (l = 1; l < ipph; l++)
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	3301      	adds	r3, #1
 80056ca:	9303      	str	r3, [sp, #12]
    ar1 = ar1h;
 80056cc:	eef0 7a64 	vmov.f32	s15, s9
  for (l = 1; l < ipph; l++)
 80056d0:	9b03      	ldr	r3, [sp, #12]
 80056d2:	454b      	cmp	r3, r9
 80056d4:	da15      	bge.n	8005702 <dradfg+0x5fa>
    t1 += idl1;
 80056d6:	9a01      	ldr	r2, [sp, #4]
 80056d8:	443a      	add	r2, r7
 80056da:	9201      	str	r2, [sp, #4]
    t2 -= idl1;
 80056dc:	9b02      	ldr	r3, [sp, #8]
 80056de:	1bd9      	subs	r1, r3, r7
 80056e0:	9102      	str	r1, [sp, #8]
    ar1h = dcp * ar1 - dsp * ai1;
 80056e2:	ee67 4a88 	vmul.f32	s9, s15, s16
 80056e6:	ee25 7a06 	vmul.f32	s14, s10, s12
 80056ea:	ee74 4ac7 	vsub.f32	s9, s9, s14
    ai1 = dcp * ai1 + dsp * ar1;
 80056ee:	ee25 5a08 	vmul.f32	s10, s10, s16
 80056f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80056f6:	ee35 5a27 	vadd.f32	s10, s10, s15
    t7 = idl1;
 80056fa:	463c      	mov	r4, r7
    t6 = t3;
 80056fc:	9807      	ldr	r0, [sp, #28]
    for (ik = 0; ik < idl1; ik++)
 80056fe:	2300      	movs	r3, #0
 8005700:	e797      	b.n	8005632 <dradfg+0x52a>
  t1 = 0;
 8005702:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005706:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800570a:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800570e:	2500      	movs	r5, #0
  for (j = 1; j < ipph; j++)
 8005710:	2401      	movs	r4, #1
 8005712:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005716:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005718:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800571a:	e010      	b.n	800573e <dradfg+0x636>
    for (ik = 0; ik < idl1; ik++) { ch2[ik] += c2[t2]; t2++; }
 800571c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005720:	eb0b 0082 	add.w	r0, fp, r2, lsl #2
 8005724:	ed90 7a00 	vldr	s14, [r0]
 8005728:	edd1 7a00 	vldr	s15, [r1]
 800572c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005730:	edc1 7a00 	vstr	s15, [r1]
 8005734:	3201      	adds	r2, #1
 8005736:	3301      	adds	r3, #1
 8005738:	42b3      	cmp	r3, r6
 800573a:	dbef      	blt.n	800571c <dradfg+0x614>
  for (j = 1; j < ipph; j++)
 800573c:	3401      	adds	r4, #1
 800573e:	4564      	cmp	r4, ip
 8005740:	da03      	bge.n	800574a <dradfg+0x642>
    t1 += idl1;
 8005742:	4435      	add	r5, r6
    t2 = t1;
 8005744:	462a      	mov	r2, r5
    for (ik = 0; ik < idl1; ik++) { ch2[ik] += c2[t2]; t2++; }
 8005746:	2300      	movs	r3, #0
 8005748:	e7f6      	b.n	8005738 <dradfg+0x630>
  if (ido < l1) { goto L132; }
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	459a      	cmp	sl, r3
 800574e:	db2c      	blt.n	80057aa <dradfg+0x6a2>
  t2 = 0;
 8005750:	2500      	movs	r5, #0
  t1 = 0;
 8005752:	462f      	mov	r7, r5
  for (k = 0; k < l1; k++)
 8005754:	462e      	mov	r6, r5
 8005756:	f8dd e014 	ldr.w	lr, [sp, #20]
 800575a:	469c      	mov	ip, r3
 800575c:	e00d      	b.n	800577a <dradfg+0x672>
    for (i = 0; i < ido; i++) { cc[t4] = ch[t3]; t4++; t3++; }
 800575e:	eb08 0081 	add.w	r0, r8, r1, lsl #2
 8005762:	eb09 0482 	add.w	r4, r9, r2, lsl #2
 8005766:	6824      	ldr	r4, [r4, #0]
 8005768:	6004      	str	r4, [r0, #0]
 800576a:	3101      	adds	r1, #1
 800576c:	3201      	adds	r2, #1
 800576e:	3301      	adds	r3, #1
 8005770:	4553      	cmp	r3, sl
 8005772:	dbf4      	blt.n	800575e <dradfg+0x656>
    t1 += ido;
 8005774:	4457      	add	r7, sl
    t2 += t10;
 8005776:	4475      	add	r5, lr
  for (k = 0; k < l1; k++)
 8005778:	3601      	adds	r6, #1
 800577a:	4566      	cmp	r6, ip
 800577c:	da19      	bge.n	80057b2 <dradfg+0x6aa>
    t4 = t2;
 800577e:	4629      	mov	r1, r5
    t3 = t1;
 8005780:	463a      	mov	r2, r7
    for (i = 0; i < ido; i++) { cc[t4] = ch[t3]; t4++; t3++; }
 8005782:	2300      	movs	r3, #0
 8005784:	e7f4      	b.n	8005770 <dradfg+0x668>
      cc[t2] = ch[t1];
 8005786:	eb08 0081 	add.w	r0, r8, r1, lsl #2
 800578a:	eb09 0482 	add.w	r4, r9, r2, lsl #2
 800578e:	6824      	ldr	r4, [r4, #0]
 8005790:	6004      	str	r4, [r0, #0]
      t1 += ido;
 8005792:	4452      	add	r2, sl
      t2 += t10;
 8005794:	4439      	add	r1, r7
    for (k = 0; k < l1; k++)
 8005796:	3301      	adds	r3, #1
 8005798:	42b3      	cmp	r3, r6
 800579a:	dbf4      	blt.n	8005786 <dradfg+0x67e>
  for (i = 0; i < ido; i++)
 800579c:	3501      	adds	r5, #1
 800579e:	4555      	cmp	r5, sl
 80057a0:	da07      	bge.n	80057b2 <dradfg+0x6aa>
    t2 = i;
 80057a2:	4629      	mov	r1, r5
    t1 = i;
 80057a4:	462a      	mov	r2, r5
    for (k = 0; k < l1; k++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	e7f6      	b.n	8005798 <dradfg+0x690>
  for (i = 0; i < ido; i++)
 80057aa:	2500      	movs	r5, #0
 80057ac:	9f05      	ldr	r7, [sp, #20]
 80057ae:	9e04      	ldr	r6, [sp, #16]
 80057b0:	e7f5      	b.n	800579e <dradfg+0x696>
  t2 = ido << 1;
 80057b2:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80057b6:	930a      	str	r3, [sp, #40]	; 0x28
  t4 = ipp2 * t0;
 80057b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ba:	9a08      	ldr	r2, [sp, #32]
 80057bc:	fb02 f303 	mul.w	r3, r2, r3
 80057c0:	9307      	str	r3, [sp, #28]
 80057c2:	461f      	mov	r7, r3
  t3 = 0;
 80057c4:	2600      	movs	r6, #0
  for (j = 1; j < ipph; j++)
 80057c6:	2501      	movs	r5, #1
 80057c8:	9601      	str	r6, [sp, #4]
 80057ca:	f8dd e014 	ldr.w	lr, [sp, #20]
 80057ce:	f8dd c010 	ldr.w	ip, [sp, #16]
 80057d2:	e019      	b.n	8005808 <dradfg+0x700>
      cc[t5 - 1] = ch[t6];
 80057d4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80057d8:	3b01      	subs	r3, #1
 80057da:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80057de:	eb09 0b80 	add.w	fp, r9, r0, lsl #2
 80057e2:	f8db b000 	ldr.w	fp, [fp]
 80057e6:	f8c3 b000 	str.w	fp, [r3]
      cc[t5] = ch[t7];
 80057ea:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80057ee:	eb09 0b84 	add.w	fp, r9, r4, lsl #2
 80057f2:	f8db b000 	ldr.w	fp, [fp]
 80057f6:	f8c3 b000 	str.w	fp, [r3]
      t5 += t10;
 80057fa:	4472      	add	r2, lr
      t6 += ido;
 80057fc:	4450      	add	r0, sl
      t7 += ido;
 80057fe:	4454      	add	r4, sl
    for (k = 0; k < l1; k++)
 8005800:	3101      	adds	r1, #1
 8005802:	4561      	cmp	r1, ip
 8005804:	dbe6      	blt.n	80057d4 <dradfg+0x6cc>
  for (j = 1; j < ipph; j++)
 8005806:	3501      	adds	r5, #1
 8005808:	9b06      	ldr	r3, [sp, #24]
 800580a:	429d      	cmp	r5, r3
 800580c:	da0a      	bge.n	8005824 <dradfg+0x71c>
    t1 += t2;
 800580e:	9a01      	ldr	r2, [sp, #4]
 8005810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005812:	441a      	add	r2, r3
 8005814:	9201      	str	r2, [sp, #4]
    t3 += t0;
 8005816:	9b08      	ldr	r3, [sp, #32]
 8005818:	441e      	add	r6, r3
    t4 -= t0;
 800581a:	1aff      	subs	r7, r7, r3
    t7 = t4;
 800581c:	463c      	mov	r4, r7
    t6 = t3;
 800581e:	4630      	mov	r0, r6
    for (k = 0; k < l1; k++)
 8005820:	2100      	movs	r1, #0
 8005822:	e7ee      	b.n	8005802 <dradfg+0x6fa>
  if (ido == 1) { return; }
 8005824:	f1ba 0f01 	cmp.w	sl, #1
 8005828:	f000 80f6 	beq.w	8005a18 <dradfg+0x910>
  if (nbd < l1) { goto L141; }
 800582c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800582e:	9a04      	ldr	r2, [sp, #16]
 8005830:	4293      	cmp	r3, r2
 8005832:	db08      	blt.n	8005846 <dradfg+0x73e>
  t1 = -ido;
 8005834:	f1ca 0300 	rsb	r3, sl, #0
 8005838:	930b      	str	r3, [sp, #44]	; 0x2c
  t4 = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	930d      	str	r3, [sp, #52]	; 0x34
  t3 = 0;
 800583e:	930c      	str	r3, [sp, #48]	; 0x30
  for (j = 1; j < ipph; j++)
 8005840:	2301      	movs	r3, #1
 8005842:	9309      	str	r3, [sp, #36]	; 0x24
 8005844:	e065      	b.n	8005912 <dradfg+0x80a>
  t1 = -ido;
 8005846:	f1ca 0b00 	rsb	fp, sl, #0
  t4 = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	9303      	str	r3, [sp, #12]
  t3 = 0;
 800584e:	9302      	str	r3, [sp, #8]
  for (j = 1; j < ipph; j++)
 8005850:	2301      	movs	r3, #1
 8005852:	930b      	str	r3, [sp, #44]	; 0x2c
 8005854:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005858:	f8dd e014 	ldr.w	lr, [sp, #20]
 800585c:	4693      	mov	fp, r2
 800585e:	e0c6      	b.n	80059ee <dradfg+0x8e6>
      t6 += t10;
 8005860:	9b01      	ldr	r3, [sp, #4]
 8005862:	9a05      	ldr	r2, [sp, #20]
 8005864:	4413      	add	r3, r2
 8005866:	9301      	str	r3, [sp, #4]
      t7 += t10;
 8005868:	9b02      	ldr	r3, [sp, #8]
 800586a:	4413      	add	r3, r2
 800586c:	9302      	str	r3, [sp, #8]
      t8 += ido;
 800586e:	44d6      	add	lr, sl
      t9 += ido;
 8005870:	44d3      	add	fp, sl
    for (k = 0; k < l1; k++)
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	3301      	adds	r3, #1
 8005876:	9303      	str	r3, [sp, #12]
 8005878:	9b03      	ldr	r3, [sp, #12]
 800587a:	9a04      	ldr	r2, [sp, #16]
 800587c:	4293      	cmp	r3, r2
 800587e:	da45      	bge.n	800590c <dradfg+0x804>
      for (i = 2; i < ido; i += 2)
 8005880:	2202      	movs	r2, #2
 8005882:	4552      	cmp	r2, sl
 8005884:	daec      	bge.n	8005860 <dradfg+0x758>
        ic = idp2 - i;
 8005886:	ebaa 0102 	sub.w	r1, sl, r2
        cc[i + t7 - 1] = ch[i + t8 - 1] + ch[i + t9 - 1];
 800588a:	eb02 000e 	add.w	r0, r2, lr
 800588e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005892:	18c7      	adds	r7, r0, r3
 8005894:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005898:	edd7 7a00 	vldr	s15, [r7]
 800589c:	eb02 040b 	add.w	r4, r2, fp
 80058a0:	18e6      	adds	r6, r4, r3
 80058a2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80058a6:	ed96 7a00 	vldr	s14, [r6]
 80058aa:	9d02      	ldr	r5, [sp, #8]
 80058ac:	1955      	adds	r5, r2, r5
 80058ae:	eb05 0c03 	add.w	ip, r5, r3
 80058b2:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 80058b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058ba:	edcc 7a00 	vstr	s15, [ip]
        cc[ic + t6 - 1] = ch[i + t8 - 1] - ch[i + t9 - 1];
 80058be:	edd7 7a00 	vldr	s15, [r7]
 80058c2:	ed96 7a00 	vldr	s14, [r6]
 80058c6:	9e01      	ldr	r6, [sp, #4]
 80058c8:	4431      	add	r1, r6
 80058ca:	440b      	add	r3, r1
 80058cc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80058d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058d4:	edc3 7a00 	vstr	s15, [r3]
        cc[i + t7] = ch[i + t8] + ch[i + t9];
 80058d8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80058dc:	edd0 7a00 	vldr	s15, [r0]
 80058e0:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 80058e4:	ed94 7a00 	vldr	s14, [r4]
 80058e8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80058ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058f0:	edc5 7a00 	vstr	s15, [r5]
        cc[ic + t6] = ch[i + t9] - ch[i + t8];
 80058f4:	edd4 7a00 	vldr	s15, [r4]
 80058f8:	ed90 7a00 	vldr	s14, [r0]
 80058fc:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8005900:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005904:	edc1 7a00 	vstr	s15, [r1]
      for (i = 2; i < ido; i += 2)
 8005908:	3202      	adds	r2, #2
 800590a:	e7ba      	b.n	8005882 <dradfg+0x77a>
  for (j = 1; j < ipph; j++)
 800590c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590e:	3301      	adds	r3, #1
 8005910:	9309      	str	r3, [sp, #36]	; 0x24
 8005912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005914:	9a06      	ldr	r2, [sp, #24]
 8005916:	4293      	cmp	r3, r2
 8005918:	da7e      	bge.n	8005a18 <dradfg+0x910>
    t1 += t2;
 800591a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800591c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800591e:	440b      	add	r3, r1
 8005920:	930b      	str	r3, [sp, #44]	; 0x2c
    t3 += t2;
 8005922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005924:	440a      	add	r2, r1
 8005926:	920c      	str	r2, [sp, #48]	; 0x30
    t4 += t0;
 8005928:	990d      	ldr	r1, [sp, #52]	; 0x34
 800592a:	9808      	ldr	r0, [sp, #32]
 800592c:	4401      	add	r1, r0
 800592e:	910d      	str	r1, [sp, #52]	; 0x34
    t5 -= t0;
 8005930:	9c07      	ldr	r4, [sp, #28]
 8005932:	1a20      	subs	r0, r4, r0
 8005934:	9007      	str	r0, [sp, #28]
    t9 = t5;
 8005936:	4683      	mov	fp, r0
    t8 = t4;
 8005938:	468e      	mov	lr, r1
    t7 = t3;
 800593a:	9202      	str	r2, [sp, #8]
    t6 = t1;
 800593c:	9301      	str	r3, [sp, #4]
    for (k = 0; k < l1; k++)
 800593e:	2300      	movs	r3, #0
 8005940:	9303      	str	r3, [sp, #12]
 8005942:	e799      	b.n	8005878 <dradfg+0x770>
        cc[t7 - 1] = ch[t8 - 1] + ch[t9 - 1];
 8005944:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005948:	18e9      	adds	r1, r5, r3
 800594a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800594e:	edd1 7a00 	vldr	s15, [r1]
 8005952:	18e2      	adds	r2, r4, r3
 8005954:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8005958:	ed92 7a00 	vldr	s14, [r2]
 800595c:	18f7      	adds	r7, r6, r3
 800595e:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8005962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005966:	edc7 7a00 	vstr	s15, [r7]
        cc[t6 - 1] = ch[t8 - 1] - ch[t9 - 1];
 800596a:	edd1 7a00 	vldr	s15, [r1]
 800596e:	ed92 7a00 	vldr	s14, [r2]
 8005972:	4403      	add	r3, r0
 8005974:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8005978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800597c:	edc3 7a00 	vstr	s15, [r3]
        cc[t7] = ch[t8] + ch[t9];
 8005980:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 8005984:	edd3 7a00 	vldr	s15, [r3]
 8005988:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 800598c:	ed92 7a00 	vldr	s14, [r2]
 8005990:	eb08 0186 	add.w	r1, r8, r6, lsl #2
 8005994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005998:	edc1 7a00 	vstr	s15, [r1]
        cc[t6] = ch[t9] - ch[t8];
 800599c:	edd2 7a00 	vldr	s15, [r2]
 80059a0:	ed93 7a00 	vldr	s14, [r3]
 80059a4:	eb08 0380 	add.w	r3, r8, r0, lsl #2
 80059a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059ac:	edc3 7a00 	vstr	s15, [r3]
        t6 += t10;
 80059b0:	4470      	add	r0, lr
        t7 += t10;
 80059b2:	4476      	add	r6, lr
        t8 += ido;
 80059b4:	4455      	add	r5, sl
        t9 += ido;
 80059b6:	4454      	add	r4, sl
      for (k = 0; k < l1; k++)
 80059b8:	f10c 0c01 	add.w	ip, ip, #1
 80059bc:	45dc      	cmp	ip, fp
 80059be:	dbc1      	blt.n	8005944 <dradfg+0x83c>
    for (i = 2; i < ido; i += 2)
 80059c0:	9b01      	ldr	r3, [sp, #4]
 80059c2:	3302      	adds	r3, #2
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	4553      	cmp	r3, sl
 80059ca:	da0d      	bge.n	80059e8 <dradfg+0x8e0>
      t6 = idp2 + t1 - i;
 80059cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ce:	eb0a 0003 	add.w	r0, sl, r3
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	1ac0      	subs	r0, r0, r3
      t7 = i + t3;
 80059d6:	9a02      	ldr	r2, [sp, #8]
 80059d8:	189e      	adds	r6, r3, r2
      t8 = i + t4;
 80059da:	9a03      	ldr	r2, [sp, #12]
 80059dc:	189d      	adds	r5, r3, r2
      t9 = i + t5;
 80059de:	9a07      	ldr	r2, [sp, #28]
 80059e0:	189c      	adds	r4, r3, r2
      for (k = 0; k < l1; k++)
 80059e2:	f04f 0c00 	mov.w	ip, #0
 80059e6:	e7e9      	b.n	80059bc <dradfg+0x8b4>
  for (j = 1; j < ipph; j++)
 80059e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ea:	3301      	adds	r3, #1
 80059ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f0:	9a06      	ldr	r2, [sp, #24]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	da10      	bge.n	8005a18 <dradfg+0x910>
    t1 += t2;
 80059f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059fa:	4413      	add	r3, r2
 80059fc:	9309      	str	r3, [sp, #36]	; 0x24
    t3 += t2;
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	4413      	add	r3, r2
 8005a02:	9302      	str	r3, [sp, #8]
    t4 += t0;
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	9a08      	ldr	r2, [sp, #32]
 8005a08:	4413      	add	r3, r2
 8005a0a:	9303      	str	r3, [sp, #12]
    t5 -= t0;
 8005a0c:	9b07      	ldr	r3, [sp, #28]
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	9307      	str	r3, [sp, #28]
    for (i = 2; i < ido; i += 2)
 8005a12:	2302      	movs	r3, #2
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	e7d6      	b.n	80059c6 <dradfg+0x8be>
}
 8005a18:	b00f      	add	sp, #60	; 0x3c
 8005a1a:	ecbd 8b02 	vpop	{d8}
 8005a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a22:	bf00      	nop

08005a24 <drftf1>:
{
 8005a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	b089      	sub	sp, #36	; 0x24
 8005a2a:	4688      	mov	r8, r1
 8005a2c:	4691      	mov	r9, r2
  nf = ifac[1];
 8005a2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a30:	f8d2 b004 	ldr.w	fp, [r2, #4]
  iw = n;
 8005a34:	4606      	mov	r6, r0
  na = 1;
 8005a36:	2201      	movs	r2, #1
  for (k1 = 0; k1 < nf; k1++)
 8005a38:	2400      	movs	r4, #0
 8005a3a:	9007      	str	r0, [sp, #28]
 8005a3c:	469a      	mov	sl, r3
 8005a3e:	e01b      	b.n	8005a78 <drftf1+0x54>
    ix2 = iw + ido;
 8005a40:	1983      	adds	r3, r0, r6
    ix3 = ix2 + ido;
 8005a42:	eb06 0240 	add.w	r2, r6, r0, lsl #1
    if (na != 0)
 8005a46:	2f00      	cmp	r7, #0
 8005a48:	d03c      	beq.n	8005ac4 <drftf1+0xa0>
      dradf4(ido, l1, ch, c, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
 8005a4a:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8005a4e:	eb06 0c01 	add.w	ip, r6, r1
 8005a52:	440b      	add	r3, r1
 8005a54:	4411      	add	r1, r2
 8005a56:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8005a5a:	9102      	str	r1, [sp, #8]
 8005a5c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	eb0a 038c 	add.w	r3, sl, ip, lsl #2
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	4643      	mov	r3, r8
 8005a6a:	464a      	mov	r2, r9
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	f7fe fdb9 	bl	80045e4 <dradf4>
    na = 1 - na;
 8005a72:	463a      	mov	r2, r7
  for (k1 = 0; k1 < nf; k1++)
 8005a74:	3401      	adds	r4, #1
    l2 = l1;
 8005a76:	4628      	mov	r0, r5
  for (k1 = 0; k1 < nf; k1++)
 8005a78:	455c      	cmp	r4, fp
 8005a7a:	da73      	bge.n	8005b64 <drftf1+0x140>
    kh = nf - k1;
 8005a7c:	ebab 0304 	sub.w	r3, fp, r4
    ip = ifac[kh + 1];
 8005a80:	3301      	adds	r3, #1
 8005a82:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005a84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    l1 = l2 / ip;
 8005a88:	fb90 f5f1 	sdiv	r5, r0, r1
    ido = n / l2;
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	fb93 f0f0 	sdiv	r0, r3, r0
    idl1 = ido * l1;
 8005a92:	fb00 f305 	mul.w	r3, r0, r5
    iw -= (ip - 1) * ido;
 8005a96:	1e4f      	subs	r7, r1, #1
 8005a98:	fb00 6617 	mls	r6, r0, r7, r6
    na = 1 - na;
 8005a9c:	f1c2 0701 	rsb	r7, r2, #1
    if (ip != 4) { goto L102; }
 8005aa0:	2904      	cmp	r1, #4
 8005aa2:	d0cd      	beq.n	8005a40 <drftf1+0x1c>
    if (ip != 2) { goto L104; }
 8005aa4:	2902      	cmp	r1, #2
 8005aa6:	d122      	bne.n	8005aee <drftf1+0xca>
    if (na != 0) { goto L103; }
 8005aa8:	b3d7      	cbz	r7, 8005b20 <drftf1+0xfc>
    dradf2(ido, l1, ch, c, wa + iw - 1);
 8005aaa:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	4643      	mov	r3, r8
 8005ab8:	464a      	mov	r2, r9
 8005aba:	4629      	mov	r1, r5
 8005abc:	f7fe fca8 	bl	8004410 <dradf2>
    na = 1 - na;
 8005ac0:	463a      	mov	r2, r7
    goto L110;
 8005ac2:	e7d7      	b.n	8005a74 <drftf1+0x50>
      dradf4(ido, l1, c, ch, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
 8005ac4:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8005ac8:	eb06 010c 	add.w	r1, r6, ip
 8005acc:	4463      	add	r3, ip
 8005ace:	4462      	add	r2, ip
 8005ad0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8005ad4:	9202      	str	r2, [sp, #8]
 8005ad6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8005ae0:	9100      	str	r1, [sp, #0]
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	4642      	mov	r2, r8
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f7fe fd7c 	bl	80045e4 <dradf4>
 8005aec:	e7c1      	b.n	8005a72 <drftf1+0x4e>
    if (ido == 1) { na = 1 - na; }
 8005aee:	2801      	cmp	r0, #1
 8005af0:	d000      	beq.n	8005af4 <drftf1+0xd0>
    na = 1 - na;
 8005af2:	463a      	mov	r2, r7
    if (na != 0) { goto L109; }
 8005af4:	b30a      	cbz	r2, 8005b3a <drftf1+0x116>
    dradfg(ido, ip, l1, idl1, ch, ch, ch, c, c, wa + iw - 1);
 8005af6:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
 8005afa:	3a01      	subs	r2, #1
 8005afc:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8005b00:	9205      	str	r2, [sp, #20]
 8005b02:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b0a:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b0e:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b12:	f8cd 9000 	str.w	r9, [sp]
 8005b16:	462a      	mov	r2, r5
 8005b18:	f7ff faf6 	bl	8005108 <dradfg>
    na = 0;
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	e7a9      	b.n	8005a74 <drftf1+0x50>
    dradf2(ido, l1, c, ch, wa + iw - 1);
 8005b20:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8005b24:	3b01      	subs	r3, #1
 8005b26:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	4642      	mov	r2, r8
 8005b30:	4629      	mov	r1, r5
 8005b32:	f7fe fc6d 	bl	8004410 <dradf2>
    na = 1 - na;
 8005b36:	463a      	mov	r2, r7
    goto L110;
 8005b38:	e79c      	b.n	8005a74 <drftf1+0x50>
    dradfg(ido, ip, l1, idl1, c, c, c, ch, ch, wa + iw - 1);
 8005b3a:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
 8005b3e:	3a01      	subs	r2, #1
 8005b40:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8005b44:	9205      	str	r2, [sp, #20]
 8005b46:	f8cd 9010 	str.w	r9, [sp, #16]
 8005b4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b4e:	f8cd 8008 	str.w	r8, [sp, #8]
 8005b52:	f8cd 8004 	str.w	r8, [sp, #4]
 8005b56:	f8cd 8000 	str.w	r8, [sp]
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	f7ff fad4 	bl	8005108 <dradfg>
    na = 1;
 8005b60:	2201      	movs	r2, #1
    goto L110;
 8005b62:	e787      	b.n	8005a74 <drftf1+0x50>
  if (na != 1)
 8005b64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005b68:	2a01      	cmp	r2, #1
 8005b6a:	d00a      	beq.n	8005b82 <drftf1+0x15e>
    for (i = 0; i < n; i++) { c[i] = ch[i]; }
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e006      	b.n	8005b7e <drftf1+0x15a>
 8005b70:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8005b74:	eb09 0183 	add.w	r1, r9, r3, lsl #2
 8005b78:	6809      	ldr	r1, [r1, #0]
 8005b7a:	6011      	str	r1, [r2, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	4553      	cmp	r3, sl
 8005b80:	dbf6      	blt.n	8005b70 <drftf1+0x14c>
}
 8005b82:	b009      	add	sp, #36	; 0x24
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b88 <dradbg>:

static void dradbg(int ido, int ip, int l1, int idl1, float *cc, float *c1,
                   float *c2, float *ch, float *ch2, float *wa)
{
 8005b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	ed2d 8b02 	vpush	{d8}
 8005b90:	b093      	sub	sp, #76	; 0x4c
 8005b92:	4683      	mov	fp, r0
 8005b94:	910c      	str	r1, [sp, #48]	; 0x30
 8005b96:	4614      	mov	r4, r2
 8005b98:	9203      	str	r2, [sp, #12]
 8005b9a:	9311      	str	r3, [sp, #68]	; 0x44
 8005b9c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8005b9e:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8005ba2:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8005ba4:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005ba8:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
  float dc2, ai1, ai2, ar1, ar2, ds2;
  int nbd;
  float dcp, arg, dsp, ar1h, ar2h;
  int ipp2;

  t10 = ip * ido;
 8005bac:	460b      	mov	r3, r1
 8005bae:	fb00 f101 	mul.w	r1, r0, r1
 8005bb2:	9104      	str	r1, [sp, #16]
  t0 = l1 * ido;
 8005bb4:	fb02 f200 	mul.w	r2, r2, r0
 8005bb8:	9208      	str	r2, [sp, #32]
  arg = tpi / (float)ip;
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc2:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8005e4c <dradbg+0x2c4>
 8005bc6:	eec7 8a27 	vdiv.f32	s17, s14, s15
  dcp = cosf(arg);
 8005bca:	eeb0 0a68 	vmov.f32	s0, s17
 8005bce:	f007 f9f9 	bl	800cfc4 <cosf>
 8005bd2:	eeb0 8a40 	vmov.f32	s16, s0
  dsp = sinf(arg);
 8005bd6:	eeb0 0a68 	vmov.f32	s0, s17
 8005bda:	f007 fa37 	bl	800d04c <sinf>
 8005bde:	eef0 5a40 	vmov.f32	s11, s0
  nbd = (ido - 1) >> 1;
 8005be2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005be6:	105b      	asrs	r3, r3, #1
 8005be8:	9310      	str	r3, [sp, #64]	; 0x40
  ipp2 = ip;
  ipph = (ip + 1) >> 1;
 8005bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bec:	3301      	adds	r3, #1
 8005bee:	105b      	asrs	r3, r3, #1
 8005bf0:	9307      	str	r3, [sp, #28]
  if (ido < l1) { goto L103; }
 8005bf2:	45a3      	cmp	fp, r4
 8005bf4:	db47      	blt.n	8005c86 <dradbg+0xfe>

  t1 = 0;
  t2 = 0;
 8005bf6:	f04f 0c00 	mov.w	ip, #0
  t1 = 0;
 8005bfa:	46e6      	mov	lr, ip
  for (k = 0; k < l1; k++)
 8005bfc:	4665      	mov	r5, ip
 8005bfe:	46a1      	mov	r9, r4
 8005c00:	9f04      	ldr	r7, [sp, #16]
 8005c02:	e00d      	b.n	8005c20 <dradbg+0x98>
  {
    t3 = t1;
    t4 = t2;
    for (i = 0; i < ido; i++)
    {
      ch[t3] = cc[t4];
 8005c04:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8005c08:	eb06 0481 	add.w	r4, r6, r1, lsl #2
 8005c0c:	6824      	ldr	r4, [r4, #0]
 8005c0e:	6004      	str	r4, [r0, #0]
      t3++;
 8005c10:	3201      	adds	r2, #1
      t4++;
 8005c12:	3101      	adds	r1, #1
    for (i = 0; i < ido; i++)
 8005c14:	3301      	adds	r3, #1
 8005c16:	455b      	cmp	r3, fp
 8005c18:	dbf4      	blt.n	8005c04 <dradbg+0x7c>
    }
    t1 += ido;
 8005c1a:	44de      	add	lr, fp
    t2 += t10;
 8005c1c:	44bc      	add	ip, r7
  for (k = 0; k < l1; k++)
 8005c1e:	3501      	adds	r5, #1
 8005c20:	454d      	cmp	r5, r9
 8005c22:	da03      	bge.n	8005c2c <dradbg+0xa4>
    t4 = t2;
 8005c24:	4661      	mov	r1, ip
    t3 = t1;
 8005c26:	4672      	mov	r2, lr
    for (i = 0; i < ido; i++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e7f4      	b.n	8005c16 <dradbg+0x8e>
 8005c2c:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8005c30:	9f20      	ldr	r7, [sp, #128]	; 0x80
    t1++;
  }

L106:
  t1 = 0;
  t2 = ipp2 * t0;
 8005c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c34:	9a08      	ldr	r2, [sp, #32]
 8005c36:	fb02 f303 	mul.w	r3, r2, r3
 8005c3a:	9309      	str	r3, [sp, #36]	; 0x24
  t7 = (t5 = ido << 1);
 8005c3c:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8005c40:	920a      	str	r2, [sp, #40]	; 0x28
  t2 = ipp2 * t0;
 8005c42:	469c      	mov	ip, r3
  t1 = 0;
 8005c44:	f04f 0e00 	mov.w	lr, #0
  for (j = 1; j < ipph; j++)
 8005c48:	2501      	movs	r5, #1
 8005c4a:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8005c4e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005c52:	9720      	str	r7, [sp, #128]	; 0x80
 8005c54:	9f03      	ldr	r7, [sp, #12]
 8005c56:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8005c5a:	4692      	mov	sl, r2
 8005c5c:	e040      	b.n	8005ce0 <dradbg+0x158>
      ch[t2] = cc[t3];
 8005c5e:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8005c62:	eb06 0481 	add.w	r4, r6, r1, lsl #2
 8005c66:	6824      	ldr	r4, [r4, #0]
 8005c68:	6004      	str	r4, [r0, #0]
      t2 += ido;
 8005c6a:	445a      	add	r2, fp
      t3 += t10;
 8005c6c:	4449      	add	r1, r9
    for (k = 0; k < l1; k++)
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4573      	cmp	r3, lr
 8005c72:	dbf4      	blt.n	8005c5e <dradbg+0xd6>
    t1++;
 8005c74:	f10c 0c01 	add.w	ip, ip, #1
  for (i = 0; i < ido; i++)
 8005c78:	3501      	adds	r5, #1
 8005c7a:	455d      	cmp	r5, fp
 8005c7c:	da0d      	bge.n	8005c9a <dradbg+0x112>
    t3 = t1;
 8005c7e:	4661      	mov	r1, ip
    t2 = t1;
 8005c80:	4662      	mov	r2, ip
    for (k = 0; k < l1; k++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	e7f4      	b.n	8005c70 <dradbg+0xe8>
  t1 = 0;
 8005c86:	f04f 0c00 	mov.w	ip, #0
  for (i = 0; i < ido; i++)
 8005c8a:	4665      	mov	r5, ip
 8005c8c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8005c90:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8005c94:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005c98:	e7ef      	b.n	8005c7a <dradbg+0xf2>
 8005c9a:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8005c9e:	e7c8      	b.n	8005c32 <dradbg+0xaa>
    t3 = t1;
    t4 = t2;
    t6 = t5;
    for (k = 0; k < l1; k++)
    {
      ch[t3] = cc[t6 - 1] + cc[t6 - 1];
 8005ca0:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005caa:	edd3 7a00 	vldr	s15, [r3]
 8005cae:	eb08 0380 	add.w	r3, r8, r0, lsl #2
 8005cb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005cb6:	edc3 7a00 	vstr	s15, [r3]
      ch[t4] = cc[t6] + cc[t6];
 8005cba:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8005cbe:	edd3 7a00 	vldr	s15, [r3]
 8005cc2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8005cc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005cca:	edc3 7a00 	vstr	s15, [r3]
      t3 += ido;
 8005cce:	4458      	add	r0, fp
      t4 += ido;
 8005cd0:	445c      	add	r4, fp
      t6 += t10;
 8005cd2:	444a      	add	r2, r9
    for (k = 0; k < l1; k++)
 8005cd4:	3101      	adds	r1, #1
 8005cd6:	42b9      	cmp	r1, r7
 8005cd8:	dbe2      	blt.n	8005ca0 <dradbg+0x118>
    }
    t5 += t7;
 8005cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cdc:	449a      	add	sl, r3
  for (j = 1; j < ipph; j++)
 8005cde:	3501      	adds	r5, #1
 8005ce0:	9b07      	ldr	r3, [sp, #28]
 8005ce2:	429d      	cmp	r5, r3
 8005ce4:	da08      	bge.n	8005cf8 <dradbg+0x170>
    t1 += t0;
 8005ce6:	9b08      	ldr	r3, [sp, #32]
 8005ce8:	449e      	add	lr, r3
    t2 -= t0;
 8005cea:	ebac 0c03 	sub.w	ip, ip, r3
    t6 = t5;
 8005cee:	4652      	mov	r2, sl
    t4 = t2;
 8005cf0:	4664      	mov	r4, ip
    t3 = t1;
 8005cf2:	4670      	mov	r0, lr
    for (k = 0; k < l1; k++)
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	e7ee      	b.n	8005cd6 <dradbg+0x14e>
  }

  if (ido == 1) { goto L116; }
 8005cf8:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8005cfc:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8005cfe:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8005d02:	f1bb 0f01 	cmp.w	fp, #1
 8005d06:	f000 8086 	beq.w	8005e16 <dradbg+0x28e>
  if (nbd < l1) { goto L112; }
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	f300 810e 	bgt.w	8005f30 <dradbg+0x3a8>

  t1 = 0;
  t2 = ipp2 * t0;
 8005d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d16:	930b      	str	r3, [sp, #44]	; 0x2c
  t7 = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	930d      	str	r3, [sp, #52]	; 0x34
  t1 = 0;
 8005d1c:	9306      	str	r3, [sp, #24]
  for (j = 1; j < ipph; j++)
 8005d1e:	2301      	movs	r3, #1
 8005d20:	9305      	str	r3, [sp, #20]
 8005d22:	e05e      	b.n	8005de2 <dradbg+0x25a>
      t6 = t4;
      t9 = t8;
      t11 = t8;
      for (i = 2; i < ido; i += 2)
      {
        t5 += 2;
 8005d24:	1c8d      	adds	r5, r1, #2
        t6 += 2;
 8005d26:	1c87      	adds	r7, r0, #2
        t9 += 2;
 8005d28:	f102 0c02 	add.w	ip, r2, #2
        t11 -= 2;
 8005d2c:	f1a3 0e02 	sub.w	lr, r3, #2
        ch[t5 - 1] = cc[t9 - 1] + cc[t11 - 1];
 8005d30:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005d34:	3201      	adds	r2, #1
 8005d36:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005d3a:	edd2 7a00 	vldr	s15, [r2]
 8005d3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d42:	3b03      	subs	r3, #3
 8005d44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005d48:	ed93 7a00 	vldr	s14, [r3]
 8005d4c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005d50:	3101      	adds	r1, #1
 8005d52:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8005d56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d5a:	edc1 7a00 	vstr	s15, [r1]
        ch[t6 - 1] = cc[t9 - 1] - cc[t11 - 1];
 8005d5e:	edd2 7a00 	vldr	s15, [r2]
 8005d62:	ed93 7a00 	vldr	s14, [r3]
 8005d66:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d74:	edc0 7a00 	vstr	s15, [r0]
        ch[t5] = cc[t9] - cc[t11];
 8005d78:	eb06 028c 	add.w	r2, r6, ip, lsl #2
 8005d7c:	edd2 7a00 	vldr	s15, [r2]
 8005d80:	eb06 038e 	add.w	r3, r6, lr, lsl #2
 8005d84:	ed93 7a00 	vldr	s14, [r3]
 8005d88:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 8005d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d90:	edc1 7a00 	vstr	s15, [r1]
        ch[t6] = cc[t9] + cc[t11];
 8005d94:	edd2 7a00 	vldr	s15, [r2]
 8005d98:	ed93 7a00 	vldr	s14, [r3]
 8005d9c:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 8005da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005da4:	edc3 7a00 	vstr	s15, [r3]
      for (i = 2; i < ido; i += 2)
 8005da8:	3402      	adds	r4, #2
        t11 -= 2;
 8005daa:	4673      	mov	r3, lr
        t9 += 2;
 8005dac:	4662      	mov	r2, ip
        t6 += 2;
 8005dae:	4638      	mov	r0, r7
        t5 += 2;
 8005db0:	4629      	mov	r1, r5
      for (i = 2; i < ido; i += 2)
 8005db2:	455c      	cmp	r4, fp
 8005db4:	dbb6      	blt.n	8005d24 <dradbg+0x19c>
      }
      t3 += ido;
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	445b      	add	r3, fp
 8005dba:	9301      	str	r3, [sp, #4]
      t4 += ido;
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	445b      	add	r3, fp
 8005dc0:	9302      	str	r3, [sp, #8]
      t8 += t10;
 8005dc2:	9b04      	ldr	r3, [sp, #16]
 8005dc4:	4499      	add	r9, r3
    for (k = 0; k < l1; k++)
 8005dc6:	f10a 0a01 	add.w	sl, sl, #1
 8005dca:	9b03      	ldr	r3, [sp, #12]
 8005dcc:	459a      	cmp	sl, r3
 8005dce:	da05      	bge.n	8005ddc <dradbg+0x254>
      t11 = t8;
 8005dd0:	464b      	mov	r3, r9
      t9 = t8;
 8005dd2:	464a      	mov	r2, r9
      t6 = t4;
 8005dd4:	9802      	ldr	r0, [sp, #8]
      t5 = t3;
 8005dd6:	9901      	ldr	r1, [sp, #4]
      for (i = 2; i < ido; i += 2)
 8005dd8:	2402      	movs	r4, #2
 8005dda:	e7ea      	b.n	8005db2 <dradbg+0x22a>
  for (j = 1; j < ipph; j++)
 8005ddc:	9b05      	ldr	r3, [sp, #20]
 8005dde:	3301      	adds	r3, #1
 8005de0:	9305      	str	r3, [sp, #20]
 8005de2:	9b05      	ldr	r3, [sp, #20]
 8005de4:	9a07      	ldr	r2, [sp, #28]
 8005de6:	4293      	cmp	r3, r2
 8005de8:	da10      	bge.n	8005e0c <dradbg+0x284>
    t1 += t0;
 8005dea:	9b06      	ldr	r3, [sp, #24]
 8005dec:	9a08      	ldr	r2, [sp, #32]
 8005dee:	4413      	add	r3, r2
 8005df0:	9306      	str	r3, [sp, #24]
    t2 -= t0;
 8005df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005df4:	1a89      	subs	r1, r1, r2
 8005df6:	910b      	str	r1, [sp, #44]	; 0x2c
    t7 += (ido << 1);
 8005df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dfc:	4402      	add	r2, r0
 8005dfe:	920d      	str	r2, [sp, #52]	; 0x34
    t8 = t7;
 8005e00:	4691      	mov	r9, r2
    t4 = t2;
 8005e02:	9102      	str	r1, [sp, #8]
    t3 = t1;
 8005e04:	9301      	str	r3, [sp, #4]
    for (k = 0; k < l1; k++)
 8005e06:	f04f 0a00 	mov.w	sl, #0
 8005e0a:	e7de      	b.n	8005dca <dradbg+0x242>
 8005e0c:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8005e10:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8005e12:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88

L116:
  ar1 = 1.f;
  ai1 = 0.f;
  t1 = 0;
  t9 = (t2 = ipp2 * idl1);
 8005e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e18:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005e1a:	fb06 f203 	mul.w	r2, r6, r3
 8005e1e:	9205      	str	r2, [sp, #20]
  t3 = (ip - 1) * idl1;
 8005e20:	3b01      	subs	r3, #1
 8005e22:	fb06 f303 	mul.w	r3, r6, r3
 8005e26:	9306      	str	r3, [sp, #24]
  t9 = (t2 = ipp2 * idl1);
 8005e28:	9202      	str	r2, [sp, #8]
  ar1 = 1.f;
 8005e2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  ai1 = 0.f;
 8005e2e:	ed9f 5a08 	vldr	s10, [pc, #32]	; 8005e50 <dradbg+0x2c8>
  t1 = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	9301      	str	r3, [sp, #4]
  for (l = 1; l < ipph; l++)
 8005e36:	2301      	movs	r3, #1
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005e3e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8005e42:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005e46:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 8005e4a:	e0f8      	b.n	800603e <dradbg+0x4b6>
 8005e4c:	40c90fdb 	.word	0x40c90fdb
 8005e50:	00000000 	.word	0x00000000
        ch[t5 - 1] = cc[t11 - 1] + cc[t12 - 1];
 8005e54:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e58:	18e9      	adds	r1, r5, r3
 8005e5a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8005e5e:	edd1 7a00 	vldr	s15, [r1]
 8005e62:	18fa      	adds	r2, r7, r3
 8005e64:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005e68:	ed92 7a00 	vldr	s14, [r2]
 8005e6c:	eb00 0c03 	add.w	ip, r0, r3
 8005e70:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 8005e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e78:	edcc 7a00 	vstr	s15, [ip]
        ch[t6 - 1] = cc[t11 - 1] - cc[t12 - 1];
 8005e7c:	edd1 7a00 	vldr	s15, [r1]
 8005e80:	ed92 7a00 	vldr	s14, [r2]
 8005e84:	4423      	add	r3, r4
 8005e86:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8005e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e8e:	edc3 7a00 	vstr	s15, [r3]
        ch[t5] = cc[t11] - cc[t12];
 8005e92:	eb06 0285 	add.w	r2, r6, r5, lsl #2
 8005e96:	edd2 7a00 	vldr	s15, [r2]
 8005e9a:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 8005e9e:	ed93 7a00 	vldr	s14, [r3]
 8005ea2:	eb08 0180 	add.w	r1, r8, r0, lsl #2
 8005ea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eaa:	edc1 7a00 	vstr	s15, [r1]
        ch[t6] = cc[t11] + cc[t12];
 8005eae:	edd2 7a00 	vldr	s15, [r2]
 8005eb2:	ed93 7a00 	vldr	s14, [r3]
 8005eb6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8005eba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ebe:	edc3 7a00 	vstr	s15, [r3]
        t5 += ido;
 8005ec2:	4458      	add	r0, fp
        t6 += ido;
 8005ec4:	445c      	add	r4, fp
        t11 += t10;
 8005ec6:	444d      	add	r5, r9
        t12 += t10;
 8005ec8:	444f      	add	r7, r9
      for (k = 0; k < l1; k++)
 8005eca:	f10e 0e01 	add.w	lr, lr, #1
 8005ece:	45d6      	cmp	lr, sl
 8005ed0:	dbc0      	blt.n	8005e54 <dradbg+0x2cc>
    for (i = 2; i < ido; i += 2)
 8005ed2:	9b01      	ldr	r3, [sp, #4]
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	9b01      	ldr	r3, [sp, #4]
 8005eda:	455b      	cmp	r3, fp
 8005edc:	da0f      	bge.n	8005efe <dradbg+0x376>
      t3 += 2;
 8005ede:	9802      	ldr	r0, [sp, #8]
 8005ee0:	3002      	adds	r0, #2
 8005ee2:	9002      	str	r0, [sp, #8]
      t4 += 2;
 8005ee4:	9c04      	ldr	r4, [sp, #16]
 8005ee6:	3402      	adds	r4, #2
 8005ee8:	9404      	str	r4, [sp, #16]
      t8 += 2;
 8005eea:	9d05      	ldr	r5, [sp, #20]
 8005eec:	3502      	adds	r5, #2
 8005eee:	9505      	str	r5, [sp, #20]
      t9 -= 2;
 8005ef0:	9b06      	ldr	r3, [sp, #24]
 8005ef2:	3b02      	subs	r3, #2
 8005ef4:	9306      	str	r3, [sp, #24]
      t12 = t9;
 8005ef6:	461f      	mov	r7, r3
      for (k = 0; k < l1; k++)
 8005ef8:	f04f 0e00 	mov.w	lr, #0
 8005efc:	e7e7      	b.n	8005ece <dradbg+0x346>
  for (j = 1; j < ipph; j++)
 8005efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f00:	3301      	adds	r3, #1
 8005f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f06:	9a07      	ldr	r2, [sp, #28]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	da22      	bge.n	8005f52 <dradbg+0x3ca>
    t1 += t0;
 8005f0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f0e:	9b08      	ldr	r3, [sp, #32]
 8005f10:	441a      	add	r2, r3
 8005f12:	920d      	str	r2, [sp, #52]	; 0x34
    t2 -= t0;
 8005f14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005f16:	1ac9      	subs	r1, r1, r3
 8005f18:	910e      	str	r1, [sp, #56]	; 0x38
    t7 += (ido << 1);
 8005f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f1e:	4403      	add	r3, r0
 8005f20:	930f      	str	r3, [sp, #60]	; 0x3c
    t9 = t7;
 8005f22:	9306      	str	r3, [sp, #24]
    t8 = t7;
 8005f24:	9305      	str	r3, [sp, #20]
    t4 = t2;
 8005f26:	9104      	str	r1, [sp, #16]
    t3 = t1;
 8005f28:	9202      	str	r2, [sp, #8]
    for (i = 2; i < ido; i += 2)
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	e7d3      	b.n	8005ed8 <dradbg+0x350>
  t2 = ipp2 * t0;
 8005f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f32:	930e      	str	r3, [sp, #56]	; 0x38
  t7 = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	930f      	str	r3, [sp, #60]	; 0x3c
  t1 = 0;
 8005f38:	930d      	str	r3, [sp, #52]	; 0x34
  for (j = 1; j < ipph; j++)
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f3e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8005f42:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005f46:	9720      	str	r7, [sp, #128]	; 0x80
 8005f48:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8005f4c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8005f50:	e7d8      	b.n	8005f04 <dradbg+0x37c>
 8005f52:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8005f56:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8005f58:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8005f5c:	e75b      	b.n	8005e16 <dradbg+0x28e>
    t6 = 0;
    t7 = idl1;
    t8 = t3;
    for (ik = 0; ik < idl1; ik++)
    {
      c2[t4] = ch2[t6] + ar1 * ch2[t7]; t4++; t6++; t7++;
 8005f5e:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 8005f62:	eddc 7a00 	vldr	s15, [ip]
 8005f66:	eb0a 0c84 	add.w	ip, sl, r4, lsl #2
 8005f6a:	ed9c 7a00 	vldr	s14, [ip]
 8005f6e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005f72:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8005f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f7a:	edcc 7a00 	vstr	s15, [ip]
 8005f7e:	3101      	adds	r1, #1
 8005f80:	3201      	adds	r2, #1
 8005f82:	3401      	adds	r4, #1
      c2[t5] = ai1 * ch2[t8];           t5++; t8++;
 8005f84:	eb0a 0c85 	add.w	ip, sl, r5, lsl #2
 8005f88:	eddc 7a00 	vldr	s15, [ip]
 8005f8c:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 8005f90:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005f94:	edcc 7a00 	vstr	s15, [ip]
 8005f98:	3001      	adds	r0, #1
 8005f9a:	3501      	adds	r5, #1
    for (ik = 0; ik < idl1; ik++)
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	42b3      	cmp	r3, r6
 8005fa0:	dbdd      	blt.n	8005f5e <dradbg+0x3d6>
    ds2 = ai1;
    ar2 = ar1;
    ai2 = ai1;

    t6 = idl1;
    t7 = t9 - idl1;
 8005fa2:	9b05      	ldr	r3, [sp, #20]
 8005fa4:	eba3 0806 	sub.w	r8, r3, r6
    ar2 = ar1;
 8005fa8:	eef0 7a64 	vmov.f32	s15, s9
    ai2 = ai1;
 8005fac:	eef0 6a45 	vmov.f32	s13, s10
    t6 = idl1;
 8005fb0:	46b6      	mov	lr, r6
    for (j = 2; j < ipph; j++)
 8005fb2:	f04f 0c02 	mov.w	ip, #2
 8005fb6:	e026      	b.n	8006006 <dradbg+0x47e>
      t5 = t2;
      t11 = t6;
      t12 = t7;
      for (ik = 0; ik < idl1; ik++)
      {
        c2[t4] += ar2 * ch2[t11];   t4++; t11++;
 8005fb8:	eb07 0582 	add.w	r5, r7, r2, lsl #2
 8005fbc:	eb0a 0b80 	add.w	fp, sl, r0, lsl #2
 8005fc0:	ed9b 7a00 	vldr	s14, [fp]
 8005fc4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005fc8:	edd5 7a00 	vldr	s15, [r5]
 8005fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fd0:	edc5 7a00 	vstr	s15, [r5]
 8005fd4:	3201      	adds	r2, #1
 8005fd6:	3001      	adds	r0, #1
        c2[t5] += ai2 * ch2[t12];   t5++; t12++;
 8005fd8:	eb07 0581 	add.w	r5, r7, r1, lsl #2
 8005fdc:	eb0a 0b84 	add.w	fp, sl, r4, lsl #2
 8005fe0:	ed9b 7a00 	vldr	s14, [fp]
 8005fe4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005fe8:	edd5 7a00 	vldr	s15, [r5]
 8005fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ff0:	edc5 7a00 	vstr	s15, [r5]
 8005ff4:	3101      	adds	r1, #1
 8005ff6:	3401      	adds	r4, #1
      for (ik = 0; ik < idl1; ik++)
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	42b3      	cmp	r3, r6
 8005ffc:	dbdc      	blt.n	8005fb8 <dradbg+0x430>
    for (j = 2; j < ipph; j++)
 8005ffe:	f10c 0c01 	add.w	ip, ip, #1
      ar2 = ar2h;
 8006002:	eef0 7a46 	vmov.f32	s15, s12
    for (j = 2; j < ipph; j++)
 8006006:	45cc      	cmp	ip, r9
 8006008:	da14      	bge.n	8006034 <dradbg+0x4ac>
      t6 += idl1;
 800600a:	44b6      	add	lr, r6
      t7 -= idl1;
 800600c:	eba8 0806 	sub.w	r8, r8, r6
      ar2h = dc2 * ar2 - ds2 * ai2;
 8006010:	ee27 6aa4 	vmul.f32	s12, s15, s9
 8006014:	ee26 7a85 	vmul.f32	s14, s13, s10
 8006018:	ee36 6a47 	vsub.f32	s12, s12, s14
      ai2 = dc2 * ai2 + ds2 * ar2;
 800601c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8006020:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006024:	ee76 6aa7 	vadd.f32	s13, s13, s15
      t12 = t7;
 8006028:	4644      	mov	r4, r8
      t11 = t6;
 800602a:	4670      	mov	r0, lr
      t5 = t2;
 800602c:	9902      	ldr	r1, [sp, #8]
      t4 = t1;
 800602e:	9a01      	ldr	r2, [sp, #4]
      for (ik = 0; ik < idl1; ik++)
 8006030:	2300      	movs	r3, #0
 8006032:	e7e2      	b.n	8005ffa <dradbg+0x472>
  for (l = 1; l < ipph; l++)
 8006034:	9b04      	ldr	r3, [sp, #16]
 8006036:	3301      	adds	r3, #1
 8006038:	9304      	str	r3, [sp, #16]
    ar1 = ar1h;
 800603a:	eef0 7a64 	vmov.f32	s15, s9
  for (l = 1; l < ipph; l++)
 800603e:	9b04      	ldr	r3, [sp, #16]
 8006040:	454b      	cmp	r3, r9
 8006042:	da16      	bge.n	8006072 <dradbg+0x4ea>
    t1 += idl1;
 8006044:	9901      	ldr	r1, [sp, #4]
 8006046:	4431      	add	r1, r6
 8006048:	9101      	str	r1, [sp, #4]
    t2 -= idl1;
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	1b98      	subs	r0, r3, r6
 800604e:	9002      	str	r0, [sp, #8]
    ar1h = dcp * ar1 - dsp * ai1;
 8006050:	ee67 4a88 	vmul.f32	s9, s15, s16
 8006054:	ee25 7a25 	vmul.f32	s14, s10, s11
 8006058:	ee74 4ac7 	vsub.f32	s9, s9, s14
    ai1 = dcp * ai1 + dsp * ar1;
 800605c:	ee25 5a08 	vmul.f32	s10, s10, s16
 8006060:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006064:	ee35 5a27 	vadd.f32	s10, s10, s15
    t8 = t3;
 8006068:	9d06      	ldr	r5, [sp, #24]
    t7 = idl1;
 800606a:	4634      	mov	r4, r6
    t6 = 0;
 800606c:	2200      	movs	r2, #0
    for (ik = 0; ik < idl1; ik++)
 800606e:	4613      	mov	r3, r2
 8006070:	e795      	b.n	8005f9e <dradbg+0x416>
      }
    }
  }

  t1 = 0;
 8006072:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006076:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 800607a:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800607e:	2500      	movs	r5, #0
  for (j = 1; j < ipph; j++)
 8006080:	2401      	movs	r4, #1
 8006082:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006086:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006088:	e010      	b.n	80060ac <dradbg+0x524>
  {
    t1 += idl1;
    t2 = t1;
    for (ik = 0; ik < idl1; ik++) { ch2[ik] += ch2[t2]; t2++; }
 800608a:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 800608e:	eb0a 0082 	add.w	r0, sl, r2, lsl #2
 8006092:	ed90 7a00 	vldr	s14, [r0]
 8006096:	edd1 7a00 	vldr	s15, [r1]
 800609a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800609e:	edc1 7a00 	vstr	s15, [r1]
 80060a2:	3201      	adds	r2, #1
 80060a4:	3301      	adds	r3, #1
 80060a6:	42b3      	cmp	r3, r6
 80060a8:	dbef      	blt.n	800608a <dradbg+0x502>
  for (j = 1; j < ipph; j++)
 80060aa:	3401      	adds	r4, #1
 80060ac:	4564      	cmp	r4, ip
 80060ae:	da03      	bge.n	80060b8 <dradbg+0x530>
    t1 += idl1;
 80060b0:	4435      	add	r5, r6
    t2 = t1;
 80060b2:	462a      	mov	r2, r5
    for (ik = 0; ik < idl1; ik++) { ch2[ik] += ch2[t2]; t2++; }
 80060b4:	2300      	movs	r3, #0
 80060b6:	e7f6      	b.n	80060a6 <dradbg+0x51e>
  }

  t1 = 0;
  t2 = ipp2 * t0;
 80060b8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  t1 = 0;
 80060bc:	f04f 0e00 	mov.w	lr, #0
  for (j = 1; j < ipph; j++)
 80060c0:	2601      	movs	r6, #1
 80060c2:	9720      	str	r7, [sp, #128]	; 0x80
 80060c4:	9f03      	ldr	r7, [sp, #12]
 80060c6:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 80060ca:	f8dd a020 	ldr.w	sl, [sp, #32]
 80060ce:	e01d      	b.n	800610c <dradbg+0x584>
    t2 -= t0;
    t3 = t1;
    t4 = t2;
    for (k = 0; k < l1; k++)
    {
      ch[t3] = c1[t3] - c1[t4];
 80060d0:	eb09 0483 	add.w	r4, r9, r3, lsl #2
 80060d4:	edd4 7a00 	vldr	s15, [r4]
 80060d8:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 80060dc:	ed90 7a00 	vldr	s14, [r0]
 80060e0:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 80060e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060e8:	edc5 7a00 	vstr	s15, [r5]
      ch[t4] = c1[t3] + c1[t4];
 80060ec:	edd4 7a00 	vldr	s15, [r4]
 80060f0:	ed90 7a00 	vldr	s14, [r0]
 80060f4:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 80060f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060fc:	edc0 7a00 	vstr	s15, [r0]
      t3 += ido;
 8006100:	445b      	add	r3, fp
      t4 += ido;
 8006102:	445a      	add	r2, fp
    for (k = 0; k < l1; k++)
 8006104:	3101      	adds	r1, #1
 8006106:	42b9      	cmp	r1, r7
 8006108:	dbe2      	blt.n	80060d0 <dradbg+0x548>
  for (j = 1; j < ipph; j++)
 800610a:	3601      	adds	r6, #1
 800610c:	9b07      	ldr	r3, [sp, #28]
 800610e:	429e      	cmp	r6, r3
 8006110:	da06      	bge.n	8006120 <dradbg+0x598>
    t1 += t0;
 8006112:	44d6      	add	lr, sl
    t2 -= t0;
 8006114:	ebac 0c0a 	sub.w	ip, ip, sl
    t4 = t2;
 8006118:	4662      	mov	r2, ip
    t3 = t1;
 800611a:	4673      	mov	r3, lr
    for (k = 0; k < l1; k++)
 800611c:	2100      	movs	r1, #0
 800611e:	e7f2      	b.n	8006106 <dradbg+0x57e>
    }
  }

  if (ido == 1) { goto L132; }
 8006120:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8006122:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8006126:	f1bb 0f01 	cmp.w	fp, #1
 800612a:	d065      	beq.n	80061f8 <dradbg+0x670>
  if (nbd < l1) { goto L128; }
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006130:	4293      	cmp	r3, r2
 8006132:	f300 80c0 	bgt.w	80062b6 <dradbg+0x72e>

  t1 = 0;
 8006136:	2200      	movs	r2, #0
 8006138:	9202      	str	r2, [sp, #8]
  t2 = ipp2 * t0;
  for (j = 1; j < ipph; j++)
 800613a:	2201      	movs	r2, #1
 800613c:	9201      	str	r2, [sp, #4]
 800613e:	469a      	mov	sl, r3
 8006140:	e048      	b.n	80061d4 <dradbg+0x64c>
    {
      t5 = t3;
      t6 = t4;
      for (i = 2; i < ido; i += 2)
      {
        t5 += 2;
 8006142:	1c91      	adds	r1, r2, #2
        t6 += 2;
 8006144:	1c98      	adds	r0, r3, #2
        ch[t5 - 1] = c1[t5 - 1] - c1[t6];
 8006146:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800614a:	3201      	adds	r2, #1
 800614c:	eb09 0682 	add.w	r6, r9, r2, lsl #2
 8006150:	edd6 7a00 	vldr	s15, [r6]
 8006154:	eb09 0580 	add.w	r5, r9, r0, lsl #2
 8006158:	ed95 7a00 	vldr	s14, [r5]
 800615c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8006160:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006164:	edc2 7a00 	vstr	s15, [r2]
        ch[t6 - 1] = c1[t5 - 1] + c1[t6];
 8006168:	edd6 7a00 	vldr	s15, [r6]
 800616c:	ed95 7a00 	vldr	s14, [r5]
 8006170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006174:	3301      	adds	r3, #1
 8006176:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 800617a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800617e:	edc2 7a00 	vstr	s15, [r2]
        ch[t5] = c1[t5] + c1[t6 - 1];
 8006182:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 8006186:	edd2 7a00 	vldr	s15, [r2]
 800618a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800618e:	ed93 7a00 	vldr	s14, [r3]
 8006192:	eb08 0581 	add.w	r5, r8, r1, lsl #2
 8006196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800619a:	edc5 7a00 	vstr	s15, [r5]
        ch[t6] = c1[t5] - c1[t6 - 1];
 800619e:	edd2 7a00 	vldr	s15, [r2]
 80061a2:	ed93 7a00 	vldr	s14, [r3]
 80061a6:	eb08 0380 	add.w	r3, r8, r0, lsl #2
 80061aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061ae:	edc3 7a00 	vstr	s15, [r3]
      for (i = 2; i < ido; i += 2)
 80061b2:	3402      	adds	r4, #2
        t6 += 2;
 80061b4:	4603      	mov	r3, r0
        t5 += 2;
 80061b6:	460a      	mov	r2, r1
      for (i = 2; i < ido; i += 2)
 80061b8:	455c      	cmp	r4, fp
 80061ba:	dbc2      	blt.n	8006142 <dradbg+0x5ba>
      }
      t3 += ido;
 80061bc:	44dc      	add	ip, fp
      t4 += ido;
 80061be:	44de      	add	lr, fp
    for (k = 0; k < l1; k++)
 80061c0:	3701      	adds	r7, #1
 80061c2:	4557      	cmp	r7, sl
 80061c4:	da03      	bge.n	80061ce <dradbg+0x646>
      t6 = t4;
 80061c6:	4673      	mov	r3, lr
      t5 = t3;
 80061c8:	4662      	mov	r2, ip
      for (i = 2; i < ido; i += 2)
 80061ca:	2402      	movs	r4, #2
 80061cc:	e7f4      	b.n	80061b8 <dradbg+0x630>
  for (j = 1; j < ipph; j++)
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	3301      	adds	r3, #1
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	9b01      	ldr	r3, [sp, #4]
 80061d6:	9a07      	ldr	r2, [sp, #28]
 80061d8:	4293      	cmp	r3, r2
 80061da:	da0a      	bge.n	80061f2 <dradbg+0x66a>
    t1 += t0;
 80061dc:	9b02      	ldr	r3, [sp, #8]
 80061de:	9a08      	ldr	r2, [sp, #32]
 80061e0:	4413      	add	r3, r2
 80061e2:	9302      	str	r3, [sp, #8]
    t2 -= t0;
 80061e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061e6:	1a8a      	subs	r2, r1, r2
 80061e8:	9209      	str	r2, [sp, #36]	; 0x24
    t4 = t2;
 80061ea:	4696      	mov	lr, r2
    t3 = t1;
 80061ec:	469c      	mov	ip, r3
    for (k = 0; k < l1; k++)
 80061ee:	2700      	movs	r7, #0
 80061f0:	e7e7      	b.n	80061c2 <dradbg+0x63a>
 80061f2:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80061f4:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
      }
    }
  }

L132:
  if (ido == 1) { return; }
 80061f8:	f1bb 0f01 	cmp.w	fp, #1
 80061fc:	f000 8151 	beq.w	80064a2 <dradbg+0x91a>

  for (ik = 0; ik < idl1; ik++) { c2[ik] = ch2[ik]; }
 8006200:	2300      	movs	r3, #0
 8006202:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006204:	e06b      	b.n	80062de <dradbg+0x756>
        ch[t5 - 1] = c1[t5 - 1] - c1[t6];
 8006206:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800620a:	18d0      	adds	r0, r2, r3
 800620c:	eb09 0680 	add.w	r6, r9, r0, lsl #2
 8006210:	edd6 7a00 	vldr	s15, [r6]
 8006214:	eb09 0581 	add.w	r5, r9, r1, lsl #2
 8006218:	ed95 7a00 	vldr	s14, [r5]
 800621c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006224:	edc0 7a00 	vstr	s15, [r0]
        ch[t6 - 1] = c1[t5 - 1] + c1[t6];
 8006228:	edd6 7a00 	vldr	s15, [r6]
 800622c:	ed95 7a00 	vldr	s14, [r5]
 8006230:	440b      	add	r3, r1
 8006232:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8006236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800623a:	edc0 7a00 	vstr	s15, [r0]
        ch[t5] = c1[t5] + c1[t6 - 1];
 800623e:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 8006242:	edd0 7a00 	vldr	s15, [r0]
 8006246:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800624a:	ed93 7a00 	vldr	s14, [r3]
 800624e:	eb08 0582 	add.w	r5, r8, r2, lsl #2
 8006252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006256:	edc5 7a00 	vstr	s15, [r5]
        ch[t6] = c1[t5] - c1[t6 - 1];
 800625a:	edd0 7a00 	vldr	s15, [r0]
 800625e:	ed93 7a00 	vldr	s14, [r3]
 8006262:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 8006266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800626a:	edc3 7a00 	vstr	s15, [r3]
        t5 += ido;
 800626e:	445a      	add	r2, fp
        t6 += ido;
 8006270:	4459      	add	r1, fp
      for (k = 0; k < l1; k++)
 8006272:	3401      	adds	r4, #1
 8006274:	42bc      	cmp	r4, r7
 8006276:	dbc6      	blt.n	8006206 <dradbg+0x67e>
    for (i = 2; i < ido; i += 2)
 8006278:	f10c 0c02 	add.w	ip, ip, #2
 800627c:	45dc      	cmp	ip, fp
 800627e:	da07      	bge.n	8006290 <dradbg+0x708>
      t3 += 2;
 8006280:	f10e 0e02 	add.w	lr, lr, #2
      t4 += 2;
 8006284:	f10a 0a02 	add.w	sl, sl, #2
      t6 = t4;
 8006288:	4651      	mov	r1, sl
      t5 = t3;
 800628a:	4672      	mov	r2, lr
      for (k = 0; k < l1; k++)
 800628c:	2400      	movs	r4, #0
 800628e:	e7f1      	b.n	8006274 <dradbg+0x6ec>
  for (j = 1; j < ipph; j++)
 8006290:	9b01      	ldr	r3, [sp, #4]
 8006292:	3301      	adds	r3, #1
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	9b01      	ldr	r3, [sp, #4]
 8006298:	9a07      	ldr	r2, [sp, #28]
 800629a:	4293      	cmp	r3, r2
 800629c:	da14      	bge.n	80062c8 <dradbg+0x740>
    t1 += t0;
 800629e:	9b02      	ldr	r3, [sp, #8]
 80062a0:	9a08      	ldr	r2, [sp, #32]
 80062a2:	4413      	add	r3, r2
 80062a4:	9302      	str	r3, [sp, #8]
    t2 -= t0;
 80062a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062a8:	1a8a      	subs	r2, r1, r2
 80062aa:	9209      	str	r2, [sp, #36]	; 0x24
    t4 = t2;
 80062ac:	4692      	mov	sl, r2
    t3 = t1;
 80062ae:	469e      	mov	lr, r3
    for (i = 2; i < ido; i += 2)
 80062b0:	f04f 0c02 	mov.w	ip, #2
 80062b4:	e7e2      	b.n	800627c <dradbg+0x6f4>
  t1 = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	9302      	str	r3, [sp, #8]
  for (j = 1; j < ipph; j++)
 80062ba:	2301      	movs	r3, #1
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	9720      	str	r7, [sp, #128]	; 0x80
 80062c0:	9f03      	ldr	r7, [sp, #12]
 80062c2:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 80062c6:	e7e6      	b.n	8006296 <dradbg+0x70e>
 80062c8:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80062ca:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 80062ce:	e793      	b.n	80061f8 <dradbg+0x670>
  for (ik = 0; ik < idl1; ik++) { c2[ik] = ch2[ik]; }
 80062d0:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80062d4:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 80062d8:	6809      	ldr	r1, [r1, #0]
 80062da:	6011      	str	r1, [r2, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	4283      	cmp	r3, r0
 80062e0:	dbf6      	blt.n	80062d0 <dradbg+0x748>

  t1 = 0;
 80062e2:	2500      	movs	r5, #0
  for (j = 1; j < ip; j++)
 80062e4:	2401      	movs	r4, #1
 80062e6:	f8dd c020 	ldr.w	ip, [sp, #32]
 80062ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80062ec:	9e03      	ldr	r6, [sp, #12]
 80062ee:	e00a      	b.n	8006306 <dradbg+0x77e>
  {
    t2 = (t1 += t0);
    for (k = 0; k < l1; k++)
    {
      c1[t2] = ch[t2];
 80062f0:	eb09 0183 	add.w	r1, r9, r3, lsl #2
 80062f4:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 80062f8:	6800      	ldr	r0, [r0, #0]
 80062fa:	6008      	str	r0, [r1, #0]
      t2 += ido;
 80062fc:	445b      	add	r3, fp
    for (k = 0; k < l1; k++)
 80062fe:	3201      	adds	r2, #1
 8006300:	42b2      	cmp	r2, r6
 8006302:	dbf5      	blt.n	80062f0 <dradbg+0x768>
  for (j = 1; j < ip; j++)
 8006304:	3401      	adds	r4, #1
 8006306:	42bc      	cmp	r4, r7
 8006308:	da03      	bge.n	8006312 <dradbg+0x78a>
    t2 = (t1 += t0);
 800630a:	4465      	add	r5, ip
 800630c:	462b      	mov	r3, r5
    for (k = 0; k < l1; k++)
 800630e:	2200      	movs	r2, #0
 8006310:	e7f6      	b.n	8006300 <dradbg+0x778>
    }
  }

  if (nbd > l1) { goto L139; }
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006316:	4293      	cmp	r3, r2
 8006318:	db0a      	blt.n	8006330 <dradbg+0x7a8>

  is = -ido - 1;
 800631a:	ea6f 030b 	mvn.w	r3, fp
 800631e:	9305      	str	r3, [sp, #20]
  t1 = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	9306      	str	r3, [sp, #24]
  for (j = 1; j < ip; j++)
 8006324:	2301      	movs	r3, #1
 8006326:	9304      	str	r3, [sp, #16]
 8006328:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800632c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800632e:	e053      	b.n	80063d8 <dradbg+0x850>
    }
  }
  return;

L139:
  is = -ido - 1;
 8006330:	ea6f 030b 	mvn.w	r3, fp
 8006334:	9301      	str	r3, [sp, #4]
  t1 = 0;
 8006336:	f04f 0a00 	mov.w	sl, #0
  for (j = 1; j < ip; j++)
 800633a:	2301      	movs	r3, #1
 800633c:	9302      	str	r3, [sp, #8]
 800633e:	f8cd a010 	str.w	sl, [sp, #16]
 8006342:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 8006346:	e09d      	b.n	8006484 <dradbg+0x8fc>
    for (i = 2; i < ido; i += 2)
 8006348:	9b01      	ldr	r3, [sp, #4]
 800634a:	3302      	adds	r3, #2
 800634c:	9301      	str	r3, [sp, #4]
      idij += 2;
 800634e:	46f4      	mov	ip, lr
    for (i = 2; i < ido; i += 2)
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	455b      	cmp	r3, fp
 8006354:	da3d      	bge.n	80063d2 <dradbg+0x84a>
      t2 += 2;
 8006356:	9b02      	ldr	r3, [sp, #8]
 8006358:	3302      	adds	r3, #2
 800635a:	9302      	str	r3, [sp, #8]
      idij += 2;
 800635c:	f10c 0e02 	add.w	lr, ip, #2
      t3 = t2;
 8006360:	4619      	mov	r1, r3
      for (k = 0; k < l1; k++)
 8006362:	2000      	movs	r0, #0
 8006364:	4550      	cmp	r0, sl
 8006366:	daef      	bge.n	8006348 <dradbg+0x7c0>
        c1[t3 - 1] = wa[idij - 1] * ch[t3 - 1] - wa[idij] * ch[t3];
 8006368:	f10c 4380 	add.w	r3, ip, #1073741824	; 0x40000000
 800636c:	3301      	adds	r3, #1
 800636e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006372:	edd3 7a00 	vldr	s15, [r3]
 8006376:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800637a:	3a01      	subs	r2, #1
 800637c:	eb08 0482 	add.w	r4, r8, r2, lsl #2
 8006380:	ed94 7a00 	vldr	s14, [r4]
 8006384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006388:	eb07 058e 	add.w	r5, r7, lr, lsl #2
 800638c:	ed95 7a00 	vldr	s14, [r5]
 8006390:	eb08 0681 	add.w	r6, r8, r1, lsl #2
 8006394:	edd6 6a00 	vldr	s13, [r6]
 8006398:	ee27 7a26 	vmul.f32	s14, s14, s13
 800639c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80063a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063a4:	edc2 7a00 	vstr	s15, [r2]
        c1[t3] = wa[idij - 1] * ch[t3] + wa[idij] * ch[t3 - 1];
 80063a8:	edd3 7a00 	vldr	s15, [r3]
 80063ac:	ed96 7a00 	vldr	s14, [r6]
 80063b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063b4:	ed95 7a00 	vldr	s14, [r5]
 80063b8:	edd4 6a00 	vldr	s13, [r4]
 80063bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80063c0:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 80063c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063c8:	edc3 7a00 	vstr	s15, [r3]
        t3 += ido;
 80063cc:	4459      	add	r1, fp
      for (k = 0; k < l1; k++)
 80063ce:	3001      	adds	r0, #1
 80063d0:	e7c8      	b.n	8006364 <dradbg+0x7dc>
  for (j = 1; j < ip; j++)
 80063d2:	9b04      	ldr	r3, [sp, #16]
 80063d4:	3301      	adds	r3, #1
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	9b04      	ldr	r3, [sp, #16]
 80063da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063dc:	4293      	cmp	r3, r2
 80063de:	da60      	bge.n	80064a2 <dradbg+0x91a>
    is += ido;
 80063e0:	9b05      	ldr	r3, [sp, #20]
 80063e2:	445b      	add	r3, fp
 80063e4:	9305      	str	r3, [sp, #20]
    t1 += t0;
 80063e6:	9a06      	ldr	r2, [sp, #24]
 80063e8:	9908      	ldr	r1, [sp, #32]
 80063ea:	440a      	add	r2, r1
 80063ec:	9206      	str	r2, [sp, #24]
    t2 = t1;
 80063ee:	9202      	str	r2, [sp, #8]
    idij = is;
 80063f0:	469c      	mov	ip, r3
    for (i = 2; i < ido; i += 2)
 80063f2:	2302      	movs	r3, #2
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	e7ab      	b.n	8006350 <dradbg+0x7c8>
    {
      idij = is;
      t3 = t2;
      for (i = 2; i < ido; i += 2)
      {
        idij += 2;
 80063f8:	1c9c      	adds	r4, r3, #2
        t3 += 2;
 80063fa:	1c91      	adds	r1, r2, #2
        c1[t3 - 1] = wa[idij - 1] * ch[t3 - 1] - wa[idij] * ch[t3];
 80063fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006400:	3301      	adds	r3, #1
 8006402:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8006406:	edd3 7a00 	vldr	s15, [r3]
 800640a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800640e:	3201      	adds	r2, #1
 8006410:	eb08 0582 	add.w	r5, r8, r2, lsl #2
 8006414:	ed95 7a00 	vldr	s14, [r5]
 8006418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800641c:	eb0c 0684 	add.w	r6, ip, r4, lsl #2
 8006420:	ed96 7a00 	vldr	s14, [r6]
 8006424:	eb08 0781 	add.w	r7, r8, r1, lsl #2
 8006428:	edd7 6a00 	vldr	s13, [r7]
 800642c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006430:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8006434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006438:	edc2 7a00 	vstr	s15, [r2]
        c1[t3] = wa[idij - 1] * ch[t3] + wa[idij] * ch[t3 - 1];
 800643c:	edd3 7a00 	vldr	s15, [r3]
 8006440:	ed97 7a00 	vldr	s14, [r7]
 8006444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006448:	ed96 7a00 	vldr	s14, [r6]
 800644c:	edd5 6a00 	vldr	s13, [r5]
 8006450:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006454:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8006458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800645c:	edc3 7a00 	vstr	s15, [r3]
      for (i = 2; i < ido; i += 2)
 8006460:	3002      	adds	r0, #2
        t3 += 2;
 8006462:	460a      	mov	r2, r1
        idij += 2;
 8006464:	4623      	mov	r3, r4
      for (i = 2; i < ido; i += 2)
 8006466:	4558      	cmp	r0, fp
 8006468:	dbc6      	blt.n	80063f8 <dradbg+0x870>
      }
      t2 += ido;
 800646a:	44da      	add	sl, fp
    for (k = 0; k < l1; k++)
 800646c:	f10e 0e01 	add.w	lr, lr, #1
 8006470:	9b03      	ldr	r3, [sp, #12]
 8006472:	459e      	cmp	lr, r3
 8006474:	da03      	bge.n	800647e <dradbg+0x8f6>
      t3 = t2;
 8006476:	4652      	mov	r2, sl
      idij = is;
 8006478:	9b01      	ldr	r3, [sp, #4]
      for (i = 2; i < ido; i += 2)
 800647a:	2002      	movs	r0, #2
 800647c:	e7f3      	b.n	8006466 <dradbg+0x8de>
  for (j = 1; j < ip; j++)
 800647e:	9b02      	ldr	r3, [sp, #8]
 8006480:	3301      	adds	r3, #1
 8006482:	9302      	str	r3, [sp, #8]
 8006484:	9b02      	ldr	r3, [sp, #8]
 8006486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006488:	4293      	cmp	r3, r2
 800648a:	da0a      	bge.n	80064a2 <dradbg+0x91a>
    is += ido;
 800648c:	9b01      	ldr	r3, [sp, #4]
 800648e:	445b      	add	r3, fp
 8006490:	9301      	str	r3, [sp, #4]
    t1 += t0;
 8006492:	9b04      	ldr	r3, [sp, #16]
 8006494:	9a08      	ldr	r2, [sp, #32]
 8006496:	4413      	add	r3, r2
 8006498:	9304      	str	r3, [sp, #16]
    t2 = t1;
 800649a:	469a      	mov	sl, r3
    for (k = 0; k < l1; k++)
 800649c:	f04f 0e00 	mov.w	lr, #0
 80064a0:	e7e6      	b.n	8006470 <dradbg+0x8e8>
    }
  }
}
 80064a2:	b013      	add	sp, #76	; 0x4c
 80064a4:	ecbd 8b02 	vpop	{d8}
 80064a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064ac <drftb1>:

static void drftb1(int n, float *c, float *ch, float *wa, int32_t *ifac)
{
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	b08b      	sub	sp, #44	; 0x2c
 80064b2:	9008      	str	r0, [sp, #32]
 80064b4:	9109      	str	r1, [sp, #36]	; 0x24
 80064b6:	4693      	mov	fp, r2
 80064b8:	469a      	mov	sl, r3
  int i, k1, l1, l2;
  int na;
  int nf, ip, iw, ix2, ix3, ido, idl1;

  nf = ifac[1];
 80064ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	9307      	str	r3, [sp, #28]
  na = 0;
  l1 = 1;
  iw = 1;
 80064c0:	2701      	movs	r7, #1
  na = 0;
 80064c2:	f04f 0900 	mov.w	r9, #0
  l1 = 1;
 80064c6:	4639      	mov	r1, r7

  for (k1 = 0; k1 < nf; k1++)
 80064c8:	464e      	mov	r6, r9
 80064ca:	e020      	b.n	800650e <drftb1+0x62>
    ip = ifac[k1 + 2];
    l2 = ip * l1;
    ido = n / l2;
    idl1 = ido * l1;
    if (ip != 4) { goto L103; }
    ix2 = iw + ido;
 80064cc:	197b      	adds	r3, r7, r5
    ix3 = ix2 + ido;
 80064ce:	eb07 0245 	add.w	r2, r7, r5, lsl #1

    if (na != 0)
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	d046      	beq.n	8006566 <drftb1+0xba>
    {
      dradb4(ido, l1, ch, c, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
 80064d8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80064dc:	eb07 0c00 	add.w	ip, r7, r0
 80064e0:	4403      	add	r3, r0
 80064e2:	4410      	add	r0, r2
 80064e4:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80064e8:	9002      	str	r0, [sp, #8]
 80064ea:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	eb0a 038c 	add.w	r3, sl, ip, lsl #2
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f8:	465a      	mov	r2, fp
 80064fa:	4628      	mov	r0, r5
 80064fc:	f7fe fc4e 	bl	8004d9c <dradb4>
    }
    else
    {
      dradb4(ido, l1, c, ch, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
    }
    na = 1 - na;
 8006500:	f1c9 0901 	rsb	r9, r9, #1
    }
    if (ido == 1) { na = 1 - na; }

L115:
    l1 = l2;
    iw += (ip - 1) * ido;
 8006504:	3c01      	subs	r4, #1
 8006506:	fb05 7704 	mla	r7, r5, r4, r7
  for (k1 = 0; k1 < nf; k1++)
 800650a:	3601      	adds	r6, #1
    l1 = l2;
 800650c:	4641      	mov	r1, r8
  for (k1 = 0; k1 < nf; k1++)
 800650e:	9b07      	ldr	r3, [sp, #28]
 8006510:	429e      	cmp	r6, r3
 8006512:	f280 809a 	bge.w	800664a <drftb1+0x19e>
    ip = ifac[k1 + 2];
 8006516:	1cb3      	adds	r3, r6, #2
 8006518:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800651a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    l2 = ip * l1;
 800651e:	fb04 f801 	mul.w	r8, r4, r1
    ido = n / l2;
 8006522:	9b08      	ldr	r3, [sp, #32]
 8006524:	fb93 f5f8 	sdiv	r5, r3, r8
    idl1 = ido * l1;
 8006528:	fb05 f301 	mul.w	r3, r5, r1
    if (ip != 4) { goto L103; }
 800652c:	2c04      	cmp	r4, #4
 800652e:	d0cd      	beq.n	80064cc <drftb1+0x20>
    if (ip != 2) { goto L106; }
 8006530:	2c02      	cmp	r4, #2
 8006532:	d02d      	beq.n	8006590 <drftb1+0xe4>
    if (ip != 3) { goto L109; }
 8006534:	2c03      	cmp	r4, #3
 8006536:	d048      	beq.n	80065ca <drftb1+0x11e>
    if (na != 0)
 8006538:	f1b9 0f00 	cmp.w	r9, #0
 800653c:	d16b      	bne.n	8006616 <drftb1+0x16a>
      dradbg(ido, ip, l1, idl1, c, c, c, ch, ch, wa + iw - 1);
 800653e:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8006542:	3a01      	subs	r2, #1
 8006544:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006548:	9205      	str	r2, [sp, #20]
 800654a:	f8cd b010 	str.w	fp, [sp, #16]
 800654e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006554:	9202      	str	r2, [sp, #8]
 8006556:	9201      	str	r2, [sp, #4]
 8006558:	9200      	str	r2, [sp, #0]
 800655a:	460a      	mov	r2, r1
 800655c:	4621      	mov	r1, r4
 800655e:	4628      	mov	r0, r5
 8006560:	f7ff fb12 	bl	8005b88 <dradbg>
 8006564:	e06b      	b.n	800663e <drftb1+0x192>
      dradb4(ido, l1, c, ch, wa + iw - 1, wa + ix2 - 1, wa + ix3 - 1);
 8006566:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800656a:	eb07 000c 	add.w	r0, r7, ip
 800656e:	4463      	add	r3, ip
 8006570:	4462      	add	r2, ip
 8006572:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006576:	9202      	str	r2, [sp, #8]
 8006578:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006582:	9000      	str	r0, [sp, #0]
 8006584:	465b      	mov	r3, fp
 8006586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006588:	4628      	mov	r0, r5
 800658a:	f7fe fc07 	bl	8004d9c <dradb4>
 800658e:	e7b7      	b.n	8006500 <drftb1+0x54>
    if (na != 0)
 8006590:	f1b9 0f00 	cmp.w	r9, #0
 8006594:	d00d      	beq.n	80065b2 <drftb1+0x106>
      dradb2(ido, l1, ch, c, wa + iw - 1);
 8006596:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 800659a:	3b01      	subs	r3, #1
 800659c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a4:	465a      	mov	r2, fp
 80065a6:	4628      	mov	r0, r5
 80065a8:	f7fe f9d0 	bl	800494c <dradb2>
    na = 1 - na;
 80065ac:	f1c9 0901 	rsb	r9, r9, #1
    goto L115;
 80065b0:	e7a8      	b.n	8006504 <drftb1+0x58>
      dradb2(ido, l1, c, ch, wa + iw - 1);
 80065b2:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80065b6:	3b01      	subs	r3, #1
 80065b8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	465b      	mov	r3, fp
 80065c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065c2:	4628      	mov	r0, r5
 80065c4:	f7fe f9c2 	bl	800494c <dradb2>
 80065c8:	e7f0      	b.n	80065ac <drftb1+0x100>
    ix2 = iw + ido;
 80065ca:	197b      	adds	r3, r7, r5
    if (na != 0)
 80065cc:	f1b9 0f00 	cmp.w	r9, #0
 80065d0:	d011      	beq.n	80065f6 <drftb1+0x14a>
      dradb3(ido, l1, ch, c, wa + iw - 1, wa + ix2 - 1);
 80065d2:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80065d6:	183a      	adds	r2, r7, r0
 80065d8:	4403      	add	r3, r0
 80065da:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80065e4:	9200      	str	r2, [sp, #0]
 80065e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e8:	465a      	mov	r2, fp
 80065ea:	4628      	mov	r0, r5
 80065ec:	f7fe fa9c 	bl	8004b28 <dradb3>
    na = 1 - na;
 80065f0:	f1c9 0901 	rsb	r9, r9, #1
    goto L115;
 80065f4:	e786      	b.n	8006504 <drftb1+0x58>
      dradb3(ido, l1, c, ch, wa + iw - 1, wa + ix2 - 1);
 80065f6:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80065fa:	183a      	adds	r2, r7, r0
 80065fc:	4403      	add	r3, r0
 80065fe:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006608:	9200      	str	r2, [sp, #0]
 800660a:	465b      	mov	r3, fp
 800660c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660e:	4628      	mov	r0, r5
 8006610:	f7fe fa8a 	bl	8004b28 <dradb3>
 8006614:	e7ec      	b.n	80065f0 <drftb1+0x144>
      dradbg(ido, ip, l1, idl1, ch, ch, ch, c, c, wa + iw - 1);
 8006616:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800661a:	3a01      	subs	r2, #1
 800661c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006620:	9205      	str	r2, [sp, #20]
 8006622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006624:	9204      	str	r2, [sp, #16]
 8006626:	9203      	str	r2, [sp, #12]
 8006628:	f8cd b008 	str.w	fp, [sp, #8]
 800662c:	f8cd b004 	str.w	fp, [sp, #4]
 8006630:	f8cd b000 	str.w	fp, [sp]
 8006634:	460a      	mov	r2, r1
 8006636:	4621      	mov	r1, r4
 8006638:	4628      	mov	r0, r5
 800663a:	f7ff faa5 	bl	8005b88 <dradbg>
    if (ido == 1) { na = 1 - na; }
 800663e:	2d01      	cmp	r5, #1
 8006640:	f47f af60 	bne.w	8006504 <drftb1+0x58>
 8006644:	f1c9 0901 	rsb	r9, r9, #1
 8006648:	e75c      	b.n	8006504 <drftb1+0x58>
  }

  if (na == 0) { return; }
 800664a:	f1b9 0f00 	cmp.w	r9, #0
 800664e:	d00c      	beq.n	800666a <drftb1+0x1be>

  for (i = 0; i < n; i++) { c[i] = ch[i]; }
 8006650:	2300      	movs	r3, #0
 8006652:	9808      	ldr	r0, [sp, #32]
 8006654:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006656:	e006      	b.n	8006666 <drftb1+0x1ba>
 8006658:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800665c:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 8006660:	6809      	ldr	r1, [r1, #0]
 8006662:	6011      	str	r1, [r2, #0]
 8006664:	3301      	adds	r3, #1
 8006666:	4283      	cmp	r3, r0
 8006668:	dbf6      	blt.n	8006658 <drftb1+0x1ac>
}
 800666a:	b00b      	add	sp, #44	; 0x2c
 800666c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006670 <drfti1>:
{
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	ed2d 8b04 	vpush	{d8-d9}
 8006678:	b089      	sub	sp, #36	; 0x24
 800667a:	4603      	mov	r3, r0
 800667c:	9005      	str	r0, [sp, #20]
 800667e:	460f      	mov	r7, r1
 8006680:	4693      	mov	fp, r2
  int nf = 0;
 8006682:	2200      	movs	r2, #0
  int ntry = 0, i, j = -1;
 8006684:	f04f 35ff 	mov.w	r5, #4294967295
 8006688:	4614      	mov	r4, r2
 800668a:	4694      	mov	ip, r2
  j++;
 800668c:	3501      	adds	r5, #1
  if (j < 4)
 800668e:	2d03      	cmp	r5, #3
 8006690:	dc04      	bgt.n	800669c <drfti1+0x2c>
    ntry = ntryh[j];
 8006692:	4a49      	ldr	r2, [pc, #292]	; (80067b8 <drfti1+0x148>)
 8006694:	f852 4025 	ldr.w	r4, [r2, r5, lsl #2]
L104:
 8006698:	469a      	mov	sl, r3
 800669a:	e012      	b.n	80066c2 <drfti1+0x52>
    ntry += 2;
 800669c:	3402      	adds	r4, #2
 800669e:	e7fb      	b.n	8006698 <drfti1+0x28>
    ib = nf - i + 1;
 80066a0:	1a8b      	subs	r3, r1, r2
 80066a2:	1c58      	adds	r0, r3, #1
    ifac[ib + 1] = ifac[ib];
 80066a4:	3302      	adds	r3, #2
 80066a6:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 80066aa:	f84b 0023 	str.w	r0, [fp, r3, lsl #2]
  for (i = 1; i < nf; i++)
 80066ae:	3201      	adds	r2, #1
 80066b0:	428a      	cmp	r2, r1
 80066b2:	dbf5      	blt.n	80066a0 <drfti1+0x30>
  ifac[2] = 2;
 80066b4:	2302      	movs	r3, #2
 80066b6:	f8cb 3008 	str.w	r3, [fp, #8]
  if (nl != 1) { goto L104; }
 80066ba:	f1ba 0f01 	cmp.w	sl, #1
 80066be:	d013      	beq.n	80066e8 <drfti1+0x78>
  nf++;
 80066c0:	468c      	mov	ip, r1
  nq = nl / ntry;
 80066c2:	4653      	mov	r3, sl
 80066c4:	fb9a faf4 	sdiv	sl, sl, r4
  nr = nl - ntry * nq;
 80066c8:	fb04 361a 	mls	r6, r4, sl, r3
  if (nr != 0) { goto L101; }
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	d1dd      	bne.n	800668c <drfti1+0x1c>
  nf++;
 80066d0:	f10c 0101 	add.w	r1, ip, #1
  ifac[nf + 1] = ntry;
 80066d4:	f10c 0302 	add.w	r3, ip, #2
 80066d8:	f84b 4023 	str.w	r4, [fp, r3, lsl #2]
  if (ntry != 2) { goto L107; }
 80066dc:	2c02      	cmp	r4, #2
 80066de:	d1ec      	bne.n	80066ba <drfti1+0x4a>
  if (nf == 1) { goto L107; }
 80066e0:	2901      	cmp	r1, #1
 80066e2:	d0ea      	beq.n	80066ba <drfti1+0x4a>
  for (i = 1; i < nf; i++)
 80066e4:	2201      	movs	r2, #1
 80066e6:	e7e3      	b.n	80066b0 <drfti1+0x40>
  ifac[0] = n;
 80066e8:	f8cd c010 	str.w	ip, [sp, #16]
 80066ec:	9606      	str	r6, [sp, #24]
 80066ee:	9b05      	ldr	r3, [sp, #20]
 80066f0:	f8cb 3000 	str.w	r3, [fp]
  ifac[1] = nf;
 80066f4:	f8cb 1004 	str.w	r1, [fp, #4]
  argh = tpi / n;
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006700:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80067bc <drfti1+0x14c>
 8006704:	eec7 9a27 	vdiv.f32	s19, s14, s15
  if (nfm1 == 0) { return; }
 8006708:	4663      	mov	r3, ip
 800670a:	2b00      	cmp	r3, #0
 800670c:	d04f      	beq.n	80067ae <drfti1+0x13e>
  for (k1 = 0; k1 < nfm1; k1++)
 800670e:	9602      	str	r6, [sp, #8]
 8006710:	f8cd a000 	str.w	sl, [sp]
 8006714:	f8cd b01c 	str.w	fp, [sp, #28]
 8006718:	46b3      	mov	fp, r6
 800671a:	e032      	b.n	8006782 <drfti1+0x112>
        fi += 1.f;
 800671c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006720:	ee38 8a27 	vadd.f32	s16, s16, s15
        arg = fi * argld;
 8006724:	ee69 8a08 	vmul.f32	s17, s18, s16
        wa[i] = cosf(arg);  i++;
 8006728:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 800672c:	eeb0 0a68 	vmov.f32	s0, s17
 8006730:	f006 fc48 	bl	800cfc4 <cosf>
 8006734:	ed85 0a00 	vstr	s0, [r5]
 8006738:	1c65      	adds	r5, r4, #1
        wa[i] = sinf(arg);  i++;
 800673a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800673e:	eeb0 0a68 	vmov.f32	s0, s17
 8006742:	f006 fc83 	bl	800d04c <sinf>
 8006746:	ed85 0a00 	vstr	s0, [r5]
 800674a:	3402      	adds	r4, #2
      for (ii = 2; ii < ido; ii += 2)
 800674c:	3602      	adds	r6, #2
 800674e:	4546      	cmp	r6, r8
 8006750:	dbe4      	blt.n	800671c <drfti1+0xac>
      is += ido;
 8006752:	44c3      	add	fp, r8
    for (j = 0; j < ipm; j++)
 8006754:	f109 0901 	add.w	r9, r9, #1
 8006758:	9b01      	ldr	r3, [sp, #4]
 800675a:	4599      	cmp	r9, r3
 800675c:	da0c      	bge.n	8006778 <drfti1+0x108>
      ld += l1;
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	449a      	add	sl, r3
      argld = (float)ld * argh;
 8006762:	ee07 aa90 	vmov	s15, sl
 8006766:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800676a:	ee29 9a29 	vmul.f32	s18, s18, s19
      i = is;
 800676e:	465c      	mov	r4, fp
      for (ii = 2; ii < ido; ii += 2)
 8006770:	2602      	movs	r6, #2
      fi = 0.f;
 8006772:	ed9f 8a13 	vldr	s16, [pc, #76]	; 80067c0 <drfti1+0x150>
      for (ii = 2; ii < ido; ii += 2)
 8006776:	e7ea      	b.n	800674e <drfti1+0xde>
  for (k1 = 0; k1 < nfm1; k1++)
 8006778:	9b02      	ldr	r3, [sp, #8]
 800677a:	3301      	adds	r3, #1
 800677c:	9302      	str	r3, [sp, #8]
    l1 = l2;
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	9300      	str	r3, [sp, #0]
  for (k1 = 0; k1 < nfm1; k1++)
 8006782:	9b02      	ldr	r3, [sp, #8]
 8006784:	9a04      	ldr	r2, [sp, #16]
 8006786:	4293      	cmp	r3, r2
 8006788:	da11      	bge.n	80067ae <drfti1+0x13e>
    ip = ifac[k1 + 2];
 800678a:	9b02      	ldr	r3, [sp, #8]
 800678c:	3302      	adds	r3, #2
 800678e:	9a07      	ldr	r2, [sp, #28]
 8006790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    l2 = l1 * ip;
 8006794:	9a00      	ldr	r2, [sp, #0]
 8006796:	fb03 f202 	mul.w	r2, r3, r2
 800679a:	9203      	str	r2, [sp, #12]
    ido = n / l2;
 800679c:	9905      	ldr	r1, [sp, #20]
 800679e:	fb91 f8f2 	sdiv	r8, r1, r2
    ipm = ip - 1;
 80067a2:	3b01      	subs	r3, #1
 80067a4:	9301      	str	r3, [sp, #4]
    ld = 0;
 80067a6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80067aa:	46ca      	mov	sl, r9
    for (j = 0; j < ipm; j++)
 80067ac:	e7d4      	b.n	8006758 <drfti1+0xe8>
}
 80067ae:	b009      	add	sp, #36	; 0x24
 80067b0:	ecbd 8b04 	vpop	{d8-d9}
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b8:	0800f474 	.word	0x0800f474
 80067bc:	40c90fdb 	.word	0x40c90fdb
 80067c0:	00000000 	.word	0x00000000

080067c4 <fdrffti>:
  if (n != 1) { drfti1(n, wsave + n, ifac); }
 80067c4:	2801      	cmp	r0, #1
 80067c6:	d100      	bne.n	80067ca <fdrffti+0x6>
 80067c8:	4770      	bx	lr
{
 80067ca:	b508      	push	{r3, lr}
  if (n != 1) { drfti1(n, wsave + n, ifac); }
 80067cc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80067d0:	f7ff ff4e 	bl	8006670 <drfti1>
}
 80067d4:	bd08      	pop	{r3, pc}

080067d6 <drft_forward>:


void drft_forward(drft_lookup *l, float *data)
{
 80067d6:	4603      	mov	r3, r0
  if (l->n != 1) { drftf1(l->n, data, l->trigcache, l->trigcache + l->n, l->splitcache); }
 80067d8:	6800      	ldr	r0, [r0, #0]
 80067da:	2801      	cmp	r0, #1
 80067dc:	d100      	bne.n	80067e0 <drft_forward+0xa>
 80067de:	4770      	bx	lr
{
 80067e0:	b500      	push	{lr}
 80067e2:	b083      	sub	sp, #12
  if (l->n != 1) { drftf1(l->n, data, l->trigcache, l->trigcache + l->n, l->splitcache); }
 80067e4:	1d1a      	adds	r2, r3, #4
 80067e6:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80067f0:	f7ff f918 	bl	8005a24 <drftf1>
}
 80067f4:	b003      	add	sp, #12
 80067f6:	f85d fb04 	ldr.w	pc, [sp], #4

080067fa <drft_backward>:

void drft_backward(drft_lookup *l, float *data)
{
 80067fa:	4603      	mov	r3, r0
  if (l->n != 1) { drftb1(l->n, data, l->trigcache, l->trigcache + l->n, l->splitcache); }
 80067fc:	6800      	ldr	r0, [r0, #0]
 80067fe:	2801      	cmp	r0, #1
 8006800:	d100      	bne.n	8006804 <drft_backward+0xa>
 8006802:	4770      	bx	lr
{
 8006804:	b500      	push	{lr}
 8006806:	b083      	sub	sp, #12
  if (l->n != 1) { drftb1(l->n, data, l->trigcache, l->trigcache + l->n, l->splitcache); }
 8006808:	1d1a      	adds	r2, r3, #4
 800680a:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8006814:	f7ff fe4a 	bl	80064ac <drftb1>
}
 8006818:	b003      	add	sp, #12
 800681a:	f85d fb04 	ldr.w	pc, [sp], #4

0800681e <drft_init>:

void drft_init(drft_lookup *l, int32_t n)
{
 800681e:	b508      	push	{r3, lr}
 8006820:	4602      	mov	r2, r0
 8006822:	4608      	mov	r0, r1
  l->n = n;
 8006824:	4611      	mov	r1, r2
 8006826:	f841 0b04 	str.w	r0, [r1], #4
  fdrffti(n, l->trigcache, l->splitcache);
 800682a:	f602 4204 	addw	r2, r2, #3076	; 0xc04
 800682e:	f7ff ffc9 	bl	80067c4 <fdrffti>
}
 8006832:	bd08      	pop	{r3, pc}

08006834 <reset_devices>:
        }
    }
    return max_val;
}
static void reset_devices(void)//resets digitpoti and codec
{
 8006834:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, GPIO_PIN_SET);
 8006836:	4d23      	ldr	r5, [pc, #140]	; (80068c4 <reset_devices+0x90>)
 8006838:	2201      	movs	r2, #1
 800683a:	4611      	mov	r1, r2
 800683c:	4628      	mov	r0, r5
 800683e:	f002 fbea 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIPOT_RESET_GPIO_Port, DIGIPOT_RESET_Pin, GPIO_PIN_SET);
 8006842:	4c21      	ldr	r4, [pc, #132]	; (80068c8 <reset_devices+0x94>)
 8006844:	2201      	movs	r2, #1
 8006846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800684a:	4620      	mov	r0, r4
 800684c:	f002 fbe3 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8006850:	2064      	movs	r0, #100	; 0x64
 8006852:	f001 fb79 	bl	8007f48 <HAL_Delay>
	HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, GPIO_PIN_RESET);
 8006856:	2200      	movs	r2, #0
 8006858:	2101      	movs	r1, #1
 800685a:	4628      	mov	r0, r5
 800685c:	f002 fbdb 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIPOT_RESET_GPIO_Port, DIGIPOT_RESET_Pin, GPIO_PIN_RESET);
 8006860:	2200      	movs	r2, #0
 8006862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006866:	4620      	mov	r0, r4
 8006868:	f002 fbd5 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800686c:	2064      	movs	r0, #100	; 0x64
 800686e:	f001 fb6b 	bl	8007f48 <HAL_Delay>
	HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, GPIO_PIN_SET);
 8006872:	2201      	movs	r2, #1
 8006874:	4611      	mov	r1, r2
 8006876:	4628      	mov	r0, r5
 8006878:	f002 fbcd 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIPOT_RESET_GPIO_Port, DIGIPOT_RESET_Pin, GPIO_PIN_SET);
 800687c:	2201      	movs	r2, #1
 800687e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006882:	4620      	mov	r0, r4
 8006884:	f002 fbc7 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8006888:	2064      	movs	r0, #100	; 0x64
 800688a:	f001 fb5d 	bl	8007f48 <HAL_Delay>
	HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, GPIO_PIN_RESET);
 800688e:	2200      	movs	r2, #0
 8006890:	2101      	movs	r1, #1
 8006892:	4628      	mov	r0, r5
 8006894:	f002 fbbf 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIPOT_RESET_GPIO_Port, DIGIPOT_RESET_Pin, GPIO_PIN_RESET);
 8006898:	2200      	movs	r2, #0
 800689a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800689e:	4620      	mov	r0, r4
 80068a0:	f002 fbb9 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80068a4:	2064      	movs	r0, #100	; 0x64
 80068a6:	f001 fb4f 	bl	8007f48 <HAL_Delay>
	HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, GPIO_PIN_SET);
 80068aa:	2201      	movs	r2, #1
 80068ac:	4611      	mov	r1, r2
 80068ae:	4628      	mov	r0, r5
 80068b0:	f002 fbb1 	bl	8009016 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIPOT_RESET_GPIO_Port, DIGIPOT_RESET_Pin, GPIO_PIN_SET);
 80068b4:	2201      	movs	r2, #1
 80068b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068ba:	4620      	mov	r0, r4
 80068bc:	f002 fbab 	bl	8009016 <HAL_GPIO_WritePin>
}
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
 80068c2:	bf00      	nop
 80068c4:	40020000 	.word	0x40020000
 80068c8:	40020400 	.word	0x40020400

080068cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d2:	2400      	movs	r4, #0
 80068d4:	9405      	str	r4, [sp, #20]
 80068d6:	9406      	str	r4, [sp, #24]
 80068d8:	9407      	str	r4, [sp, #28]
 80068da:	9408      	str	r4, [sp, #32]
 80068dc:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80068de:	9401      	str	r4, [sp, #4]
 80068e0:	4b3c      	ldr	r3, [pc, #240]	; (80069d4 <MX_GPIO_Init+0x108>)
 80068e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30
 80068ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80068f0:	9201      	str	r2, [sp, #4]
 80068f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068f4:	9402      	str	r4, [sp, #8]
 80068f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f8:	f042 0204 	orr.w	r2, r2, #4
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
 80068fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006900:	f002 0204 	and.w	r2, r2, #4
 8006904:	9202      	str	r2, [sp, #8]
 8006906:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006908:	9403      	str	r4, [sp, #12]
 800690a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690c:	f042 0201 	orr.w	r2, r2, #1
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
 8006912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006914:	f002 0201 	and.w	r2, r2, #1
 8006918:	9203      	str	r2, [sp, #12]
 800691a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800691c:	9404      	str	r4, [sp, #16]
 800691e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006920:	f042 0202 	orr.w	r2, r2, #2
 8006924:	631a      	str	r2, [r3, #48]	; 0x30
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CODEC_RST_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8006930:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80069e0 <MX_GPIO_Init+0x114>
 8006934:	4622      	mov	r2, r4
 8006936:	2121      	movs	r1, #33	; 0x21
 8006938:	4640      	mov	r0, r8
 800693a:	f002 fb6c 	bl	8009016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800693e:	4e26      	ldr	r6, [pc, #152]	; (80069d8 <MX_GPIO_Init+0x10c>)
 8006940:	4622      	mov	r2, r4
 8006942:	2120      	movs	r1, #32
 8006944:	4630      	mov	r0, r6
 8006946:	f002 fb66 	bl	8009016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGIPOT_RESET_GPIO_Port, DIGIPOT_RESET_Pin, GPIO_PIN_RESET);
 800694a:	4f24      	ldr	r7, [pc, #144]	; (80069dc <MX_GPIO_Init+0x110>)
 800694c:	4622      	mov	r2, r4
 800694e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006952:	4638      	mov	r0, r7
 8006954:	f002 fb5f 	bl	8009016 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CODEC_RST_Pin DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = CODEC_RST_Pin|DEBUG_LED_Pin;
 8006958:	2321      	movs	r3, #33	; 0x21
 800695a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800695c:	2501      	movs	r5, #1
 800695e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006962:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006964:	a905      	add	r1, sp, #20
 8006966:	4640      	mov	r0, r8
 8006968:	f002 f9ca 	bl	8008d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SS_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 800696c:	2320      	movs	r3, #32
 800696e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006970:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006972:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006974:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 8006976:	a905      	add	r1, sp, #20
 8006978:	4630      	mov	r0, r6
 800697a:	f002 f9c1 	bl	8008d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_addr0_Pin I2C_addr1_Pin I2C_addr2_Pin */
  GPIO_InitStruct.Pin = I2C_addr0_Pin|I2C_addr1_Pin|I2C_addr2_Pin;
 800697e:	2307      	movs	r3, #7
 8006980:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006982:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006984:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006986:	a905      	add	r1, sp, #20
 8006988:	4638      	mov	r0, r7
 800698a:	f002 f9b9 	bl	8008d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800698e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006992:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006994:	2302      	movs	r3, #2
 8006996:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006998:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800699a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800699c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800699e:	a905      	add	r1, sp, #20
 80069a0:	4630      	mov	r0, r6
 80069a2:	f002 f9ad 	bl	8008d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_IO1_Pin EXT_IO2_Pin */
  GPIO_InitStruct.Pin = EXT_IO1_Pin|EXT_IO2_Pin;
 80069a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80069aa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069ac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069b0:	a905      	add	r1, sp, #20
 80069b2:	4630      	mov	r0, r6
 80069b4:	f002 f9a4 	bl	8008d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGIPOT_RESET_Pin */
  GPIO_InitStruct.Pin = DIGIPOT_RESET_Pin;
 80069b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069be:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DIGIPOT_RESET_GPIO_Port, &GPIO_InitStruct);
 80069c4:	a905      	add	r1, sp, #20
 80069c6:	4638      	mov	r0, r7
 80069c8:	f002 f99a 	bl	8008d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80069cc:	b00a      	add	sp, #40	; 0x28
 80069ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d2:	bf00      	nop
 80069d4:	40023800 	.word	0x40023800
 80069d8:	40020800 	.word	0x40020800
 80069dc:	40020400 	.word	0x40020400
 80069e0:	40020000 	.word	0x40020000

080069e4 <MX_DMA_Init>:
{
 80069e4:	b510      	push	{r4, lr}
 80069e6:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80069e8:	2400      	movs	r4, #0
 80069ea:	9401      	str	r4, [sp, #4]
 80069ec:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <MX_DMA_Init+0x40>)
 80069ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80069f4:	631a      	str	r2, [r3, #48]	; 0x30
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006a00:	4622      	mov	r2, r4
 8006a02:	4621      	mov	r1, r4
 8006a04:	2039      	movs	r0, #57	; 0x39
 8006a06:	f001 fd07 	bl	8008418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006a0a:	2039      	movs	r0, #57	; 0x39
 8006a0c:	f001 fd3c 	bl	8008488 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8006a10:	4622      	mov	r2, r4
 8006a12:	4621      	mov	r1, r4
 8006a14:	203c      	movs	r0, #60	; 0x3c
 8006a16:	f001 fcff 	bl	8008418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8006a1a:	203c      	movs	r0, #60	; 0x3c
 8006a1c:	f001 fd34 	bl	8008488 <HAL_NVIC_EnableIRQ>
}
 8006a20:	b002      	add	sp, #8
 8006a22:	bd10      	pop	{r4, pc}
 8006a24:	40023800 	.word	0x40023800

08006a28 <generate_sine_wave>:
void generate_sine_wave() {
 8006a28:	b510      	push	{r4, lr}
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8006a2a:	2400      	movs	r4, #0
 8006a2c:	e01c      	b.n	8006a68 <generate_sine_wave+0x40>
        double t = (double)i / BUFFER_SIZE;
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7f9 fd3c 	bl	80004ac <__aeabi_i2d>
 8006a34:	2200      	movs	r2, #0
 8006a36:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <generate_sine_wave+0x58>)
 8006a38:	f7f9 fda2 	bl	8000580 <__aeabi_dmul>
        buffer[i] = (int16_t)(AMPLITUDE * sin(2.0 * PI * t));
 8006a3c:	a30c      	add	r3, pc, #48	; (adr r3, 8006a70 <generate_sine_wave+0x48>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fd9d 	bl	8000580 <__aeabi_dmul>
 8006a46:	ec41 0b10 	vmov	d0, r0, r1
 8006a4a:	f006 f989 	bl	800cd60 <sin>
 8006a4e:	ec51 0b10 	vmov	r0, r1, d0
 8006a52:	a309      	add	r3, pc, #36	; (adr r3, 8006a78 <generate_sine_wave+0x50>)
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f7f9 fd92 	bl	8000580 <__aeabi_dmul>
 8006a5c:	f7fa f82a 	bl	8000ab4 <__aeabi_d2iz>
 8006a60:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <generate_sine_wave+0x5c>)
 8006a62:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8006a66:	3401      	adds	r4, #1
 8006a68:	2c1f      	cmp	r4, #31
 8006a6a:	dde0      	ble.n	8006a2e <generate_sine_wave+0x6>
}
 8006a6c:	bd10      	pop	{r4, pc}
 8006a6e:	bf00      	nop
 8006a70:	53c8d4f1 	.word	0x53c8d4f1
 8006a74:	401921fb 	.word	0x401921fb
 8006a78:	00000000 	.word	0x00000000
 8006a7c:	40dfffc0 	.word	0x40dfffc0
 8006a80:	3fa00000 	.word	0x3fa00000
 8006a84:	20000228 	.word	0x20000228

08006a88 <generate_sine_wave2>:
void generate_sine_wave2() {
 8006a88:	b510      	push	{r4, lr}
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8006a8a:	2400      	movs	r4, #0
 8006a8c:	e01c      	b.n	8006ac8 <generate_sine_wave2+0x40>
        double t = (double)i / BUFFER_SIZE;
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f7f9 fd0c 	bl	80004ac <__aeabi_i2d>
 8006a94:	2200      	movs	r2, #0
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <generate_sine_wave2+0x58>)
 8006a98:	f7f9 fd72 	bl	8000580 <__aeabi_dmul>
        buffer2[i] = (int16_t)(AMPLITUDE * sin(2.0 * PI * 3.0 * t));
 8006a9c:	a30c      	add	r3, pc, #48	; (adr r3, 8006ad0 <generate_sine_wave2+0x48>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f7f9 fd6d 	bl	8000580 <__aeabi_dmul>
 8006aa6:	ec41 0b10 	vmov	d0, r0, r1
 8006aaa:	f006 f959 	bl	800cd60 <sin>
 8006aae:	ec51 0b10 	vmov	r0, r1, d0
 8006ab2:	a309      	add	r3, pc, #36	; (adr r3, 8006ad8 <generate_sine_wave2+0x50>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f7f9 fd62 	bl	8000580 <__aeabi_dmul>
 8006abc:	f7f9 fffa 	bl	8000ab4 <__aeabi_d2iz>
 8006ac0:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <generate_sine_wave2+0x5c>)
 8006ac2:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8006ac6:	3401      	adds	r4, #1
 8006ac8:	2c1f      	cmp	r4, #31
 8006aca:	dde0      	ble.n	8006a8e <generate_sine_wave2+0x6>
}
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	bf00      	nop
 8006ad0:	7ed69fb5 	.word	0x7ed69fb5
 8006ad4:	4032d97c 	.word	0x4032d97c
 8006ad8:	00000000 	.word	0x00000000
 8006adc:	40dfffc0 	.word	0x40dfffc0
 8006ae0:	3fa00000 	.word	0x3fa00000
 8006ae4:	20000268 	.word	0x20000268

08006ae8 <find_abs_max>:
{
 8006ae8:	4684      	mov	ip, r0
    for (int i = 0; i < size; i++) {
 8006aea:	2200      	movs	r2, #0
    int16_t max_val = 0;
 8006aec:	4610      	mov	r0, r2
    for (int i = 0; i < size; i++) {
 8006aee:	e000      	b.n	8006af2 <find_abs_max+0xa>
 8006af0:	3201      	adds	r2, #1
 8006af2:	428a      	cmp	r2, r1
 8006af4:	da09      	bge.n	8006b0a <find_abs_max+0x22>
        if (abs(buffer[i]) > max_val) {
 8006af6:	f93c 3012 	ldrsh.w	r3, [ip, r2, lsl #1]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	bfb8      	it	lt
 8006afe:	425b      	neglt	r3, r3
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	4283      	cmp	r3, r0
 8006b04:	ddf4      	ble.n	8006af0 <find_abs_max+0x8>
            max_val = abs(buffer[i]);
 8006b06:	b218      	sxth	r0, r3
 8006b08:	e7f2      	b.n	8006af0 <find_abs_max+0x8>
}
 8006b0a:	4770      	bx	lr

08006b0c <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006b0c:	b510      	push	{r4, lr}
	for(int i = 0;i<32;i = i+2)
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e00c      	b.n	8006b2c <HAL_SAI_RxHalfCpltCallback+0x20>
	{
		inAbuff1[i/2] = (int16_t)inbuff[i];
 8006b12:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8006b16:	1052      	asrs	r2, r2, #1
 8006b18:	492a      	ldr	r1, [pc, #168]	; (8006bc4 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8006b1a:	f931 1023 	ldrsh.w	r1, [r1, r3, lsl #2]
 8006b1e:	482a      	ldr	r0, [pc, #168]	; (8006bc8 <HAL_SAI_RxHalfCpltCallback+0xbc>)
 8006b20:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
		Micbuff[i/2] = (int16_t)inbuff[i];
 8006b24:	4829      	ldr	r0, [pc, #164]	; (8006bcc <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8006b26:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
	for(int i = 0;i<32;i = i+2)
 8006b2a:	3302      	adds	r3, #2
 8006b2c:	2b1f      	cmp	r3, #31
 8006b2e:	ddf0      	ble.n	8006b12 <HAL_SAI_RxHalfCpltCallback+0x6>
	}
	for(int i = 0;i<32;i = i+2)
 8006b30:	2300      	movs	r3, #0
 8006b32:	e00d      	b.n	8006b50 <HAL_SAI_RxHalfCpltCallback+0x44>
	{
		inBbuff1[i/2] = (int16_t)inbuff[i+1];
 8006b34:	1c58      	adds	r0, r3, #1
 8006b36:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8006b3a:	1052      	asrs	r2, r2, #1
 8006b3c:	4921      	ldr	r1, [pc, #132]	; (8006bc4 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8006b3e:	f931 1020 	ldrsh.w	r1, [r1, r0, lsl #2]
 8006b42:	4823      	ldr	r0, [pc, #140]	; (8006bd0 <HAL_SAI_RxHalfCpltCallback+0xc4>)
 8006b44:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
		Refbuff[i/2] = (int16_t)inbuff[i+1];
 8006b48:	4822      	ldr	r0, [pc, #136]	; (8006bd4 <HAL_SAI_RxHalfCpltCallback+0xc8>)
 8006b4a:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
	for(int i = 0;i<32;i = i+2)
 8006b4e:	3302      	adds	r3, #2
 8006b50:	2b1f      	cmp	r3, #31
 8006b52:	ddef      	ble.n	8006b34 <HAL_SAI_RxHalfCpltCallback+0x28>
	}

	if(AcousticEC_Data_Input(&inAbuff1, &inBbuff1, &echoOut1, (AcousticEC_Handler_t *)&EchoHandlerInstance))
 8006b54:	4b20      	ldr	r3, [pc, #128]	; (8006bd8 <HAL_SAI_RxHalfCpltCallback+0xcc>)
 8006b56:	4a21      	ldr	r2, [pc, #132]	; (8006bdc <HAL_SAI_RxHalfCpltCallback+0xd0>)
 8006b58:	491d      	ldr	r1, [pc, #116]	; (8006bd0 <HAL_SAI_RxHalfCpltCallback+0xc4>)
 8006b5a:	481b      	ldr	r0, [pc, #108]	; (8006bc8 <HAL_SAI_RxHalfCpltCallback+0xbc>)
 8006b5c:	f7fa fc68 	bl	8001430 <AcousticEC_Data_Input>
 8006b60:	b110      	cbz	r0, 8006b68 <HAL_SAI_RxHalfCpltCallback+0x5c>
	{
		shouldProcess = true;
 8006b62:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <HAL_SAI_RxHalfCpltCallback+0xd4>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
//	for(int i = 0;i<16;i++)
//		{
//			outbuff[i*2] = echoOut1[i];
//			outbuff[i*2+1] = buffer[i];
//		}
	if(whichBuffer == 0)
 8006b68:	4b1e      	ldr	r3, [pc, #120]	; (8006be4 <HAL_SAI_RxHalfCpltCallback+0xd8>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b1a3      	cbz	r3, 8006b98 <HAL_SAI_RxHalfCpltCallback+0x8c>
						outbuff[i*2+1] = buffer[i];
					}
	}
	else
	{
		for(int i = 0;i<16;i++)//route the 500Hz sine to the out and ext
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2b0f      	cmp	r3, #15
 8006b72:	dc26      	bgt.n	8006bc2 <HAL_SAI_RxHalfCpltCallback+0xb6>
					{
						outbuff[i*2] = echoOut1[i];
 8006b74:	4a19      	ldr	r2, [pc, #100]	; (8006bdc <HAL_SAI_RxHalfCpltCallback+0xd0>)
 8006b76:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8006b7a:	005a      	lsls	r2, r3, #1
 8006b7c:	491a      	ldr	r1, [pc, #104]	; (8006be8 <HAL_SAI_RxHalfCpltCallback+0xdc>)
 8006b7e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
						Outbuff[i] = echoOut1[i];
 8006b82:	4c1a      	ldr	r4, [pc, #104]	; (8006bec <HAL_SAI_RxHalfCpltCallback+0xe0>)
 8006b84:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
						outbuff[i*2+1] = buffer2[i];
 8006b88:	3201      	adds	r2, #1
 8006b8a:	4819      	ldr	r0, [pc, #100]	; (8006bf0 <HAL_SAI_RxHalfCpltCallback+0xe4>)
 8006b8c:	f930 0013 	ldrsh.w	r0, [r0, r3, lsl #1]
 8006b90:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		for(int i = 0;i<16;i++)//route the 500Hz sine to the out and ext
 8006b94:	3301      	adds	r3, #1
 8006b96:	e7eb      	b.n	8006b70 <HAL_SAI_RxHalfCpltCallback+0x64>
		for(int i = 0;i<16;i++)//route the 500Hz sine to the out and ext
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b0f      	cmp	r3, #15
 8006b9c:	dc11      	bgt.n	8006bc2 <HAL_SAI_RxHalfCpltCallback+0xb6>
						outbuff[i*2] = echoOut1[i];
 8006b9e:	4a0f      	ldr	r2, [pc, #60]	; (8006bdc <HAL_SAI_RxHalfCpltCallback+0xd0>)
 8006ba0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8006ba4:	005a      	lsls	r2, r3, #1
 8006ba6:	4910      	ldr	r1, [pc, #64]	; (8006be8 <HAL_SAI_RxHalfCpltCallback+0xdc>)
 8006ba8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
						Outbuff[i] = echoOut1[i];
 8006bac:	4c0f      	ldr	r4, [pc, #60]	; (8006bec <HAL_SAI_RxHalfCpltCallback+0xe0>)
 8006bae:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
						outbuff[i*2+1] = buffer[i];
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	480f      	ldr	r0, [pc, #60]	; (8006bf4 <HAL_SAI_RxHalfCpltCallback+0xe8>)
 8006bb6:	f930 0013 	ldrsh.w	r0, [r0, r3, lsl #1]
 8006bba:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		for(int i = 0;i<16;i++)//route the 500Hz sine to the out and ext
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	e7eb      	b.n	8006b9a <HAL_SAI_RxHalfCpltCallback+0x8e>
//	for(int i = 0;i<16;i++)
//		{
//			outbuff[i*2] = inBbuff1[i];
//			outbuff[i*2+1] = inBbuff1[i];
//		}
}
 8006bc2:	bd10      	pop	{r4, pc}
 8006bc4:	20000790 	.word	0x20000790
 8006bc8:	20000710 	.word	0x20000710
 8006bcc:	20000130 	.word	0x20000130
 8006bd0:	20000750 	.word	0x20000750
 8006bd4:	200001e8 	.word	0x200001e8
 8006bd8:	200000fc 	.word	0x200000fc
 8006bdc:	200002ac 	.word	0x200002ac
 8006be0:	20000992 	.word	0x20000992
 8006be4:	20000993 	.word	0x20000993
 8006be8:	20000890 	.word	0x20000890
 8006bec:	2000018c 	.word	0x2000018c
 8006bf0:	20000268 	.word	0x20000268
 8006bf4:	20000228 	.word	0x20000228

08006bf8 <HAL_SAI_RxCpltCallback>:
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i = 32;i<64;i = i+2)
 8006bfa:	2320      	movs	r3, #32
 8006bfc:	e011      	b.n	8006c22 <HAL_SAI_RxCpltCallback+0x2a>
		{
			inAbuff2[(i-32)/2] = (int16_t)inbuff[i];
 8006bfe:	f1a3 0220 	sub.w	r2, r3, #32
 8006c02:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8006c06:	1052      	asrs	r2, r2, #1
 8006c08:	495b      	ldr	r1, [pc, #364]	; (8006d78 <HAL_SAI_RxCpltCallback+0x180>)
 8006c0a:	f931 1023 	ldrsh.w	r1, [r1, r3, lsl #2]
 8006c0e:	485b      	ldr	r0, [pc, #364]	; (8006d7c <HAL_SAI_RxCpltCallback+0x184>)
 8006c10:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
			Micbuff[i/2] = (int16_t)inbuff[i];
 8006c14:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8006c18:	1052      	asrs	r2, r2, #1
 8006c1a:	4859      	ldr	r0, [pc, #356]	; (8006d80 <HAL_SAI_RxCpltCallback+0x188>)
 8006c1c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
	for(int i = 32;i<64;i = i+2)
 8006c20:	3302      	adds	r3, #2
 8006c22:	2b3f      	cmp	r3, #63	; 0x3f
 8006c24:	ddeb      	ble.n	8006bfe <HAL_SAI_RxCpltCallback+0x6>
		}
	for(int i = 32;i<64;i = i+2)
 8006c26:	2320      	movs	r3, #32
 8006c28:	e012      	b.n	8006c50 <HAL_SAI_RxCpltCallback+0x58>
		{
			inBbuff2[(i-32)/2] = (int16_t)inbuff[i+1];
 8006c2a:	1c58      	adds	r0, r3, #1
 8006c2c:	f1a3 0220 	sub.w	r2, r3, #32
 8006c30:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8006c34:	1052      	asrs	r2, r2, #1
 8006c36:	4950      	ldr	r1, [pc, #320]	; (8006d78 <HAL_SAI_RxCpltCallback+0x180>)
 8006c38:	f931 1020 	ldrsh.w	r1, [r1, r0, lsl #2]
 8006c3c:	4851      	ldr	r0, [pc, #324]	; (8006d84 <HAL_SAI_RxCpltCallback+0x18c>)
 8006c3e:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
			Refbuff[i/2]	= (int16_t)inbuff[i+1];
 8006c42:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8006c46:	1052      	asrs	r2, r2, #1
 8006c48:	484f      	ldr	r0, [pc, #316]	; (8006d88 <HAL_SAI_RxCpltCallback+0x190>)
 8006c4a:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
	for(int i = 32;i<64;i = i+2)
 8006c4e:	3302      	adds	r3, #2
 8006c50:	2b3f      	cmp	r3, #63	; 0x3f
 8006c52:	ddea      	ble.n	8006c2a <HAL_SAI_RxCpltCallback+0x32>
		}

	if(AcousticEC_Data_Input(&inAbuff2, &inBbuff2, &echoOut2, (AcousticEC_Handler_t *)&EchoHandlerInstance))
 8006c54:	4b4d      	ldr	r3, [pc, #308]	; (8006d8c <HAL_SAI_RxCpltCallback+0x194>)
 8006c56:	4a4e      	ldr	r2, [pc, #312]	; (8006d90 <HAL_SAI_RxCpltCallback+0x198>)
 8006c58:	494a      	ldr	r1, [pc, #296]	; (8006d84 <HAL_SAI_RxCpltCallback+0x18c>)
 8006c5a:	4848      	ldr	r0, [pc, #288]	; (8006d7c <HAL_SAI_RxCpltCallback+0x184>)
 8006c5c:	f7fa fbe8 	bl	8001430 <AcousticEC_Data_Input>
 8006c60:	b110      	cbz	r0, 8006c68 <HAL_SAI_RxCpltCallback+0x70>
		{
			shouldProcess = true;
 8006c62:	4b4c      	ldr	r3, [pc, #304]	; (8006d94 <HAL_SAI_RxCpltCallback+0x19c>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
//	for(int i = 16;i<32;i++)
//		{
//			outbuff[i*2] = echoOut2[i-16];
//			outbuff[i*2+1] = buffer[i];
//		}
	if(whichBuffer == 0)
 8006c68:	4b4b      	ldr	r3, [pc, #300]	; (8006d98 <HAL_SAI_RxCpltCallback+0x1a0>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	b1b3      	cbz	r3, 8006c9c <HAL_SAI_RxCpltCallback+0xa4>
					}
		//whichBuffer = 1;
	}
	else
	{
		for(int i = 16;i<32;i++)//route the 500Hz sine to the out and ext
 8006c6e:	2310      	movs	r3, #16
 8006c70:	2b1f      	cmp	r3, #31
 8006c72:	dc2a      	bgt.n	8006cca <HAL_SAI_RxCpltCallback+0xd2>
					{
						outbuff[i*2] = echoOut2[i-16];
 8006c74:	f1a3 0110 	sub.w	r1, r3, #16
 8006c78:	4a45      	ldr	r2, [pc, #276]	; (8006d90 <HAL_SAI_RxCpltCallback+0x198>)
 8006c7a:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 8006c7e:	005a      	lsls	r2, r3, #1
 8006c80:	4946      	ldr	r1, [pc, #280]	; (8006d9c <HAL_SAI_RxCpltCallback+0x1a4>)
 8006c82:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
						Outbuff[i] = echoOut2[i-16];
 8006c86:	4c46      	ldr	r4, [pc, #280]	; (8006da0 <HAL_SAI_RxCpltCallback+0x1a8>)
 8006c88:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
						outbuff[i*2+1] = buffer2[i];
 8006c8c:	3201      	adds	r2, #1
 8006c8e:	4845      	ldr	r0, [pc, #276]	; (8006da4 <HAL_SAI_RxCpltCallback+0x1ac>)
 8006c90:	f930 0013 	ldrsh.w	r0, [r0, r3, lsl #1]
 8006c94:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		for(int i = 16;i<32;i++)//route the 500Hz sine to the out and ext
 8006c98:	3301      	adds	r3, #1
 8006c9a:	e7e9      	b.n	8006c70 <HAL_SAI_RxCpltCallback+0x78>
		for(int i = 16;i<32;i++)//route the 500Hz sine to the out and ext
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	2b1f      	cmp	r3, #31
 8006ca0:	dc16      	bgt.n	8006cd0 <HAL_SAI_RxCpltCallback+0xd8>
						outbuff[i*2] = echoOut2[i-16];
 8006ca2:	f1a3 0110 	sub.w	r1, r3, #16
 8006ca6:	4a3a      	ldr	r2, [pc, #232]	; (8006d90 <HAL_SAI_RxCpltCallback+0x198>)
 8006ca8:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 8006cac:	005a      	lsls	r2, r3, #1
 8006cae:	493b      	ldr	r1, [pc, #236]	; (8006d9c <HAL_SAI_RxCpltCallback+0x1a4>)
 8006cb0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
						Outbuff[i] = echoOut2[i-16];
 8006cb4:	4c3a      	ldr	r4, [pc, #232]	; (8006da0 <HAL_SAI_RxCpltCallback+0x1a8>)
 8006cb6:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
						outbuff[i*2+1] = buffer[i];
 8006cba:	3201      	adds	r2, #1
 8006cbc:	483a      	ldr	r0, [pc, #232]	; (8006da8 <HAL_SAI_RxCpltCallback+0x1b0>)
 8006cbe:	f930 0013 	ldrsh.w	r0, [r0, r3, lsl #1]
 8006cc2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		for(int i = 16;i<32;i++)//route the 500Hz sine to the out and ext
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	e7e9      	b.n	8006c9e <HAL_SAI_RxCpltCallback+0xa6>
					}
		whichBuffer = 0;
 8006cca:	4b33      	ldr	r3, [pc, #204]	; (8006d98 <HAL_SAI_RxCpltCallback+0x1a0>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	701a      	strb	r2, [r3, #0]
	}
	MicMaxVals[MicMaxValsPtr] = find_abs_max(Micbuff, 32);
 8006cd0:	4c36      	ldr	r4, [pc, #216]	; (8006dac <HAL_SAI_RxCpltCallback+0x1b4>)
 8006cd2:	7825      	ldrb	r5, [r4, #0]
 8006cd4:	b2ed      	uxtb	r5, r5
 8006cd6:	2120      	movs	r1, #32
 8006cd8:	4829      	ldr	r0, [pc, #164]	; (8006d80 <HAL_SAI_RxCpltCallback+0x188>)
 8006cda:	f7ff ff05 	bl	8006ae8 <find_abs_max>
 8006cde:	4b34      	ldr	r3, [pc, #208]	; (8006db0 <HAL_SAI_RxCpltCallback+0x1b8>)
 8006ce0:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
	RefMaxVals[RefMaxValsPtr] = find_abs_max(Refbuff, 32);
 8006ce4:	4e33      	ldr	r6, [pc, #204]	; (8006db4 <HAL_SAI_RxCpltCallback+0x1bc>)
 8006ce6:	7835      	ldrb	r5, [r6, #0]
 8006ce8:	b2ed      	uxtb	r5, r5
 8006cea:	2120      	movs	r1, #32
 8006cec:	4826      	ldr	r0, [pc, #152]	; (8006d88 <HAL_SAI_RxCpltCallback+0x190>)
 8006cee:	f7ff fefb 	bl	8006ae8 <find_abs_max>
 8006cf2:	4b31      	ldr	r3, [pc, #196]	; (8006db8 <HAL_SAI_RxCpltCallback+0x1c0>)
 8006cf4:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
	OutMaxVals[OutMaxValsPtr] = find_abs_max(Outbuff, 32);
 8006cf8:	4d30      	ldr	r5, [pc, #192]	; (8006dbc <HAL_SAI_RxCpltCallback+0x1c4>)
 8006cfa:	782f      	ldrb	r7, [r5, #0]
 8006cfc:	b2ff      	uxtb	r7, r7
 8006cfe:	2120      	movs	r1, #32
 8006d00:	4827      	ldr	r0, [pc, #156]	; (8006da0 <HAL_SAI_RxCpltCallback+0x1a8>)
 8006d02:	f7ff fef1 	bl	8006ae8 <find_abs_max>
 8006d06:	4b2e      	ldr	r3, [pc, #184]	; (8006dc0 <HAL_SAI_RxCpltCallback+0x1c8>)
 8006d08:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
	MicMaxValsPtr++;
 8006d0c:	7823      	ldrb	r3, [r4, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	7023      	strb	r3, [r4, #0]
	RefMaxValsPtr++;
 8006d14:	7833      	ldrb	r3, [r6, #0]
 8006d16:	3301      	adds	r3, #1
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	7033      	strb	r3, [r6, #0]
	OutMaxValsPtr++;
 8006d1c:	782b      	ldrb	r3, [r5, #0]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	702b      	strb	r3, [r5, #0]
	if(MicMaxValsPtr > 9)
 8006d24:	7823      	ldrb	r3, [r4, #0]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	d907      	bls.n	8006d3c <HAL_SAI_RxCpltCallback+0x144>
		{
			MicMaxValsPtr = 0;
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	7022      	strb	r2, [r4, #0]
			MicMaxVal = find_abs_max(MicMaxVals, 10);
 8006d30:	210a      	movs	r1, #10
 8006d32:	481f      	ldr	r0, [pc, #124]	; (8006db0 <HAL_SAI_RxCpltCallback+0x1b8>)
 8006d34:	f7ff fed8 	bl	8006ae8 <find_abs_max>
 8006d38:	4b22      	ldr	r3, [pc, #136]	; (8006dc4 <HAL_SAI_RxCpltCallback+0x1cc>)
 8006d3a:	8018      	strh	r0, [r3, #0]
		}
	if(RefMaxValsPtr > 9)
 8006d3c:	4b1d      	ldr	r3, [pc, #116]	; (8006db4 <HAL_SAI_RxCpltCallback+0x1bc>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b09      	cmp	r3, #9
 8006d44:	d908      	bls.n	8006d58 <HAL_SAI_RxCpltCallback+0x160>
		{
			RefMaxValsPtr = 0;
 8006d46:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <HAL_SAI_RxCpltCallback+0x1bc>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
			RefMaxVal = find_abs_max(RefMaxVals, 10);
 8006d4c:	210a      	movs	r1, #10
 8006d4e:	481a      	ldr	r0, [pc, #104]	; (8006db8 <HAL_SAI_RxCpltCallback+0x1c0>)
 8006d50:	f7ff feca 	bl	8006ae8 <find_abs_max>
 8006d54:	4b1c      	ldr	r3, [pc, #112]	; (8006dc8 <HAL_SAI_RxCpltCallback+0x1d0>)
 8006d56:	8018      	strh	r0, [r3, #0]
		}
	if(OutMaxValsPtr > 9)
 8006d58:	4b18      	ldr	r3, [pc, #96]	; (8006dbc <HAL_SAI_RxCpltCallback+0x1c4>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b09      	cmp	r3, #9
 8006d60:	d908      	bls.n	8006d74 <HAL_SAI_RxCpltCallback+0x17c>
		{
			OutMaxValsPtr = 0;
 8006d62:	4b16      	ldr	r3, [pc, #88]	; (8006dbc <HAL_SAI_RxCpltCallback+0x1c4>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
			OutMaxVal = find_abs_max(OutMaxVals, 10);
 8006d68:	210a      	movs	r1, #10
 8006d6a:	4815      	ldr	r0, [pc, #84]	; (8006dc0 <HAL_SAI_RxCpltCallback+0x1c8>)
 8006d6c:	f7ff febc 	bl	8006ae8 <find_abs_max>
 8006d70:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <HAL_SAI_RxCpltCallback+0x1d4>)
 8006d72:	8018      	strh	r0, [r3, #0]
//	for(int i = 16;i<32;i++)
//		{
//			outbuff[i*2] = inBbuff2[i-16];
//			outbuff[i*2+1] = inBbuff2[i-16];
//		}
}
 8006d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000790 	.word	0x20000790
 8006d7c:	20000730 	.word	0x20000730
 8006d80:	20000130 	.word	0x20000130
 8006d84:	20000770 	.word	0x20000770
 8006d88:	200001e8 	.word	0x200001e8
 8006d8c:	200000fc 	.word	0x200000fc
 8006d90:	200002cc 	.word	0x200002cc
 8006d94:	20000992 	.word	0x20000992
 8006d98:	20000993 	.word	0x20000993
 8006d9c:	20000890 	.word	0x20000890
 8006da0:	2000018c 	.word	0x2000018c
 8006da4:	20000268 	.word	0x20000268
 8006da8:	20000228 	.word	0x20000228
 8006dac:	2000012c 	.word	0x2000012c
 8006db0:	20000118 	.word	0x20000118
 8006db4:	200001e4 	.word	0x200001e4
 8006db8:	200001d0 	.word	0x200001d0
 8006dbc:	20000188 	.word	0x20000188
 8006dc0:	20000174 	.word	0x20000174
 8006dc4:	20000114 	.word	0x20000114
 8006dc8:	200001cc 	.word	0x200001cc
 8006dcc:	20000170 	.word	0x20000170

08006dd0 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006dd0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006dd2:	e7fe      	b.n	8006dd2 <Error_Handler+0x2>

08006dd4 <MX_ADC1_Init>:
{
 8006dd4:	b500      	push	{lr}
 8006dd6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	9302      	str	r3, [sp, #8]
 8006de0:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8006de2:	4814      	ldr	r0, [pc, #80]	; (8006e34 <MX_ADC1_Init+0x60>)
 8006de4:	4a14      	ldr	r2, [pc, #80]	; (8006e38 <MX_ADC1_Init+0x64>)
 8006de6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8006de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006dec:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006dee:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006df0:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006df2:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006df4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006df8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006dfa:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <MX_ADC1_Init+0x68>)
 8006dfc:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006dfe:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006e00:	2201      	movs	r2, #1
 8006e02:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006e04:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006e08:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006e0a:	f001 f94b 	bl	80080a4 <HAL_ADC_Init>
 8006e0e:	b960      	cbnz	r0, 8006e2a <MX_ADC1_Init+0x56>
  sConfig.Channel = ADC_CHANNEL_1;
 8006e10:	2301      	movs	r3, #1
 8006e12:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8006e14:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006e16:	2300      	movs	r3, #0
 8006e18:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e1a:	4669      	mov	r1, sp
 8006e1c:	4805      	ldr	r0, [pc, #20]	; (8006e34 <MX_ADC1_Init+0x60>)
 8006e1e:	f001 f96d 	bl	80080fc <HAL_ADC_ConfigChannel>
 8006e22:	b920      	cbnz	r0, 8006e2e <MX_ADC1_Init+0x5a>
}
 8006e24:	b005      	add	sp, #20
 8006e26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006e2a:	f7ff ffd1 	bl	8006dd0 <Error_Handler>
    Error_Handler();
 8006e2e:	f7ff ffcf 	bl	8006dd0 <Error_Handler>
 8006e32:	bf00      	nop
 8006e34:	200002ec 	.word	0x200002ec
 8006e38:	40012000 	.word	0x40012000
 8006e3c:	0f000001 	.word	0x0f000001

08006e40 <MX_ADC2_Init>:
{
 8006e40:	b500      	push	{lr}
 8006e42:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8006e44:	2300      	movs	r3, #0
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	9302      	str	r3, [sp, #8]
 8006e4c:	9303      	str	r3, [sp, #12]
  hadc2.Instance = ADC2;
 8006e4e:	4814      	ldr	r0, [pc, #80]	; (8006ea0 <MX_ADC2_Init+0x60>)
 8006e50:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <MX_ADC2_Init+0x64>)
 8006e52:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8006e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e58:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006e5a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8006e5c:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006e5e:	7603      	strb	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006e60:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e64:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e66:	4a10      	ldr	r2, [pc, #64]	; (8006ea8 <MX_ADC2_Init+0x68>)
 8006e68:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006e6a:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006e70:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006e74:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006e76:	f001 f915 	bl	80080a4 <HAL_ADC_Init>
 8006e7a:	b968      	cbnz	r0, 8006e98 <MX_ADC2_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_4;
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8006e80:	2301      	movs	r3, #1
 8006e82:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006e84:	2300      	movs	r3, #0
 8006e86:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006e88:	4669      	mov	r1, sp
 8006e8a:	4805      	ldr	r0, [pc, #20]	; (8006ea0 <MX_ADC2_Init+0x60>)
 8006e8c:	f001 f936 	bl	80080fc <HAL_ADC_ConfigChannel>
 8006e90:	b920      	cbnz	r0, 8006e9c <MX_ADC2_Init+0x5c>
}
 8006e92:	b005      	add	sp, #20
 8006e94:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006e98:	f7ff ff9a 	bl	8006dd0 <Error_Handler>
    Error_Handler();
 8006e9c:	f7ff ff98 	bl	8006dd0 <Error_Handler>
 8006ea0:	20000334 	.word	0x20000334
 8006ea4:	40012100 	.word	0x40012100
 8006ea8:	0f000001 	.word	0x0f000001

08006eac <MX_CAN1_Init>:
{
 8006eac:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 8006eae:	480d      	ldr	r0, [pc, #52]	; (8006ee4 <MX_CAN1_Init+0x38>)
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <MX_CAN1_Init+0x3c>)
 8006eb2:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 330;
 8006eb4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8006eb8:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006ebe:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8006ec0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8006ec4:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8006ec6:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8006eca:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006ecc:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006ece:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006ed0:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006ed2:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006ed4:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006ed6:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006ed8:	f001 f9e6 	bl	80082a8 <HAL_CAN_Init>
 8006edc:	b900      	cbnz	r0, 8006ee0 <MX_CAN1_Init+0x34>
}
 8006ede:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006ee0:	f7ff ff76 	bl	8006dd0 <Error_Handler>
 8006ee4:	2000037c 	.word	0x2000037c
 8006ee8:	40006400 	.word	0x40006400

08006eec <MX_I2C1_Init>:
{
 8006eec:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8006eee:	480a      	ldr	r0, [pc, #40]	; (8006f18 <MX_I2C1_Init+0x2c>)
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <MX_I2C1_Init+0x30>)
 8006ef2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <MX_I2C1_Init+0x34>)
 8006ef6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006efc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f02:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006f04:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006f06:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f08:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f0a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006f0c:	f002 fbf8 	bl	8009700 <HAL_I2C_Init>
 8006f10:	b900      	cbnz	r0, 8006f14 <MX_I2C1_Init+0x28>
}
 8006f12:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006f14:	f7ff ff5c 	bl	8006dd0 <Error_Handler>
 8006f18:	20000464 	.word	0x20000464
 8006f1c:	40005400 	.word	0x40005400
 8006f20:	000186a0 	.word	0x000186a0

08006f24 <MX_I2C3_Init>:
{
 8006f24:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8006f26:	480b      	ldr	r0, [pc, #44]	; (8006f54 <MX_I2C3_Init+0x30>)
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <MX_I2C3_Init+0x34>)
 8006f2a:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8006f2c:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <MX_I2C3_Init+0x38>)
 8006f2e:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006f30:	2300      	movs	r3, #0
 8006f32:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 170;
 8006f34:	22aa      	movs	r2, #170	; 0xaa
 8006f36:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f3c:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006f3e:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006f40:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f42:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f44:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006f46:	f002 fbdb 	bl	8009700 <HAL_I2C_Init>
 8006f4a:	b900      	cbnz	r0, 8006f4e <MX_I2C3_Init+0x2a>
}
 8006f4c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006f4e:	f7ff ff3f 	bl	8006dd0 <Error_Handler>
 8006f52:	bf00      	nop
 8006f54:	200004b8 	.word	0x200004b8
 8006f58:	40005c00 	.word	0x40005c00
 8006f5c:	00061a80 	.word	0x00061a80

08006f60 <MX_SPI2_Init>:
{
 8006f60:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8006f62:	480d      	ldr	r0, [pc, #52]	; (8006f98 <MX_SPI2_Init+0x38>)
 8006f64:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <MX_SPI2_Init+0x3c>)
 8006f66:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006f68:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006f6c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f72:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f74:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f76:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f7c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f7e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f80:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f82:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f84:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006f86:	230a      	movs	r3, #10
 8006f88:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006f8a:	f004 ffaf 	bl	800beec <HAL_SPI_Init>
 8006f8e:	b900      	cbnz	r0, 8006f92 <MX_SPI2_Init+0x32>
}
 8006f90:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006f92:	f7ff ff1d 	bl	8006dd0 <Error_Handler>
 8006f96:	bf00      	nop
 8006f98:	20000628 	.word	0x20000628
 8006f9c:	40003800 	.word	0x40003800

08006fa0 <MX_USART2_UART_Init>:
{
 8006fa0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8006fa2:	480a      	ldr	r0, [pc, #40]	; (8006fcc <MX_USART2_UART_Init+0x2c>)
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <MX_USART2_UART_Init+0x30>)
 8006fa6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8006fa8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006fac:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006fb2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006fb4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006fb6:	220c      	movs	r2, #12
 8006fb8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fba:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fbc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006fbe:	f005 fa0f 	bl	800c3e0 <HAL_UART_Init>
 8006fc2:	b900      	cbnz	r0, 8006fc6 <MX_USART2_UART_Init+0x26>
}
 8006fc4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006fc6:	f7ff ff03 	bl	8006dd0 <Error_Handler>
 8006fca:	bf00      	nop
 8006fcc:	200006c8 	.word	0x200006c8
 8006fd0:	40004400 	.word	0x40004400

08006fd4 <MX_SAI1_Init>:
{
 8006fd4:	b508      	push	{r3, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 8006fd6:	4819      	ldr	r0, [pc, #100]	; (800703c <MX_SAI1_Init+0x68>)
 8006fd8:	4b19      	ldr	r3, [pc, #100]	; (8007040 <MX_SAI1_Init+0x6c>)
 8006fda:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	6043      	str	r3, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	6083      	str	r3, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	6101      	str	r1, [r0, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006fe8:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006fea:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8006fec:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006fee:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006ff0:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	460a      	mov	r2, r1
 8006ff6:	f004 fddd 	bl	800bbb4 <HAL_SAI_InitProtocol>
 8006ffa:	b9d0      	cbnz	r0, 8007032 <MX_SAI1_Init+0x5e>
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006ffc:	4811      	ldr	r0, [pc, #68]	; (8007044 <MX_SAI1_Init+0x70>)
 8006ffe:	4b12      	ldr	r3, [pc, #72]	; (8007048 <MX_SAI1_Init+0x74>)
 8007000:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8007002:	2100      	movs	r1, #0
 8007004:	6041      	str	r1, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8007006:	6081      	str	r1, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8007008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800700c:	6103      	str	r3, [r0, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800700e:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007010:	6181      	str	r1, [r0, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8007012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007016:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8007018:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800701c:	6203      	str	r3, [r0, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800701e:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8007020:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8007022:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007024:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8007026:	2302      	movs	r3, #2
 8007028:	460a      	mov	r2, r1
 800702a:	f004 fdc3 	bl	800bbb4 <HAL_SAI_InitProtocol>
 800702e:	b910      	cbnz	r0, 8007036 <MX_SAI1_Init+0x62>
}
 8007030:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007032:	f7ff fecd 	bl	8006dd0 <Error_Handler>
    Error_Handler();
 8007036:	f7ff fecb 	bl	8006dd0 <Error_Handler>
 800703a:	bf00      	nop
 800703c:	20000518 	.word	0x20000518
 8007040:	40015804 	.word	0x40015804
 8007044:	200005a0 	.word	0x200005a0
 8007048:	40015824 	.word	0x40015824

0800704c <MX_TIM14_Init>:
{
 800704c:	b508      	push	{r3, lr}
  htim14.Instance = TIM14;
 800704e:	480a      	ldr	r0, [pc, #40]	; (8007078 <MX_TIM14_Init+0x2c>)
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <MX_TIM14_Init+0x30>)
 8007052:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 900;
 8007054:	f44f 7361 	mov.w	r3, #900	; 0x384
 8007058:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800705a:	2300      	movs	r3, #0
 800705c:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 20000;
 800705e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007062:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007064:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800706a:	f005 f903 	bl	800c274 <HAL_TIM_Base_Init>
 800706e:	b900      	cbnz	r0, 8007072 <MX_TIM14_Init+0x26>
}
 8007070:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007072:	f7ff fead 	bl	8006dd0 <Error_Handler>
 8007076:	bf00      	nop
 8007078:	20000680 	.word	0x20000680
 800707c:	40002000 	.word	0x40002000

08007080 <setI2CSlaveAddress>:
{
 8007080:	b538      	push	{r3, r4, r5, lr}
	add = (HAL_GPIO_ReadPin(I2C_addr2_GPIO_Port, I2C_addr2_Pin)^1)<<2;
 8007082:	4d1a      	ldr	r5, [pc, #104]	; (80070ec <setI2CSlaveAddress+0x6c>)
 8007084:	2104      	movs	r1, #4
 8007086:	4628      	mov	r0, r5
 8007088:	f001 ffbe 	bl	8009008 <HAL_GPIO_ReadPin>
 800708c:	0084      	lsls	r4, r0, #2
 800708e:	b2e4      	uxtb	r4, r4
 8007090:	f084 0404 	eor.w	r4, r4, #4
	add |= (HAL_GPIO_ReadPin(I2C_addr1_GPIO_Port, I2C_addr1_Pin)^1)<<1;
 8007094:	2102      	movs	r1, #2
 8007096:	4628      	mov	r0, r5
 8007098:	f001 ffb6 	bl	8009008 <HAL_GPIO_ReadPin>
 800709c:	f080 0001 	eor.w	r0, r0, #1
 80070a0:	b2c0      	uxtb	r0, r0
 80070a2:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 80070a6:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	add |= HAL_GPIO_ReadPin(I2C_addr0_GPIO_Port, I2C_addr0_Pin)^1;
 80070aa:	2101      	movs	r1, #1
 80070ac:	4628      	mov	r0, r5
 80070ae:	f001 ffab 	bl	8009008 <HAL_GPIO_ReadPin>
 80070b2:	f080 0301 	eor.w	r3, r0, #1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4323      	orrs	r3, r4
	add += 1;
 80070ba:	3301      	adds	r3, #1
 80070bc:	b2db      	uxtb	r3, r3
	hi2c3.Instance = I2C3;
 80070be:	480c      	ldr	r0, [pc, #48]	; (80070f0 <setI2CSlaveAddress+0x70>)
 80070c0:	4a0c      	ldr	r2, [pc, #48]	; (80070f4 <setI2CSlaveAddress+0x74>)
 80070c2:	6002      	str	r2, [r0, #0]
	  hi2c3.Init.ClockSpeed = 400000;
 80070c4:	4a0c      	ldr	r2, [pc, #48]	; (80070f8 <setI2CSlaveAddress+0x78>)
 80070c6:	6042      	str	r2, [r0, #4]
	  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80070c8:	2200      	movs	r2, #0
 80070ca:	6082      	str	r2, [r0, #8]
	  hi2c3.Init.OwnAddress1 = add<<1;
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	60c3      	str	r3, [r0, #12]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80070d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070d4:	6103      	str	r3, [r0, #16]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070d6:	6142      	str	r2, [r0, #20]
	  hi2c3.Init.OwnAddress2 = 0;
 80070d8:	6182      	str	r2, [r0, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070da:	61c2      	str	r2, [r0, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070dc:	6202      	str	r2, [r0, #32]
	  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80070de:	f002 fb0f 	bl	8009700 <HAL_I2C_Init>
 80070e2:	b900      	cbnz	r0, 80070e6 <setI2CSlaveAddress+0x66>
}
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
	    Error_Handler();
 80070e6:	f7ff fe73 	bl	8006dd0 <Error_Handler>
 80070ea:	bf00      	nop
 80070ec:	40020400 	.word	0x40020400
 80070f0:	200004b8 	.word	0x200004b8
 80070f4:	40005c00 	.word	0x40005c00
 80070f8:	00061a80 	.word	0x00061a80

080070fc <SystemClock_Config>:
{
 80070fc:	b500      	push	{lr}
 80070fe:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007100:	2234      	movs	r2, #52	; 0x34
 8007102:	2100      	movs	r1, #0
 8007104:	a807      	add	r0, sp, #28
 8007106:	f005 fc3b 	bl	800c980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800710a:	2300      	movs	r3, #0
 800710c:	9302      	str	r3, [sp, #8]
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	4a27      	ldr	r2, [pc, #156]	; (80071b8 <SystemClock_Config+0xbc>)
 800711a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800711c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007120:	6411      	str	r1, [r2, #64]	; 0x40
 8007122:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007124:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8007128:	9200      	str	r2, [sp, #0]
 800712a:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	4b23      	ldr	r3, [pc, #140]	; (80071bc <SystemClock_Config+0xc0>)
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007142:	2309      	movs	r3, #9
 8007144:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800714a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800714c:	2301      	movs	r3, #1
 800714e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007150:	2302      	movs	r3, #2
 8007152:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007154:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007158:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800715a:	2204      	movs	r2, #4
 800715c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800715e:	22b4      	movs	r2, #180	; 0xb4
 8007160:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007162:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007164:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007166:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007168:	a807      	add	r0, sp, #28
 800716a:	f004 f94b 	bl	800b404 <HAL_RCC_OscConfig>
 800716e:	b9e0      	cbnz	r0, 80071aa <SystemClock_Config+0xae>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007170:	f003 fb60 	bl	800a834 <HAL_PWREx_EnableOverDrive>
 8007174:	b9d8      	cbnz	r0, 80071ae <SystemClock_Config+0xb2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007176:	230f      	movs	r3, #15
 8007178:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800717a:	2302      	movs	r3, #2
 800717c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800717e:	2300      	movs	r3, #0
 8007180:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007182:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007186:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800718c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800718e:	2105      	movs	r1, #5
 8007190:	a802      	add	r0, sp, #8
 8007192:	f003 fbdb 	bl	800a94c <HAL_RCC_ClockConfig>
 8007196:	b960      	cbnz	r0, 80071b2 <SystemClock_Config+0xb6>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 8007198:	2200      	movs	r2, #0
 800719a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800719e:	2001      	movs	r0, #1
 80071a0:	f003 fb86 	bl	800a8b0 <HAL_RCC_MCOConfig>
}
 80071a4:	b015      	add	sp, #84	; 0x54
 80071a6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80071aa:	f7ff fe11 	bl	8006dd0 <Error_Handler>
    Error_Handler();
 80071ae:	f7ff fe0f 	bl	8006dd0 <Error_Handler>
    Error_Handler();
 80071b2:	f7ff fe0d 	bl	8006dd0 <Error_Handler>
 80071b6:	bf00      	nop
 80071b8:	40023800 	.word	0x40023800
 80071bc:	40007000 	.word	0x40007000

080071c0 <PeriphCommonClock_Config>:
{
 80071c0:	b500      	push	{lr}
 80071c2:	b099      	sub	sp, #100	; 0x64
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071c4:	225c      	movs	r2, #92	; 0x5c
 80071c6:	2100      	movs	r1, #0
 80071c8:	a801      	add	r0, sp, #4
 80071ca:	f005 fbd9 	bl	800c980 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80071ce:	2304      	movs	r3, #4
 80071d0:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 80071d2:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 98;
 80071d4:	2362      	movs	r3, #98	; 0x62
 80071d6:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80071d8:	2302      	movs	r3, #2
 80071da:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80071dc:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071e2:	a801      	add	r0, sp, #4
 80071e4:	f003 fc88 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 80071e8:	b910      	cbnz	r0, 80071f0 <PeriphCommonClock_Config+0x30>
}
 80071ea:	b019      	add	sp, #100	; 0x64
 80071ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80071f0:	f7ff fdee 	bl	8006dd0 <Error_Handler>

080071f4 <main>:
{
 80071f4:	b510      	push	{r4, lr}
  HAL_Init();
 80071f6:	f000 fe7b 	bl	8007ef0 <HAL_Init>
  SystemClock_Config();
 80071fa:	f7ff ff7f 	bl	80070fc <SystemClock_Config>
  PeriphCommonClock_Config();
 80071fe:	f7ff ffdf 	bl	80071c0 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8007202:	f7ff fb63 	bl	80068cc <MX_GPIO_Init>
  MX_DMA_Init();
 8007206:	f7ff fbed 	bl	80069e4 <MX_DMA_Init>
  MX_ADC1_Init();
 800720a:	f7ff fde3 	bl	8006dd4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800720e:	f7ff fe17 	bl	8006e40 <MX_ADC2_Init>
  MX_CAN1_Init();
 8007212:	f7ff fe4b 	bl	8006eac <MX_CAN1_Init>
  MX_I2C1_Init();
 8007216:	f7ff fe69 	bl	8006eec <MX_I2C1_Init>
  MX_I2C3_Init();
 800721a:	f7ff fe83 	bl	8006f24 <MX_I2C3_Init>
  MX_SPI2_Init();
 800721e:	f7ff fe9f 	bl	8006f60 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8007222:	f7ff febd 	bl	8006fa0 <MX_USART2_UART_Init>
  MX_SAI1_Init();
 8007226:	f7ff fed5 	bl	8006fd4 <MX_SAI1_Init>
  MX_TIM14_Init();
 800722a:	f7ff ff0f 	bl	800704c <MX_TIM14_Init>
  HAL_TIM_Base_Start_IT(&htim14);
 800722e:	483f      	ldr	r0, [pc, #252]	; (800732c <main+0x138>)
 8007230:	f004 febc 	bl	800bfac <HAL_TIM_Base_Start_IT>
  current_state = PROG_INITIALIZATION;
 8007234:	4b3e      	ldr	r3, [pc, #248]	; (8007330 <main+0x13c>)
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
     EchoHandlerInstance.tail_length=1024;
 800723a:	4c3e      	ldr	r4, [pc, #248]	; (8007334 <main+0x140>)
 800723c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007240:	8023      	strh	r3, [r4, #0]
     EchoHandlerInstance.preprocess_init = 1;
 8007242:	2301      	movs	r3, #1
 8007244:	6063      	str	r3, [r4, #4]
     EchoHandlerInstance.ptr_primary_channels=1;
 8007246:	8123      	strh	r3, [r4, #8]
     EchoHandlerInstance.ptr_reference_channels=1;
 8007248:	8163      	strh	r3, [r4, #10]
     EchoHandlerInstance.ptr_output_channels=1;
 800724a:	81a3      	strh	r3, [r4, #12]
     AcousticEC_getMemorySize(&EchoHandlerInstance);
 800724c:	4620      	mov	r0, r4
 800724e:	f7fa f8fb 	bl	8001448 <AcousticEC_getMemorySize>
     EchoHandlerInstance.pInternalMemory = (uint32_t *)malloc(EchoHandlerInstance.internal_memory_size);
 8007252:	6920      	ldr	r0, [r4, #16]
 8007254:	f005 fae0 	bl	800c818 <malloc>
 8007258:	6160      	str	r0, [r4, #20]
     if(EchoHandlerInstance.pInternalMemory == NULL)
 800725a:	b120      	cbz	r0, 8007266 <main+0x72>
     error_value = AcousticEC_Init((AcousticEC_Handler_t *)&EchoHandlerInstance);
 800725c:	4835      	ldr	r0, [pc, #212]	; (8007334 <main+0x140>)
 800725e:	f7fa f8e3 	bl	8001428 <AcousticEC_Init>
     if(error_value != 0)
 8007262:	b108      	cbz	r0, 8007268 <main+0x74>
       while(1);
 8007264:	e7fe      	b.n	8007264 <main+0x70>
       while(1);
 8007266:	e7fe      	b.n	8007266 <main+0x72>
     EchoConfigInstance.preprocess_state = ACOUSTIC_EC_PREPROCESS_ENABLE;
 8007268:	4933      	ldr	r1, [pc, #204]	; (8007338 <main+0x144>)
 800726a:	2301      	movs	r3, #1
 800726c:	600b      	str	r3, [r1, #0]
     EchoConfigInstance.AGC_value = 0;
 800726e:	2200      	movs	r2, #0
 8007270:	604a      	str	r2, [r1, #4]
     EchoConfigInstance.noise_suppress_default = -15; /* Default: -15 */
 8007272:	f06f 020e 	mvn.w	r2, #14
 8007276:	60ca      	str	r2, [r1, #12]
     EchoConfigInstance.echo_suppress_default = -40; /* Default: -40 */
 8007278:	f06f 0027 	mvn.w	r0, #39	; 0x27
 800727c:	6108      	str	r0, [r1, #16]
     EchoConfigInstance.echo_suppress_active = -15;  /* Default: -15 */
 800727e:	614a      	str	r2, [r1, #20]
     EchoConfigInstance.residual_echo_remove = 1;    /* Default: 1   */
 8007280:	608b      	str	r3, [r1, #8]
     error_value = AcousticEC_setConfig((AcousticEC_Handler_t *)&EchoHandlerInstance, (AcousticEC_Config_t *) &EchoConfigInstance);
 8007282:	482c      	ldr	r0, [pc, #176]	; (8007334 <main+0x140>)
 8007284:	f7fa f8dc 	bl	8001440 <AcousticEC_setConfig>
     if(error_value != 0)
 8007288:	b100      	cbz	r0, 800728c <main+0x98>
       while(1);
 800728a:	e7fe      	b.n	800728a <main+0x96>
     setI2CSlaveAddress();
 800728c:	f7ff fef8 	bl	8007080 <setI2CSlaveAddress>
     if (HAL_I2C_EnableListen_IT(&hi2c3) != HAL_OK)
 8007290:	482a      	ldr	r0, [pc, #168]	; (800733c <main+0x148>)
 8007292:	f002 fc79 	bl	8009b88 <HAL_I2C_EnableListen_IT>
 8007296:	b108      	cbz	r0, 800729c <main+0xa8>
    	  Error_Handler();
 8007298:	f7ff fd9a 	bl	8006dd0 <Error_Handler>
     HAL_Delay(1000);
 800729c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072a0:	f000 fe52 	bl	8007f48 <HAL_Delay>
     HAL_SAI_Transmit_DMA(&hsai_BlockB1, outbuff, 64);
 80072a4:	2240      	movs	r2, #64	; 0x40
 80072a6:	4926      	ldr	r1, [pc, #152]	; (8007340 <main+0x14c>)
 80072a8:	4826      	ldr	r0, [pc, #152]	; (8007344 <main+0x150>)
 80072aa:	f004 fc99 	bl	800bbe0 <HAL_SAI_Transmit_DMA>
     HAL_SAI_Receive_DMA(&hsai_BlockA1, &inbuff, 64);
 80072ae:	2240      	movs	r2, #64	; 0x40
 80072b0:	4925      	ldr	r1, [pc, #148]	; (8007348 <main+0x154>)
 80072b2:	4826      	ldr	r0, [pc, #152]	; (800734c <main+0x158>)
 80072b4:	f004 fd18 	bl	800bce8 <HAL_SAI_Receive_DMA>
     generate_sine_wave();
 80072b8:	f7ff fbb6 	bl	8006a28 <generate_sine_wave>
     generate_sine_wave2();
 80072bc:	f7ff fbe4 	bl	8006a88 <generate_sine_wave2>
     ret = writePotiFromNvs(&digitpoti);
 80072c0:	4823      	ldr	r0, [pc, #140]	; (8007350 <main+0x15c>)
 80072c2:	f000 fcc1 	bl	8007c48 <writePotiFromNvs>
 80072c6:	4a23      	ldr	r2, [pc, #140]	; (8007354 <main+0x160>)
 80072c8:	7010      	strb	r0, [r2, #0]
     if(ret == HAL_ERROR)
 80072ca:	2801      	cmp	r0, #1
 80072cc:	d010      	beq.n	80072f0 <main+0xfc>
     reset_devices();
 80072ce:	f7ff fab1 	bl	8006834 <reset_devices>
     sendValToPoti(&digitpoti, &hi2c1);
 80072d2:	4921      	ldr	r1, [pc, #132]	; (8007358 <main+0x164>)
 80072d4:	481e      	ldr	r0, [pc, #120]	; (8007350 <main+0x15c>)
 80072d6:	f000 fce7 	bl	8007ca8 <sendValToPoti>
     HAL_Delay(1000);
 80072da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072de:	f000 fe33 	bl	8007f48 <HAL_Delay>
     if(ret == HAL_OK)
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <main+0x160>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b98b      	cbnz	r3, 800730c <main+0x118>
    	current_state = PROG_NORMAL_OPERATION;
 80072e8:	4b11      	ldr	r3, [pc, #68]	; (8007330 <main+0x13c>)
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e00d      	b.n	800730c <main+0x118>
    	 current_state = PROG_ERROR;
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <main+0x13c>)
 80072f2:	2202      	movs	r2, #2
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	e7ea      	b.n	80072ce <main+0xda>
		  writePotiToNvs(&digitpoti);
 80072f8:	4815      	ldr	r0, [pc, #84]	; (8007350 <main+0x15c>)
 80072fa:	f000 fcc3 	bl	8007c84 <writePotiToNvs>
		  savepotiflag = 0;
 80072fe:	4b17      	ldr	r3, [pc, #92]	; (800735c <main+0x168>)
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	e006      	b.n	8007314 <main+0x120>
	  HAL_IWDG_Refresh(&hiwdg);
 8007306:	4816      	ldr	r0, [pc, #88]	; (8007360 <main+0x16c>)
 8007308:	f003 fa8e 	bl	800a828 <HAL_IWDG_Refresh>
	  if(savepotiflag == 1)
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <main+0x168>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d0f1      	beq.n	80072f8 <main+0x104>
	  if(shouldProcess == true)
 8007314:	4b13      	ldr	r3, [pc, #76]	; (8007364 <main+0x170>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f4      	beq.n	8007306 <main+0x112>
	  		  AcousticEC_Process((AcousticEC_Handler_t *)&EchoHandlerInstance);
 800731c:	4805      	ldr	r0, [pc, #20]	; (8007334 <main+0x140>)
 800731e:	f7fa f88b 	bl	8001438 <AcousticEC_Process>
	  		  shouldProcess = false;
 8007322:	4b10      	ldr	r3, [pc, #64]	; (8007364 <main+0x170>)
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	e7ed      	b.n	8007306 <main+0x112>
 800732a:	bf00      	nop
 800732c:	20000680 	.word	0x20000680
 8007330:	200009a0 	.word	0x200009a0
 8007334:	200000fc 	.word	0x200000fc
 8007338:	200000e4 	.word	0x200000e4
 800733c:	200004b8 	.word	0x200004b8
 8007340:	20000890 	.word	0x20000890
 8007344:	200005a0 	.word	0x200005a0
 8007348:	20000790 	.word	0x20000790
 800734c:	20000518 	.word	0x20000518
 8007350:	200002a8 	.word	0x200002a8
 8007354:	20000990 	.word	0x20000990
 8007358:	20000464 	.word	0x20000464
 800735c:	20000991 	.word	0x20000991
 8007360:	2000050c 	.word	0x2000050c
 8007364:	20000992 	.word	0x20000992

08007368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007368:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800736a:	2100      	movs	r1, #0
 800736c:	9100      	str	r1, [sp, #0]
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <HAL_MspInit+0x34>)
 8007370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007376:	645a      	str	r2, [r3, #68]	; 0x44
 8007378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800737a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800737e:	9200      	str	r2, [sp, #0]
 8007380:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007382:	9101      	str	r1, [sp, #4]
 8007384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007386:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800738a:	641a      	str	r2, [r3, #64]	; 0x40
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007396:	b002      	add	sp, #8
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40023800 	.word	0x40023800

080073a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80073a0:	b500      	push	{lr}
 80073a2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a4:	2300      	movs	r3, #0
 80073a6:	9305      	str	r3, [sp, #20]
 80073a8:	9306      	str	r3, [sp, #24]
 80073aa:	9307      	str	r3, [sp, #28]
 80073ac:	9308      	str	r3, [sp, #32]
 80073ae:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80073b0:	6803      	ldr	r3, [r0, #0]
 80073b2:	4a23      	ldr	r2, [pc, #140]	; (8007440 <HAL_ADC_MspInit+0xa0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d005      	beq.n	80073c4 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80073b8:	4a22      	ldr	r2, [pc, #136]	; (8007444 <HAL_ADC_MspInit+0xa4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d021      	beq.n	8007402 <HAL_ADC_MspInit+0x62>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80073be:	b00b      	add	sp, #44	; 0x2c
 80073c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80073c4:	2100      	movs	r1, #0
 80073c6:	9101      	str	r1, [sp, #4]
 80073c8:	4b1f      	ldr	r3, [pc, #124]	; (8007448 <HAL_ADC_MspInit+0xa8>)
 80073ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
 80073d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073d4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80073d8:	9201      	str	r2, [sp, #4]
 80073da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073dc:	9102      	str	r1, [sp, #8]
 80073de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e0:	f042 0201 	orr.w	r2, r2, #1
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	9302      	str	r3, [sp, #8]
 80073ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80073f0:	2302      	movs	r3, #2
 80073f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073f4:	2303      	movs	r3, #3
 80073f6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073f8:	a905      	add	r1, sp, #20
 80073fa:	4814      	ldr	r0, [pc, #80]	; (800744c <HAL_ADC_MspInit+0xac>)
 80073fc:	f001 fc80 	bl	8008d00 <HAL_GPIO_Init>
 8007400:	e7dd      	b.n	80073be <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007402:	2100      	movs	r1, #0
 8007404:	9103      	str	r1, [sp, #12]
 8007406:	4b10      	ldr	r3, [pc, #64]	; (8007448 <HAL_ADC_MspInit+0xa8>)
 8007408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800740e:	645a      	str	r2, [r3, #68]	; 0x44
 8007410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007412:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007416:	9203      	str	r2, [sp, #12]
 8007418:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800741a:	9104      	str	r1, [sp, #16]
 800741c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800742e:	2310      	movs	r3, #16
 8007430:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007432:	2303      	movs	r3, #3
 8007434:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007436:	a905      	add	r1, sp, #20
 8007438:	4804      	ldr	r0, [pc, #16]	; (800744c <HAL_ADC_MspInit+0xac>)
 800743a:	f001 fc61 	bl	8008d00 <HAL_GPIO_Init>
}
 800743e:	e7be      	b.n	80073be <HAL_ADC_MspInit+0x1e>
 8007440:	40012000 	.word	0x40012000
 8007444:	40012100 	.word	0x40012100
 8007448:	40023800 	.word	0x40023800
 800744c:	40020000 	.word	0x40020000

08007450 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007450:	b500      	push	{lr}
 8007452:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007454:	2300      	movs	r3, #0
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	9306      	str	r3, [sp, #24]
 800745e:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 8007460:	6802      	ldr	r2, [r0, #0]
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <HAL_CAN_MspInit+0x68>)
 8007464:	429a      	cmp	r2, r3
 8007466:	d002      	beq.n	800746e <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007468:	b009      	add	sp, #36	; 0x24
 800746a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800746e:	2100      	movs	r1, #0
 8007470:	9101      	str	r1, [sp, #4]
 8007472:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8007476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007478:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800747c:	641a      	str	r2, [r3, #64]	; 0x40
 800747e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007480:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007488:	9102      	str	r1, [sp, #8]
 800748a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800748c:	f042 0201 	orr.w	r2, r2, #1
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	9302      	str	r3, [sp, #8]
 800749a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800749c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80074a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a2:	2302      	movs	r3, #2
 80074a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a6:	2303      	movs	r3, #3
 80074a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80074aa:	2309      	movs	r3, #9
 80074ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ae:	a903      	add	r1, sp, #12
 80074b0:	4802      	ldr	r0, [pc, #8]	; (80074bc <HAL_CAN_MspInit+0x6c>)
 80074b2:	f001 fc25 	bl	8008d00 <HAL_GPIO_Init>
}
 80074b6:	e7d7      	b.n	8007468 <HAL_CAN_MspInit+0x18>
 80074b8:	40006400 	.word	0x40006400
 80074bc:	40020000 	.word	0x40020000

080074c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c6:	2300      	movs	r3, #0
 80074c8:	9305      	str	r3, [sp, #20]
 80074ca:	9306      	str	r3, [sp, #24]
 80074cc:	9307      	str	r3, [sp, #28]
 80074ce:	9308      	str	r3, [sp, #32]
 80074d0:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 80074d2:	6803      	ldr	r3, [r0, #0]
 80074d4:	4a3b      	ldr	r2, [pc, #236]	; (80075c4 <HAL_I2C_MspInit+0x104>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d005      	beq.n	80074e6 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 80074da:	4a3b      	ldr	r2, [pc, #236]	; (80075c8 <HAL_I2C_MspInit+0x108>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d025      	beq.n	800752c <HAL_I2C_MspInit+0x6c>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80074e0:	b00a      	add	sp, #40	; 0x28
 80074e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074e6:	2500      	movs	r5, #0
 80074e8:	9500      	str	r5, [sp, #0]
 80074ea:	4c38      	ldr	r4, [pc, #224]	; (80075cc <HAL_I2C_MspInit+0x10c>)
 80074ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074ee:	f043 0302 	orr.w	r3, r3, #2
 80074f2:	6323      	str	r3, [r4, #48]	; 0x30
 80074f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = DIGIPOT_SCL_Pin|DIGIPOT_SDA_Pin;
 80074fe:	23c0      	movs	r3, #192	; 0xc0
 8007500:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007502:	2312      	movs	r3, #18
 8007504:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007506:	2303      	movs	r3, #3
 8007508:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800750a:	2304      	movs	r3, #4
 800750c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800750e:	a905      	add	r1, sp, #20
 8007510:	482f      	ldr	r0, [pc, #188]	; (80075d0 <HAL_I2C_MspInit+0x110>)
 8007512:	f001 fbf5 	bl	8008d00 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007516:	9501      	str	r5, [sp, #4]
 8007518:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800751a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800751e:	6423      	str	r3, [r4, #64]	; 0x40
 8007520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	9b01      	ldr	r3, [sp, #4]
 800752a:	e7d9      	b.n	80074e0 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800752c:	2500      	movs	r5, #0
 800752e:	9502      	str	r5, [sp, #8]
 8007530:	4c26      	ldr	r4, [pc, #152]	; (80075cc <HAL_I2C_MspInit+0x10c>)
 8007532:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	6323      	str	r3, [r4, #48]	; 0x30
 800753a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	9302      	str	r3, [sp, #8]
 8007542:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007544:	9503      	str	r5, [sp, #12]
 8007546:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007548:	f043 0302 	orr.w	r3, r3, #2
 800754c:	6323      	str	r3, [r4, #48]	; 0x30
 800754e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	9303      	str	r3, [sp, #12]
 8007556:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800755c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800755e:	f04f 0812 	mov.w	r8, #18
 8007562:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007566:	2703      	movs	r7, #3
 8007568:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800756a:	2604      	movs	r6, #4
 800756c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800756e:	a905      	add	r1, sp, #20
 8007570:	4818      	ldr	r0, [pc, #96]	; (80075d4 <HAL_I2C_MspInit+0x114>)
 8007572:	f001 fbc5 	bl	8008d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007576:	2310      	movs	r3, #16
 8007578:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800757a:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007580:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007582:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007584:	a905      	add	r1, sp, #20
 8007586:	4812      	ldr	r0, [pc, #72]	; (80075d0 <HAL_I2C_MspInit+0x110>)
 8007588:	f001 fbba 	bl	8008d00 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800758c:	9504      	str	r5, [sp, #16]
 800758e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007594:	6423      	str	r3, [r4, #64]	; 0x40
 8007596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80075a0:	462a      	mov	r2, r5
 80075a2:	4629      	mov	r1, r5
 80075a4:	2048      	movs	r0, #72	; 0x48
 80075a6:	f000 ff37 	bl	8008418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80075aa:	2048      	movs	r0, #72	; 0x48
 80075ac:	f000 ff6c 	bl	8008488 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80075b0:	462a      	mov	r2, r5
 80075b2:	4629      	mov	r1, r5
 80075b4:	2049      	movs	r0, #73	; 0x49
 80075b6:	f000 ff2f 	bl	8008418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80075ba:	2049      	movs	r0, #73	; 0x49
 80075bc:	f000 ff64 	bl	8008488 <HAL_NVIC_EnableIRQ>
}
 80075c0:	e78e      	b.n	80074e0 <HAL_I2C_MspInit+0x20>
 80075c2:	bf00      	nop
 80075c4:	40005400 	.word	0x40005400
 80075c8:	40005c00 	.word	0x40005c00
 80075cc:	40023800 	.word	0x40023800
 80075d0:	40020400 	.word	0x40020400
 80075d4:	40020000 	.word	0x40020000

080075d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80075d8:	b510      	push	{r4, lr}
  if(hi2c->Instance==I2C1)
 80075da:	6803      	ldr	r3, [r0, #0]
 80075dc:	4a16      	ldr	r2, [pc, #88]	; (8007638 <HAL_I2C_MspDeInit+0x60>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <HAL_I2C_MspDeInit+0x12>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 80075e2:	4a16      	ldr	r2, [pc, #88]	; (800763c <HAL_I2C_MspDeInit+0x64>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d010      	beq.n	800760a <HAL_I2C_MspDeInit+0x32>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80075e8:	bd10      	pop	{r4, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 80075ea:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
 80075ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80075f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075f4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(DIGIPOT_SCL_GPIO_Port, DIGIPOT_SCL_Pin);
 80075f6:	4c12      	ldr	r4, [pc, #72]	; (8007640 <HAL_I2C_MspDeInit+0x68>)
 80075f8:	2140      	movs	r1, #64	; 0x40
 80075fa:	4620      	mov	r0, r4
 80075fc:	f001 fc70 	bl	8008ee0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DIGIPOT_SDA_GPIO_Port, DIGIPOT_SDA_Pin);
 8007600:	2180      	movs	r1, #128	; 0x80
 8007602:	4620      	mov	r0, r4
 8007604:	f001 fc6c 	bl	8008ee0 <HAL_GPIO_DeInit>
 8007608:	e7ee      	b.n	80075e8 <HAL_I2C_MspDeInit+0x10>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800760a:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
 800760e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007610:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007614:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800761a:	480a      	ldr	r0, [pc, #40]	; (8007644 <HAL_I2C_MspDeInit+0x6c>)
 800761c:	f001 fc60 	bl	8008ee0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8007620:	2110      	movs	r1, #16
 8007622:	4807      	ldr	r0, [pc, #28]	; (8007640 <HAL_I2C_MspDeInit+0x68>)
 8007624:	f001 fc5c 	bl	8008ee0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8007628:	2048      	movs	r0, #72	; 0x48
 800762a:	f000 ff3b 	bl	80084a4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800762e:	2049      	movs	r0, #73	; 0x49
 8007630:	f000 ff38 	bl	80084a4 <HAL_NVIC_DisableIRQ>
}
 8007634:	e7d8      	b.n	80075e8 <HAL_I2C_MspDeInit+0x10>
 8007636:	bf00      	nop
 8007638:	40005400 	.word	0x40005400
 800763c:	40005c00 	.word	0x40005c00
 8007640:	40020400 	.word	0x40020400
 8007644:	40020000 	.word	0x40020000

08007648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800764c:	2300      	movs	r3, #0
 800764e:	9303      	str	r3, [sp, #12]
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	9306      	str	r3, [sp, #24]
 8007656:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8007658:	6802      	ldr	r2, [r0, #0]
 800765a:	4b1f      	ldr	r3, [pc, #124]	; (80076d8 <HAL_SPI_MspInit+0x90>)
 800765c:	429a      	cmp	r2, r3
 800765e:	d001      	beq.n	8007664 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007660:	b009      	add	sp, #36	; 0x24
 8007662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007664:	2400      	movs	r4, #0
 8007666:	9400      	str	r4, [sp, #0]
 8007668:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800766c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800766e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007672:	641a      	str	r2, [r3, #64]	; 0x40
 8007674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007676:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800767a:	9200      	str	r2, [sp, #0]
 800767c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800767e:	9401      	str	r4, [sp, #4]
 8007680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007682:	f042 0204 	orr.w	r2, r2, #4
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
 8007688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768a:	f002 0204 	and.w	r2, r2, #4
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007692:	9402      	str	r4, [sp, #8]
 8007694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007696:	f042 0202 	orr.w	r2, r2, #2
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80076a6:	230c      	movs	r3, #12
 80076a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076aa:	2702      	movs	r7, #2
 80076ac:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076ae:	2603      	movs	r6, #3
 80076b0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80076b2:	2505      	movs	r5, #5
 80076b4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076b6:	eb0d 0103 	add.w	r1, sp, r3
 80076ba:	4808      	ldr	r0, [pc, #32]	; (80076dc <HAL_SPI_MspInit+0x94>)
 80076bc:	f001 fb20 	bl	8008d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80076c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076ca:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80076cc:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ce:	a903      	add	r1, sp, #12
 80076d0:	4803      	ldr	r0, [pc, #12]	; (80076e0 <HAL_SPI_MspInit+0x98>)
 80076d2:	f001 fb15 	bl	8008d00 <HAL_GPIO_Init>
}
 80076d6:	e7c3      	b.n	8007660 <HAL_SPI_MspInit+0x18>
 80076d8:	40003800 	.word	0x40003800
 80076dc:	40020800 	.word	0x40020800
 80076e0:	40020400 	.word	0x40020400

080076e4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM14)
 80076e4:	6802      	ldr	r2, [r0, #0]
 80076e6:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <HAL_TIM_Base_MspInit+0x3c>)
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d000      	beq.n	80076ee <HAL_TIM_Base_MspInit+0xa>
 80076ec:	4770      	bx	lr
{
 80076ee:	b500      	push	{lr}
 80076f0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80076f2:	2100      	movs	r1, #0
 80076f4:	9101      	str	r1, [sp, #4]
 80076f6:	f503 3306 	add.w	r3, r3, #137216	; 0x21800
 80076fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007700:	641a      	str	r2, [r3, #64]	; 0x40
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	9b01      	ldr	r3, [sp, #4]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800770c:	460a      	mov	r2, r1
 800770e:	202d      	movs	r0, #45	; 0x2d
 8007710:	f000 fe82 	bl	8008418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8007714:	202d      	movs	r0, #45	; 0x2d
 8007716:	f000 feb7 	bl	8008488 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800771a:	b003      	add	sp, #12
 800771c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007720:	40002000 	.word	0x40002000

08007724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007724:	b500      	push	{lr}
 8007726:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007728:	2300      	movs	r3, #0
 800772a:	9303      	str	r3, [sp, #12]
 800772c:	9304      	str	r3, [sp, #16]
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	9306      	str	r3, [sp, #24]
 8007732:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8007734:	6802      	ldr	r2, [r0, #0]
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <HAL_UART_MspInit+0x68>)
 8007738:	429a      	cmp	r2, r3
 800773a:	d002      	beq.n	8007742 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800773c:	b009      	add	sp, #36	; 0x24
 800773e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8007742:	2100      	movs	r1, #0
 8007744:	9101      	str	r1, [sp, #4]
 8007746:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800774a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800774c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
 8007752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007754:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007758:	9201      	str	r2, [sp, #4]
 800775a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800775c:	9102      	str	r1, [sp, #8]
 800775e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007760:	f042 0201 	orr.w	r2, r2, #1
 8007764:	631a      	str	r2, [r3, #48]	; 0x30
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	9302      	str	r3, [sp, #8]
 800776e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007770:	230c      	movs	r3, #12
 8007772:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007774:	2302      	movs	r3, #2
 8007776:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007778:	2303      	movs	r3, #3
 800777a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800777c:	2307      	movs	r3, #7
 800777e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007780:	a903      	add	r1, sp, #12
 8007782:	4803      	ldr	r0, [pc, #12]	; (8007790 <HAL_UART_MspInit+0x6c>)
 8007784:	f001 fabc 	bl	8008d00 <HAL_GPIO_Init>
}
 8007788:	e7d8      	b.n	800773c <HAL_UART_MspInit+0x18>
 800778a:	bf00      	nop
 800778c:	40004400 	.word	0x40004400
 8007790:	40020000 	.word	0x40020000

08007794 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8007794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007796:	b089      	sub	sp, #36	; 0x24
 8007798:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800779a:	6802      	ldr	r2, [r0, #0]
 800779c:	4b4e      	ldr	r3, [pc, #312]	; (80078d8 <HAL_SAI_MspInit+0x144>)
 800779e:	429a      	cmp	r2, r3
 80077a0:	d005      	beq.n	80077ae <HAL_SAI_MspInit+0x1a>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);

    }
    if(hsai->Instance==SAI1_Block_B)
 80077a2:	6822      	ldr	r2, [r4, #0]
 80077a4:	4b4d      	ldr	r3, [pc, #308]	; (80078dc <HAL_SAI_MspInit+0x148>)
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d03e      	beq.n	8007828 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 80077aa:	b009      	add	sp, #36	; 0x24
 80077ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 80077ae:	4b4c      	ldr	r3, [pc, #304]	; (80078e0 <HAL_SAI_MspInit+0x14c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	b95b      	cbnz	r3, 80077cc <HAL_SAI_MspInit+0x38>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80077b4:	2200      	movs	r2, #0
 80077b6:	9201      	str	r2, [sp, #4]
 80077b8:	4a4a      	ldr	r2, [pc, #296]	; (80078e4 <HAL_SAI_MspInit+0x150>)
 80077ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80077bc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80077c0:	6451      	str	r1, [r2, #68]	; 0x44
 80077c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80077c4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80077c8:	9201      	str	r2, [sp, #4]
 80077ca:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 80077cc:	3301      	adds	r3, #1
 80077ce:	4a44      	ldr	r2, [pc, #272]	; (80078e0 <HAL_SAI_MspInit+0x14c>)
 80077d0:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80077d2:	2302      	movs	r3, #2
 80077d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d8:	2500      	movs	r5, #0
 80077da:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077dc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80077de:	2306      	movs	r3, #6
 80077e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077e2:	a903      	add	r1, sp, #12
 80077e4:	4840      	ldr	r0, [pc, #256]	; (80078e8 <HAL_SAI_MspInit+0x154>)
 80077e6:	f001 fa8b 	bl	8008d00 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA2_Stream1;
 80077ea:	4840      	ldr	r0, [pc, #256]	; (80078ec <HAL_SAI_MspInit+0x158>)
 80077ec:	4b40      	ldr	r3, [pc, #256]	; (80078f0 <HAL_SAI_MspInit+0x15c>)
 80077ee:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80077f0:	6045      	str	r5, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077f2:	6085      	str	r5, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80077f4:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80077f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077fa:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80077fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007800:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007806:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8007808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800780c:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800780e:	6205      	str	r5, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007810:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8007812:	f000 feed 	bl	80085f0 <HAL_DMA_Init>
 8007816:	b920      	cbnz	r0, 8007822 <HAL_SAI_MspInit+0x8e>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8007818:	4b34      	ldr	r3, [pc, #208]	; (80078ec <HAL_SAI_MspInit+0x158>)
 800781a:	6763      	str	r3, [r4, #116]	; 0x74
 800781c:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800781e:	6723      	str	r3, [r4, #112]	; 0x70
 8007820:	e7bf      	b.n	80077a2 <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8007822:	f7ff fad5 	bl	8006dd0 <Error_Handler>
 8007826:	e7f7      	b.n	8007818 <HAL_SAI_MspInit+0x84>
      if (SAI1_client == 0)
 8007828:	4b2d      	ldr	r3, [pc, #180]	; (80078e0 <HAL_SAI_MspInit+0x14c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	b95b      	cbnz	r3, 8007846 <HAL_SAI_MspInit+0xb2>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800782e:	2200      	movs	r2, #0
 8007830:	9202      	str	r2, [sp, #8]
 8007832:	4a2c      	ldr	r2, [pc, #176]	; (80078e4 <HAL_SAI_MspInit+0x150>)
 8007834:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007836:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800783a:	6451      	str	r1, [r2, #68]	; 0x44
 800783c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800783e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8007842:	9202      	str	r2, [sp, #8]
 8007844:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 8007846:	3301      	adds	r3, #1
 8007848:	4a25      	ldr	r2, [pc, #148]	; (80078e0 <HAL_SAI_MspInit+0x14c>)
 800784a:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800784c:	2301      	movs	r3, #1
 800784e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007850:	2702      	movs	r7, #2
 8007852:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007854:	2500      	movs	r5, #0
 8007856:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007858:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800785a:	2606      	movs	r6, #6
 800785c:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800785e:	a903      	add	r1, sp, #12
 8007860:	4821      	ldr	r0, [pc, #132]	; (80078e8 <HAL_SAI_MspInit+0x154>)
 8007862:	f001 fa4d 	bl	8008d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8007866:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800786a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800786c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007870:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007872:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007874:	a903      	add	r1, sp, #12
 8007876:	481f      	ldr	r0, [pc, #124]	; (80078f4 <HAL_SAI_MspInit+0x160>)
 8007878:	f001 fa42 	bl	8008d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800787c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007880:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007882:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007884:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007886:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007888:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800788a:	a903      	add	r1, sp, #12
 800788c:	481a      	ldr	r0, [pc, #104]	; (80078f8 <HAL_SAI_MspInit+0x164>)
 800788e:	f001 fa37 	bl	8008d00 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA2_Stream4;
 8007892:	481a      	ldr	r0, [pc, #104]	; (80078fc <HAL_SAI_MspInit+0x168>)
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <HAL_SAI_MspInit+0x16c>)
 8007896:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8007898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800789c:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800789e:	2340      	movs	r3, #64	; 0x40
 80078a0:	6083      	str	r3, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80078a2:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80078a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a8:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80078aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078ae:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80078b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078b4:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80078b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ba:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 80078bc:	6205      	str	r5, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80078be:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80078c0:	f000 fe96 	bl	80085f0 <HAL_DMA_Init>
 80078c4:	b920      	cbnz	r0, 80078d0 <HAL_SAI_MspInit+0x13c>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80078c6:	4b0d      	ldr	r3, [pc, #52]	; (80078fc <HAL_SAI_MspInit+0x168>)
 80078c8:	6763      	str	r3, [r4, #116]	; 0x74
 80078ca:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80078cc:	6723      	str	r3, [r4, #112]	; 0x70
}
 80078ce:	e76c      	b.n	80077aa <HAL_SAI_MspInit+0x16>
      Error_Handler();
 80078d0:	f7ff fa7e 	bl	8006dd0 <Error_Handler>
 80078d4:	e7f7      	b.n	80078c6 <HAL_SAI_MspInit+0x132>
 80078d6:	bf00      	nop
 80078d8:	40015804 	.word	0x40015804
 80078dc:	40015824 	.word	0x40015824
 80078e0:	20000994 	.word	0x20000994
 80078e4:	40023800 	.word	0x40023800
 80078e8:	40020800 	.word	0x40020800
 80078ec:	200003a4 	.word	0x200003a4
 80078f0:	40026428 	.word	0x40026428
 80078f4:	40020400 	.word	0x40020400
 80078f8:	40020000 	.word	0x40020000
 80078fc:	20000404 	.word	0x20000404
 8007900:	40026470 	.word	0x40026470

08007904 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007904:	e7fe      	b.n	8007904 <NMI_Handler>

08007906 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007906:	e7fe      	b.n	8007906 <HardFault_Handler>

08007908 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007908:	e7fe      	b.n	8007908 <MemManage_Handler>

0800790a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800790a:	e7fe      	b.n	800790a <BusFault_Handler>

0800790c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800790c:	e7fe      	b.n	800790c <UsageFault_Handler>

0800790e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800790e:	4770      	bx	lr

08007910 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007910:	4770      	bx	lr

08007912 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007912:	4770      	bx	lr

08007914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007916:	f000 fb05 	bl	8007f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800791a:	bd08      	pop	{r3, pc}

0800791c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800791c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800791e:	4802      	ldr	r0, [pc, #8]	; (8007928 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 8007920:	f004 fb8c 	bl	800c03c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8007924:	bd08      	pop	{r3, pc}
 8007926:	bf00      	nop
 8007928:	20000680 	.word	0x20000680

0800792c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800792c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800792e:	4802      	ldr	r0, [pc, #8]	; (8007938 <DMA2_Stream1_IRQHandler+0xc>)
 8007930:	f000 ff0c 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007934:	bd08      	pop	{r3, pc}
 8007936:	bf00      	nop
 8007938:	200003a4 	.word	0x200003a4

0800793c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800793c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800793e:	4802      	ldr	r0, [pc, #8]	; (8007948 <DMA2_Stream4_IRQHandler+0xc>)
 8007940:	f000 ff04 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8007944:	bd08      	pop	{r3, pc}
 8007946:	bf00      	nop
 8007948:	20000404 	.word	0x20000404

0800794c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800794c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800794e:	4802      	ldr	r0, [pc, #8]	; (8007958 <I2C3_EV_IRQHandler+0xc>)
 8007950:	f002 fe3a 	bl	800a5c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8007954:	bd08      	pop	{r3, pc}
 8007956:	bf00      	nop
 8007958:	200004b8 	.word	0x200004b8

0800795c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800795c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800795e:	4802      	ldr	r0, [pc, #8]	; (8007968 <I2C3_ER_IRQHandler+0xc>)
 8007960:	f002 ff02 	bl	800a768 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8007964:	bd08      	pop	{r3, pc}
 8007966:	bf00      	nop
 8007968:	200004b8 	.word	0x200004b8

0800796c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800796c:	b510      	push	{r4, lr}
 800796e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007970:	4a0c      	ldr	r2, [pc, #48]	; (80079a4 <_sbrk+0x38>)
 8007972:	490d      	ldr	r1, [pc, #52]	; (80079a8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007974:	480d      	ldr	r0, [pc, #52]	; (80079ac <_sbrk+0x40>)
 8007976:	6800      	ldr	r0, [r0, #0]
 8007978:	b140      	cbz	r0, 800798c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800797a:	480c      	ldr	r0, [pc, #48]	; (80079ac <_sbrk+0x40>)
 800797c:	6800      	ldr	r0, [r0, #0]
 800797e:	4403      	add	r3, r0
 8007980:	1a52      	subs	r2, r2, r1
 8007982:	4293      	cmp	r3, r2
 8007984:	d806      	bhi.n	8007994 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <_sbrk+0x40>)
 8007988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800798a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800798c:	4807      	ldr	r0, [pc, #28]	; (80079ac <_sbrk+0x40>)
 800798e:	4c08      	ldr	r4, [pc, #32]	; (80079b0 <_sbrk+0x44>)
 8007990:	6004      	str	r4, [r0, #0]
 8007992:	e7f2      	b.n	800797a <_sbrk+0xe>
    errno = ENOMEM;
 8007994:	f005 f80c 	bl	800c9b0 <__errno>
 8007998:	230c      	movs	r3, #12
 800799a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	e7f3      	b.n	800798a <_sbrk+0x1e>
 80079a2:	bf00      	nop
 80079a4:	20020000 	.word	0x20020000
 80079a8:	00000400 	.word	0x00000400
 80079ac:	20000998 	.word	0x20000998
 80079b0:	20000b40 	.word	0x20000b40

080079b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80079b4:	4a03      	ldr	r2, [pc, #12]	; (80079c4 <SystemInit+0x10>)
 80079b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80079ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80079c2:	4770      	bx	lr
 80079c4:	e000ed00 	.word	0xe000ed00

080079c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80079c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80079cc:	f7ff fff2 	bl	80079b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80079d0:	480c      	ldr	r0, [pc, #48]	; (8007a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80079d2:	490d      	ldr	r1, [pc, #52]	; (8007a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80079d4:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80079d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80079d8:	e002      	b.n	80079e0 <LoopCopyDataInit>

080079da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80079da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079de:	3304      	adds	r3, #4

080079e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079e4:	d3f9      	bcc.n	80079da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079e6:	4a0a      	ldr	r2, [pc, #40]	; (8007a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80079e8:	4c0a      	ldr	r4, [pc, #40]	; (8007a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80079ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079ec:	e001      	b.n	80079f2 <LoopFillZerobss>

080079ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079f0:	3204      	adds	r2, #4

080079f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079f4:	d3fb      	bcc.n	80079ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80079f6:	f004 ffe1 	bl	800c9bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80079fa:	f7ff fbfb 	bl	80071f4 <main>
  bx  lr    
 80079fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a08:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8007a0c:	0800fad8 	.word	0x0800fad8
  ldr r2, =_sbss
 8007a10:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8007a14:	20000b3c 	.word	0x20000b3c

08007a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a18:	e7fe      	b.n	8007a18 <ADC_IRQHandler>
	...

08007a1c <HAL_TIM_PeriodElapsedCallback>:
volatile uint16_t potiSaveTimer = 0;
extern uint8_t savepotiflag;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8007a1c:	b508      	push	{r3, lr}

	if(potiSaveTimer > 0)
 8007a1e:	4b34      	ldr	r3, [pc, #208]	; (8007af0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	b15b      	cbz	r3, 8007a3e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		potiSaveTimer--;
 8007a26:	4a32      	ldr	r2, [pc, #200]	; (8007af0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8007a28:	8813      	ldrh	r3, [r2, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	8013      	strh	r3, [r2, #0]
		if(potiSaveTimer == 0)
 8007a32:	8813      	ldrh	r3, [r2, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	b913      	cbnz	r3, 8007a3e <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			savepotiflag = 1;
 8007a38:	4b2e      	ldr	r3, [pc, #184]	; (8007af4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	701a      	strb	r2, [r3, #0]
		}
	}
	 static int counter = 0;
	        counter++;
 8007a3e:	4a2e      	ldr	r2, [pc, #184]	; (8007af8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007a40:	6813      	ldr	r3, [r2, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	6013      	str	r3, [r2, #0]
	        switch (current_state) {
 8007a46:	4a2d      	ldr	r2, [pc, #180]	; (8007afc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8007a48:	7812      	ldrb	r2, [r2, #0]
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	2a03      	cmp	r2, #3
 8007a4e:	d841      	bhi.n	8007ad4 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8007a50:	e8df f002 	tbb	[pc, r2]
 8007a54:	32201102 	.word	0x32201102
	                    case PROG_INITIALIZATION:
	                        // Blink LED slowly
	                        if (counter % 4 == 0) {
 8007a58:	f013 0f03 	tst.w	r3, #3
 8007a5c:	d105      	bne.n	8007a6a <HAL_TIM_PeriodElapsedCallback+0x4e>
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET); // LED on
 8007a5e:	2201      	movs	r2, #1
 8007a60:	2120      	movs	r1, #32
 8007a62:	4827      	ldr	r0, [pc, #156]	; (8007b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007a64:	f001 fad7 	bl	8009016 <HAL_GPIO_WritePin>
 8007a68:	e034      	b.n	8007ad4 <HAL_TIM_PeriodElapsedCallback+0xb8>
	                        } else {
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET); // LED off
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2120      	movs	r1, #32
 8007a6e:	4824      	ldr	r0, [pc, #144]	; (8007b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007a70:	f001 fad1 	bl	8009016 <HAL_GPIO_WritePin>
 8007a74:	e02e      	b.n	8007ad4 <HAL_TIM_PeriodElapsedCallback+0xb8>
	                        }
	                        break;
	                    case PROG_NORMAL_OPERATION:
	                        // Blink LED quickly
	                        if (counter % 2 == 0) {
 8007a76:	f013 0f01 	tst.w	r3, #1
 8007a7a:	d105      	bne.n	8007a88 <HAL_TIM_PeriodElapsedCallback+0x6c>
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET); // LED on
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	2120      	movs	r1, #32
 8007a80:	481f      	ldr	r0, [pc, #124]	; (8007b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007a82:	f001 fac8 	bl	8009016 <HAL_GPIO_WritePin>
 8007a86:	e025      	b.n	8007ad4 <HAL_TIM_PeriodElapsedCallback+0xb8>
	                        } else  {
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET); // LED off
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2120      	movs	r1, #32
 8007a8c:	481c      	ldr	r0, [pc, #112]	; (8007b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007a8e:	f001 fac2 	bl	8009016 <HAL_GPIO_WritePin>
 8007a92:	e01f      	b.n	8007ad4 <HAL_TIM_PeriodElapsedCallback+0xb8>
	                        }
	                        break;
	                    case PROG_ERROR:
	                        // Blink LED twice quickly, then pause
	                        if ( (counter >= 1 && counter <= 3) || (counter >= 6 && counter <= 8)) {
 8007a94:	1e5a      	subs	r2, r3, #1
 8007a96:	2a02      	cmp	r2, #2
 8007a98:	d902      	bls.n	8007aa0 <HAL_TIM_PeriodElapsedCallback+0x84>
 8007a9a:	3b06      	subs	r3, #6
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d805      	bhi.n	8007aac <HAL_TIM_PeriodElapsedCallback+0x90>
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET); // LED on
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	2120      	movs	r1, #32
 8007aa4:	4816      	ldr	r0, [pc, #88]	; (8007b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007aa6:	f001 fab6 	bl	8009016 <HAL_GPIO_WritePin>
 8007aaa:	e013      	b.n	8007ad4 <HAL_TIM_PeriodElapsedCallback+0xb8>
	                        } else {
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET); // LED off
 8007aac:	2200      	movs	r2, #0
 8007aae:	2120      	movs	r1, #32
 8007ab0:	4813      	ldr	r0, [pc, #76]	; (8007b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007ab2:	f001 fab0 	bl	8009016 <HAL_GPIO_WritePin>
 8007ab6:	e00d      	b.n	8007ad4 <HAL_TIM_PeriodElapsedCallback+0xb8>
	                        }
	                        break;
	                    case PROG_DEBUG:
	                        // Blink LED three times quickly, then pause
	                        if ( ((counter == 3)||(counter == 4))||((counter == 7)||(counter == 8))||((counter == 11)||(counter == 12)) ) {
 8007ab8:	1eda      	subs	r2, r3, #3
 8007aba:	2a01      	cmp	r2, #1
 8007abc:	d905      	bls.n	8007aca <HAL_TIM_PeriodElapsedCallback+0xae>
 8007abe:	1fda      	subs	r2, r3, #7
 8007ac0:	2a01      	cmp	r2, #1
 8007ac2:	d902      	bls.n	8007aca <HAL_TIM_PeriodElapsedCallback+0xae>
 8007ac4:	3b0b      	subs	r3, #11
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d80c      	bhi.n	8007ae4 <HAL_TIM_PeriodElapsedCallback+0xc8>
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET); // LED on
 8007aca:	2201      	movs	r2, #1
 8007acc:	2120      	movs	r1, #32
 8007ace:	480c      	ldr	r0, [pc, #48]	; (8007b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007ad0:	f001 faa1 	bl	8009016 <HAL_GPIO_WritePin>
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET); // LED off
	                        }
	                        break;
	                }

        if (counter >= 20) {
 8007ad4:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b13      	cmp	r3, #19
 8007ada:	dd02      	ble.n	8007ae2 <HAL_TIM_PeriodElapsedCallback+0xc6>
            counter = 0;
 8007adc:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
        }
}
 8007ae2:	bd08      	pop	{r3, pc}
	                            HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET); // LED off
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2120      	movs	r1, #32
 8007ae8:	4805      	ldr	r0, [pc, #20]	; (8007b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007aea:	f001 fa94 	bl	8009016 <HAL_GPIO_WritePin>
 8007aee:	e7f1      	b.n	8007ad4 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8007af0:	200009a2 	.word	0x200009a2
 8007af4:	20000991 	.word	0x20000991
 8007af8:	2000099c 	.word	0x2000099c
 8007afc:	200009a0 	.word	0x200009a0
 8007b00:	40020000 	.word	0x40020000

08007b04 <writePoti0>:
	102,114,128,144,162,181,
    203,228,256
};
static void writePoti0(uint8_t *outbuff, uint16_t val)
{
	outbuff[0] |=  (val>>8)&0x01;
 8007b04:	f3c1 2200 	ubfx	r2, r1, #8, #1
 8007b08:	7803      	ldrb	r3, [r0, #0]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	7003      	strb	r3, [r0, #0]
	outbuff[1] = val&0xff;
 8007b0e:	7041      	strb	r1, [r0, #1]
};
 8007b10:	4770      	bx	lr

08007b12 <writePoti1>:
static void writePoti1(uint8_t *outbuff, uint16_t val)
{
	outbuff[2] = 0x10;
 8007b12:	2310      	movs	r3, #16
 8007b14:	7083      	strb	r3, [r0, #2]
	outbuff[2] |=  (val>>8)&0x01;
 8007b16:	f3c1 2300 	ubfx	r3, r1, #8, #1
 8007b1a:	f043 0310 	orr.w	r3, r3, #16
 8007b1e:	7083      	strb	r3, [r0, #2]
	outbuff[3] = val&0xff;
 8007b20:	70c1      	strb	r1, [r0, #3]
};
 8007b22:	4770      	bx	lr

08007b24 <writePoti2>:
static void writePoti2(uint8_t *outbuff, uint16_t val)
{
	outbuff[4] = 0x60;
 8007b24:	2360      	movs	r3, #96	; 0x60
 8007b26:	7103      	strb	r3, [r0, #4]
	outbuff[4] |=  (val>>8)&0x01;
 8007b28:	f3c1 2300 	ubfx	r3, r1, #8, #1
 8007b2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b30:	7103      	strb	r3, [r0, #4]
	outbuff[5] = val&0xff;
 8007b32:	7141      	strb	r1, [r0, #5]
};
 8007b34:	4770      	bx	lr

08007b36 <writePoti3>:
{
	if(val == 0)
	{

	}
	outbuff[6] = 0x70;
 8007b36:	2370      	movs	r3, #112	; 0x70
 8007b38:	7183      	strb	r3, [r0, #6]
	outbuff[6] |=  (val>>8)&0x01;
 8007b3a:	f3c1 2300 	ubfx	r3, r1, #8, #1
 8007b3e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007b42:	7183      	strb	r3, [r0, #6]
	outbuff[7] = val&0xff;
 8007b44:	71c1      	strb	r1, [r0, #7]
};
 8007b46:	4770      	bx	lr

08007b48 <checkPotirange>:
	HAL_I2C_Master_Transmit(i2chandle, 0x58, data, 2,200);
}
static HAL_StatusTypeDef checkPotirange(void* vals)
{
	uint32_t* array = (uint32_t*)vals; // Cast void pointer to uint32_t pointer
	for(uint8_t i = 0;i<4;i++)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d806      	bhi.n	8007b5c <checkPotirange+0x14>
	{
		if(array[i] > 100)
 8007b4e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8007b52:	2a64      	cmp	r2, #100	; 0x64
 8007b54:	d804      	bhi.n	8007b60 <checkPotirange+0x18>
	for(uint8_t i = 0;i<4;i++)
 8007b56:	3301      	adds	r3, #1
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e7f6      	b.n	8007b4a <checkPotirange+0x2>
		{
			return HAL_ERROR;
		}
	}
	return HAL_OK;
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	4770      	bx	lr
			return HAL_ERROR;
 8007b60:	2001      	movs	r0, #1
}
 8007b62:	4770      	bx	lr

08007b64 <write_poti_settings>:
{
 8007b64:	b510      	push	{r4, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	f89d 4018 	ldrb.w	r4, [sp, #24]
	data[1] = 0xff;//default state
 8007b6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007b70:	f88d c00d 	strb.w	ip, [sp, #13]
	switch (poti) {
 8007b74:	2903      	cmp	r1, #3
 8007b76:	d818      	bhi.n	8007baa <write_poti_settings+0x46>
 8007b78:	e8df f001 	tbb	[pc, r1]
 8007b7c:	4e372002 	.word	0x4e372002
			data[0] = 0x41;//TCON0
 8007b80:	2141      	movs	r1, #65	; 0x41
 8007b82:	f88d 100c 	strb.w	r1, [sp, #12]
			if(TermAConnected)
 8007b86:	b112      	cbz	r2, 8007b8e <write_poti_settings+0x2a>
					data[1] &= ~(1<<2);
 8007b88:	22fb      	movs	r2, #251	; 0xfb
 8007b8a:	f88d 200d 	strb.w	r2, [sp, #13]
			if(TermBConnected)
 8007b8e:	b12b      	cbz	r3, 8007b9c <write_poti_settings+0x38>
					data[1] &= ~(1<<0);
 8007b90:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	f88d 300d 	strb.w	r3, [sp, #13]
			if(TermWConnected)
 8007b9c:	b12c      	cbz	r4, 8007baa <write_poti_settings+0x46>
					data[1] &= ~(1<<1);
 8007b9e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007ba2:	f023 0302 	bic.w	r3, r3, #2
 8007ba6:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(i2chandle, 0x58, data, 2,200);
 8007baa:	23c8      	movs	r3, #200	; 0xc8
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	2302      	movs	r3, #2
 8007bb0:	aa03      	add	r2, sp, #12
 8007bb2:	2158      	movs	r1, #88	; 0x58
 8007bb4:	f001 fe9c 	bl	80098f0 <HAL_I2C_Master_Transmit>
}
 8007bb8:	b004      	add	sp, #16
 8007bba:	bd10      	pop	{r4, pc}
			data[0] = 0x41;//TCON0
 8007bbc:	2141      	movs	r1, #65	; 0x41
 8007bbe:	f88d 100c 	strb.w	r1, [sp, #12]
			if(TermAConnected)
 8007bc2:	b112      	cbz	r2, 8007bca <write_poti_settings+0x66>
					data[1] &= ~(1<<6);
 8007bc4:	22bf      	movs	r2, #191	; 0xbf
 8007bc6:	f88d 200d 	strb.w	r2, [sp, #13]
			if(TermBConnected)
 8007bca:	b12b      	cbz	r3, 8007bd8 <write_poti_settings+0x74>
					data[1] &= ~(1<<4);
 8007bcc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007bd0:	f023 0310 	bic.w	r3, r3, #16
 8007bd4:	f88d 300d 	strb.w	r3, [sp, #13]
			if(TermWConnected)
 8007bd8:	2c00      	cmp	r4, #0
 8007bda:	d0e6      	beq.n	8007baa <write_poti_settings+0x46>
					data[1] &= ~(1<<5);
 8007bdc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007be0:	f023 0320 	bic.w	r3, r3, #32
 8007be4:	f88d 300d 	strb.w	r3, [sp, #13]
 8007be8:	e7df      	b.n	8007baa <write_poti_settings+0x46>
			data[0] = 0xa1;//TCON1
 8007bea:	21a1      	movs	r1, #161	; 0xa1
 8007bec:	f88d 100c 	strb.w	r1, [sp, #12]
			if(TermAConnected)
 8007bf0:	b112      	cbz	r2, 8007bf8 <write_poti_settings+0x94>
					data[1] &= ~(1<<2);
 8007bf2:	22fb      	movs	r2, #251	; 0xfb
 8007bf4:	f88d 200d 	strb.w	r2, [sp, #13]
			if(TermBConnected)
 8007bf8:	b12b      	cbz	r3, 8007c06 <write_poti_settings+0xa2>
					data[1] &= ~(1<<0);
 8007bfa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	f88d 300d 	strb.w	r3, [sp, #13]
			if(TermWConnected)
 8007c06:	2c00      	cmp	r4, #0
 8007c08:	d0cf      	beq.n	8007baa <write_poti_settings+0x46>
					data[1] &= ~(1<<1);
 8007c0a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007c0e:	f023 0302 	bic.w	r3, r3, #2
 8007c12:	f88d 300d 	strb.w	r3, [sp, #13]
 8007c16:	e7c8      	b.n	8007baa <write_poti_settings+0x46>
			data[0] = 0xa1;//TCON1
 8007c18:	21a1      	movs	r1, #161	; 0xa1
 8007c1a:	f88d 100c 	strb.w	r1, [sp, #12]
			if(!TermAConnected)
 8007c1e:	b912      	cbnz	r2, 8007c26 <write_poti_settings+0xc2>
					data[1] &= ~(1<<6);
 8007c20:	22bf      	movs	r2, #191	; 0xbf
 8007c22:	f88d 200d 	strb.w	r2, [sp, #13]
			if(!TermBConnected)
 8007c26:	b92b      	cbnz	r3, 8007c34 <write_poti_settings+0xd0>
					data[1] &= ~(1<<4);
 8007c28:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007c2c:	f023 0310 	bic.w	r3, r3, #16
 8007c30:	f88d 300d 	strb.w	r3, [sp, #13]
			if(!TermWConnected)
 8007c34:	2c00      	cmp	r4, #0
 8007c36:	d1b8      	bne.n	8007baa <write_poti_settings+0x46>
					data[1] &= ~(1<<5);
 8007c38:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007c3c:	f023 0320 	bic.w	r3, r3, #32
 8007c40:	f88d 300d 	strb.w	r3, [sp, #13]
 8007c44:	e7b1      	b.n	8007baa <write_poti_settings+0x46>
	...

08007c48 <writePotiFromNvs>:
//this loads the poti struct with the appropiate values from flash,does not write it to the pots themselves
HAL_StatusTypeDef writePotiFromNvs( DigitPot *poti)
{
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4604      	mov	r4, r0
	static uint32_t potivals[4];
	HAL_StatusTypeDef err = HAL_OK;

	read_from_flash(potivals, 4);
 8007c4c:	4d0c      	ldr	r5, [pc, #48]	; (8007c80 <writePotiFromNvs+0x38>)
 8007c4e:	2104      	movs	r1, #4
 8007c50:	4628      	mov	r0, r5
 8007c52:	f7f9 f989 	bl	8000f68 <read_from_flash>
	err = checkPotirange((uint32_t*)potivals);
 8007c56:	4628      	mov	r0, r5
 8007c58:	f7ff ff76 	bl	8007b48 <checkPotirange>
	if(err == HAL_OK)
 8007c5c:	b940      	cbnz	r0, 8007c70 <writePotiFromNvs+0x28>
		{
			poti->micVal = (uint8_t)potivals[0];
 8007c5e:	782a      	ldrb	r2, [r5, #0]
 8007c60:	7022      	strb	r2, [r4, #0]
			poti->refVal = (uint8_t)potivals[1];
 8007c62:	792a      	ldrb	r2, [r5, #4]
 8007c64:	7062      	strb	r2, [r4, #1]
			poti->outVal = (uint8_t)potivals[2];
 8007c66:	7a2a      	ldrb	r2, [r5, #8]
 8007c68:	70a2      	strb	r2, [r4, #2]
			poti->bypVal = (uint8_t)potivals[3];
 8007c6a:	7b2b      	ldrb	r3, [r5, #12]
 8007c6c:	70e3      	strb	r3, [r4, #3]
		poti->refVal = 0;
		poti->outVal = 0;
		poti->bypVal = 100;
	}
	return err;
}
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
		poti->micVal = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	7023      	strb	r3, [r4, #0]
		poti->refVal = 0;
 8007c74:	7063      	strb	r3, [r4, #1]
		poti->outVal = 0;
 8007c76:	70a3      	strb	r3, [r4, #2]
		poti->bypVal = 100;
 8007c78:	2364      	movs	r3, #100	; 0x64
 8007c7a:	70e3      	strb	r3, [r4, #3]
 8007c7c:	e7f7      	b.n	8007c6e <writePotiFromNvs+0x26>
 8007c7e:	bf00      	nop
 8007c80:	200009a4 	.word	0x200009a4

08007c84 <writePotiToNvs>:
//saves the poti values to the nvs
HAL_StatusTypeDef writePotiToNvs( DigitPot *poti)
{
 8007c84:	b508      	push	{r3, lr}
 8007c86:	4603      	mov	r3, r0
	HAL_StatusTypeDef err = HAL_OK;
	potivals_toSave[0] = poti->micVal;
 8007c88:	7802      	ldrb	r2, [r0, #0]
 8007c8a:	4806      	ldr	r0, [pc, #24]	; (8007ca4 <writePotiToNvs+0x20>)
 8007c8c:	6002      	str	r2, [r0, #0]
	potivals_toSave[1] = poti->refVal;
 8007c8e:	785a      	ldrb	r2, [r3, #1]
 8007c90:	6042      	str	r2, [r0, #4]
	potivals_toSave[2] = poti->outVal;
 8007c92:	789a      	ldrb	r2, [r3, #2]
 8007c94:	6082      	str	r2, [r0, #8]
	potivals_toSave[3] = poti->bypVal;
 8007c96:	78db      	ldrb	r3, [r3, #3]
 8007c98:	60c3      	str	r3, [r0, #12]
	write_to_flash(potivals_toSave, 4);
 8007c9a:	2104      	movs	r1, #4
 8007c9c:	f7f9 f920 	bl	8000ee0 <write_to_flash>
	return err;
}
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	bd08      	pop	{r3, pc}
 8007ca4:	200009b4 	.word	0x200009b4

08007ca8 <sendValToPoti>:

void sendValToPoti ( DigitPot *poti, I2C_HandleTypeDef *i2chandle)
{
 8007ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007caa:	b083      	sub	sp, #12
 8007cac:	4605      	mov	r5, r0
 8007cae:	460f      	mov	r7, r1
	memset(data,0,sizeof(data));
 8007cb0:	4c37      	ldr	r4, [pc, #220]	; (8007d90 <sendValToPoti+0xe8>)
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	6063      	str	r3, [r4, #4]
	writePoti0(data, digipotiAttValues[ ( uint8_t )( ( float ) (poti->refVal) * ( 39.0/101.0 ) ) ]);
 8007cb8:	7840      	ldrb	r0, [r0, #1]
 8007cba:	b2c0      	uxtb	r0, r0
 8007cbc:	ee07 0a90 	vmov	s15, r0
 8007cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc4:	ee17 0a90 	vmov	r0, s15
 8007cc8:	f7f8 fc02 	bl	80004d0 <__aeabi_f2d>
 8007ccc:	a32e      	add	r3, pc, #184	; (adr r3, 8007d88 <sendValToPoti+0xe0>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 fc55 	bl	8000580 <__aeabi_dmul>
 8007cd6:	f7f8 ff15 	bl	8000b04 <__aeabi_d2uiz>
 8007cda:	b2c0      	uxtb	r0, r0
 8007cdc:	4e2d      	ldr	r6, [pc, #180]	; (8007d94 <sendValToPoti+0xec>)
 8007cde:	f836 1010 	ldrh.w	r1, [r6, r0, lsl #1]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7ff ff0e 	bl	8007b04 <writePoti0>
	writePoti1(data, digipotiAttValues[ ( uint8_t )( ( float ) (poti->micVal) * ( 39.0/101.0 ) ) ]);
 8007ce8:	7828      	ldrb	r0, [r5, #0]
 8007cea:	b2c0      	uxtb	r0, r0
 8007cec:	ee07 0a90 	vmov	s15, r0
 8007cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf4:	ee17 0a90 	vmov	r0, s15
 8007cf8:	f7f8 fbea 	bl	80004d0 <__aeabi_f2d>
 8007cfc:	a322      	add	r3, pc, #136	; (adr r3, 8007d88 <sendValToPoti+0xe0>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f7f8 fc3d 	bl	8000580 <__aeabi_dmul>
 8007d06:	f7f8 fefd 	bl	8000b04 <__aeabi_d2uiz>
 8007d0a:	b2c0      	uxtb	r0, r0
 8007d0c:	f836 1010 	ldrh.w	r1, [r6, r0, lsl #1]
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7ff fefe 	bl	8007b12 <writePoti1>
	writePoti2(data, digipotiAttValues[ ( uint8_t )( ( float ) (poti->outVal) * ( 39.0/101.0 ) ) ]);
 8007d16:	78a8      	ldrb	r0, [r5, #2]
 8007d18:	b2c0      	uxtb	r0, r0
 8007d1a:	ee07 0a90 	vmov	s15, r0
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	ee17 0a90 	vmov	r0, s15
 8007d26:	f7f8 fbd3 	bl	80004d0 <__aeabi_f2d>
 8007d2a:	a317      	add	r3, pc, #92	; (adr r3, 8007d88 <sendValToPoti+0xe0>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	f7f8 fc26 	bl	8000580 <__aeabi_dmul>
 8007d34:	f7f8 fee6 	bl	8000b04 <__aeabi_d2uiz>
 8007d38:	b2c0      	uxtb	r0, r0
 8007d3a:	f836 1010 	ldrh.w	r1, [r6, r0, lsl #1]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f7ff fef0 	bl	8007b24 <writePoti2>
	writePoti3(data, digipotiAttValues[ ( uint8_t )( ( float ) (poti->bypVal) * ( 39.0/101.0 ) ) ]);
 8007d44:	78e8      	ldrb	r0, [r5, #3]
 8007d46:	b2c0      	uxtb	r0, r0
 8007d48:	ee07 0a90 	vmov	s15, r0
 8007d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d50:	ee17 0a90 	vmov	r0, s15
 8007d54:	f7f8 fbbc 	bl	80004d0 <__aeabi_f2d>
 8007d58:	a30b      	add	r3, pc, #44	; (adr r3, 8007d88 <sendValToPoti+0xe0>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fc0f 	bl	8000580 <__aeabi_dmul>
 8007d62:	f7f8 fecf 	bl	8000b04 <__aeabi_d2uiz>
 8007d66:	b2c0      	uxtb	r0, r0
 8007d68:	f836 1010 	ldrh.w	r1, [r6, r0, lsl #1]
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f7ff fee2 	bl	8007b36 <writePoti3>


	HAL_I2C_Master_Transmit(i2chandle, 0x58, data, 8,200);
 8007d72:	23c8      	movs	r3, #200	; 0xc8
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	2308      	movs	r3, #8
 8007d78:	4622      	mov	r2, r4
 8007d7a:	2158      	movs	r1, #88	; 0x58
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f001 fdb7 	bl	80098f0 <HAL_I2C_Master_Transmit>

}
 8007d82:	b003      	add	sp, #12
 8007d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d86:	bf00      	nop
 8007d88:	bb9079aa 	.word	0xbb9079aa
 8007d8c:	3fd8b67e 	.word	0x3fd8b67e
 8007d90:	20000004 	.word	0x20000004
 8007d94:	2000000c 	.word	0x2000000c

08007d98 <HAL_I2C_ListenCpltCallback>:
extern volatile int16_t MicMaxVal;
extern volatile int16_t RefMaxVal;
extern volatile int16_t OutMaxVal;

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d98:	b508      	push	{r3, lr}
	HAL_I2C_EnableListen_IT(hi2c);
 8007d9a:	f001 fef5 	bl	8009b88 <HAL_I2C_EnableListen_IT>
}
 8007d9e:	bd08      	pop	{r3, pc}

08007da0 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007da0:	b508      	push	{r3, lr}
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8007da2:	2901      	cmp	r1, #1
 8007da4:	d024      	beq.n	8007df0 <HAL_I2C_AddrCallback+0x50>
		// receive using sequential function.
		// The I2C_FIRST_AND_LAST_FRAME implies that the slave will send a NACK after receiving "entered" num of bytes
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME);
		for(int i = 0;i<10;i++);
	}
	else if( TransferDirection == I2C_DIRECTION_RECEIVE )
 8007da6:	bb71      	cbnz	r1, 8007e06 <HAL_I2C_AddrCallback+0x66>
	{
		TxData[0] = MicMaxVal>>8;
 8007da8:	4a18      	ldr	r2, [pc, #96]	; (8007e0c <HAL_I2C_AddrCallback+0x6c>)
 8007daa:	8813      	ldrh	r3, [r2, #0]
 8007dac:	4918      	ldr	r1, [pc, #96]	; (8007e10 <HAL_I2C_AddrCallback+0x70>)
 8007dae:	f343 2307 	sbfx	r3, r3, #8, #8
 8007db2:	700b      	strb	r3, [r1, #0]
		TxData[1] = MicMaxVal & 0xff;
 8007db4:	8813      	ldrh	r3, [r2, #0]
 8007db6:	704b      	strb	r3, [r1, #1]
		TxData[2] = RefMaxVal>>8;
 8007db8:	4a16      	ldr	r2, [pc, #88]	; (8007e14 <HAL_I2C_AddrCallback+0x74>)
 8007dba:	8813      	ldrh	r3, [r2, #0]
 8007dbc:	f343 2307 	sbfx	r3, r3, #8, #8
 8007dc0:	708b      	strb	r3, [r1, #2]
		TxData[3] = RefMaxVal & 0xff;
 8007dc2:	8813      	ldrh	r3, [r2, #0]
 8007dc4:	70cb      	strb	r3, [r1, #3]
		TxData[4] = OutMaxVal>>8;
 8007dc6:	4a14      	ldr	r2, [pc, #80]	; (8007e18 <HAL_I2C_AddrCallback+0x78>)
 8007dc8:	8813      	ldrh	r3, [r2, #0]
 8007dca:	f343 2307 	sbfx	r3, r3, #8, #8
 8007dce:	710b      	strb	r3, [r1, #4]
		TxData[5] = OutMaxVal & 0xff;
 8007dd0:	8813      	ldrh	r3, [r2, #0]
 8007dd2:	714b      	strb	r3, [r1, #5]
		TxData[15] = digitpoti.bypVal;
 8007dd4:	4b11      	ldr	r3, [pc, #68]	; (8007e1c <HAL_I2C_AddrCallback+0x7c>)
 8007dd6:	78da      	ldrb	r2, [r3, #3]
 8007dd8:	73ca      	strb	r2, [r1, #15]
		TxData[14] = digitpoti.outVal;
 8007dda:	789a      	ldrb	r2, [r3, #2]
 8007ddc:	738a      	strb	r2, [r1, #14]
		TxData[13] = digitpoti.refVal;
 8007dde:	785a      	ldrb	r2, [r3, #1]
 8007de0:	734a      	strb	r2, [r1, #13]
		TxData[12] = digitpoti.micVal;
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	730b      	strb	r3, [r1, #12]

		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxData, 16, I2C_NEXT_FRAME);
 8007de6:	2304      	movs	r3, #4
 8007de8:	2210      	movs	r2, #16
 8007dea:	f001 fe3d 	bl	8009a68 <HAL_I2C_Slave_Seq_Transmit_IT>
	}
	else  // if the master requests the data from the slave
	{
		Error_Handler();  // call error handler
	}
}
 8007dee:	bd08      	pop	{r3, pc}
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME);
 8007df0:	2308      	movs	r3, #8
 8007df2:	220a      	movs	r2, #10
 8007df4:	490a      	ldr	r1, [pc, #40]	; (8007e20 <HAL_I2C_AddrCallback+0x80>)
 8007df6:	f001 fe7f 	bl	8009af8 <HAL_I2C_Slave_Seq_Receive_IT>
		for(int i = 0;i<10;i++);
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e000      	b.n	8007e00 <HAL_I2C_AddrCallback+0x60>
 8007dfe:	3301      	adds	r3, #1
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	ddfc      	ble.n	8007dfe <HAL_I2C_AddrCallback+0x5e>
 8007e04:	e7f3      	b.n	8007dee <HAL_I2C_AddrCallback+0x4e>
		Error_Handler();  // call error handler
 8007e06:	f7fe ffe3 	bl	8006dd0 <Error_Handler>
}
 8007e0a:	e7f0      	b.n	8007dee <HAL_I2C_AddrCallback+0x4e>
 8007e0c:	20000114 	.word	0x20000114
 8007e10:	20000060 	.word	0x20000060
 8007e14:	200001cc 	.word	0x200001cc
 8007e18:	20000170 	.word	0x20000170
 8007e1c:	200002a8 	.word	0x200002a8
 8007e20:	200009c4 	.word	0x200009c4

08007e24 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e24:	b510      	push	{r4, lr}
 8007e26:	b082      	sub	sp, #8
	digitpoti.micVal = RxData[0];
 8007e28:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8007e2a:	781a      	ldrb	r2, [r3, #0]
 8007e2c:	4c11      	ldr	r4, [pc, #68]	; (8007e74 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8007e2e:	7022      	strb	r2, [r4, #0]
	digitpoti.refVal = RxData[1];
 8007e30:	785a      	ldrb	r2, [r3, #1]
 8007e32:	7062      	strb	r2, [r4, #1]
	digitpoti.outVal = RxData[2];
 8007e34:	789a      	ldrb	r2, [r3, #2]
 8007e36:	70a2      	strb	r2, [r4, #2]
	digitpoti.bypVal = RxData[3];
 8007e38:	78db      	ldrb	r3, [r3, #3]
 8007e3a:	70e3      	strb	r3, [r4, #3]
	potiSaveTimer = POTI_SAVETIME;
 8007e3c:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8007e3e:	2232      	movs	r2, #50	; 0x32
 8007e40:	801a      	strh	r2, [r3, #0]

	sendValToPoti(&digitpoti, &hi2c1);
 8007e42:	490e      	ldr	r1, [pc, #56]	; (8007e7c <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8007e44:	4620      	mov	r0, r4
 8007e46:	f7ff ff2f 	bl	8007ca8 <sendValToPoti>
	if(digitpoti.bypVal == 0)
 8007e4a:	78e3      	ldrb	r3, [r4, #3]
 8007e4c:	b943      	cbnz	r3, 8007e60 <HAL_I2C_SlaveRxCpltCallback+0x3c>
	{
		write_poti_settings(&hi2c1, 3, false, true, true);
 8007e4e:	2301      	movs	r3, #1
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	2103      	movs	r1, #3
 8007e56:	4809      	ldr	r0, [pc, #36]	; (8007e7c <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8007e58:	f7ff fe84 	bl	8007b64 <write_poti_settings>
	}
	else
	{
		write_poti_settings(&hi2c1, 3, true, true, true);
	}
}
 8007e5c:	b002      	add	sp, #8
 8007e5e:	bd10      	pop	{r4, pc}
		write_poti_settings(&hi2c1, 3, true, true, true);
 8007e60:	2201      	movs	r2, #1
 8007e62:	9200      	str	r2, [sp, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	2103      	movs	r1, #3
 8007e68:	4804      	ldr	r0, [pc, #16]	; (8007e7c <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8007e6a:	f7ff fe7b 	bl	8007b64 <write_poti_settings>
}
 8007e6e:	e7f5      	b.n	8007e5c <HAL_I2C_SlaveRxCpltCallback+0x38>
 8007e70:	200009c4 	.word	0x200009c4
 8007e74:	200002a8 	.word	0x200002a8
 8007e78:	200009a2 	.word	0x200009a2
 8007e7c:	20000464 	.word	0x20000464

08007e80 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e80:	b510      	push	{r4, lr}
 8007e82:	4604      	mov	r4, r0
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8007e84:	f002 fcce 	bl	800a824 <HAL_I2C_GetError>
	/* BERR Error commonly occurs during the Direction switch
	 * Here we the software reset bit is set by the HAL error handler
	 * Before resetting this bit, we make sure the I2C lines are released and the bus is free
	 * I am simply reinitializing the I2C to do so
	 */
	if (errorcode == 1)  // BERR Error
 8007e88:	2801      	cmp	r0, #1
 8007e8a:	d003      	beq.n	8007e94 <HAL_I2C_ErrorCallback+0x14>
	{
		HAL_I2C_DeInit(hi2c);
		HAL_I2C_Init(hi2c);
	}
	HAL_I2C_EnableListen_IT(hi2c);
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f001 fe7b 	bl	8009b88 <HAL_I2C_EnableListen_IT>
}
 8007e92:	bd10      	pop	{r4, pc}
		HAL_I2C_DeInit(hi2c);
 8007e94:	4620      	mov	r0, r4
 8007e96:	f001 fd11 	bl	80098bc <HAL_I2C_DeInit>
		HAL_I2C_Init(hi2c);
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f001 fc30 	bl	8009700 <HAL_I2C_Init>
 8007ea0:	e7f4      	b.n	8007e8c <HAL_I2C_ErrorCallback+0xc>
	...

08007ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ea8:	4b0e      	ldr	r3, [pc, #56]	; (8007ee4 <HAL_InitTick+0x40>)
 8007eaa:	781a      	ldrb	r2, [r3, #0]
 8007eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb4:	4a0c      	ldr	r2, [pc, #48]	; (8007ee8 <HAL_InitTick+0x44>)
 8007eb6:	6810      	ldr	r0, [r2, #0]
 8007eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8007ebc:	f000 fb04 	bl	80084c8 <HAL_SYSTICK_Config>
 8007ec0:	b968      	cbnz	r0, 8007ede <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ec2:	2c0f      	cmp	r4, #15
 8007ec4:	d901      	bls.n	8007eca <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	e00a      	b.n	8007ee0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4621      	mov	r1, r4
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed2:	f000 faa1 	bl	8008418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ed6:	4b05      	ldr	r3, [pc, #20]	; (8007eec <HAL_InitTick+0x48>)
 8007ed8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007eda:	2000      	movs	r0, #0
 8007edc:	e000      	b.n	8007ee0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8007ede:	2001      	movs	r0, #1
}
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000070 	.word	0x20000070
 8007ee8:	20000000 	.word	0x20000000
 8007eec:	20000074 	.word	0x20000074

08007ef0 <HAL_Init>:
{
 8007ef0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <HAL_Init+0x30>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007efa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f0a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007f0c:	2003      	movs	r0, #3
 8007f0e:	f000 fa71 	bl	80083f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007f12:	200f      	movs	r0, #15
 8007f14:	f7ff ffc6 	bl	8007ea4 <HAL_InitTick>
  HAL_MspInit();
 8007f18:	f7ff fa26 	bl	8007368 <HAL_MspInit>
}
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	bd08      	pop	{r3, pc}
 8007f20:	40023c00 	.word	0x40023c00

08007f24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007f24:	4a03      	ldr	r2, [pc, #12]	; (8007f34 <HAL_IncTick+0x10>)
 8007f26:	6811      	ldr	r1, [r2, #0]
 8007f28:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <HAL_IncTick+0x14>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	440b      	add	r3, r1
 8007f2e:	6013      	str	r3, [r2, #0]
}
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	200009d0 	.word	0x200009d0
 8007f38:	20000070 	.word	0x20000070

08007f3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007f3c:	4b01      	ldr	r3, [pc, #4]	; (8007f44 <HAL_GetTick+0x8>)
 8007f3e:	6818      	ldr	r0, [r3, #0]
}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	200009d0 	.word	0x200009d0

08007f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007f4c:	f7ff fff6 	bl	8007f3c <HAL_GetTick>
 8007f50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007f52:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007f56:	d002      	beq.n	8007f5e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <HAL_Delay+0x24>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007f5e:	f7ff ffed 	bl	8007f3c <HAL_GetTick>
 8007f62:	1b40      	subs	r0, r0, r5
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d3fa      	bcc.n	8007f5e <HAL_Delay+0x16>
  {
  }
}
 8007f68:	bd38      	pop	{r3, r4, r5, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000070 	.word	0x20000070

08007f70 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007f70:	4b4a      	ldr	r3, [pc, #296]	; (800809c <ADC_Init+0x12c>)
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007f78:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	6841      	ldr	r1, [r0, #4]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f82:	6802      	ldr	r2, [r0, #0]
 8007f84:	6853      	ldr	r3, [r2, #4]
 8007f86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f8a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f8c:	6802      	ldr	r2, [r0, #0]
 8007f8e:	6853      	ldr	r3, [r2, #4]
 8007f90:	6901      	ldr	r1, [r0, #16]
 8007f92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007f96:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007f98:	6802      	ldr	r2, [r0, #0]
 8007f9a:	6853      	ldr	r3, [r2, #4]
 8007f9c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007fa0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007fa2:	6802      	ldr	r2, [r0, #0]
 8007fa4:	6853      	ldr	r3, [r2, #4]
 8007fa6:	6881      	ldr	r1, [r0, #8]
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007fac:	6802      	ldr	r2, [r0, #0]
 8007fae:	6893      	ldr	r3, [r2, #8]
 8007fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fb4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007fb6:	6802      	ldr	r2, [r0, #0]
 8007fb8:	6893      	ldr	r3, [r2, #8]
 8007fba:	68c1      	ldr	r1, [r0, #12]
 8007fbc:	430b      	orrs	r3, r1
 8007fbe:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007fc0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007fc2:	4b37      	ldr	r3, [pc, #220]	; (80080a0 <ADC_Init+0x130>)
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d057      	beq.n	8008078 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007fc8:	6802      	ldr	r2, [r0, #0]
 8007fca:	6893      	ldr	r3, [r2, #8]
 8007fcc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8007fd0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007fd2:	6802      	ldr	r2, [r0, #0]
 8007fd4:	6893      	ldr	r3, [r2, #8]
 8007fd6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007fdc:	6802      	ldr	r2, [r0, #0]
 8007fde:	6893      	ldr	r3, [r2, #8]
 8007fe0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007fe4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007fe6:	6802      	ldr	r2, [r0, #0]
 8007fe8:	6893      	ldr	r3, [r2, #8]
 8007fea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ff0:	6802      	ldr	r2, [r0, #0]
 8007ff2:	6893      	ldr	r3, [r2, #8]
 8007ff4:	f023 0302 	bic.w	r3, r3, #2
 8007ff8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007ffa:	6802      	ldr	r2, [r0, #0]
 8007ffc:	6893      	ldr	r3, [r2, #8]
 8007ffe:	7e01      	ldrb	r1, [r0, #24]
 8008000:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008004:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008006:	f890 3020 	ldrb.w	r3, [r0, #32]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d03f      	beq.n	800808e <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800800e:	6802      	ldr	r2, [r0, #0]
 8008010:	6853      	ldr	r3, [r2, #4]
 8008012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008016:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008018:	6802      	ldr	r2, [r0, #0]
 800801a:	6853      	ldr	r3, [r2, #4]
 800801c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008020:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008022:	6801      	ldr	r1, [r0, #0]
 8008024:	684b      	ldr	r3, [r1, #4]
 8008026:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008028:	3a01      	subs	r2, #1
 800802a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800802e:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008030:	6802      	ldr	r2, [r0, #0]
 8008032:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008034:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008038:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800803a:	6801      	ldr	r1, [r0, #0]
 800803c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800803e:	69c2      	ldr	r2, [r0, #28]
 8008040:	3a01      	subs	r2, #1
 8008042:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008046:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008048:	6802      	ldr	r2, [r0, #0]
 800804a:	6893      	ldr	r3, [r2, #8]
 800804c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008050:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008052:	6802      	ldr	r2, [r0, #0]
 8008054:	6893      	ldr	r3, [r2, #8]
 8008056:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800805a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800805e:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008060:	6802      	ldr	r2, [r0, #0]
 8008062:	6893      	ldr	r3, [r2, #8]
 8008064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008068:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800806a:	6802      	ldr	r2, [r0, #0]
 800806c:	6893      	ldr	r3, [r2, #8]
 800806e:	6941      	ldr	r1, [r0, #20]
 8008070:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8008074:	6093      	str	r3, [r2, #8]
}
 8008076:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008078:	6802      	ldr	r2, [r0, #0]
 800807a:	6893      	ldr	r3, [r2, #8]
 800807c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008080:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008082:	6802      	ldr	r2, [r0, #0]
 8008084:	6893      	ldr	r3, [r2, #8]
 8008086:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800808a:	6093      	str	r3, [r2, #8]
 800808c:	e7b0      	b.n	8007ff0 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800808e:	6802      	ldr	r2, [r0, #0]
 8008090:	6853      	ldr	r3, [r2, #4]
 8008092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008096:	6053      	str	r3, [r2, #4]
 8008098:	e7ca      	b.n	8008030 <ADC_Init+0xc0>
 800809a:	bf00      	nop
 800809c:	40012300 	.word	0x40012300
 80080a0:	0f000001 	.word	0x0f000001

080080a4 <HAL_ADC_Init>:
  if (hadc == NULL)
 80080a4:	b338      	cbz	r0, 80080f6 <HAL_ADC_Init+0x52>
{
 80080a6:	b510      	push	{r4, lr}
 80080a8:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80080aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80080ac:	b143      	cbz	r3, 80080c0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080b0:	f013 0f10 	tst.w	r3, #16
 80080b4:	d00b      	beq.n	80080ce <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80080b6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80080b8:	2300      	movs	r3, #0
 80080ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80080be:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80080c0:	f7ff f96e 	bl	80073a0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80080c4:	2300      	movs	r3, #0
 80080c6:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80080c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80080cc:	e7ef      	b.n	80080ae <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80080ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80080d4:	f023 0302 	bic.w	r3, r3, #2
 80080d8:	f043 0302 	orr.w	r3, r3, #2
 80080dc:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80080de:	4620      	mov	r0, r4
 80080e0:	f7ff ff46 	bl	8007f70 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80080e4:	2000      	movs	r0, #0
 80080e6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80080e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080ea:	f023 0303 	bic.w	r3, r3, #3
 80080ee:	f043 0301 	orr.w	r3, r3, #1
 80080f2:	6423      	str	r3, [r4, #64]	; 0x40
 80080f4:	e7e0      	b.n	80080b8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80080f6:	2001      	movs	r0, #1
}
 80080f8:	4770      	bx	lr
	...

080080fc <HAL_ADC_ConfigChannel>:
{
 80080fc:	b430      	push	{r4, r5}
 80080fe:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8008100:	2200      	movs	r2, #0
 8008102:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8008104:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8008108:	2a01      	cmp	r2, #1
 800810a:	f000 80c0 	beq.w	800828e <HAL_ADC_ConfigChannel+0x192>
 800810e:	4603      	mov	r3, r0
 8008110:	2201      	movs	r2, #1
 8008112:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008116:	680a      	ldr	r2, [r1, #0]
 8008118:	2a09      	cmp	r2, #9
 800811a:	d940      	bls.n	800819e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800811c:	6804      	ldr	r4, [r0, #0]
 800811e:	68e0      	ldr	r0, [r4, #12]
 8008120:	b292      	uxth	r2, r2
 8008122:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008126:	3a1e      	subs	r2, #30
 8008128:	f04f 0c07 	mov.w	ip, #7
 800812c:	fa0c f202 	lsl.w	r2, ip, r2
 8008130:	ea20 0202 	bic.w	r2, r0, r2
 8008134:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008136:	681c      	ldr	r4, [r3, #0]
 8008138:	68e0      	ldr	r0, [r4, #12]
 800813a:	880a      	ldrh	r2, [r1, #0]
 800813c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008140:	3a1e      	subs	r2, #30
 8008142:	688d      	ldr	r5, [r1, #8]
 8008144:	fa05 f202 	lsl.w	r2, r5, r2
 8008148:	4302      	orrs	r2, r0
 800814a:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 800814c:	684a      	ldr	r2, [r1, #4]
 800814e:	2a06      	cmp	r2, #6
 8008150:	d83c      	bhi.n	80081cc <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008152:	681c      	ldr	r4, [r3, #0]
 8008154:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008156:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800815a:	3a05      	subs	r2, #5
 800815c:	f04f 0c1f 	mov.w	ip, #31
 8008160:	fa0c f202 	lsl.w	r2, ip, r2
 8008164:	ea20 0202 	bic.w	r2, r0, r2
 8008168:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800816a:	681c      	ldr	r4, [r3, #0]
 800816c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800816e:	684a      	ldr	r2, [r1, #4]
 8008170:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008174:	3a05      	subs	r2, #5
 8008176:	f8b1 c000 	ldrh.w	ip, [r1]
 800817a:	fa0c f202 	lsl.w	r2, ip, r2
 800817e:	4302      	orrs	r2, r0
 8008180:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	4a43      	ldr	r2, [pc, #268]	; (8008294 <HAL_ADC_ConfigChannel+0x198>)
 8008186:	4290      	cmp	r0, r2
 8008188:	d050      	beq.n	800822c <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	4a41      	ldr	r2, [pc, #260]	; (8008294 <HAL_ADC_ConfigChannel+0x198>)
 800818e:	4290      	cmp	r0, r2
 8008190:	d059      	beq.n	8008246 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8008192:	2000      	movs	r0, #0
 8008194:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
}
 8008198:	b002      	add	sp, #8
 800819a:	bc30      	pop	{r4, r5}
 800819c:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800819e:	6804      	ldr	r4, [r0, #0]
 80081a0:	6920      	ldr	r0, [r4, #16]
 80081a2:	b292      	uxth	r2, r2
 80081a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80081a8:	f04f 0c07 	mov.w	ip, #7
 80081ac:	fa0c f202 	lsl.w	r2, ip, r2
 80081b0:	ea20 0202 	bic.w	r2, r0, r2
 80081b4:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80081b6:	681c      	ldr	r4, [r3, #0]
 80081b8:	6920      	ldr	r0, [r4, #16]
 80081ba:	880a      	ldrh	r2, [r1, #0]
 80081bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80081c0:	688d      	ldr	r5, [r1, #8]
 80081c2:	fa05 f202 	lsl.w	r2, r5, r2
 80081c6:	4302      	orrs	r2, r0
 80081c8:	6122      	str	r2, [r4, #16]
 80081ca:	e7bf      	b.n	800814c <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80081cc:	2a0c      	cmp	r2, #12
 80081ce:	d816      	bhi.n	80081fe <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80081d0:	681d      	ldr	r5, [r3, #0]
 80081d2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80081d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80081d8:	3a23      	subs	r2, #35	; 0x23
 80081da:	241f      	movs	r4, #31
 80081dc:	fa04 f202 	lsl.w	r2, r4, r2
 80081e0:	ea20 0202 	bic.w	r2, r0, r2
 80081e4:	632a      	str	r2, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80081e6:	681d      	ldr	r5, [r3, #0]
 80081e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80081ea:	684a      	ldr	r2, [r1, #4]
 80081ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80081f0:	3a23      	subs	r2, #35	; 0x23
 80081f2:	880c      	ldrh	r4, [r1, #0]
 80081f4:	fa04 f202 	lsl.w	r2, r4, r2
 80081f8:	4302      	orrs	r2, r0
 80081fa:	632a      	str	r2, [r5, #48]	; 0x30
 80081fc:	e7c1      	b.n	8008182 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80081fe:	681d      	ldr	r5, [r3, #0]
 8008200:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8008202:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008206:	3a41      	subs	r2, #65	; 0x41
 8008208:	241f      	movs	r4, #31
 800820a:	fa04 f202 	lsl.w	r2, r4, r2
 800820e:	ea20 0202 	bic.w	r2, r0, r2
 8008212:	62ea      	str	r2, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008214:	681d      	ldr	r5, [r3, #0]
 8008216:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8008218:	684a      	ldr	r2, [r1, #4]
 800821a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800821e:	3a41      	subs	r2, #65	; 0x41
 8008220:	880c      	ldrh	r4, [r1, #0]
 8008222:	fa04 f202 	lsl.w	r2, r4, r2
 8008226:	4302      	orrs	r2, r0
 8008228:	62ea      	str	r2, [r5, #44]	; 0x2c
 800822a:	e7aa      	b.n	8008182 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800822c:	680a      	ldr	r2, [r1, #0]
 800822e:	2a12      	cmp	r2, #18
 8008230:	d1ab      	bne.n	800818a <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008232:	4a19      	ldr	r2, [pc, #100]	; (8008298 <HAL_ADC_ConfigChannel+0x19c>)
 8008234:	6850      	ldr	r0, [r2, #4]
 8008236:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800823a:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800823c:	6850      	ldr	r0, [r2, #4]
 800823e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8008242:	6050      	str	r0, [r2, #4]
 8008244:	e7a1      	b.n	800818a <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008246:	680a      	ldr	r2, [r1, #0]
 8008248:	4814      	ldr	r0, [pc, #80]	; (800829c <HAL_ADC_ConfigChannel+0x1a0>)
 800824a:	4282      	cmp	r2, r0
 800824c:	d001      	beq.n	8008252 <HAL_ADC_ConfigChannel+0x156>
 800824e:	2a11      	cmp	r2, #17
 8008250:	d19f      	bne.n	8008192 <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008252:	4a11      	ldr	r2, [pc, #68]	; (8008298 <HAL_ADC_ConfigChannel+0x19c>)
 8008254:	6850      	ldr	r0, [r2, #4]
 8008256:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
 800825a:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800825c:	6850      	ldr	r0, [r2, #4]
 800825e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008262:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008264:	6809      	ldr	r1, [r1, #0]
 8008266:	4a0d      	ldr	r2, [pc, #52]	; (800829c <HAL_ADC_ConfigChannel+0x1a0>)
 8008268:	4291      	cmp	r1, r2
 800826a:	d192      	bne.n	8008192 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800826c:	4a0c      	ldr	r2, [pc, #48]	; (80082a0 <HAL_ADC_ConfigChannel+0x1a4>)
 800826e:	6812      	ldr	r2, [r2, #0]
 8008270:	490c      	ldr	r1, [pc, #48]	; (80082a4 <HAL_ADC_ConfigChannel+0x1a8>)
 8008272:	fba1 1202 	umull	r1, r2, r1, r2
 8008276:	0c92      	lsrs	r2, r2, #18
 8008278:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800827c:	0052      	lsls	r2, r2, #1
 800827e:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8008280:	9a01      	ldr	r2, [sp, #4]
 8008282:	2a00      	cmp	r2, #0
 8008284:	d085      	beq.n	8008192 <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8008286:	9a01      	ldr	r2, [sp, #4]
 8008288:	3a01      	subs	r2, #1
 800828a:	9201      	str	r2, [sp, #4]
 800828c:	e7f8      	b.n	8008280 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 800828e:	2002      	movs	r0, #2
 8008290:	e782      	b.n	8008198 <HAL_ADC_ConfigChannel+0x9c>
 8008292:	bf00      	nop
 8008294:	40012000 	.word	0x40012000
 8008298:	40012300 	.word	0x40012300
 800829c:	10000012 	.word	0x10000012
 80082a0:	20000000 	.word	0x20000000
 80082a4:	431bde83 	.word	0x431bde83

080082a8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80082a8:	2800      	cmp	r0, #0
 80082aa:	f000 80a1 	beq.w	80083f0 <HAL_CAN_Init+0x148>
{
 80082ae:	b538      	push	{r3, r4, r5, lr}
 80082b0:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80082b2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80082b6:	b1d3      	cbz	r3, 80082ee <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80082b8:	6822      	ldr	r2, [r4, #0]
 80082ba:	6813      	ldr	r3, [r2, #0]
 80082bc:	f043 0301 	orr.w	r3, r3, #1
 80082c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082c2:	f7ff fe3b 	bl	8007f3c <HAL_GetTick>
 80082c6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	f012 0f01 	tst.w	r2, #1
 80082d0:	d110      	bne.n	80082f4 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80082d2:	f7ff fe33 	bl	8007f3c <HAL_GetTick>
 80082d6:	1b40      	subs	r0, r0, r5
 80082d8:	280a      	cmp	r0, #10
 80082da:	d9f5      	bls.n	80082c8 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80082dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082e2:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80082e4:	2305      	movs	r3, #5
 80082e6:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80082ea:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80082ee:	f7ff f8af 	bl	8007450 <HAL_CAN_MspInit>
 80082f2:	e7e1      	b.n	80082b8 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	f022 0202 	bic.w	r2, r2, #2
 80082fa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80082fc:	f7ff fe1e 	bl	8007f3c <HAL_GetTick>
 8008300:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	f012 0f02 	tst.w	r2, #2
 800830a:	d00d      	beq.n	8008328 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800830c:	f7ff fe16 	bl	8007f3c <HAL_GetTick>
 8008310:	1b40      	subs	r0, r0, r5
 8008312:	280a      	cmp	r0, #10
 8008314:	d9f5      	bls.n	8008302 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800831e:	2305      	movs	r3, #5
 8008320:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8008324:	2001      	movs	r0, #1
 8008326:	e7e1      	b.n	80082ec <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008328:	7e22      	ldrb	r2, [r4, #24]
 800832a:	2a01      	cmp	r2, #1
 800832c:	d03d      	beq.n	80083aa <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008334:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8008336:	7e63      	ldrb	r3, [r4, #25]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d03b      	beq.n	80083b4 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800833c:	6822      	ldr	r2, [r4, #0]
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008344:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008346:	7ea3      	ldrb	r3, [r4, #26]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d039      	beq.n	80083c0 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	6813      	ldr	r3, [r2, #0]
 8008350:	f023 0320 	bic.w	r3, r3, #32
 8008354:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008356:	7ee3      	ldrb	r3, [r4, #27]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d037      	beq.n	80083cc <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	6813      	ldr	r3, [r2, #0]
 8008360:	f043 0310 	orr.w	r3, r3, #16
 8008364:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008366:	7f23      	ldrb	r3, [r4, #28]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d035      	beq.n	80083d8 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800836c:	6822      	ldr	r2, [r4, #0]
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	f023 0308 	bic.w	r3, r3, #8
 8008374:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008376:	7f63      	ldrb	r3, [r4, #29]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d033      	beq.n	80083e4 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	f023 0304 	bic.w	r3, r3, #4
 8008384:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008386:	68a3      	ldr	r3, [r4, #8]
 8008388:	68e2      	ldr	r2, [r4, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	6922      	ldr	r2, [r4, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	6962      	ldr	r2, [r4, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	6862      	ldr	r2, [r4, #4]
 8008396:	3a01      	subs	r2, #1
 8008398:	6821      	ldr	r1, [r4, #0]
 800839a:	4313      	orrs	r3, r2
 800839c:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800839e:	2000      	movs	r0, #0
 80083a0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80083a2:	2301      	movs	r3, #1
 80083a4:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80083a8:	e7a0      	b.n	80082ec <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	e7c0      	b.n	8008336 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	6813      	ldr	r3, [r2, #0]
 80083b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	e7c2      	b.n	8008346 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80083c0:	6822      	ldr	r2, [r4, #0]
 80083c2:	6813      	ldr	r3, [r2, #0]
 80083c4:	f043 0320 	orr.w	r3, r3, #32
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e7c4      	b.n	8008356 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80083cc:	6822      	ldr	r2, [r4, #0]
 80083ce:	6813      	ldr	r3, [r2, #0]
 80083d0:	f023 0310 	bic.w	r3, r3, #16
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	e7c6      	b.n	8008366 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80083d8:	6822      	ldr	r2, [r4, #0]
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	f043 0308 	orr.w	r3, r3, #8
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	e7c8      	b.n	8008376 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	6813      	ldr	r3, [r2, #0]
 80083e8:	f043 0304 	orr.w	r3, r3, #4
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	e7ca      	b.n	8008386 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80083f0:	2001      	movs	r0, #1
}
 80083f2:	4770      	bx	lr

080083f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083f4:	4a07      	ldr	r2, [pc, #28]	; (8008414 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80083f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80083fc:	041b      	lsls	r3, r3, #16
 80083fe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008400:	0200      	lsls	r0, r0, #8
 8008402:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008406:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8008408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800840c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008410:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008412:	4770      	bx	lr
 8008414:	e000ed00 	.word	0xe000ed00

08008418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008418:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800841a:	4b19      	ldr	r3, [pc, #100]	; (8008480 <HAL_NVIC_SetPriority+0x68>)
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008422:	f1c3 0c07 	rsb	ip, r3, #7
 8008426:	f1bc 0f04 	cmp.w	ip, #4
 800842a:	bf28      	it	cs
 800842c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008430:	f103 0e04 	add.w	lr, r3, #4
 8008434:	f1be 0f06 	cmp.w	lr, #6
 8008438:	d918      	bls.n	800846c <HAL_NVIC_SetPriority+0x54>
 800843a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800843c:	f04f 3eff 	mov.w	lr, #4294967295
 8008440:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008444:	ea21 010c 	bic.w	r1, r1, ip
 8008448:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800844a:	fa0e fe03 	lsl.w	lr, lr, r3
 800844e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008452:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8008454:	2800      	cmp	r0, #0
 8008456:	db0b      	blt.n	8008470 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008458:	0112      	lsls	r2, r2, #4
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008460:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8008464:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008468:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800846c:	2300      	movs	r3, #0
 800846e:	e7e5      	b.n	800843c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008470:	f000 000f 	and.w	r0, r0, #15
 8008474:	0112      	lsls	r2, r2, #4
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	4b02      	ldr	r3, [pc, #8]	; (8008484 <HAL_NVIC_SetPriority+0x6c>)
 800847a:	541a      	strb	r2, [r3, r0]
 800847c:	e7f4      	b.n	8008468 <HAL_NVIC_SetPriority+0x50>
 800847e:	bf00      	nop
 8008480:	e000ed00 	.word	0xe000ed00
 8008484:	e000ed14 	.word	0xe000ed14

08008488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008488:	2800      	cmp	r0, #0
 800848a:	db07      	blt.n	800849c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800848c:	f000 021f 	and.w	r2, r0, #31
 8008490:	0940      	lsrs	r0, r0, #5
 8008492:	2301      	movs	r3, #1
 8008494:	4093      	lsls	r3, r2
 8008496:	4a02      	ldr	r2, [pc, #8]	; (80084a0 <HAL_NVIC_EnableIRQ+0x18>)
 8008498:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	e000e100 	.word	0xe000e100

080084a4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80084a4:	2800      	cmp	r0, #0
 80084a6:	db0c      	blt.n	80084c2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084a8:	f000 021f 	and.w	r2, r0, #31
 80084ac:	0940      	lsrs	r0, r0, #5
 80084ae:	2301      	movs	r3, #1
 80084b0:	4093      	lsls	r3, r2
 80084b2:	3020      	adds	r0, #32
 80084b4:	4a03      	ldr	r2, [pc, #12]	; (80084c4 <HAL_NVIC_DisableIRQ+0x20>)
 80084b6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80084ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80084be:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80084c2:	4770      	bx	lr
 80084c4:	e000e100 	.word	0xe000e100

080084c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084c8:	3801      	subs	r0, #1
 80084ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80084ce:	d20b      	bcs.n	80084e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084d6:	4a05      	ldr	r2, [pc, #20]	; (80084ec <HAL_SYSTICK_Config+0x24>)
 80084d8:	21f0      	movs	r1, #240	; 0xf0
 80084da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084de:	2000      	movs	r0, #0
 80084e0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084e2:	2207      	movs	r2, #7
 80084e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80084e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80084ea:	4770      	bx	lr
 80084ec:	e000ed00 	.word	0xe000ed00

080084f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084f0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80084f2:	6805      	ldr	r5, [r0, #0]
 80084f4:	682c      	ldr	r4, [r5, #0]
 80084f6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80084fa:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80084fc:	6804      	ldr	r4, [r0, #0]
 80084fe:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008500:	6883      	ldr	r3, [r0, #8]
 8008502:	2b40      	cmp	r3, #64	; 0x40
 8008504:	d005      	beq.n	8008512 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8008506:	6803      	ldr	r3, [r0, #0]
 8008508:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800850a:	6803      	ldr	r3, [r0, #0]
 800850c:	60da      	str	r2, [r3, #12]
  }
}
 800850e:	bc30      	pop	{r4, r5}
 8008510:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8008512:	6803      	ldr	r3, [r0, #0]
 8008514:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8008516:	6803      	ldr	r3, [r0, #0]
 8008518:	60d9      	str	r1, [r3, #12]
 800851a:	e7f8      	b.n	800850e <DMA_SetConfig+0x1e>

0800851c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800851c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800851e:	6803      	ldr	r3, [r0, #0]
 8008520:	b2d9      	uxtb	r1, r3
 8008522:	3910      	subs	r1, #16
 8008524:	4a0c      	ldr	r2, [pc, #48]	; (8008558 <DMA_CalcBaseAndBitshift+0x3c>)
 8008526:	fba2 4201 	umull	r4, r2, r2, r1
 800852a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800852c:	4c0b      	ldr	r4, [pc, #44]	; (800855c <DMA_CalcBaseAndBitshift+0x40>)
 800852e:	5ca2      	ldrb	r2, [r4, r2]
 8008530:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008532:	295f      	cmp	r1, #95	; 0x5f
 8008534:	d909      	bls.n	800854a <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	3304      	adds	r3, #4
 8008540:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8008542:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8008544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008548:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800854a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800854e:	f023 0303 	bic.w	r3, r3, #3
 8008552:	6583      	str	r3, [r0, #88]	; 0x58
 8008554:	e7f5      	b.n	8008542 <DMA_CalcBaseAndBitshift+0x26>
 8008556:	bf00      	nop
 8008558:	aaaaaaab 	.word	0xaaaaaaab
 800855c:	0800f49c 	.word	0x0800f49c

08008560 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008560:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008562:	6982      	ldr	r2, [r0, #24]
 8008564:	b992      	cbnz	r2, 800858c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8008566:	2b01      	cmp	r3, #1
 8008568:	d00a      	beq.n	8008580 <DMA_CheckFifoParam+0x20>
 800856a:	2b02      	cmp	r3, #2
 800856c:	d002      	beq.n	8008574 <DMA_CheckFifoParam+0x14>
 800856e:	b10b      	cbz	r3, 8008574 <DMA_CheckFifoParam+0x14>
 8008570:	2000      	movs	r0, #0
 8008572:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008574:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008576:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800857a:	d128      	bne.n	80085ce <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800857c:	2000      	movs	r0, #0
 800857e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008580:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008582:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008586:	d024      	beq.n	80085d2 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8008588:	2000      	movs	r0, #0
 800858a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800858c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008590:	d009      	beq.n	80085a6 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008592:	2b02      	cmp	r3, #2
 8008594:	d925      	bls.n	80085e2 <DMA_CheckFifoParam+0x82>
 8008596:	2b03      	cmp	r3, #3
 8008598:	d125      	bne.n	80085e6 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800859a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800859c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80085a0:	d123      	bne.n	80085ea <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80085a2:	2000      	movs	r0, #0
 80085a4:	4770      	bx	lr
    switch (tmp)
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d803      	bhi.n	80085b2 <DMA_CheckFifoParam+0x52>
 80085aa:	e8df f003 	tbb	[pc, r3]
 80085ae:	0414      	.short	0x0414
 80085b0:	0a14      	.short	0x0a14
 80085b2:	2000      	movs	r0, #0
 80085b4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80085b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80085bc:	d10d      	bne.n	80085da <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80085be:	2000      	movs	r0, #0
 80085c0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80085c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085c8:	d009      	beq.n	80085de <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80085ca:	2000      	movs	r0, #0
 80085cc:	4770      	bx	lr
        status = HAL_ERROR;
 80085ce:	2001      	movs	r0, #1
 80085d0:	4770      	bx	lr
        status = HAL_ERROR;
 80085d2:	2001      	movs	r0, #1
 80085d4:	4770      	bx	lr
      status = HAL_ERROR;
 80085d6:	2001      	movs	r0, #1
 80085d8:	4770      	bx	lr
        status = HAL_ERROR;
 80085da:	2001      	movs	r0, #1
 80085dc:	4770      	bx	lr
        status = HAL_ERROR;
 80085de:	2001      	movs	r0, #1
 80085e0:	4770      	bx	lr
      status = HAL_ERROR;
 80085e2:	2001      	movs	r0, #1
 80085e4:	4770      	bx	lr
    switch (tmp)
 80085e6:	2000      	movs	r0, #0
 80085e8:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80085ea:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80085ec:	4770      	bx	lr
	...

080085f0 <HAL_DMA_Init>:
{
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80085f4:	f7ff fca2 	bl	8007f3c <HAL_GetTick>
  if(hdma == NULL)
 80085f8:	2c00      	cmp	r4, #0
 80085fa:	d05b      	beq.n	80086b4 <HAL_DMA_Init+0xc4>
 80085fc:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80085fe:	2302      	movs	r3, #2
 8008600:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8008604:	2300      	movs	r3, #0
 8008606:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	6813      	ldr	r3, [r2, #0]
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	f012 0f01 	tst.w	r2, #1
 800861c:	d00a      	beq.n	8008634 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800861e:	f7ff fc8d 	bl	8007f3c <HAL_GetTick>
 8008622:	1b43      	subs	r3, r0, r5
 8008624:	2b05      	cmp	r3, #5
 8008626:	d9f5      	bls.n	8008614 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008628:	2320      	movs	r3, #32
 800862a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800862c:	2003      	movs	r0, #3
 800862e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8008632:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8008634:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008636:	4920      	ldr	r1, [pc, #128]	; (80086b8 <HAL_DMA_Init+0xc8>)
 8008638:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800863a:	6862      	ldr	r2, [r4, #4]
 800863c:	68a0      	ldr	r0, [r4, #8]
 800863e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008640:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008642:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008644:	6920      	ldr	r0, [r4, #16]
 8008646:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008648:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800864a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800864c:	69a0      	ldr	r0, [r4, #24]
 800864e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8008650:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008652:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8008654:	6a20      	ldr	r0, [r4, #32]
 8008656:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008658:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800865a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800865c:	2904      	cmp	r1, #4
 800865e:	d01e      	beq.n	800869e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8008660:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8008662:	6826      	ldr	r6, [r4, #0]
 8008664:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008666:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800866a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800866c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800866e:	2b04      	cmp	r3, #4
 8008670:	d107      	bne.n	8008682 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8008672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008674:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008676:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008678:	b11b      	cbz	r3, 8008682 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800867a:	4620      	mov	r0, r4
 800867c:	f7ff ff70 	bl	8008560 <DMA_CheckFifoParam>
 8008680:	b990      	cbnz	r0, 80086a8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8008682:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008684:	4620      	mov	r0, r4
 8008686:	f7ff ff49 	bl	800851c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800868a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800868c:	233f      	movs	r3, #63	; 0x3f
 800868e:	4093      	lsls	r3, r2
 8008690:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008692:	2000      	movs	r0, #0
 8008694:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008696:	2301      	movs	r3, #1
 8008698:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800869c:	e7c9      	b.n	8008632 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800869e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80086a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80086a2:	4301      	orrs	r1, r0
 80086a4:	430a      	orrs	r2, r1
 80086a6:	e7db      	b.n	8008660 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086a8:	2340      	movs	r3, #64	; 0x40
 80086aa:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80086ac:	2001      	movs	r0, #1
 80086ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80086b2:	e7be      	b.n	8008632 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80086b4:	2001      	movs	r0, #1
 80086b6:	e7bc      	b.n	8008632 <HAL_DMA_Init+0x42>
 80086b8:	f010803f 	.word	0xf010803f

080086bc <HAL_DMA_Start_IT>:
{
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086c0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80086c2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80086c6:	2801      	cmp	r0, #1
 80086c8:	d02b      	beq.n	8008722 <HAL_DMA_Start_IT+0x66>
 80086ca:	2001      	movs	r0, #1
 80086cc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80086d0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80086d4:	b2c0      	uxtb	r0, r0
 80086d6:	2801      	cmp	r0, #1
 80086d8:	d004      	beq.n	80086e4 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80086da:	2300      	movs	r3, #0
 80086dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80086e0:	2002      	movs	r0, #2
}
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80086e4:	2002      	movs	r0, #2
 80086e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086ea:	2000      	movs	r0, #0
 80086ec:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80086ee:	4620      	mov	r0, r4
 80086f0:	f7ff fefe 	bl	80084f0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80086f6:	233f      	movs	r3, #63	; 0x3f
 80086f8:	4093      	lsls	r3, r2
 80086fa:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80086fc:	6822      	ldr	r2, [r4, #0]
 80086fe:	6813      	ldr	r3, [r2, #0]
 8008700:	f043 0316 	orr.w	r3, r3, #22
 8008704:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8008706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008708:	b123      	cbz	r3, 8008714 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	6813      	ldr	r3, [r2, #0]
 800870e:	f043 0308 	orr.w	r3, r3, #8
 8008712:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	6813      	ldr	r3, [r2, #0]
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800871e:	2000      	movs	r0, #0
 8008720:	e7df      	b.n	80086e2 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8008722:	2002      	movs	r0, #2
 8008724:	e7dd      	b.n	80086e2 <HAL_DMA_Start_IT+0x26>

08008726 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008726:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d003      	beq.n	8008738 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8008734:	2001      	movs	r0, #1
 8008736:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8008738:	2305      	movs	r3, #5
 800873a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800873e:	6802      	ldr	r2, [r0, #0]
 8008740:	6813      	ldr	r3, [r2, #0]
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008748:	2000      	movs	r0, #0
}
 800874a:	4770      	bx	lr

0800874c <HAL_DMA_IRQHandler>:
{
 800874c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800874e:	b083      	sub	sp, #12
 8008750:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008756:	4b72      	ldr	r3, [pc, #456]	; (8008920 <HAL_DMA_IRQHandler+0x1d4>)
 8008758:	681d      	ldr	r5, [r3, #0]
 800875a:	4b72      	ldr	r3, [pc, #456]	; (8008924 <HAL_DMA_IRQHandler+0x1d8>)
 800875c:	fba3 3505 	umull	r3, r5, r3, r5
 8008760:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008762:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8008764:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008766:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008768:	2308      	movs	r3, #8
 800876a:	4093      	lsls	r3, r2
 800876c:	4233      	tst	r3, r6
 800876e:	d010      	beq.n	8008792 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008770:	6803      	ldr	r3, [r0, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	f012 0f04 	tst.w	r2, #4
 8008778:	d00b      	beq.n	8008792 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	f022 0204 	bic.w	r2, r2, #4
 8008780:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008782:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008784:	2308      	movs	r3, #8
 8008786:	4093      	lsls	r3, r2
 8008788:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800878a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800878c:	f043 0301 	orr.w	r3, r3, #1
 8008790:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008792:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008794:	2301      	movs	r3, #1
 8008796:	4093      	lsls	r3, r2
 8008798:	4233      	tst	r3, r6
 800879a:	d009      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	6952      	ldr	r2, [r2, #20]
 80087a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80087a4:	d004      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80087a6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80087a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80087aa:	f043 0302 	orr.w	r3, r3, #2
 80087ae:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80087b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80087b2:	2304      	movs	r3, #4
 80087b4:	4093      	lsls	r3, r2
 80087b6:	4233      	tst	r3, r6
 80087b8:	d009      	beq.n	80087ce <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	6812      	ldr	r2, [r2, #0]
 80087be:	f012 0f02 	tst.w	r2, #2
 80087c2:	d004      	beq.n	80087ce <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80087c4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80087c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80087c8:	f043 0304 	orr.w	r3, r3, #4
 80087cc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80087ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80087d0:	2310      	movs	r3, #16
 80087d2:	4093      	lsls	r3, r2
 80087d4:	4233      	tst	r3, r6
 80087d6:	d024      	beq.n	8008822 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	f012 0f08 	tst.w	r2, #8
 80087e0:	d01f      	beq.n	8008822 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80087e2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80087ec:	d00d      	beq.n	800880a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80087f4:	d104      	bne.n	8008800 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80087f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087f8:	b19b      	cbz	r3, 8008822 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80087fa:	4620      	mov	r0, r4
 80087fc:	4798      	blx	r3
 80087fe:	e010      	b.n	8008822 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008800:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008802:	b173      	cbz	r3, 8008822 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8008804:	4620      	mov	r0, r4
 8008806:	4798      	blx	r3
 8008808:	e00b      	b.n	8008822 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008810:	d103      	bne.n	800881a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	f022 0208 	bic.w	r2, r2, #8
 8008818:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800881a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800881c:	b10b      	cbz	r3, 8008822 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800881e:	4620      	mov	r0, r4
 8008820:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008822:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008824:	2320      	movs	r3, #32
 8008826:	4093      	lsls	r3, r2
 8008828:	4233      	tst	r3, r6
 800882a:	d055      	beq.n	80088d8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800882c:	6822      	ldr	r2, [r4, #0]
 800882e:	6812      	ldr	r2, [r2, #0]
 8008830:	f012 0f10 	tst.w	r2, #16
 8008834:	d050      	beq.n	80088d8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008836:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008838:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b05      	cmp	r3, #5
 8008840:	d00e      	beq.n	8008860 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800884a:	d033      	beq.n	80088b4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008852:	d12a      	bne.n	80088aa <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8008854:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008856:	2b00      	cmp	r3, #0
 8008858:	d03e      	beq.n	80088d8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800885a:	4620      	mov	r0, r4
 800885c:	4798      	blx	r3
 800885e:	e03b      	b.n	80088d8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008860:	6822      	ldr	r2, [r4, #0]
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	f023 0316 	bic.w	r3, r3, #22
 8008868:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	6953      	ldr	r3, [r2, #20]
 800886e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008872:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008876:	b1a3      	cbz	r3, 80088a2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008878:	6822      	ldr	r2, [r4, #0]
 800887a:	6813      	ldr	r3, [r2, #0]
 800887c:	f023 0308 	bic.w	r3, r3, #8
 8008880:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008882:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008884:	233f      	movs	r3, #63	; 0x3f
 8008886:	4093      	lsls	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800888a:	2301      	movs	r3, #1
 800888c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008890:	2300      	movs	r3, #0
 8008892:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8008896:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008898:	2b00      	cmp	r3, #0
 800889a:	d03f      	beq.n	800891c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800889c:	4620      	mov	r0, r4
 800889e:	4798      	blx	r3
        return;
 80088a0:	e03c      	b.n	800891c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80088a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e7      	bne.n	8008878 <HAL_DMA_IRQHandler+0x12c>
 80088a8:	e7eb      	b.n	8008882 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80088aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088ac:	b1a3      	cbz	r3, 80088d8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80088ae:	4620      	mov	r0, r4
 80088b0:	4798      	blx	r3
 80088b2:	e011      	b.n	80088d8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80088ba:	d109      	bne.n	80088d0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	f022 0210 	bic.w	r2, r2, #16
 80088c2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80088ca:	2300      	movs	r3, #0
 80088cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80088d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088d2:	b10b      	cbz	r3, 80088d8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80088d4:	4620      	mov	r0, r4
 80088d6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80088d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088da:	b1fb      	cbz	r3, 800891c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80088dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088de:	f013 0f01 	tst.w	r3, #1
 80088e2:	d017      	beq.n	8008914 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80088e4:	2305      	movs	r3, #5
 80088e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80088ea:	6822      	ldr	r2, [r4, #0]
 80088ec:	6813      	ldr	r3, [r2, #0]
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	3301      	adds	r3, #1
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	42ab      	cmp	r3, r5
 80088fc:	d804      	bhi.n	8008908 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f013 0f01 	tst.w	r3, #1
 8008906:	d1f5      	bne.n	80088f4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8008908:	2301      	movs	r3, #1
 800890a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800890e:	2300      	movs	r3, #0
 8008910:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8008914:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008916:	b10b      	cbz	r3, 800891c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8008918:	4620      	mov	r0, r4
 800891a:	4798      	blx	r3
}
 800891c:	b003      	add	sp, #12
 800891e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008920:	20000000 	.word	0x20000000
 8008924:	1b4e81b5 	.word	0x1b4e81b5

08008928 <HAL_DMA_GetState>:
  return hdma->State;
 8008928:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800892c:	4770      	bx	lr
	...

08008930 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008930:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008932:	490a      	ldr	r1, [pc, #40]	; (800895c <FLASH_Program_DoubleWord+0x2c>)
 8008934:	690c      	ldr	r4, [r1, #16]
 8008936:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800893a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800893c:	690c      	ldr	r4, [r1, #16]
 800893e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8008942:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008944:	690c      	ldr	r4, [r1, #16]
 8008946:	f044 0401 	orr.w	r4, r4, #1
 800894a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800894c:	6002      	str	r2, [r0, #0]
 800894e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008952:	6043      	str	r3, [r0, #4]
}
 8008954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	40023c00 	.word	0x40023c00

08008960 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <FLASH_Program_Word+0x20>)
 8008962:	691a      	ldr	r2, [r3, #16]
 8008964:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008968:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008970:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	f042 0201 	orr.w	r2, r2, #1
 8008978:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800897a:	6001      	str	r1, [r0, #0]
}
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40023c00 	.word	0x40023c00

08008984 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008984:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <FLASH_Program_HalfWord+0x20>)
 8008986:	691a      	ldr	r2, [r3, #16]
 8008988:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800898c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800898e:	691a      	ldr	r2, [r3, #16]
 8008990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008994:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	f042 0201 	orr.w	r2, r2, #1
 800899c:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800899e:	8001      	strh	r1, [r0, #0]
}
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	40023c00 	.word	0x40023c00

080089a8 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <FLASH_Program_Byte+0x1c>)
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80089b0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	f042 0201 	orr.w	r2, r2, #1
 80089bc:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 80089be:	7001      	strb	r1, [r0, #0]
}
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40023c00 	.word	0x40023c00

080089c8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80089c8:	4b27      	ldr	r3, [pc, #156]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f013 0f10 	tst.w	r3, #16
 80089d0:	d007      	beq.n	80089e2 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80089d2:	4a26      	ldr	r2, [pc, #152]	; (8008a6c <FLASH_SetErrorCode+0xa4>)
 80089d4:	69d3      	ldr	r3, [r2, #28]
 80089d6:	f043 0310 	orr.w	r3, r3, #16
 80089da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80089dc:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 80089de:	2210      	movs	r2, #16
 80089e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80089e2:	4b21      	ldr	r3, [pc, #132]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f013 0f20 	tst.w	r3, #32
 80089ea:	d007      	beq.n	80089fc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80089ec:	4a1f      	ldr	r2, [pc, #124]	; (8008a6c <FLASH_SetErrorCode+0xa4>)
 80089ee:	69d3      	ldr	r3, [r2, #28]
 80089f0:	f043 0308 	orr.w	r3, r3, #8
 80089f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80089f6:	4b1c      	ldr	r3, [pc, #112]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 80089f8:	2220      	movs	r2, #32
 80089fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80089fc:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a04:	d007      	beq.n	8008a16 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008a06:	4a19      	ldr	r2, [pc, #100]	; (8008a6c <FLASH_SetErrorCode+0xa4>)
 8008a08:	69d3      	ldr	r3, [r2, #28]
 8008a0a:	f043 0304 	orr.w	r3, r3, #4
 8008a0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008a10:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 8008a12:	2240      	movs	r2, #64	; 0x40
 8008a14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008a16:	4b14      	ldr	r3, [pc, #80]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a1e:	d007      	beq.n	8008a30 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008a20:	4a12      	ldr	r2, [pc, #72]	; (8008a6c <FLASH_SetErrorCode+0xa4>)
 8008a22:	69d3      	ldr	r3, [r2, #28]
 8008a24:	f043 0302 	orr.w	r3, r3, #2
 8008a28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 8008a2c:	2280      	movs	r2, #128	; 0x80
 8008a2e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8008a30:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a38:	d008      	beq.n	8008a4c <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008a3a:	4a0c      	ldr	r2, [pc, #48]	; (8008a6c <FLASH_SetErrorCode+0xa4>)
 8008a3c:	69d3      	ldr	r3, [r2, #28]
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8008a44:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 8008a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008a4c:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f013 0f02 	tst.w	r3, #2
 8008a54:	d007      	beq.n	8008a66 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008a56:	4a05      	ldr	r2, [pc, #20]	; (8008a6c <FLASH_SetErrorCode+0xa4>)
 8008a58:	69d3      	ldr	r3, [r2, #28]
 8008a5a:	f043 0320 	orr.w	r3, r3, #32
 8008a5e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008a60:	4b01      	ldr	r3, [pc, #4]	; (8008a68 <FLASH_SetErrorCode+0xa0>)
 8008a62:	2202      	movs	r2, #2
 8008a64:	60da      	str	r2, [r3, #12]
  }
}
 8008a66:	4770      	bx	lr
 8008a68:	40023c00 	.word	0x40023c00
 8008a6c:	200009d4 	.word	0x200009d4

08008a70 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008a70:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <HAL_FLASH_Unlock+0x28>)
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	db01      	blt.n	8008a7c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8008a78:	2000      	movs	r0, #0
 8008a7a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <HAL_FLASH_Unlock+0x28>)
 8008a7e:	4a07      	ldr	r2, [pc, #28]	; (8008a9c <HAL_FLASH_Unlock+0x2c>)
 8008a80:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008a82:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8008a86:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	db01      	blt.n	8008a92 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8008a8e:	2000      	movs	r0, #0
 8008a90:	4770      	bx	lr
      status = HAL_ERROR;
 8008a92:	2001      	movs	r0, #1
}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	40023c00 	.word	0x40023c00
 8008a9c:	45670123 	.word	0x45670123

08008aa0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8008aa0:	4a03      	ldr	r2, [pc, #12]	; (8008ab0 <HAL_FLASH_Lock+0x10>)
 8008aa2:	6913      	ldr	r3, [r2, #16]
 8008aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa8:	6113      	str	r3, [r2, #16]
}
 8008aaa:	2000      	movs	r0, #0
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40023c00 	.word	0x40023c00

08008ab4 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8008ab4:	4b01      	ldr	r3, [pc, #4]	; (8008abc <HAL_FLASH_GetError+0x8>)
 8008ab6:	69d8      	ldr	r0, [r3, #28]
}  
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	200009d4 	.word	0x200009d4

08008ac0 <FLASH_WaitForLastOperation>:
{ 
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ac4:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <FLASH_WaitForLastOperation+0x58>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8008aca:	f7ff fa37 	bl	8007f3c <HAL_GetTick>
 8008ace:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008ad0:	4b12      	ldr	r3, [pc, #72]	; (8008b1c <FLASH_WaitForLastOperation+0x5c>)
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008ad8:	d00a      	beq.n	8008af0 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8008ada:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008ade:	d0f7      	beq.n	8008ad0 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008ae0:	b124      	cbz	r4, 8008aec <FLASH_WaitForLastOperation+0x2c>
 8008ae2:	f7ff fa2b 	bl	8007f3c <HAL_GetTick>
 8008ae6:	1b40      	subs	r0, r0, r5
 8008ae8:	42a0      	cmp	r0, r4
 8008aea:	d9f1      	bls.n	8008ad0 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8008aec:	2003      	movs	r0, #3
 8008aee:	e00d      	b.n	8008b0c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008af0:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <FLASH_WaitForLastOperation+0x5c>)
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f013 0f01 	tst.w	r3, #1
 8008af8:	d002      	beq.n	8008b00 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008afa:	4b08      	ldr	r3, [pc, #32]	; (8008b1c <FLASH_WaitForLastOperation+0x5c>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <FLASH_WaitForLastOperation+0x5c>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8008b08:	d101      	bne.n	8008b0e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8008b0a:	2000      	movs	r0, #0
}  
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8008b0e:	f7ff ff5b 	bl	80089c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008b12:	2001      	movs	r0, #1
 8008b14:	e7fa      	b.n	8008b0c <FLASH_WaitForLastOperation+0x4c>
 8008b16:	bf00      	nop
 8008b18:	200009d4 	.word	0x200009d4
 8008b1c:	40023c00 	.word	0x40023c00

08008b20 <HAL_FLASH_Program>:
{
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8008b24:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <HAL_FLASH_Program+0x74>)
 8008b26:	7e12      	ldrb	r2, [r2, #24]
 8008b28:	2a01      	cmp	r2, #1
 8008b2a:	d030      	beq.n	8008b8e <HAL_FLASH_Program+0x6e>
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	460d      	mov	r5, r1
 8008b30:	461f      	mov	r7, r3
 8008b32:	4b18      	ldr	r3, [pc, #96]	; (8008b94 <HAL_FLASH_Program+0x74>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008b38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008b3c:	f7ff ffc0 	bl	8008ac0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8008b40:	b990      	cbnz	r0, 8008b68 <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008b42:	b1ac      	cbz	r4, 8008b70 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008b44:	2c01      	cmp	r4, #1
 8008b46:	d018      	beq.n	8008b7a <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008b48:	2c02      	cmp	r4, #2
 8008b4a:	d01b      	beq.n	8008b84 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	463b      	mov	r3, r7
 8008b50:	4628      	mov	r0, r5
 8008b52:	f7ff feed 	bl	8008930 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008b56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008b5a:	f7ff ffb1 	bl	8008ac0 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8008b5e:	4a0e      	ldr	r2, [pc, #56]	; (8008b98 <HAL_FLASH_Program+0x78>)
 8008b60:	6913      	ldr	r3, [r2, #16]
 8008b62:	f023 0301 	bic.w	r3, r3, #1
 8008b66:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <HAL_FLASH_Program+0x74>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	761a      	strb	r2, [r3, #24]
}
 8008b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008b70:	b2f1      	uxtb	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	f7ff ff18 	bl	80089a8 <FLASH_Program_Byte>
 8008b78:	e7ed      	b.n	8008b56 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8008b7a:	b2b1      	uxth	r1, r6
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f7ff ff01 	bl	8008984 <FLASH_Program_HalfWord>
 8008b82:	e7e8      	b.n	8008b56 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008b84:	4631      	mov	r1, r6
 8008b86:	4628      	mov	r0, r5
 8008b88:	f7ff feea 	bl	8008960 <FLASH_Program_Word>
 8008b8c:	e7e3      	b.n	8008b56 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8008b8e:	2002      	movs	r0, #2
 8008b90:	e7ed      	b.n	8008b6e <HAL_FLASH_Program+0x4e>
 8008b92:	bf00      	nop
 8008b94:	200009d4 	.word	0x200009d4
 8008b98:	40023c00 	.word	0x40023c00

08008b9c <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008b9c:	4b07      	ldr	r3, [pc, #28]	; (8008bbc <FLASH_MassErase+0x20>)
 8008b9e:	691a      	ldr	r2, [r3, #16]
 8008ba0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008ba4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	f042 0204 	orr.w	r2, r2, #4
 8008bac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008bb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008bb8:	611a      	str	r2, [r3, #16]
}
 8008bba:	4770      	bx	lr
 8008bbc:	40023c00 	.word	0x40023c00

08008bc0 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008bc0:	2901      	cmp	r1, #1
 8008bc2:	d01b      	beq.n	8008bfc <FLASH_Erase_Sector+0x3c>
 8008bc4:	2902      	cmp	r1, #2
 8008bc6:	d01c      	beq.n	8008c02 <FLASH_Erase_Sector+0x42>
 8008bc8:	b109      	cbz	r1, 8008bce <FLASH_Erase_Sector+0xe>
{
 8008bca:	f44f 7140 	mov.w	r1, #768	; 0x300
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008bce:	4b0e      	ldr	r3, [pc, #56]	; (8008c08 <FLASH_Erase_Sector+0x48>)
 8008bd0:	691a      	ldr	r2, [r3, #16]
 8008bd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008bd6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8008bd8:	691a      	ldr	r2, [r3, #16]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008bde:	691a      	ldr	r2, [r3, #16]
 8008be0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008be4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008be6:	691a      	ldr	r2, [r3, #16]
 8008be8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8008bec:	f040 0002 	orr.w	r0, r0, #2
 8008bf0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008bf8:	611a      	str	r2, [r3, #16]
}
 8008bfa:	4770      	bx	lr
{
 8008bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c00:	e7e5      	b.n	8008bce <FLASH_Erase_Sector+0xe>
 8008c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c06:	e7e2      	b.n	8008bce <FLASH_Erase_Sector+0xe>
 8008c08:	40023c00 	.word	0x40023c00

08008c0c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008c0c:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <FLASH_FlushCaches+0x5c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008c14:	d010      	beq.n	8008c38 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <FLASH_FlushCaches+0x5c>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c1e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c2e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c36:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008c38:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <FLASH_FlushCaches+0x5c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008c40:	d010      	beq.n	8008c64 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <FLASH_FlushCaches+0x5c>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c4a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c5a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c62:	601a      	str	r2, [r3, #0]
  }
}
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	40023c00 	.word	0x40023c00

08008c6c <HAL_FLASHEx_Erase>:
{
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8008c6e:	4b22      	ldr	r3, [pc, #136]	; (8008cf8 <HAL_FLASHEx_Erase+0x8c>)
 8008c70:	7e1b      	ldrb	r3, [r3, #24]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d03e      	beq.n	8008cf4 <HAL_FLASHEx_Erase+0x88>
 8008c76:	4604      	mov	r4, r0
 8008c78:	460e      	mov	r6, r1
 8008c7a:	4b1f      	ldr	r3, [pc, #124]	; (8008cf8 <HAL_FLASHEx_Erase+0x8c>)
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008c80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008c84:	f7ff ff1c 	bl	8008ac0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8008c88:	4607      	mov	r7, r0
 8008c8a:	bb70      	cbnz	r0, 8008cea <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8008c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c90:	6033      	str	r3, [r6, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d016      	beq.n	8008cc6 <HAL_FLASHEx_Erase+0x5a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008c98:	68a5      	ldr	r5, [r4, #8]
 8008c9a:	68e3      	ldr	r3, [r4, #12]
 8008c9c:	68a2      	ldr	r2, [r4, #8]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	42ab      	cmp	r3, r5
 8008ca2:	d920      	bls.n	8008ce6 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8008ca4:	7c21      	ldrb	r1, [r4, #16]
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7ff ff8a 	bl	8008bc0 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008cac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008cb0:	f7ff ff06 	bl	8008ac0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8008cb4:	4a11      	ldr	r2, [pc, #68]	; (8008cfc <HAL_FLASHEx_Erase+0x90>)
 8008cb6:	6913      	ldr	r3, [r2, #16]
 8008cb8:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8008cbc:	6113      	str	r3, [r2, #16]
        if (status != HAL_OK)
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	b980      	cbnz	r0, 8008ce4 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008cc2:	3501      	adds	r5, #1
 8008cc4:	e7e9      	b.n	8008c9a <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8008cc6:	6861      	ldr	r1, [r4, #4]
 8008cc8:	7c20      	ldrb	r0, [r4, #16]
 8008cca:	f7ff ff67 	bl	8008b9c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008cce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008cd2:	f7ff fef5 	bl	8008ac0 <FLASH_WaitForLastOperation>
 8008cd6:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8008cd8:	4a08      	ldr	r2, [pc, #32]	; (8008cfc <HAL_FLASHEx_Erase+0x90>)
 8008cda:	6913      	ldr	r3, [r2, #16]
 8008cdc:	f023 0304 	bic.w	r3, r3, #4
 8008ce0:	6113      	str	r3, [r2, #16]
 8008ce2:	e000      	b.n	8008ce6 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8008ce4:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8008ce6:	f7ff ff91 	bl	8008c0c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008cea:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <HAL_FLASHEx_Erase+0x8c>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	761a      	strb	r2, [r3, #24]
}
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8008cf4:	2702      	movs	r7, #2
 8008cf6:	e7fb      	b.n	8008cf0 <HAL_FLASHEx_Erase+0x84>
 8008cf8:	200009d4 	.word	0x200009d4
 8008cfc:	40023c00 	.word	0x40023c00

08008d00 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d00:	2300      	movs	r3, #0
 8008d02:	2b0f      	cmp	r3, #15
 8008d04:	f200 80e3 	bhi.w	8008ece <HAL_GPIO_Init+0x1ce>
{
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	e065      	b.n	8008dda <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d0e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d10:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8008d14:	2403      	movs	r4, #3
 8008d16:	fa04 f40e 	lsl.w	r4, r4, lr
 8008d1a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d1e:	68cc      	ldr	r4, [r1, #12]
 8008d20:	fa04 f40e 	lsl.w	r4, r4, lr
 8008d24:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8008d26:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d28:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d2a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d2e:	684a      	ldr	r2, [r1, #4]
 8008d30:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8008d34:	409a      	lsls	r2, r3
 8008d36:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8008d38:	6042      	str	r2, [r0, #4]
 8008d3a:	e05c      	b.n	8008df6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d3c:	08dc      	lsrs	r4, r3, #3
 8008d3e:	3408      	adds	r4, #8
 8008d40:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d44:	f003 0507 	and.w	r5, r3, #7
 8008d48:	00ad      	lsls	r5, r5, #2
 8008d4a:	f04f 0e0f 	mov.w	lr, #15
 8008d4e:	fa0e fe05 	lsl.w	lr, lr, r5
 8008d52:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d56:	690a      	ldr	r2, [r1, #16]
 8008d58:	40aa      	lsls	r2, r5
 8008d5a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8008d5e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8008d62:	e05c      	b.n	8008e1e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d64:	2206      	movs	r2, #6
 8008d66:	e000      	b.n	8008d6a <HAL_GPIO_Init+0x6a>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	fa02 f20e 	lsl.w	r2, r2, lr
 8008d6e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d70:	3402      	adds	r4, #2
 8008d72:	4d57      	ldr	r5, [pc, #348]	; (8008ed0 <HAL_GPIO_Init+0x1d0>)
 8008d74:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d78:	4a56      	ldr	r2, [pc, #344]	; (8008ed4 <HAL_GPIO_Init+0x1d4>)
 8008d7a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8008d7c:	ea6f 020c 	mvn.w	r2, ip
 8008d80:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d84:	684e      	ldr	r6, [r1, #4]
 8008d86:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8008d8a:	d001      	beq.n	8008d90 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8008d8c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8008d90:	4c50      	ldr	r4, [pc, #320]	; (8008ed4 <HAL_GPIO_Init+0x1d4>)
 8008d92:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8008d94:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8008d96:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d9a:	684e      	ldr	r6, [r1, #4]
 8008d9c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8008da0:	d001      	beq.n	8008da6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8008da2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8008da6:	4c4b      	ldr	r4, [pc, #300]	; (8008ed4 <HAL_GPIO_Init+0x1d4>)
 8008da8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8008daa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8008dac:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008db0:	684e      	ldr	r6, [r1, #4]
 8008db2:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8008db6:	d001      	beq.n	8008dbc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8008db8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8008dbc:	4c45      	ldr	r4, [pc, #276]	; (8008ed4 <HAL_GPIO_Init+0x1d4>)
 8008dbe:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008dc0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8008dc2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008dc4:	684d      	ldr	r5, [r1, #4]
 8008dc6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8008dca:	d001      	beq.n	8008dd0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8008dcc:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8008dd0:	4c40      	ldr	r4, [pc, #256]	; (8008ed4 <HAL_GPIO_Init+0x1d4>)
 8008dd2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	2b0f      	cmp	r3, #15
 8008dd8:	d877      	bhi.n	8008eca <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8008dda:	2201      	movs	r2, #1
 8008ddc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008dde:	680c      	ldr	r4, [r1, #0]
 8008de0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8008de4:	ea32 0404 	bics.w	r4, r2, r4
 8008de8:	d1f4      	bne.n	8008dd4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008dea:	684c      	ldr	r4, [r1, #4]
 8008dec:	f004 0403 	and.w	r4, r4, #3
 8008df0:	3c01      	subs	r4, #1
 8008df2:	2c01      	cmp	r4, #1
 8008df4:	d98b      	bls.n	8008d0e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008df6:	684a      	ldr	r2, [r1, #4]
 8008df8:	f002 0203 	and.w	r2, r2, #3
 8008dfc:	2a03      	cmp	r2, #3
 8008dfe:	d009      	beq.n	8008e14 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8008e00:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008e02:	005d      	lsls	r5, r3, #1
 8008e04:	2203      	movs	r2, #3
 8008e06:	40aa      	lsls	r2, r5
 8008e08:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e0c:	688a      	ldr	r2, [r1, #8]
 8008e0e:	40aa      	lsls	r2, r5
 8008e10:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8008e12:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e14:	684a      	ldr	r2, [r1, #4]
 8008e16:	f002 0203 	and.w	r2, r2, #3
 8008e1a:	2a02      	cmp	r2, #2
 8008e1c:	d08e      	beq.n	8008d3c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8008e1e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008e20:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8008e24:	2203      	movs	r2, #3
 8008e26:	fa02 f20e 	lsl.w	r2, r2, lr
 8008e2a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e2e:	684a      	ldr	r2, [r1, #4]
 8008e30:	f002 0203 	and.w	r2, r2, #3
 8008e34:	fa02 f20e 	lsl.w	r2, r2, lr
 8008e38:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8008e3a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e3c:	684a      	ldr	r2, [r1, #4]
 8008e3e:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8008e42:	d0c7      	beq.n	8008dd4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e44:	2200      	movs	r2, #0
 8008e46:	9201      	str	r2, [sp, #4]
 8008e48:	4a23      	ldr	r2, [pc, #140]	; (8008ed8 <HAL_GPIO_Init+0x1d8>)
 8008e4a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8008e4c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8008e50:	6454      	str	r4, [r2, #68]	; 0x44
 8008e52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008e54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008e58:	9201      	str	r2, [sp, #4]
 8008e5a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008e5c:	089c      	lsrs	r4, r3, #2
 8008e5e:	1ca5      	adds	r5, r4, #2
 8008e60:	4a1b      	ldr	r2, [pc, #108]	; (8008ed0 <HAL_GPIO_Init+0x1d0>)
 8008e62:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e66:	f003 0e03 	and.w	lr, r3, #3
 8008e6a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8008e6e:	220f      	movs	r2, #15
 8008e70:	fa02 f20e 	lsl.w	r2, r2, lr
 8008e74:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e78:	4a18      	ldr	r2, [pc, #96]	; (8008edc <HAL_GPIO_Init+0x1dc>)
 8008e7a:	4290      	cmp	r0, r2
 8008e7c:	f43f af74 	beq.w	8008d68 <HAL_GPIO_Init+0x68>
 8008e80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e84:	4290      	cmp	r0, r2
 8008e86:	d016      	beq.n	8008eb6 <HAL_GPIO_Init+0x1b6>
 8008e88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e8c:	4290      	cmp	r0, r2
 8008e8e:	d014      	beq.n	8008eba <HAL_GPIO_Init+0x1ba>
 8008e90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e94:	4290      	cmp	r0, r2
 8008e96:	d012      	beq.n	8008ebe <HAL_GPIO_Init+0x1be>
 8008e98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e9c:	4290      	cmp	r0, r2
 8008e9e:	d010      	beq.n	8008ec2 <HAL_GPIO_Init+0x1c2>
 8008ea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ea4:	4290      	cmp	r0, r2
 8008ea6:	d00e      	beq.n	8008ec6 <HAL_GPIO_Init+0x1c6>
 8008ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eac:	4290      	cmp	r0, r2
 8008eae:	f43f af59 	beq.w	8008d64 <HAL_GPIO_Init+0x64>
 8008eb2:	2207      	movs	r2, #7
 8008eb4:	e759      	b.n	8008d6a <HAL_GPIO_Init+0x6a>
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	e757      	b.n	8008d6a <HAL_GPIO_Init+0x6a>
 8008eba:	2202      	movs	r2, #2
 8008ebc:	e755      	b.n	8008d6a <HAL_GPIO_Init+0x6a>
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	e753      	b.n	8008d6a <HAL_GPIO_Init+0x6a>
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	e751      	b.n	8008d6a <HAL_GPIO_Init+0x6a>
 8008ec6:	2205      	movs	r2, #5
 8008ec8:	e74f      	b.n	8008d6a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8008eca:	b002      	add	sp, #8
 8008ecc:	bd70      	pop	{r4, r5, r6, pc}
 8008ece:	4770      	bx	lr
 8008ed0:	40013800 	.word	0x40013800
 8008ed4:	40013c00 	.word	0x40013c00
 8008ed8:	40023800 	.word	0x40023800
 8008edc:	40020000 	.word	0x40020000

08008ee0 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2b0f      	cmp	r3, #15
 8008ee4:	f200 8089 	bhi.w	8008ffa <HAL_GPIO_DeInit+0x11a>
{
 8008ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eea:	e02d      	b.n	8008f48 <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008eec:	2506      	movs	r5, #6
 8008eee:	e000      	b.n	8008ef2 <HAL_GPIO_DeInit+0x12>
 8008ef0:	2500      	movs	r5, #0
 8008ef2:	fa05 f50c 	lsl.w	r5, r5, ip
 8008ef6:	42a5      	cmp	r5, r4
 8008ef8:	d063      	beq.n	8008fc2 <HAL_GPIO_DeInit+0xe2>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008efa:	6804      	ldr	r4, [r0, #0]
 8008efc:	005d      	lsls	r5, r3, #1
 8008efe:	f04f 0c03 	mov.w	ip, #3
 8008f02:	fa0c fc05 	lsl.w	ip, ip, r5
 8008f06:	ea24 040c 	bic.w	r4, r4, ip
 8008f0a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008f0c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8008f10:	f10e 0e08 	add.w	lr, lr, #8
 8008f14:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8008f18:	f003 0607 	and.w	r6, r3, #7
 8008f1c:	00b6      	lsls	r6, r6, #2
 8008f1e:	250f      	movs	r5, #15
 8008f20:	40b5      	lsls	r5, r6
 8008f22:	ea24 0405 	bic.w	r4, r4, r5
 8008f26:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f2a:	68c4      	ldr	r4, [r0, #12]
 8008f2c:	ea24 040c 	bic.w	r4, r4, ip
 8008f30:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f32:	6844      	ldr	r4, [r0, #4]
 8008f34:	ea24 0202 	bic.w	r2, r4, r2
 8008f38:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f3a:	6882      	ldr	r2, [r0, #8]
 8008f3c:	ea22 020c 	bic.w	r2, r2, ip
 8008f40:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f42:	3301      	adds	r3, #1
 8008f44:	2b0f      	cmp	r3, #15
 8008f46:	d857      	bhi.n	8008ff8 <HAL_GPIO_DeInit+0x118>
    ioposition = 0x01U << position;
 8008f48:	2201      	movs	r2, #1
 8008f4a:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8008f4c:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8008f50:	ea32 0401 	bics.w	r4, r2, r1
 8008f54:	d1f5      	bne.n	8008f42 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008f56:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8008f5a:	f10e 0502 	add.w	r5, lr, #2
 8008f5e:	4c27      	ldr	r4, [pc, #156]	; (8008ffc <HAL_GPIO_DeInit+0x11c>)
 8008f60:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008f64:	f003 0c03 	and.w	ip, r3, #3
 8008f68:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008f6c:	250f      	movs	r5, #15
 8008f6e:	fa05 f70c 	lsl.w	r7, r5, ip
 8008f72:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008f74:	4d22      	ldr	r5, [pc, #136]	; (8009000 <HAL_GPIO_DeInit+0x120>)
 8008f76:	42a8      	cmp	r0, r5
 8008f78:	d0ba      	beq.n	8008ef0 <HAL_GPIO_DeInit+0x10>
 8008f7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008f7e:	42a8      	cmp	r0, r5
 8008f80:	d015      	beq.n	8008fae <HAL_GPIO_DeInit+0xce>
 8008f82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008f86:	42a8      	cmp	r0, r5
 8008f88:	d013      	beq.n	8008fb2 <HAL_GPIO_DeInit+0xd2>
 8008f8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008f8e:	42a8      	cmp	r0, r5
 8008f90:	d011      	beq.n	8008fb6 <HAL_GPIO_DeInit+0xd6>
 8008f92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008f96:	42a8      	cmp	r0, r5
 8008f98:	d00f      	beq.n	8008fba <HAL_GPIO_DeInit+0xda>
 8008f9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008f9e:	42a8      	cmp	r0, r5
 8008fa0:	d00d      	beq.n	8008fbe <HAL_GPIO_DeInit+0xde>
 8008fa2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008fa6:	42a8      	cmp	r0, r5
 8008fa8:	d0a0      	beq.n	8008eec <HAL_GPIO_DeInit+0xc>
 8008faa:	2507      	movs	r5, #7
 8008fac:	e7a1      	b.n	8008ef2 <HAL_GPIO_DeInit+0x12>
 8008fae:	2501      	movs	r5, #1
 8008fb0:	e79f      	b.n	8008ef2 <HAL_GPIO_DeInit+0x12>
 8008fb2:	2502      	movs	r5, #2
 8008fb4:	e79d      	b.n	8008ef2 <HAL_GPIO_DeInit+0x12>
 8008fb6:	2503      	movs	r5, #3
 8008fb8:	e79b      	b.n	8008ef2 <HAL_GPIO_DeInit+0x12>
 8008fba:	2504      	movs	r5, #4
 8008fbc:	e799      	b.n	8008ef2 <HAL_GPIO_DeInit+0x12>
 8008fbe:	2505      	movs	r5, #5
 8008fc0:	e797      	b.n	8008ef2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008fc2:	4c10      	ldr	r4, [pc, #64]	; (8009004 <HAL_GPIO_DeInit+0x124>)
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	ea25 0506 	bic.w	r5, r5, r6
 8008fca:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008fcc:	6865      	ldr	r5, [r4, #4]
 8008fce:	ea25 0506 	bic.w	r5, r5, r6
 8008fd2:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008fd4:	68e5      	ldr	r5, [r4, #12]
 8008fd6:	ea25 0506 	bic.w	r5, r5, r6
 8008fda:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008fdc:	68a5      	ldr	r5, [r4, #8]
 8008fde:	ea25 0506 	bic.w	r5, r5, r6
 8008fe2:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008fe4:	4e05      	ldr	r6, [pc, #20]	; (8008ffc <HAL_GPIO_DeInit+0x11c>)
 8008fe6:	f10e 0402 	add.w	r4, lr, #2
 8008fea:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8008fee:	ea25 0507 	bic.w	r5, r5, r7
 8008ff2:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8008ff6:	e780      	b.n	8008efa <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8008ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ffa:	4770      	bx	lr
 8008ffc:	40013800 	.word	0x40013800
 8009000:	40020000 	.word	0x40020000
 8009004:	40013c00 	.word	0x40013c00

08009008 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009008:	6903      	ldr	r3, [r0, #16]
 800900a:	4219      	tst	r1, r3
 800900c:	d001      	beq.n	8009012 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800900e:	2001      	movs	r0, #1
 8009010:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009012:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8009014:	4770      	bx	lr

08009016 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009016:	b10a      	cbz	r2, 800901c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009018:	6181      	str	r1, [r0, #24]
 800901a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800901c:	0409      	lsls	r1, r1, #16
 800901e:	6181      	str	r1, [r0, #24]
  }
}
 8009020:	4770      	bx	lr

08009022 <I2C_Flush_DR>:
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8009022:	6803      	ldr	r3, [r0, #0]
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	f012 0f80 	tst.w	r2, #128	; 0x80
 800902a:	d001      	beq.n	8009030 <I2C_Flush_DR+0xe>
  {
    hi2c->Instance->DR = 0x00U;
 800902c:	2200      	movs	r2, #0
 800902e:	611a      	str	r2, [r3, #16]
  }
}
 8009030:	4770      	bx	lr

08009032 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009032:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b40      	cmp	r3, #64	; 0x40
 800903a:	d010      	beq.n	800905e <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800903c:	6903      	ldr	r3, [r0, #16]
 800903e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009042:	d01b      	beq.n	800907c <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8009044:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009046:	2b00      	cmp	r3, #0
 8009048:	d139      	bne.n	80090be <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800904a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800904c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009050:	6802      	ldr	r2, [r0, #0]
 8009052:	f003 0306 	and.w	r3, r3, #6
 8009056:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800905a:	6113      	str	r3, [r2, #16]
 800905c:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 800905e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009060:	b92b      	cbnz	r3, 800906e <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009062:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009064:	6802      	ldr	r2, [r0, #0]
 8009066:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800906a:	6113      	str	r3, [r2, #16]
 800906c:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800906e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009070:	6802      	ldr	r2, [r0, #0]
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	6113      	str	r3, [r2, #16]
 800907a:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800907c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b21      	cmp	r3, #33	; 0x21
 8009084:	d00f      	beq.n	80090a6 <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009086:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009088:	6802      	ldr	r2, [r0, #0]
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	b2db      	uxtb	r3, r3
 8009090:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009092:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009094:	b16b      	cbz	r3, 80090b2 <I2C_Master_SB+0x80>
 8009096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009098:	b15b      	cbz	r3, 80090b2 <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800909a:	6802      	ldr	r2, [r0, #0]
 800909c:	6853      	ldr	r3, [r2, #4]
 800909e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80090a2:	6053      	str	r3, [r2, #4]
 80090a4:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80090a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80090a8:	6802      	ldr	r2, [r0, #0]
 80090aa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80090ae:	6113      	str	r3, [r2, #16]
 80090b0:	e7ef      	b.n	8009092 <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80090b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80090b4:	b133      	cbz	r3, 80090c4 <I2C_Master_SB+0x92>
 80090b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1ee      	bne.n	800909a <I2C_Master_SB+0x68>
 80090bc:	e002      	b.n	80090c4 <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 80090be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d000      	beq.n	80090c6 <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 80090c4:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80090c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80090c8:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80090cc:	6802      	ldr	r2, [r0, #0]
 80090ce:	f003 0306 	and.w	r3, r3, #6
 80090d2:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 80090d6:	6113      	str	r3, [r2, #16]
}
 80090d8:	e7f4      	b.n	80090c4 <I2C_Master_SB+0x92>

080090da <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80090da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80090dc:	6802      	ldr	r2, [r0, #0]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80090e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80090e4:	b13b      	cbz	r3, 80090f6 <I2C_Master_ADD10+0x1c>
 80090e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e8:	b12b      	cbz	r3, 80090f6 <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80090ea:	6802      	ldr	r2, [r0, #0]
 80090ec:	6853      	ldr	r3, [r2, #4]
 80090ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80090f2:	6053      	str	r3, [r2, #4]
  }
}
 80090f4:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80090f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0fb      	beq.n	80090f4 <I2C_Master_ADD10+0x1a>
 80090fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1f3      	bne.n	80090ea <I2C_Master_ADD10+0x10>
 8009102:	e7f7      	b.n	80090f4 <I2C_Master_ADD10+0x1a>

08009104 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009104:	b410      	push	{r4}
 8009106:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009108:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800910c:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800910e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009110:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009112:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b22      	cmp	r3, #34	; 0x22
 800911a:	d00b      	beq.n	8009134 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800911c:	2300      	movs	r3, #0
 800911e:	9309      	str	r3, [sp, #36]	; 0x24
 8009120:	6803      	ldr	r3, [r0, #0]
 8009122:	695a      	ldr	r2, [r3, #20]
 8009124:	9209      	str	r2, [sp, #36]	; 0x24
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	9309      	str	r3, [sp, #36]	; 0x24
 800912a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 800912c:	b00b      	add	sp, #44	; 0x2c
 800912e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009132:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009134:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009136:	b90b      	cbnz	r3, 800913c <I2C_Master_ADDR+0x38>
 8009138:	2a40      	cmp	r2, #64	; 0x40
 800913a:	d017      	beq.n	800916c <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800913c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800913e:	b91b      	cbnz	r3, 8009148 <I2C_Master_ADDR+0x44>
 8009140:	6903      	ldr	r3, [r0, #16]
 8009142:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009146:	d019      	beq.n	800917c <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8009148:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800914a:	b29b      	uxth	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d125      	bne.n	800919c <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009150:	9302      	str	r3, [sp, #8]
 8009152:	6803      	ldr	r3, [r0, #0]
 8009154:	695a      	ldr	r2, [r3, #20]
 8009156:	9202      	str	r2, [sp, #8]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	9202      	str	r2, [sp, #8]
 800915c:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009164:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	6503      	str	r3, [r0, #80]	; 0x50
 800916a:	e7df      	b.n	800912c <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	6803      	ldr	r3, [r0, #0]
 8009170:	695a      	ldr	r2, [r3, #20]
 8009172:	9200      	str	r2, [sp, #0]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	9b00      	ldr	r3, [sp, #0]
 800917a:	e7d7      	b.n	800912c <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800917c:	2300      	movs	r3, #0
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	6803      	ldr	r3, [r0, #0]
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	9201      	str	r2, [sp, #4]
 8009186:	699a      	ldr	r2, [r3, #24]
 8009188:	9201      	str	r2, [sp, #4]
 800918a:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009192:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009194:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009196:	3301      	adds	r3, #1
 8009198:	6503      	str	r3, [r0, #80]	; 0x50
 800919a:	e7c7      	b.n	800912c <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 800919c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800919e:	b29b      	uxth	r3, r3
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d01c      	beq.n	80091de <I2C_Master_ADDR+0xda>
      else if (hi2c->XferCount == 2U)
 80091a4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d073      	beq.n	8009294 <I2C_Master_ADDR+0x190>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ac:	6802      	ldr	r2, [r0, #0]
 80091ae:	6813      	ldr	r3, [r2, #0]
 80091b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091b4:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80091b6:	6803      	ldr	r3, [r0, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80091be:	f000 80aa 	beq.w	8009316 <I2C_Master_ADDR+0x212>
 80091c2:	2920      	cmp	r1, #32
 80091c4:	f200 80b0 	bhi.w	8009328 <I2C_Master_ADDR+0x224>
 80091c8:	2908      	cmp	r1, #8
 80091ca:	f080 809d 	bcs.w	8009308 <I2C_Master_ADDR+0x204>
 80091ce:	2901      	cmp	r1, #1
 80091d0:	f040 80a1 	bne.w	8009316 <I2C_Master_ADDR+0x212>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091da:	605a      	str	r2, [r3, #4]
 80091dc:	e09b      	b.n	8009316 <I2C_Master_ADDR+0x212>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80091de:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80091e2:	d01a      	beq.n	800921a <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80091e4:	2908      	cmp	r1, #8
 80091e6:	d03d      	beq.n	8009264 <I2C_Master_ADDR+0x160>
 80091e8:	2920      	cmp	r1, #32
 80091ea:	d03b      	beq.n	8009264 <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80091ec:	2c12      	cmp	r4, #18
 80091ee:	d037      	beq.n	8009260 <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80091f0:	2910      	cmp	r1, #16
 80091f2:	d804      	bhi.n	80091fe <I2C_Master_ADDR+0xfa>
 80091f4:	4b4e      	ldr	r3, [pc, #312]	; (8009330 <I2C_Master_ADDR+0x22c>)
 80091f6:	40cb      	lsrs	r3, r1
 80091f8:	f013 0f01 	tst.w	r3, #1
 80091fc:	d144      	bne.n	8009288 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091fe:	6802      	ldr	r2, [r0, #0]
 8009200:	6813      	ldr	r3, [r2, #0]
 8009202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009206:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009208:	2300      	movs	r3, #0
 800920a:	9305      	str	r3, [sp, #20]
 800920c:	6803      	ldr	r3, [r0, #0]
 800920e:	695a      	ldr	r2, [r3, #20]
 8009210:	9205      	str	r2, [sp, #20]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	9305      	str	r3, [sp, #20]
 8009216:	9b05      	ldr	r3, [sp, #20]
 8009218:	e7a5      	b.n	8009166 <I2C_Master_ADDR+0x62>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800921a:	6802      	ldr	r2, [r0, #0]
 800921c:	6813      	ldr	r3, [r2, #0]
 800921e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009222:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009224:	6803      	ldr	r3, [r0, #0]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800922c:	d00c      	beq.n	8009248 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009234:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009236:	2300      	movs	r3, #0
 8009238:	9303      	str	r3, [sp, #12]
 800923a:	6803      	ldr	r3, [r0, #0]
 800923c:	695a      	ldr	r2, [r3, #20]
 800923e:	9203      	str	r2, [sp, #12]
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	e78e      	b.n	8009166 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009248:	2200      	movs	r2, #0
 800924a:	9204      	str	r2, [sp, #16]
 800924c:	695a      	ldr	r2, [r3, #20]
 800924e:	9204      	str	r2, [sp, #16]
 8009250:	699a      	ldr	r2, [r3, #24]
 8009252:	9204      	str	r2, [sp, #16]
 8009254:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e782      	b.n	8009166 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009260:	2901      	cmp	r1, #1
 8009262:	d0c5      	beq.n	80091f0 <I2C_Master_ADDR+0xec>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009264:	6802      	ldr	r2, [r0, #0]
 8009266:	6813      	ldr	r3, [r2, #0]
 8009268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800926c:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800926e:	2300      	movs	r3, #0
 8009270:	9306      	str	r3, [sp, #24]
 8009272:	6803      	ldr	r3, [r0, #0]
 8009274:	695a      	ldr	r2, [r3, #20]
 8009276:	9206      	str	r2, [sp, #24]
 8009278:	699a      	ldr	r2, [r3, #24]
 800927a:	9206      	str	r2, [sp, #24]
 800927c:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	e76e      	b.n	8009166 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009288:	6802      	ldr	r2, [r0, #0]
 800928a:	6813      	ldr	r3, [r2, #0]
 800928c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	e7b9      	b.n	8009208 <I2C_Master_ADDR+0x104>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009294:	2910      	cmp	r1, #16
 8009296:	d804      	bhi.n	80092a2 <I2C_Master_ADDR+0x19e>
 8009298:	4b25      	ldr	r3, [pc, #148]	; (8009330 <I2C_Master_ADDR+0x22c>)
 800929a:	40cb      	lsrs	r3, r1
 800929c:	f013 0f01 	tst.w	r3, #1
 80092a0:	d119      	bne.n	80092d6 <I2C_Master_ADDR+0x1d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092a2:	6802      	ldr	r2, [r0, #0]
 80092a4:	6813      	ldr	r3, [r2, #0]
 80092a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092aa:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092ac:	6802      	ldr	r2, [r0, #0]
 80092ae:	6813      	ldr	r3, [r2, #0]
 80092b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80092b4:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80092b6:	6803      	ldr	r3, [r0, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80092be:	d016      	beq.n	80092ee <I2C_Master_ADDR+0x1ea>
 80092c0:	2920      	cmp	r1, #32
 80092c2:	d81d      	bhi.n	8009300 <I2C_Master_ADDR+0x1fc>
 80092c4:	2908      	cmp	r1, #8
 80092c6:	d20c      	bcs.n	80092e2 <I2C_Master_ADDR+0x1de>
 80092c8:	2901      	cmp	r1, #1
 80092ca:	d110      	bne.n	80092ee <I2C_Master_ADDR+0x1ea>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092d2:	605a      	str	r2, [r3, #4]
 80092d4:	e00b      	b.n	80092ee <I2C_Master_ADDR+0x1ea>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092d6:	6802      	ldr	r2, [r0, #0]
 80092d8:	6813      	ldr	r3, [r2, #0]
 80092da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	e7e9      	b.n	80092b6 <I2C_Master_ADDR+0x1b2>
 80092e2:	3908      	subs	r1, #8
 80092e4:	4a13      	ldr	r2, [pc, #76]	; (8009334 <I2C_Master_ADDR+0x230>)
 80092e6:	40ca      	lsrs	r2, r1
 80092e8:	f012 0f01 	tst.w	r2, #1
 80092ec:	d1ee      	bne.n	80092cc <I2C_Master_ADDR+0x1c8>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092ee:	2300      	movs	r3, #0
 80092f0:	9307      	str	r3, [sp, #28]
 80092f2:	6803      	ldr	r3, [r0, #0]
 80092f4:	695a      	ldr	r2, [r3, #20]
 80092f6:	9207      	str	r2, [sp, #28]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	9307      	str	r3, [sp, #28]
 80092fc:	9b07      	ldr	r3, [sp, #28]
 80092fe:	e732      	b.n	8009166 <I2C_Master_ADDR+0x62>
 8009300:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8009304:	d1f3      	bne.n	80092ee <I2C_Master_ADDR+0x1ea>
 8009306:	e7e1      	b.n	80092cc <I2C_Master_ADDR+0x1c8>
 8009308:	3908      	subs	r1, #8
 800930a:	4a0a      	ldr	r2, [pc, #40]	; (8009334 <I2C_Master_ADDR+0x230>)
 800930c:	40ca      	lsrs	r2, r1
 800930e:	f012 0f01 	tst.w	r2, #1
 8009312:	f47f af5f 	bne.w	80091d4 <I2C_Master_ADDR+0xd0>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009316:	2300      	movs	r3, #0
 8009318:	9308      	str	r3, [sp, #32]
 800931a:	6803      	ldr	r3, [r0, #0]
 800931c:	695a      	ldr	r2, [r3, #20]
 800931e:	9208      	str	r2, [sp, #32]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	9308      	str	r3, [sp, #32]
 8009324:	9b08      	ldr	r3, [sp, #32]
 8009326:	e71e      	b.n	8009166 <I2C_Master_ADDR+0x62>
 8009328:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800932c:	d1f3      	bne.n	8009316 <I2C_Master_ADDR+0x212>
 800932e:	e751      	b.n	80091d4 <I2C_Master_ADDR+0xd0>
 8009330:	00010014 	.word	0x00010014
 8009334:	01000101 	.word	0x01000101

08009338 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8009338:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800933a:	b29b      	uxth	r3, r3
 800933c:	b15b      	cbz	r3, 8009356 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800933e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009340:	6803      	ldr	r3, [r0, #0]
 8009342:	7812      	ldrb	r2, [r2, #0]
 8009344:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009346:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009348:	3301      	adds	r3, #1
 800934a:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800934c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29b      	uxth	r3, r3
 8009354:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8009356:	4770      	bx	lr

08009358 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8009358:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800935a:	b29b      	uxth	r3, r3
 800935c:	b15b      	cbz	r3, 8009376 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800935e:	6803      	ldr	r3, [r0, #0]
 8009360:	691a      	ldr	r2, [r3, #16]
 8009362:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009364:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009366:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009368:	3301      	adds	r3, #1
 800936a:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800936c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b29b      	uxth	r3, r3
 8009374:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8009376:	4770      	bx	lr

08009378 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009378:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800937e:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	08db      	lsrs	r3, r3, #3
 8009384:	4a0d      	ldr	r2, [pc, #52]	; (80093bc <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	0a1b      	lsrs	r3, r3, #8
 800938c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009390:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8009392:	9b01      	ldr	r3, [sp, #4]
 8009394:	3b01      	subs	r3, #1
 8009396:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8009398:	9b01      	ldr	r3, [sp, #4]
 800939a:	b133      	cbz	r3, 80093aa <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800939c:	6803      	ldr	r3, [r0, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80093a4:	d1f5      	bne.n	8009392 <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 80093a6:	2000      	movs	r0, #0
 80093a8:	e004      	b.n	80093b4 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80093ac:	f043 0320 	orr.w	r3, r3, #32
 80093b0:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 80093b2:	2001      	movs	r0, #1
}
 80093b4:	b002      	add	sp, #8
 80093b6:	4770      	bx	lr
 80093b8:	20000000 	.word	0x20000000
 80093bc:	14f8b589 	.word	0x14f8b589

080093c0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093c0:	6803      	ldr	r3, [r0, #0]
 80093c2:	695a      	ldr	r2, [r3, #20]
 80093c4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80093c8:	d101      	bne.n	80093ce <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80093ca:	2000      	movs	r0, #0
}
 80093cc:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80093d2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80093d4:	2300      	movs	r3, #0
 80093d6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80093d8:	2220      	movs	r2, #32
 80093da:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093de:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80093e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80093e4:	f042 0204 	orr.w	r2, r2, #4
 80093e8:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80093ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80093ee:	2001      	movs	r0, #1
 80093f0:	4770      	bx	lr

080093f2 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80093f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80093f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80093f8:	d004      	beq.n	8009404 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80093fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80093fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009400:	d003      	beq.n	800940a <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009402:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009404:	2301      	movs	r3, #1
 8009406:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009408:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800940a:	2308      	movs	r3, #8
 800940c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800940e:	e7f8      	b.n	8009402 <I2C_ConvertOtherXferOptions+0x10>

08009410 <I2C_WaitOnFlagUntilTimeout>:
{
 8009410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	4606      	mov	r6, r0
 8009416:	460c      	mov	r4, r1
 8009418:	4617      	mov	r7, r2
 800941a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800941c:	e03b      	b.n	8009496 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800941e:	f7fe fd8d 	bl	8007f3c <HAL_GetTick>
 8009422:	9b06      	ldr	r3, [sp, #24]
 8009424:	1ac0      	subs	r0, r0, r3
 8009426:	4540      	cmp	r0, r8
 8009428:	d802      	bhi.n	8009430 <I2C_WaitOnFlagUntilTimeout+0x20>
 800942a:	f1b8 0f00 	cmp.w	r8, #0
 800942e:	d132      	bne.n	8009496 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009430:	2d01      	cmp	r5, #1
 8009432:	d018      	beq.n	8009466 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009434:	6833      	ldr	r3, [r6, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	ea24 0303 	bic.w	r3, r4, r3
 800943c:	b29b      	uxth	r3, r3
 800943e:	fab3 f383 	clz	r3, r3
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	429f      	cmp	r7, r3
 8009446:	d126      	bne.n	8009496 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009448:	2300      	movs	r3, #0
 800944a:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800944c:	2220      	movs	r2, #32
 800944e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009452:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009456:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8009458:	f042 0220 	orr.w	r2, r2, #32
 800945c:	6432      	str	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800945e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_ERROR;
 8009462:	2001      	movs	r0, #1
 8009464:	e027      	b.n	80094b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009466:	6833      	ldr	r3, [r6, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	ea24 0303 	bic.w	r3, r4, r3
 800946e:	b29b      	uxth	r3, r3
 8009470:	fab3 f383 	clz	r3, r3
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	e7e5      	b.n	8009444 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009478:	6833      	ldr	r3, [r6, #0]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	ea24 0c03 	bic.w	ip, r4, r3
 8009480:	fa1f fc8c 	uxth.w	ip, ip
 8009484:	fabc fc8c 	clz	ip, ip
 8009488:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800948c:	4567      	cmp	r7, ip
 800948e:	d111      	bne.n	80094b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8009490:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009494:	d1c3      	bne.n	800941e <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009496:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800949a:	2d01      	cmp	r5, #1
 800949c:	d0ec      	beq.n	8009478 <I2C_WaitOnFlagUntilTimeout+0x68>
 800949e:	6833      	ldr	r3, [r6, #0]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	ea24 0c03 	bic.w	ip, r4, r3
 80094a6:	fa1f fc8c 	uxth.w	ip, ip
 80094aa:	fabc fc8c 	clz	ip, ip
 80094ae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80094b2:	e7eb      	b.n	800948c <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80094b4:	2000      	movs	r0, #0
}
 80094b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80094ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094be:	4605      	mov	r5, r0
 80094c0:	460e      	mov	r6, r1
 80094c2:	4690      	mov	r8, r2
 80094c4:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094c6:	e053      	b.n	8009570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ce:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094d6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80094d8:	2300      	movs	r3, #0
 80094da:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094dc:	2220      	movs	r2, #32
 80094de:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094e2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094e6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80094e8:	f042 0204 	orr.w	r2, r2, #4
 80094ec:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80094ee:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80094f2:	2001      	movs	r0, #1
 80094f4:	e04a      	b.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f6:	f7fe fd21 	bl	8007f3c <HAL_GetTick>
 80094fa:	eba0 0009 	sub.w	r0, r0, r9
 80094fe:	4540      	cmp	r0, r8
 8009500:	d802      	bhi.n	8009508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8009502:	f1b8 0f00 	cmp.w	r8, #0
 8009506:	d133      	bne.n	8009570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009508:	2f01      	cmp	r7, #1
 800950a:	d017      	beq.n	800953c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	ea26 0303 	bic.w	r3, r6, r3
 8009514:	b29b      	uxth	r3, r3
 8009516:	3b00      	subs	r3, #0
 8009518:	bf18      	it	ne
 800951a:	2301      	movne	r3, #1
 800951c:	b343      	cbz	r3, 8009570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800951e:	2300      	movs	r3, #0
 8009520:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009522:	2220      	movs	r2, #32
 8009524:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009528:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800952c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800952e:	f042 0220 	orr.w	r2, r2, #32
 8009532:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8009534:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8009538:	2001      	movs	r0, #1
 800953a:	e027      	b.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	ea26 0303 	bic.w	r3, r6, r3
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b00      	subs	r3, #0
 8009548:	bf18      	it	ne
 800954a:	2301      	movne	r3, #1
 800954c:	e7e6      	b.n	800951c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	699c      	ldr	r4, [r3, #24]
 8009552:	ea26 0404 	bic.w	r4, r6, r4
 8009556:	b2a4      	uxth	r4, r4
 8009558:	3c00      	subs	r4, #0
 800955a:	bf18      	it	ne
 800955c:	2401      	movne	r4, #1
 800955e:	b1a4      	cbz	r4, 800958a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	695a      	ldr	r2, [r3, #20]
 8009564:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8009568:	d1ae      	bne.n	80094c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800956a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800956e:	d1c2      	bne.n	80094f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009570:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8009574:	2f01      	cmp	r7, #1
 8009576:	d1ea      	bne.n	800954e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	695c      	ldr	r4, [r3, #20]
 800957c:	ea26 0404 	bic.w	r4, r6, r4
 8009580:	b2a4      	uxth	r4, r4
 8009582:	3c00      	subs	r4, #0
 8009584:	bf18      	it	ne
 8009586:	2401      	movne	r4, #1
 8009588:	e7e9      	b.n	800955e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 800958a:	2000      	movs	r0, #0
}
 800958c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009590 <I2C_MasterRequestWrite>:
{
 8009590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009592:	b083      	sub	sp, #12
 8009594:	4604      	mov	r4, r0
 8009596:	460d      	mov	r5, r1
 8009598:	4616      	mov	r6, r2
 800959a:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800959c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800959e:	2b08      	cmp	r3, #8
 80095a0:	d00d      	beq.n	80095be <I2C_MasterRequestWrite+0x2e>
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d00b      	beq.n	80095be <I2C_MasterRequestWrite+0x2e>
 80095a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095aa:	d008      	beq.n	80095be <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80095ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80095ae:	2b12      	cmp	r3, #18
 80095b0:	d10a      	bne.n	80095c8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095b2:	6802      	ldr	r2, [r0, #0]
 80095b4:	6813      	ldr	r3, [r2, #0]
 80095b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	e004      	b.n	80095c8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	6813      	ldr	r3, [r2, #0]
 80095c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095c6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095c8:	9700      	str	r7, [sp, #0]
 80095ca:	4633      	mov	r3, r6
 80095cc:	2200      	movs	r2, #0
 80095ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7ff ff1c 	bl	8009410 <I2C_WaitOnFlagUntilTimeout>
 80095d8:	b980      	cbnz	r0, 80095fc <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80095da:	6923      	ldr	r3, [r4, #16]
 80095dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095e0:	d116      	bne.n	8009610 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80095e8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095ea:	463b      	mov	r3, r7
 80095ec:	4632      	mov	r2, r6
 80095ee:	4913      	ldr	r1, [pc, #76]	; (800963c <I2C_MasterRequestWrite+0xac>)
 80095f0:	4620      	mov	r0, r4
 80095f2:	f7ff ff62 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095f6:	b9f8      	cbnz	r0, 8009638 <I2C_MasterRequestWrite+0xa8>
}
 80095f8:	b003      	add	sp, #12
 80095fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009604:	d002      	beq.n	800960c <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800960a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800960c:	2003      	movs	r0, #3
 800960e:	e7f3      	b.n	80095f8 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009610:	11eb      	asrs	r3, r5, #7
 8009612:	6822      	ldr	r2, [r4, #0]
 8009614:	f003 0306 	and.w	r3, r3, #6
 8009618:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800961c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800961e:	463b      	mov	r3, r7
 8009620:	4632      	mov	r2, r6
 8009622:	4907      	ldr	r1, [pc, #28]	; (8009640 <I2C_MasterRequestWrite+0xb0>)
 8009624:	4620      	mov	r0, r4
 8009626:	f7ff ff48 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800962a:	b918      	cbnz	r0, 8009634 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	b2ed      	uxtb	r5, r5
 8009630:	611d      	str	r5, [r3, #16]
 8009632:	e7da      	b.n	80095ea <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8009634:	2001      	movs	r0, #1
 8009636:	e7df      	b.n	80095f8 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8009638:	2001      	movs	r0, #1
 800963a:	e7dd      	b.n	80095f8 <I2C_MasterRequestWrite+0x68>
 800963c:	00010002 	.word	0x00010002
 8009640:	00010008 	.word	0x00010008

08009644 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	4604      	mov	r4, r0
 8009648:	460d      	mov	r5, r1
 800964a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009654:	d121      	bne.n	800969a <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009656:	4620      	mov	r0, r4
 8009658:	f7ff feb2 	bl	80093c0 <I2C_IsAcknowledgeFailed>
 800965c:	b9f8      	cbnz	r0, 800969e <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800965e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009662:	d0f3      	beq.n	800964c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009664:	f7fe fc6a 	bl	8007f3c <HAL_GetTick>
 8009668:	1b80      	subs	r0, r0, r6
 800966a:	42a8      	cmp	r0, r5
 800966c:	d801      	bhi.n	8009672 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800966e:	2d00      	cmp	r5, #0
 8009670:	d1ec      	bne.n	800964c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	f013 0f80 	tst.w	r3, #128	; 0x80
 800967a:	d1e7      	bne.n	800964c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800967c:	2300      	movs	r3, #0
 800967e:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009680:	2220      	movs	r2, #32
 8009682:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009686:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800968a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800968c:	f042 0220 	orr.w	r2, r2, #32
 8009690:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8009692:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8009696:	2001      	movs	r0, #1
 8009698:	e000      	b.n	800969c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 800969a:	2000      	movs	r0, #0
}
 800969c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800969e:	2001      	movs	r0, #1
 80096a0:	e7fc      	b.n	800969c <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080096a2 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80096a2:	b570      	push	{r4, r5, r6, lr}
 80096a4:	4604      	mov	r4, r0
 80096a6:	460d      	mov	r5, r1
 80096a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	f013 0f04 	tst.w	r3, #4
 80096b2:	d121      	bne.n	80096f8 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096b4:	4620      	mov	r0, r4
 80096b6:	f7ff fe83 	bl	80093c0 <I2C_IsAcknowledgeFailed>
 80096ba:	b9f8      	cbnz	r0, 80096fc <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80096bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80096c0:	d0f3      	beq.n	80096aa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c2:	f7fe fc3b 	bl	8007f3c <HAL_GetTick>
 80096c6:	1b80      	subs	r0, r0, r6
 80096c8:	42a8      	cmp	r0, r5
 80096ca:	d801      	bhi.n	80096d0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80096cc:	2d00      	cmp	r5, #0
 80096ce:	d1ec      	bne.n	80096aa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	f013 0f04 	tst.w	r3, #4
 80096d8:	d1e7      	bne.n	80096aa <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096da:	2300      	movs	r3, #0
 80096dc:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80096de:	2220      	movs	r2, #32
 80096e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80096ea:	f042 0220 	orr.w	r2, r2, #32
 80096ee:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80096f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80096f4:	2001      	movs	r0, #1
 80096f6:	e000      	b.n	80096fa <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80096f8:	2000      	movs	r0, #0
}
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80096fc:	2001      	movs	r0, #1
 80096fe:	e7fc      	b.n	80096fa <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08009700 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8009700:	2800      	cmp	r0, #0
 8009702:	f000 80cc 	beq.w	800989e <HAL_I2C_Init+0x19e>
{
 8009706:	b570      	push	{r4, r5, r6, lr}
 8009708:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800970a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800970e:	2b00      	cmp	r3, #0
 8009710:	d077      	beq.n	8009802 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009712:	2324      	movs	r3, #36	; 0x24
 8009714:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	6813      	ldr	r3, [r2, #0]
 800971c:	f023 0301 	bic.w	r3, r3, #1
 8009720:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	6813      	ldr	r3, [r2, #0]
 8009726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800972a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800972c:	6822      	ldr	r2, [r4, #0]
 800972e:	6813      	ldr	r3, [r2, #0]
 8009730:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009734:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009736:	f001 f9bf 	bl	800aab8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800973a:	6862      	ldr	r2, [r4, #4]
 800973c:	4b5a      	ldr	r3, [pc, #360]	; (80098a8 <HAL_I2C_Init+0x1a8>)
 800973e:	429a      	cmp	r2, r3
 8009740:	d864      	bhi.n	800980c <HAL_I2C_Init+0x10c>
 8009742:	4b5a      	ldr	r3, [pc, #360]	; (80098ac <HAL_I2C_Init+0x1ac>)
 8009744:	4298      	cmp	r0, r3
 8009746:	bf8c      	ite	hi
 8009748:	2300      	movhi	r3, #0
 800974a:	2301      	movls	r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	f040 80a8 	bne.w	80098a2 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8009752:	4957      	ldr	r1, [pc, #348]	; (80098b0 <HAL_I2C_Init+0x1b0>)
 8009754:	fba1 3100 	umull	r3, r1, r1, r0
 8009758:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800975a:	6825      	ldr	r5, [r4, #0]
 800975c:	686a      	ldr	r2, [r5, #4]
 800975e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009762:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8009766:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009768:	6821      	ldr	r1, [r4, #0]
 800976a:	6a0a      	ldr	r2, [r1, #32]
 800976c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009770:	6866      	ldr	r6, [r4, #4]
 8009772:	4d4d      	ldr	r5, [pc, #308]	; (80098a8 <HAL_I2C_Init+0x1a8>)
 8009774:	42ae      	cmp	r6, r5
 8009776:	d84f      	bhi.n	8009818 <HAL_I2C_Init+0x118>
 8009778:	3301      	adds	r3, #1
 800977a:	4313      	orrs	r3, r2
 800977c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800977e:	6821      	ldr	r1, [r4, #0]
 8009780:	69ca      	ldr	r2, [r1, #28]
 8009782:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8009786:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800978a:	6865      	ldr	r5, [r4, #4]
 800978c:	4b46      	ldr	r3, [pc, #280]	; (80098a8 <HAL_I2C_Init+0x1a8>)
 800978e:	429d      	cmp	r5, r3
 8009790:	d84c      	bhi.n	800982c <HAL_I2C_Init+0x12c>
 8009792:	1e43      	subs	r3, r0, #1
 8009794:	006d      	lsls	r5, r5, #1
 8009796:	fbb3 f3f5 	udiv	r3, r3, r5
 800979a:	3301      	adds	r3, #1
 800979c:	f640 70fc 	movw	r0, #4092	; 0xffc
 80097a0:	4203      	tst	r3, r0
 80097a2:	d078      	beq.n	8009896 <HAL_I2C_Init+0x196>
 80097a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097a8:	431a      	orrs	r2, r3
 80097aa:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80097ac:	6821      	ldr	r1, [r4, #0]
 80097ae:	680b      	ldr	r3, [r1, #0]
 80097b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80097b4:	69e2      	ldr	r2, [r4, #28]
 80097b6:	6a20      	ldr	r0, [r4, #32]
 80097b8:	4302      	orrs	r2, r0
 80097ba:	4313      	orrs	r3, r2
 80097bc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80097be:	6821      	ldr	r1, [r4, #0]
 80097c0:	688b      	ldr	r3, [r1, #8]
 80097c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80097c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097ca:	6922      	ldr	r2, [r4, #16]
 80097cc:	68e0      	ldr	r0, [r4, #12]
 80097ce:	4302      	orrs	r2, r0
 80097d0:	4313      	orrs	r3, r2
 80097d2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80097d4:	6821      	ldr	r1, [r4, #0]
 80097d6:	68cb      	ldr	r3, [r1, #12]
 80097d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097dc:	6962      	ldr	r2, [r4, #20]
 80097de:	69a0      	ldr	r0, [r4, #24]
 80097e0:	4302      	orrs	r2, r0
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80097e6:	6822      	ldr	r2, [r4, #0]
 80097e8:	6813      	ldr	r3, [r2, #0]
 80097ea:	f043 0301 	orr.w	r3, r3, #1
 80097ee:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097f0:	2000      	movs	r0, #0
 80097f2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80097f4:	2320      	movs	r3, #32
 80097f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80097fa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8009800:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8009802:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8009806:	f7fd fe5b 	bl	80074c0 <HAL_I2C_MspInit>
 800980a:	e782      	b.n	8009712 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800980c:	4b29      	ldr	r3, [pc, #164]	; (80098b4 <HAL_I2C_Init+0x1b4>)
 800980e:	4298      	cmp	r0, r3
 8009810:	bf8c      	ite	hi
 8009812:	2300      	movhi	r3, #0
 8009814:	2301      	movls	r3, #1
 8009816:	e799      	b.n	800974c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009818:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800981c:	fb05 f303 	mul.w	r3, r5, r3
 8009820:	4d25      	ldr	r5, [pc, #148]	; (80098b8 <HAL_I2C_Init+0x1b8>)
 8009822:	fba5 5303 	umull	r5, r3, r5, r3
 8009826:	099b      	lsrs	r3, r3, #6
 8009828:	3301      	adds	r3, #1
 800982a:	e7a6      	b.n	800977a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800982c:	68a6      	ldr	r6, [r4, #8]
 800982e:	b9be      	cbnz	r6, 8009860 <HAL_I2C_Init+0x160>
 8009830:	1e43      	subs	r3, r0, #1
 8009832:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8009836:	fbb3 f3fc 	udiv	r3, r3, ip
 800983a:	3301      	adds	r3, #1
 800983c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009840:	fab3 f383 	clz	r3, r3
 8009844:	095b      	lsrs	r3, r3, #5
 8009846:	bb43      	cbnz	r3, 800989a <HAL_I2C_Init+0x19a>
 8009848:	b9c6      	cbnz	r6, 800987c <HAL_I2C_Init+0x17c>
 800984a:	1e43      	subs	r3, r0, #1
 800984c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009850:	fbb3 f3f5 	udiv	r3, r3, r5
 8009854:	3301      	adds	r3, #1
 8009856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800985a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800985e:	e7a3      	b.n	80097a8 <HAL_I2C_Init+0xa8>
 8009860:	1e43      	subs	r3, r0, #1
 8009862:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8009866:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800986a:	fbb3 f3fc 	udiv	r3, r3, ip
 800986e:	3301      	adds	r3, #1
 8009870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009874:	fab3 f383 	clz	r3, r3
 8009878:	095b      	lsrs	r3, r3, #5
 800987a:	e7e4      	b.n	8009846 <HAL_I2C_Init+0x146>
 800987c:	1e43      	subs	r3, r0, #1
 800987e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8009882:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8009886:	fbb3 f3f5 	udiv	r3, r3, r5
 800988a:	3301      	adds	r3, #1
 800988c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009894:	e788      	b.n	80097a8 <HAL_I2C_Init+0xa8>
 8009896:	2304      	movs	r3, #4
 8009898:	e786      	b.n	80097a8 <HAL_I2C_Init+0xa8>
 800989a:	2301      	movs	r3, #1
 800989c:	e784      	b.n	80097a8 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800989e:	2001      	movs	r0, #1
}
 80098a0:	4770      	bx	lr
    return HAL_ERROR;
 80098a2:	2001      	movs	r0, #1
 80098a4:	e7ac      	b.n	8009800 <HAL_I2C_Init+0x100>
 80098a6:	bf00      	nop
 80098a8:	000186a0 	.word	0x000186a0
 80098ac:	001e847f 	.word	0x001e847f
 80098b0:	431bde83 	.word	0x431bde83
 80098b4:	003d08ff 	.word	0x003d08ff
 80098b8:	10624dd3 	.word	0x10624dd3

080098bc <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80098bc:	b1a8      	cbz	r0, 80098ea <HAL_I2C_DeInit+0x2e>
{
 80098be:	b510      	push	{r4, lr}
 80098c0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80098c2:	2324      	movs	r3, #36	; 0x24
 80098c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80098c8:	6802      	ldr	r2, [r0, #0]
 80098ca:	6813      	ldr	r3, [r2, #0]
 80098cc:	f023 0301 	bic.w	r3, r3, #1
 80098d0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80098d2:	f7fd fe81 	bl	80075d8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80098d6:	2000      	movs	r0, #0
 80098d8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80098da:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80098de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80098e0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 80098e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80098e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80098ea:	2001      	movs	r0, #1
}
 80098ec:	4770      	bx	lr
	...

080098f0 <HAL_I2C_Master_Transmit>:
{
 80098f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098f4:	b085      	sub	sp, #20
 80098f6:	4604      	mov	r4, r0
 80098f8:	460f      	mov	r7, r1
 80098fa:	4691      	mov	r9, r2
 80098fc:	4698      	mov	r8, r3
 80098fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8009900:	f7fe fb1c 	bl	8007f3c <HAL_GetTick>
 8009904:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009906:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800990a:	b2c0      	uxtb	r0, r0
 800990c:	2820      	cmp	r0, #32
 800990e:	d004      	beq.n	800991a <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8009910:	2702      	movs	r7, #2
}
 8009912:	4638      	mov	r0, r7
 8009914:	b005      	add	sp, #20
 8009916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800991a:	9500      	str	r5, [sp, #0]
 800991c:	2319      	movs	r3, #25
 800991e:	2201      	movs	r2, #1
 8009920:	494f      	ldr	r1, [pc, #316]	; (8009a60 <HAL_I2C_Master_Transmit+0x170>)
 8009922:	4620      	mov	r0, r4
 8009924:	f7ff fd74 	bl	8009410 <I2C_WaitOnFlagUntilTimeout>
 8009928:	2800      	cmp	r0, #0
 800992a:	f040 8092 	bne.w	8009a52 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 800992e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009932:	2b01      	cmp	r3, #1
 8009934:	f000 808f 	beq.w	8009a56 <HAL_I2C_Master_Transmit+0x166>
 8009938:	2301      	movs	r3, #1
 800993a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	f012 0f01 	tst.w	r2, #1
 8009946:	d103      	bne.n	8009950 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009958:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800995a:	2321      	movs	r3, #33	; 0x21
 800995c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009960:	2310      	movs	r3, #16
 8009962:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009966:	2300      	movs	r3, #0
 8009968:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800996a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800996e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009972:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009974:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009976:	4b3b      	ldr	r3, [pc, #236]	; (8009a64 <HAL_I2C_Master_Transmit+0x174>)
 8009978:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800997a:	462b      	mov	r3, r5
 800997c:	4632      	mov	r2, r6
 800997e:	4639      	mov	r1, r7
 8009980:	4620      	mov	r0, r4
 8009982:	f7ff fe05 	bl	8009590 <I2C_MasterRequestWrite>
 8009986:	4607      	mov	r7, r0
 8009988:	2800      	cmp	r0, #0
 800998a:	d166      	bne.n	8009a5a <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800998c:	2300      	movs	r3, #0
 800998e:	9303      	str	r3, [sp, #12]
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	695a      	ldr	r2, [r3, #20]
 8009994:	9203      	str	r2, [sp, #12]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	9303      	str	r3, [sp, #12]
 800999a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800999c:	e011      	b.n	80099c2 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800999e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d001      	beq.n	80099a8 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80099a4:	2701      	movs	r7, #1
 80099a6:	e7b4      	b.n	8009912 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	6813      	ldr	r3, [r2, #0]
 80099ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	e7f7      	b.n	80099a4 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b4:	462a      	mov	r2, r5
 80099b6:	4631      	mov	r1, r6
 80099b8:	4620      	mov	r0, r4
 80099ba:	f7ff fe72 	bl	80096a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d12e      	bne.n	8009a20 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80099c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d036      	beq.n	8009a36 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099c8:	462a      	mov	r2, r5
 80099ca:	4631      	mov	r1, r6
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7ff fe39 	bl	8009644 <I2C_WaitOnTXEFlagUntilTimeout>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d1e3      	bne.n	800999e <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	7812      	ldrb	r2, [r2, #0]
 80099dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80099de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80099e4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80099e6:	b289      	uxth	r1, r1
 80099e8:	3901      	subs	r1, #1
 80099ea:	b289      	uxth	r1, r1
 80099ec:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80099ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80099f0:	3b01      	subs	r3, #1
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	6951      	ldr	r1, [r2, #20]
 80099fa:	f011 0f04 	tst.w	r1, #4
 80099fe:	d0d9      	beq.n	80099b4 <HAL_I2C_Master_Transmit+0xc4>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0d7      	beq.n	80099b4 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a04:	7843      	ldrb	r3, [r0, #1]
 8009a06:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8009a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8009a0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	3b01      	subs	r3, #1
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8009a18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	8523      	strh	r3, [r4, #40]	; 0x28
 8009a1e:	e7c9      	b.n	80099b4 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d001      	beq.n	8009a2a <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8009a26:	2701      	movs	r7, #1
 8009a28:	e773      	b.n	8009912 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	6813      	ldr	r3, [r2, #0]
 8009a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	e7f7      	b.n	8009a26 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	6813      	ldr	r3, [r2, #0]
 8009a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a3e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009a40:	2320      	movs	r3, #32
 8009a42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8009a4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8009a50:	e75f      	b.n	8009912 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8009a52:	2702      	movs	r7, #2
 8009a54:	e75d      	b.n	8009912 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8009a56:	2702      	movs	r7, #2
 8009a58:	e75b      	b.n	8009912 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8009a5a:	2701      	movs	r7, #1
 8009a5c:	e759      	b.n	8009912 <HAL_I2C_Master_Transmit+0x22>
 8009a5e:	bf00      	nop
 8009a60:	00100002 	.word	0x00100002
 8009a64:	ffff0000 	.word	0xffff0000

08009a68 <HAL_I2C_Slave_Seq_Transmit_IT>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a68:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
 8009a6c:	f00c 0c28 	and.w	ip, ip, #40	; 0x28
 8009a70:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8009a74:	d138      	bne.n	8009ae8 <HAL_I2C_Slave_Seq_Transmit_IT+0x80>
    if ((pData == NULL) || (Size == 0U))
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d038      	beq.n	8009aec <HAL_I2C_Slave_Seq_Transmit_IT+0x84>
 8009a7a:	2a00      	cmp	r2, #0
 8009a7c:	d038      	beq.n	8009af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x88>
{
 8009a7e:	b430      	push	{r4, r5}
 8009a80:	b082      	sub	sp, #8
    __HAL_LOCK(hi2c);
 8009a82:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8009a86:	2c01      	cmp	r4, #1
 8009a88:	d034      	beq.n	8009af4 <HAL_I2C_Slave_Seq_Transmit_IT+0x8c>
 8009a8a:	2401      	movs	r4, #1
 8009a8c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a90:	6804      	ldr	r4, [r0, #0]
 8009a92:	6825      	ldr	r5, [r4, #0]
 8009a94:	f015 0f01 	tst.w	r5, #1
 8009a98:	d103      	bne.n	8009aa2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
      __HAL_I2C_ENABLE(hi2c);
 8009a9a:	6825      	ldr	r5, [r4, #0]
 8009a9c:	f045 0501 	orr.w	r5, r5, #1
 8009aa0:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009aa2:	6805      	ldr	r5, [r0, #0]
 8009aa4:	682c      	ldr	r4, [r5, #0]
 8009aa6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8009aaa:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8009aac:	2429      	movs	r4, #41	; 0x29
 8009aae:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8009ab2:	2420      	movs	r4, #32
 8009ab4:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ab8:	2400      	movs	r4, #0
 8009aba:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8009abc:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009abe:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ac0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009ac2:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8009ac4:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ac6:	9401      	str	r4, [sp, #4]
 8009ac8:	6803      	ldr	r3, [r0, #0]
 8009aca:	695a      	ldr	r2, [r3, #20]
 8009acc:	9201      	str	r2, [sp, #4]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	9201      	str	r2, [sp, #4]
 8009ad2:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8009ad4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8009ade:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 8009ae0:	4620      	mov	r0, r4
}
 8009ae2:	b002      	add	sp, #8
 8009ae4:	bc30      	pop	{r4, r5}
 8009ae6:	4770      	bx	lr
    return HAL_BUSY;
 8009ae8:	2002      	movs	r0, #2
 8009aea:	4770      	bx	lr
      return  HAL_ERROR;
 8009aec:	2001      	movs	r0, #1
 8009aee:	4770      	bx	lr
 8009af0:	2001      	movs	r0, #1
}
 8009af2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8009af4:	2002      	movs	r0, #2
 8009af6:	e7f4      	b.n	8009ae2 <HAL_I2C_Slave_Seq_Transmit_IT+0x7a>

08009af8 <HAL_I2C_Slave_Seq_Receive_IT>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009af8:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
 8009afc:	f00c 0c28 	and.w	ip, ip, #40	; 0x28
 8009b00:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8009b04:	d138      	bne.n	8009b78 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
    if ((pData == NULL) || (Size == 0U))
 8009b06:	2900      	cmp	r1, #0
 8009b08:	d038      	beq.n	8009b7c <HAL_I2C_Slave_Seq_Receive_IT+0x84>
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	d038      	beq.n	8009b80 <HAL_I2C_Slave_Seq_Receive_IT+0x88>
{
 8009b0e:	b430      	push	{r4, r5}
 8009b10:	b082      	sub	sp, #8
    __HAL_LOCK(hi2c);
 8009b12:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8009b16:	2c01      	cmp	r4, #1
 8009b18:	d034      	beq.n	8009b84 <HAL_I2C_Slave_Seq_Receive_IT+0x8c>
 8009b1a:	2401      	movs	r4, #1
 8009b1c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b20:	6804      	ldr	r4, [r0, #0]
 8009b22:	6825      	ldr	r5, [r4, #0]
 8009b24:	f015 0f01 	tst.w	r5, #1
 8009b28:	d103      	bne.n	8009b32 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
      __HAL_I2C_ENABLE(hi2c);
 8009b2a:	6825      	ldr	r5, [r4, #0]
 8009b2c:	f045 0501 	orr.w	r5, r5, #1
 8009b30:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b32:	6805      	ldr	r5, [r0, #0]
 8009b34:	682c      	ldr	r4, [r5, #0]
 8009b36:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8009b3a:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8009b3c:	242a      	movs	r4, #42	; 0x2a
 8009b3e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8009b42:	2420      	movs	r4, #32
 8009b44:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b48:	2400      	movs	r4, #0
 8009b4a:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8009b4c:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b4e:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b50:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009b52:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8009b54:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b56:	9401      	str	r4, [sp, #4]
 8009b58:	6803      	ldr	r3, [r0, #0]
 8009b5a:	695a      	ldr	r2, [r3, #20]
 8009b5c:	9201      	str	r2, [sp, #4]
 8009b5e:	699a      	ldr	r2, [r3, #24]
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8009b64:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8009b6e:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 8009b70:	4620      	mov	r0, r4
}
 8009b72:	b002      	add	sp, #8
 8009b74:	bc30      	pop	{r4, r5}
 8009b76:	4770      	bx	lr
    return HAL_BUSY;
 8009b78:	2002      	movs	r0, #2
 8009b7a:	4770      	bx	lr
      return  HAL_ERROR;
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	4770      	bx	lr
 8009b80:	2001      	movs	r0, #1
}
 8009b82:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8009b84:	2002      	movs	r0, #2
 8009b86:	e7f4      	b.n	8009b72 <HAL_I2C_Slave_Seq_Receive_IT+0x7a>

08009b88 <HAL_I2C_EnableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	d001      	beq.n	8009b96 <HAL_I2C_EnableListen_IT+0xe>
    return HAL_BUSY;
 8009b92:	2002      	movs	r0, #2
}
 8009b94:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b96:	2328      	movs	r3, #40	; 0x28
 8009b98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b9c:	6803      	ldr	r3, [r0, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	f012 0f01 	tst.w	r2, #1
 8009ba4:	d103      	bne.n	8009bae <HAL_I2C_EnableListen_IT+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	f042 0201 	orr.w	r2, r2, #1
 8009bac:	601a      	str	r2, [r3, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bae:	6802      	ldr	r2, [r0, #0]
 8009bb0:	6813      	ldr	r3, [r2, #0]
 8009bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bb6:	6013      	str	r3, [r2, #0]
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009bb8:	6802      	ldr	r2, [r0, #0]
 8009bba:	6853      	ldr	r3, [r2, #4]
 8009bbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009bc0:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_I2C_MasterTxCpltCallback>:
}
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_I2C_MasterRxCpltCallback>:
}
 8009bc8:	4770      	bx	lr

08009bca <HAL_I2C_SlaveTxCpltCallback>:
}
 8009bca:	4770      	bx	lr

08009bcc <I2C_SlaveTransmit_TXE>:
{
 8009bcc:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009bce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009bd2:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8009bd4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	b183      	cbz	r3, 8009bfc <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009bda:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009bdc:	6803      	ldr	r3, [r0, #0]
 8009bde:	7809      	ldrb	r1, [r1, #0]
 8009be0:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8009be2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009be4:	3301      	adds	r3, #1
 8009be6:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8009be8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009bf2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	b90b      	cbnz	r3, 8009bfc <I2C_SlaveTransmit_TXE+0x30>
 8009bf8:	2a29      	cmp	r2, #41	; 0x29
 8009bfa:	d000      	beq.n	8009bfe <I2C_SlaveTransmit_TXE+0x32>
}
 8009bfc:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009bfe:	6802      	ldr	r2, [r0, #0]
 8009c00:	6853      	ldr	r3, [r2, #4]
 8009c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c06:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009c08:	2321      	movs	r3, #33	; 0x21
 8009c0a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c0c:	2328      	movs	r3, #40	; 0x28
 8009c0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009c12:	f7ff ffda 	bl	8009bca <HAL_I2C_SlaveTxCpltCallback>
}
 8009c16:	e7f1      	b.n	8009bfc <I2C_SlaveTransmit_TXE+0x30>

08009c18 <I2C_SlaveReceive_RXNE>:
{
 8009c18:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009c1e:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8009c20:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	b183      	cbz	r3, 8009c48 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c26:	6803      	ldr	r3, [r0, #0]
 8009c28:	6919      	ldr	r1, [r3, #16]
 8009c2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009c2c:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8009c2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009c30:	3301      	adds	r3, #1
 8009c32:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8009c34:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009c3e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	b90b      	cbnz	r3, 8009c48 <I2C_SlaveReceive_RXNE+0x30>
 8009c44:	2a2a      	cmp	r2, #42	; 0x2a
 8009c46:	d000      	beq.n	8009c4a <I2C_SlaveReceive_RXNE+0x32>
}
 8009c48:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009c4a:	6802      	ldr	r2, [r0, #0]
 8009c4c:	6853      	ldr	r3, [r2, #4]
 8009c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c52:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009c54:	2322      	movs	r3, #34	; 0x22
 8009c56:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c58:	2328      	movs	r3, #40	; 0x28
 8009c5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c5e:	f7fe f8e1 	bl	8007e24 <HAL_I2C_SlaveRxCpltCallback>
}
 8009c62:	e7f1      	b.n	8009c48 <I2C_SlaveReceive_RXNE+0x30>

08009c64 <I2C_Slave_ADDR>:
{
 8009c64:	b500      	push	{lr}
 8009c66:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c70:	2b28      	cmp	r3, #40	; 0x28
 8009c72:	d00c      	beq.n	8009c8e <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c74:	2300      	movs	r3, #0
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	6802      	ldr	r2, [r0, #0]
 8009c7a:	6951      	ldr	r1, [r2, #20]
 8009c7c:	9101      	str	r1, [sp, #4]
 8009c7e:	6992      	ldr	r2, [r2, #24]
 8009c80:	9201      	str	r2, [sp, #4]
 8009c82:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8009c84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8009c88:	b003      	add	sp, #12
 8009c8a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009c8e:	6802      	ldr	r2, [r0, #0]
 8009c90:	6853      	ldr	r3, [r2, #4]
 8009c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c96:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009c98:	f011 0f04 	tst.w	r1, #4
 8009c9c:	d00b      	beq.n	8009cb6 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009c9e:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009ca0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009ca4:	d109      	bne.n	8009cba <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009ca6:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8009ca8:	2100      	movs	r1, #0
 8009caa:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009cae:	4619      	mov	r1, r3
 8009cb0:	f7fe f876 	bl	8007da0 <HAL_I2C_AddrCallback>
 8009cb4:	e7e8      	b.n	8009c88 <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e7f2      	b.n	8009ca0 <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009cba:	8b02      	ldrh	r2, [r0, #24]
 8009cbc:	e7f4      	b.n	8009ca8 <I2C_Slave_ADDR+0x44>
	...

08009cc0 <I2C_Slave_AF>:
{
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009cc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009cc8:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009cca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009ccc:	2a08      	cmp	r2, #8
 8009cce:	d001      	beq.n	8009cd4 <I2C_Slave_AF+0x14>
 8009cd0:	2a20      	cmp	r2, #32
 8009cd2:	d101      	bne.n	8009cd8 <I2C_Slave_AF+0x18>
 8009cd4:	2b28      	cmp	r3, #40	; 0x28
 8009cd6:	d006      	beq.n	8009ce6 <I2C_Slave_AF+0x26>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009cd8:	2b21      	cmp	r3, #33	; 0x21
 8009cda:	d01f      	beq.n	8009d1c <I2C_Slave_AF+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ce2:	615a      	str	r2, [r3, #20]
}
 8009ce4:	bd10      	pop	{r4, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ce6:	4b1d      	ldr	r3, [pc, #116]	; (8009d5c <I2C_Slave_AF+0x9c>)
 8009ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	6853      	ldr	r3, [r2, #4]
 8009cee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009cf2:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009cfa:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cfc:	6822      	ldr	r2, [r4, #0]
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d04:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8009d14:	4620      	mov	r0, r4
 8009d16:	f7fe f83f 	bl	8007d98 <HAL_I2C_ListenCpltCallback>
 8009d1a:	e7e3      	b.n	8009ce4 <I2C_Slave_AF+0x24>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009d1c:	4b0f      	ldr	r3, [pc, #60]	; (8009d5c <I2C_Slave_AF+0x9c>)
 8009d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d20:	2321      	movs	r3, #33	; 0x21
 8009d22:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009d24:	2320      	movs	r3, #32
 8009d26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d30:	6822      	ldr	r2, [r4, #0]
 8009d32:	6853      	ldr	r3, [r2, #4]
 8009d34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009d38:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d40:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d42:	6822      	ldr	r2, [r4, #0]
 8009d44:	6813      	ldr	r3, [r2, #0]
 8009d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d4a:	6013      	str	r3, [r2, #0]
    I2C_Flush_DR(hi2c);
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7ff f968 	bl	8009022 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d52:	4620      	mov	r0, r4
 8009d54:	f7ff ff39 	bl	8009bca <HAL_I2C_SlaveTxCpltCallback>
 8009d58:	e7c4      	b.n	8009ce4 <I2C_Slave_AF+0x24>
 8009d5a:	bf00      	nop
 8009d5c:	ffff0000 	.word	0xffff0000

08009d60 <HAL_I2C_MemTxCpltCallback>:
}
 8009d60:	4770      	bx	lr

08009d62 <I2C_MasterTransmit_BTF>:
{
 8009d62:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d64:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009d66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b21      	cmp	r3, #33	; 0x21
 8009d6e:	d000      	beq.n	8009d72 <I2C_MasterTransmit_BTF+0x10>
}
 8009d70:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8009d72:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	b163      	cbz	r3, 8009d92 <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d78:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009d7a:	6803      	ldr	r3, [r0, #0]
 8009d7c:	7812      	ldrb	r2, [r2, #0]
 8009d7e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009d80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d82:	3301      	adds	r3, #1
 8009d84:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8009d86:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	8543      	strh	r3, [r0, #42]	; 0x2a
 8009d90:	e7ee      	b.n	8009d70 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009d92:	2a08      	cmp	r2, #8
 8009d94:	d004      	beq.n	8009da0 <I2C_MasterTransmit_BTF+0x3e>
 8009d96:	2a20      	cmp	r2, #32
 8009d98:	d002      	beq.n	8009da0 <I2C_MasterTransmit_BTF+0x3e>
 8009d9a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8009d9e:	d119      	bne.n	8009dd4 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009da0:	6802      	ldr	r2, [r0, #0]
 8009da2:	6853      	ldr	r3, [r2, #4]
 8009da4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009da8:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009daa:	6802      	ldr	r2, [r0, #0]
 8009dac:	6813      	ldr	r3, [r2, #0]
 8009dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009db2:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009db4:	2300      	movs	r3, #0
 8009db6:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009db8:	2320      	movs	r3, #32
 8009dba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009dbe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b40      	cmp	r3, #64	; 0x40
 8009dc6:	d015      	beq.n	8009df4 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8009dce:	f7ff fefa 	bl	8009bc6 <HAL_I2C_MasterTxCpltCallback>
}
 8009dd2:	e7cd      	b.n	8009d70 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009dd4:	6802      	ldr	r2, [r0, #0]
 8009dd6:	6853      	ldr	r3, [r2, #4]
 8009dd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009ddc:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009dde:	2311      	movs	r3, #17
 8009de0:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009de8:	2320      	movs	r3, #32
 8009dea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009dee:	f7ff feea 	bl	8009bc6 <HAL_I2C_MasterTxCpltCallback>
 8009df2:	e7bd      	b.n	8009d70 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009dfa:	f7ff ffb1 	bl	8009d60 <HAL_I2C_MemTxCpltCallback>
 8009dfe:	e7b7      	b.n	8009d70 <I2C_MasterTransmit_BTF+0xe>

08009e00 <I2C_MemoryTransmit_TXE_BTF>:
{
 8009e00:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8009e06:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009e08:	b99a      	cbnz	r2, 8009e32 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009e0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d008      	beq.n	8009e22 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009e10:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009e12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009e16:	6802      	ldr	r2, [r0, #0]
 8009e18:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8009e1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8009e20:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009e22:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009e24:	6802      	ldr	r2, [r0, #0]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8009e2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009e2c:	3302      	adds	r3, #2
 8009e2e:	6503      	str	r3, [r0, #80]	; 0x50
 8009e30:	e7f6      	b.n	8009e20 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8009e32:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8009e34:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009e36:	2a01      	cmp	r2, #1
 8009e38:	d023      	beq.n	8009e82 <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8009e3a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009e3c:	2a02      	cmp	r2, #2
 8009e3e:	d13e      	bne.n	8009ebe <I2C_MemoryTransmit_TXE_BTF+0xbe>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009e40:	2b22      	cmp	r3, #34	; 0x22
 8009e42:	d026      	beq.n	8009e92 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009e44:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009e46:	b292      	uxth	r2, r2
 8009e48:	b10a      	cbz	r2, 8009e4e <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8009e4a:	2b21      	cmp	r3, #33	; 0x21
 8009e4c:	d02a      	beq.n	8009ea4 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009e4e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8009e50:	b292      	uxth	r2, r2
 8009e52:	2a00      	cmp	r2, #0
 8009e54:	d1e4      	bne.n	8009e20 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8009e56:	2b21      	cmp	r3, #33	; 0x21
 8009e58:	d1e2      	bne.n	8009e20 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e5a:	6802      	ldr	r2, [r0, #0]
 8009e5c:	6853      	ldr	r3, [r2, #4]
 8009e5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009e62:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e64:	6802      	ldr	r2, [r0, #0]
 8009e66:	6813      	ldr	r3, [r2, #0]
 8009e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e6c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009e72:	2220      	movs	r2, #32
 8009e74:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e78:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009e7c:	f7ff ff70 	bl	8009d60 <HAL_I2C_MemTxCpltCallback>
 8009e80:	e7ce      	b.n	8009e20 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009e82:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009e84:	6802      	ldr	r2, [r0, #0]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8009e8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	6503      	str	r3, [r0, #80]	; 0x50
 8009e90:	e7c6      	b.n	8009e20 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8009e92:	6802      	ldr	r2, [r0, #0]
 8009e94:	6813      	ldr	r3, [r2, #0]
 8009e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e9a:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8009e9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	6503      	str	r3, [r0, #80]	; 0x50
 8009ea2:	e7bd      	b.n	8009e20 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ea4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009ea6:	6803      	ldr	r3, [r0, #0]
 8009ea8:	7812      	ldrb	r2, [r2, #0]
 8009eaa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009eae:	3301      	adds	r3, #1
 8009eb0:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8009eb2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	8543      	strh	r3, [r0, #42]	; 0x2a
 8009ebc:	e7b0      	b.n	8009e20 <I2C_MemoryTransmit_TXE_BTF+0x20>
    I2C_Flush_DR(hi2c);
 8009ebe:	f7ff f8b0 	bl	8009022 <I2C_Flush_DR>
}
 8009ec2:	e7ad      	b.n	8009e20 <I2C_MemoryTransmit_TXE_BTF+0x20>

08009ec4 <I2C_MasterTransmit_TXE>:
{
 8009ec4:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ec6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009eca:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009ecc:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8009ed0:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009ed2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009ed4:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8009ed6:	b909      	cbnz	r1, 8009edc <I2C_MasterTransmit_TXE+0x18>
 8009ed8:	2b21      	cmp	r3, #33	; 0x21
 8009eda:	d004      	beq.n	8009ee6 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009edc:	2b21      	cmp	r3, #33	; 0x21
 8009ede:	d03b      	beq.n	8009f58 <I2C_MasterTransmit_TXE+0x94>
 8009ee0:	2a40      	cmp	r2, #64	; 0x40
 8009ee2:	d037      	beq.n	8009f54 <I2C_MasterTransmit_TXE+0x90>
}
 8009ee4:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009ee6:	2c08      	cmp	r4, #8
 8009ee8:	d004      	beq.n	8009ef4 <I2C_MasterTransmit_TXE+0x30>
 8009eea:	2c20      	cmp	r4, #32
 8009eec:	d002      	beq.n	8009ef4 <I2C_MasterTransmit_TXE+0x30>
 8009eee:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8009ef2:	d119      	bne.n	8009f28 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ef4:	6802      	ldr	r2, [r0, #0]
 8009ef6:	6853      	ldr	r3, [r2, #4]
 8009ef8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009efc:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009efe:	6802      	ldr	r2, [r0, #0]
 8009f00:	6813      	ldr	r3, [r2, #0]
 8009f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f06:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009f0c:	2320      	movs	r3, #32
 8009f0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009f12:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b40      	cmp	r3, #64	; 0x40
 8009f1a:	d015      	beq.n	8009f48 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009f22:	f7ff fe50 	bl	8009bc6 <HAL_I2C_MasterTxCpltCallback>
 8009f26:	e7dd      	b.n	8009ee4 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f28:	6802      	ldr	r2, [r0, #0]
 8009f2a:	6853      	ldr	r3, [r2, #4]
 8009f2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009f30:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009f32:	2311      	movs	r3, #17
 8009f34:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f36:	2300      	movs	r3, #0
 8009f38:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009f42:	f7ff fe40 	bl	8009bc6 <HAL_I2C_MasterTxCpltCallback>
 8009f46:	e7cd      	b.n	8009ee4 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009f4e:	f7ff ff07 	bl	8009d60 <HAL_I2C_MemTxCpltCallback>
 8009f52:	e7c7      	b.n	8009ee4 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009f54:	2b22      	cmp	r3, #34	; 0x22
 8009f56:	d1c5      	bne.n	8009ee4 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8009f58:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	b92b      	cbnz	r3, 8009f6a <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009f5e:	6802      	ldr	r2, [r0, #0]
 8009f60:	6853      	ldr	r3, [r2, #4]
 8009f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f66:	6053      	str	r3, [r2, #4]
 8009f68:	e7bc      	b.n	8009ee4 <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009f6a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b40      	cmp	r3, #64	; 0x40
 8009f72:	d00c      	beq.n	8009f8e <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f74:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009f76:	6803      	ldr	r3, [r0, #0]
 8009f78:	7812      	ldrb	r2, [r2, #0]
 8009f7a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009f7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f7e:	3301      	adds	r3, #1
 8009f80:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 8009f82:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8009f8c:	e7aa      	b.n	8009ee4 <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009f8e:	f7ff ff37 	bl	8009e00 <I2C_MemoryTransmit_TXE_BTF>
 8009f92:	e7a7      	b.n	8009ee4 <I2C_MasterTransmit_TXE+0x20>

08009f94 <HAL_I2C_MemRxCpltCallback>:
}
 8009f94:	4770      	bx	lr

08009f96 <I2C_MasterReceive_BTF>:
{
 8009f96:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8009f9a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	d014      	beq.n	8009fcc <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 8009fa2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d022      	beq.n	8009ff0 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 8009faa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d039      	beq.n	800a026 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fb2:	6803      	ldr	r3, [r0, #0]
 8009fb4:	691a      	ldr	r2, [r3, #16]
 8009fb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009fba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8009fc0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8009fca:	e010      	b.n	8009fee <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009fcc:	6802      	ldr	r2, [r0, #0]
 8009fce:	6853      	ldr	r3, [r2, #4]
 8009fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fd4:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fd6:	6803      	ldr	r3, [r0, #0]
 8009fd8:	691a      	ldr	r2, [r3, #16]
 8009fda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009fde:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8009fe4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8009fee:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009ff0:	6801      	ldr	r1, [r0, #0]
 8009ff2:	684b      	ldr	r3, [r1, #4]
 8009ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ff8:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009ffa:	2a04      	cmp	r2, #4
 8009ffc:	d006      	beq.n	800a00c <I2C_MasterReceive_BTF+0x76>
 8009ffe:	2a02      	cmp	r2, #2
 800a000:	d004      	beq.n	800a00c <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a002:	6802      	ldr	r2, [r0, #0]
 800a004:	6813      	ldr	r3, [r2, #0]
 800a006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a00a:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a00c:	6803      	ldr	r3, [r0, #0]
 800a00e:	691a      	ldr	r2, [r3, #16]
 800a010:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a012:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a014:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a016:	3301      	adds	r3, #1
 800a018:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800a01a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	3b01      	subs	r3, #1
 800a020:	b29b      	uxth	r3, r3
 800a022:	8543      	strh	r3, [r0, #42]	; 0x2a
 800a024:	e7e3      	b.n	8009fee <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a026:	1e53      	subs	r3, r2, #1
 800a028:	2b0f      	cmp	r3, #15
 800a02a:	d842      	bhi.n	800a0b2 <I2C_MasterReceive_BTF+0x11c>
 800a02c:	e8df f003 	tbb	[pc, r3]
 800a030:	3b413b08 	.word	0x3b413b08
 800a034:	41414141 	.word	0x41414141
 800a038:	41414141 	.word	0x41414141
 800a03c:	08414141 	.word	0x08414141
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a040:	6801      	ldr	r1, [r0, #0]
 800a042:	680b      	ldr	r3, [r1, #0]
 800a044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a048:	600b      	str	r3, [r1, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a04a:	6803      	ldr	r3, [r0, #0]
 800a04c:	6919      	ldr	r1, [r3, #16]
 800a04e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a050:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800a052:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a054:	1c4b      	adds	r3, r1, #1
 800a056:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800a058:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b29b      	uxth	r3, r3
 800a060:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a062:	6803      	ldr	r3, [r0, #0]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 800a068:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a06a:	3301      	adds	r3, #1
 800a06c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800a06e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800a070:	b29b      	uxth	r3, r3
 800a072:	3b01      	subs	r3, #1
 800a074:	b29b      	uxth	r3, r3
 800a076:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a078:	6801      	ldr	r1, [r0, #0]
 800a07a:	684b      	ldr	r3, [r1, #4]
 800a07c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a080:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a082:	2320      	movs	r3, #32
 800a084:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a088:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b40      	cmp	r3, #64	; 0x40
 800a090:	d015      	beq.n	800a0be <I2C_MasterReceive_BTF+0x128>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a092:	2300      	movs	r3, #0
 800a094:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a098:	2a08      	cmp	r2, #8
 800a09a:	d017      	beq.n	800a0cc <I2C_MasterReceive_BTF+0x136>
 800a09c:	2a20      	cmp	r2, #32
 800a09e:	d015      	beq.n	800a0cc <I2C_MasterReceive_BTF+0x136>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a0a0:	2312      	movs	r3, #18
 800a0a2:	6303      	str	r3, [r0, #48]	; 0x30
 800a0a4:	e014      	b.n	800a0d0 <I2C_MasterReceive_BTF+0x13a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0a6:	6801      	ldr	r1, [r0, #0]
 800a0a8:	680b      	ldr	r3, [r1, #0]
 800a0aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a0ae:	600b      	str	r3, [r1, #0]
 800a0b0:	e7cb      	b.n	800a04a <I2C_MasterReceive_BTF+0xb4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0b2:	6801      	ldr	r1, [r0, #0]
 800a0b4:	680b      	ldr	r3, [r1, #0]
 800a0b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0ba:	600b      	str	r3, [r1, #0]
 800a0bc:	e7c5      	b.n	800a04a <I2C_MasterReceive_BTF+0xb4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0c4:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a0c6:	f7ff ff65 	bl	8009f94 <HAL_I2C_MemRxCpltCallback>
 800a0ca:	e790      	b.n	8009fee <I2C_MasterReceive_BTF+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a0d0:	f7ff fd7a 	bl	8009bc8 <HAL_I2C_MasterRxCpltCallback>
 800a0d4:	e78b      	b.n	8009fee <I2C_MasterReceive_BTF+0x58>

0800a0d6 <I2C_MasterReceive_RXNE>:
{
 800a0d6:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a0d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b22      	cmp	r3, #34	; 0x22
 800a0e0:	d000      	beq.n	800a0e4 <I2C_MasterReceive_RXNE+0xe>
}
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	4604      	mov	r4, r0
    CurrentXferOptions = hi2c->XferOptions;
 800a0e6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    tmp = hi2c->XferCount;
 800a0e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800a0ea:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d915      	bls.n	800a11c <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0f0:	6803      	ldr	r3, [r0, #0]
 800a0f2:	691a      	ldr	r2, [r3, #16]
 800a0f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a0f6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a0f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800a0fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800a100:	b29b      	uxth	r3, r3
 800a102:	3b01      	subs	r3, #1
 800a104:	b29b      	uxth	r3, r3
 800a106:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800a108:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d1e8      	bne.n	800a0e2 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a110:	6802      	ldr	r2, [r0, #0]
 800a112:	6853      	ldr	r3, [r2, #4]
 800a114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a118:	6053      	str	r3, [r2, #4]
 800a11a:	e7e2      	b.n	800a0e2 <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a11c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a11e:	2a02      	cmp	r2, #2
 800a120:	d001      	beq.n	800a126 <I2C_MasterReceive_RXNE+0x50>
 800a122:	2b01      	cmp	r3, #1
 800a124:	d905      	bls.n	800a132 <I2C_MasterReceive_RXNE+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	6853      	ldr	r3, [r2, #4]
 800a12a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a12e:	6053      	str	r3, [r2, #4]
}
 800a130:	e7d7      	b.n	800a0e2 <I2C_MasterReceive_RXNE+0xc>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a132:	f7ff f921 	bl	8009378 <I2C_WaitOnSTOPRequestThroughIT>
 800a136:	2800      	cmp	r0, #0
 800a138:	d135      	bne.n	800a1a6 <I2C_MasterReceive_RXNE+0xd0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	6813      	ldr	r3, [r2, #0]
 800a13e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a142:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	6853      	ldr	r3, [r2, #4]
 800a148:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a14c:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	691a      	ldr	r2, [r3, #16]
 800a152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a154:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a158:	3301      	adds	r3, #1
 800a15a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800a15c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3b01      	subs	r3, #1
 800a162:	b29b      	uxth	r3, r3
 800a164:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a166:	2320      	movs	r3, #32
 800a168:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a16c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b40      	cmp	r3, #64	; 0x40
 800a174:	d009      	beq.n	800a18a <I2C_MasterReceive_RXNE+0xb4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a176:	2300      	movs	r3, #0
 800a178:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a17c:	2d08      	cmp	r5, #8
 800a17e:	d00c      	beq.n	800a19a <I2C_MasterReceive_RXNE+0xc4>
 800a180:	2d20      	cmp	r5, #32
 800a182:	d00a      	beq.n	800a19a <I2C_MasterReceive_RXNE+0xc4>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a184:	2312      	movs	r3, #18
 800a186:	6323      	str	r3, [r4, #48]	; 0x30
 800a188:	e009      	b.n	800a19e <I2C_MasterReceive_RXNE+0xc8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a190:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff fefe 	bl	8009f94 <HAL_I2C_MemRxCpltCallback>
 800a198:	e7a3      	b.n	800a0e2 <I2C_MasterReceive_RXNE+0xc>
            hi2c->PreviousState = I2C_STATE_NONE;
 800a19a:	2300      	movs	r3, #0
 800a19c:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7ff fd12 	bl	8009bc8 <HAL_I2C_MasterRxCpltCallback>
 800a1a4:	e79d      	b.n	800a0e2 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a1a6:	6822      	ldr	r2, [r4, #0]
 800a1a8:	6853      	ldr	r3, [r2, #4]
 800a1aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a1ae:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1b6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a1b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800a1be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f7fd fe53 	bl	8007e80 <HAL_I2C_ErrorCallback>
 800a1da:	e782      	b.n	800a0e2 <I2C_MasterReceive_RXNE+0xc>

0800a1dc <HAL_I2C_AbortCpltCallback>:
}
 800a1dc:	4770      	bx	lr
	...

0800a1e0 <I2C_DMAAbort>:
{
 800a1e0:	b500      	push	{lr}
 800a1e2:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a1e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a1ea:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800a1ee:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a1f0:	4b32      	ldr	r3, [pc, #200]	; (800a2bc <I2C_DMAAbort+0xdc>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	08db      	lsrs	r3, r3, #3
 800a1f6:	4932      	ldr	r1, [pc, #200]	; (800a2c0 <I2C_DMAAbort+0xe0>)
 800a1f8:	fba1 1303 	umull	r1, r3, r1, r3
 800a1fc:	0a1b      	lsrs	r3, r3, #8
 800a1fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a202:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a206:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 800a208:	9b01      	ldr	r3, [sp, #4]
 800a20a:	b143      	cbz	r3, 800a21e <I2C_DMAAbort+0x3e>
    count--;
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	3b01      	subs	r3, #1
 800a210:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a212:	6803      	ldr	r3, [r0, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a21a:	d1f5      	bne.n	800a208 <I2C_DMAAbort+0x28>
 800a21c:	e003      	b.n	800a226 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a21e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a220:	f043 0320 	orr.w	r3, r3, #32
 800a224:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 800a226:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a228:	b10b      	cbz	r3, 800a22e <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a22a:	2100      	movs	r1, #0
 800a22c:	63d9      	str	r1, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 800a22e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a230:	b10b      	cbz	r3, 800a236 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a232:	2100      	movs	r1, #0
 800a234:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a236:	6801      	ldr	r1, [r0, #0]
 800a238:	680b      	ldr	r3, [r1, #0]
 800a23a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a23e:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800a244:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a246:	b10b      	cbz	r3, 800a24c <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a248:	2100      	movs	r1, #0
 800a24a:	6519      	str	r1, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 800a24c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a24e:	b10b      	cbz	r3, 800a254 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a250:	2100      	movs	r1, #0
 800a252:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 800a254:	6801      	ldr	r1, [r0, #0]
 800a256:	680b      	ldr	r3, [r1, #0]
 800a258:	f023 0301 	bic.w	r3, r3, #1
 800a25c:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a25e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b60      	cmp	r3, #96	; 0x60
 800a266:	d00e      	beq.n	800a286 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a268:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800a26c:	2a28      	cmp	r2, #40	; 0x28
 800a26e:	d014      	beq.n	800a29a <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 800a270:	2320      	movs	r3, #32
 800a272:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a276:	2300      	movs	r3, #0
 800a278:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a27c:	f7fd fe00 	bl	8007e80 <HAL_I2C_ErrorCallback>
}
 800a280:	b003      	add	sp, #12
 800a282:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 800a286:	2320      	movs	r3, #32
 800a288:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a292:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800a294:	f7ff ffa2 	bl	800a1dc <HAL_I2C_AbortCpltCallback>
 800a298:	e7f2      	b.n	800a280 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 800a29a:	6802      	ldr	r2, [r0, #0]
 800a29c:	6813      	ldr	r3, [r2, #0]
 800a29e:	f043 0301 	orr.w	r3, r3, #1
 800a2a2:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2a4:	6802      	ldr	r2, [r0, #0]
 800a2a6:	6813      	ldr	r3, [r2, #0]
 800a2a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2ac:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a2b2:	2328      	movs	r3, #40	; 0x28
 800a2b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800a2b8:	e7e0      	b.n	800a27c <I2C_DMAAbort+0x9c>
 800a2ba:	bf00      	nop
 800a2bc:	20000000 	.word	0x20000000
 800a2c0:	14f8b589 	.word	0x14f8b589

0800a2c4 <I2C_ITError>:
{
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a2c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a2cc:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a2ce:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800a2d2:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a2d4:	2a10      	cmp	r2, #16
 800a2d6:	d036      	beq.n	800a346 <I2C_ITError+0x82>
 800a2d8:	2a40      	cmp	r2, #64	; 0x40
 800a2da:	d034      	beq.n	800a346 <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a2dc:	f003 0228 	and.w	r2, r3, #40	; 0x28
 800a2e0:	2a28      	cmp	r2, #40	; 0x28
 800a2e2:	d038      	beq.n	800a356 <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a2e4:	6822      	ldr	r2, [r4, #0]
 800a2e6:	6852      	ldr	r2, [r2, #4]
 800a2e8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a2ec:	d107      	bne.n	800a2fe <I2C_ITError+0x3a>
 800a2ee:	2b60      	cmp	r3, #96	; 0x60
 800a2f0:	d005      	beq.n	800a2fe <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 800a2f2:	2320      	movs	r3, #32
 800a2f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 800a2fe:	2300      	movs	r3, #0
 800a300:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a30a:	d048      	beq.n	800a39e <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a312:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a314:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a316:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d020      	beq.n	800a362 <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a320:	4b44      	ldr	r3, [pc, #272]	; (800a434 <I2C_ITError+0x170>)
 800a322:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a324:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a326:	f7fe f9fe 	bl	8008726 <HAL_DMA_Abort_IT>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d049      	beq.n	800a3c2 <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	6813      	ldr	r3, [r2, #0]
 800a332:	f023 0301 	bic.w	r3, r3, #1
 800a336:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800a338:	2320      	movs	r3, #32
 800a33a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a33e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a340:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a342:	4798      	blx	r3
 800a344:	e03d      	b.n	800a3c2 <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a346:	2b22      	cmp	r3, #34	; 0x22
 800a348:	d1c8      	bne.n	800a2dc <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a34a:	6821      	ldr	r1, [r4, #0]
 800a34c:	680a      	ldr	r2, [r1, #0]
 800a34e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a352:	600a      	str	r2, [r1, #0]
 800a354:	e7c2      	b.n	800a2dc <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a356:	2300      	movs	r3, #0
 800a358:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a35a:	2328      	movs	r3, #40	; 0x28
 800a35c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800a360:	e7cf      	b.n	800a302 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a364:	4a33      	ldr	r2, [pc, #204]	; (800a434 <I2C_ITError+0x170>)
 800a366:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a368:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a36a:	f7fe f9dc 	bl	8008726 <HAL_DMA_Abort_IT>
 800a36e:	b340      	cbz	r0, 800a3c2 <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a378:	d005      	beq.n	800a386 <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a37a:	691a      	ldr	r2, [r3, #16]
 800a37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a37e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800a380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a382:	3301      	adds	r3, #1
 800a384:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800a386:	6822      	ldr	r2, [r4, #0]
 800a388:	6813      	ldr	r3, [r2, #0]
 800a38a:	f023 0301 	bic.w	r3, r3, #1
 800a38e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800a390:	2320      	movs	r3, #32
 800a392:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a396:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a398:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a39a:	4798      	blx	r3
 800a39c:	e011      	b.n	800a3c2 <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a39e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800a3a2:	b2d2      	uxtb	r2, r2
 800a3a4:	2a60      	cmp	r2, #96	; 0x60
 800a3a6:	d01f      	beq.n	800a3e8 <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a3a8:	695a      	ldr	r2, [r3, #20]
 800a3aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a3ae:	d005      	beq.n	800a3bc <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3b0:	691a      	ldr	r2, [r3, #16]
 800a3b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f7fd fd5f 	bl	8007e80 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 800a3c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a3c4:	f013 0f0f 	tst.w	r3, #15
 800a3c8:	d004      	beq.n	800a3d4 <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a3ca:	6822      	ldr	r2, [r4, #0]
 800a3cc:	6853      	ldr	r3, [r2, #4]
 800a3ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a3d2:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800a3d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a3d8:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a3da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a3dc:	f012 0f04 	tst.w	r2, #4
 800a3e0:	d001      	beq.n	800a3e6 <I2C_ITError+0x122>
 800a3e2:	2b28      	cmp	r3, #40	; 0x28
 800a3e4:	d018      	beq.n	800a418 <I2C_ITError+0x154>
}
 800a3e6:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a3f2:	695a      	ldr	r2, [r3, #20]
 800a3f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a3f8:	d005      	beq.n	800a406 <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3fe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a402:	3301      	adds	r3, #1
 800a404:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800a406:	6822      	ldr	r2, [r4, #0]
 800a408:	6813      	ldr	r3, [r2, #0]
 800a40a:	f023 0301 	bic.w	r3, r3, #1
 800a40e:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff fee3 	bl	800a1dc <HAL_I2C_AbortCpltCallback>
 800a416:	e7d4      	b.n	800a3c2 <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a418:	4b07      	ldr	r3, [pc, #28]	; (800a438 <I2C_ITError+0x174>)
 800a41a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a41c:	2300      	movs	r3, #0
 800a41e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a420:	2220      	movs	r2, #32
 800a422:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a426:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800a42a:	4620      	mov	r0, r4
 800a42c:	f7fd fcb4 	bl	8007d98 <HAL_I2C_ListenCpltCallback>
}
 800a430:	e7d9      	b.n	800a3e6 <I2C_ITError+0x122>
 800a432:	bf00      	nop
 800a434:	0800a1e1 	.word	0x0800a1e1
 800a438:	ffff0000 	.word	0xffff0000

0800a43c <I2C_Slave_STOPF>:
{
 800a43c:	b530      	push	{r4, r5, lr}
 800a43e:	b083      	sub	sp, #12
 800a440:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a442:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800a446:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a448:	6802      	ldr	r2, [r0, #0]
 800a44a:	6853      	ldr	r3, [r2, #4]
 800a44c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a450:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800a452:	2300      	movs	r3, #0
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	6803      	ldr	r3, [r0, #0]
 800a458:	695a      	ldr	r2, [r3, #20]
 800a45a:	9201      	str	r2, [sp, #4]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	f042 0201 	orr.w	r2, r2, #1
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a466:	6802      	ldr	r2, [r0, #0]
 800a468:	6813      	ldr	r3, [r2, #0]
 800a46a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a46e:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a470:	6803      	ldr	r3, [r0, #0]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a478:	d038      	beq.n	800a4ec <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a47a:	2d22      	cmp	r5, #34	; 0x22
 800a47c:	d021      	beq.n	800a4c2 <I2C_Slave_STOPF+0x86>
 800a47e:	2d2a      	cmp	r5, #42	; 0x2a
 800a480:	d01f      	beq.n	800a4c2 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800a482:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a484:	6812      	ldr	r2, [r2, #0]
 800a486:	6852      	ldr	r2, [r2, #4]
 800a488:	b292      	uxth	r2, r2
 800a48a:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800a48c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800a48e:	b292      	uxth	r2, r2
 800a490:	b11a      	cbz	r2, 800a49a <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a492:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a494:	f042 0204 	orr.w	r2, r2, #4
 800a498:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4a0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a4a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a4a4:	f7fe fa40 	bl	8008928 <HAL_DMA_GetState>
 800a4a8:	2801      	cmp	r0, #1
 800a4aa:	d01f      	beq.n	800a4ec <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a4ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4ae:	4a44      	ldr	r2, [pc, #272]	; (800a5c0 <I2C_Slave_STOPF+0x184>)
 800a4b0:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a4b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a4b4:	f7fe f937 	bl	8008726 <HAL_DMA_Abort_IT>
 800a4b8:	b1c0      	cbz	r0, 800a4ec <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a4ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a4bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a4be:	4798      	blx	r3
 800a4c0:	e014      	b.n	800a4ec <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800a4c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a4c4:	6812      	ldr	r2, [r2, #0]
 800a4c6:	6852      	ldr	r2, [r2, #4]
 800a4c8:	b292      	uxth	r2, r2
 800a4ca:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800a4cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a4ce:	b292      	uxth	r2, r2
 800a4d0:	b11a      	cbz	r2, 800a4da <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a4d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a4d4:	f042 0204 	orr.w	r2, r2, #4
 800a4d8:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4e0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a4e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a4e4:	f7fe fa20 	bl	8008928 <HAL_DMA_GetState>
 800a4e8:	2801      	cmp	r0, #1
 800a4ea:	d142      	bne.n	800a572 <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 800a4ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	b333      	cbz	r3, 800a540 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	695a      	ldr	r2, [r3, #20]
 800a4f6:	f012 0f04 	tst.w	r2, #4
 800a4fa:	d00a      	beq.n	800a512 <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4fc:	691a      	ldr	r2, [r3, #16]
 800a4fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a500:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a504:	3301      	adds	r3, #1
 800a506:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a508:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	3b01      	subs	r3, #1
 800a50e:	b29b      	uxth	r3, r3
 800a510:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	695a      	ldr	r2, [r3, #20]
 800a516:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a51a:	d00a      	beq.n	800a532 <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a520:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a524:	3301      	adds	r3, #1
 800a526:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a528:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	3b01      	subs	r3, #1
 800a52e:	b29b      	uxth	r3, r3
 800a530:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800a532:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a534:	b29b      	uxth	r3, r3
 800a536:	b11b      	cbz	r3, 800a540 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a53a:	f043 0304 	orr.w	r3, r3, #4
 800a53e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a542:	bb13      	cbnz	r3, 800a58a <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a544:	2d2a      	cmp	r5, #42	; 0x2a
 800a546:	d025      	beq.n	800a594 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a548:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b28      	cmp	r3, #40	; 0x28
 800a550:	d029      	beq.n	800a5a6 <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a552:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a554:	2b22      	cmp	r3, #34	; 0x22
 800a556:	d001      	beq.n	800a55c <I2C_Slave_STOPF+0x120>
 800a558:	2d22      	cmp	r5, #34	; 0x22
 800a55a:	d119      	bne.n	800a590 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a55c:	2300      	movs	r3, #0
 800a55e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a560:	2220      	movs	r2, #32
 800a562:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a566:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a56a:	4620      	mov	r0, r4
 800a56c:	f7fd fc5a 	bl	8007e24 <HAL_I2C_SlaveRxCpltCallback>
}
 800a570:	e00e      	b.n	800a590 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a574:	4a12      	ldr	r2, [pc, #72]	; (800a5c0 <I2C_Slave_STOPF+0x184>)
 800a576:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a578:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a57a:	f7fe f8d4 	bl	8008726 <HAL_DMA_Abort_IT>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d0b4      	beq.n	800a4ec <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a582:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a584:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a586:	4798      	blx	r3
 800a588:	e7b0      	b.n	800a4ec <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 800a58a:	4620      	mov	r0, r4
 800a58c:	f7ff fe9a 	bl	800a2c4 <I2C_ITError>
}
 800a590:	b003      	add	sp, #12
 800a592:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 800a594:	2300      	movs	r3, #0
 800a596:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a598:	2328      	movs	r3, #40	; 0x28
 800a59a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f7fd fc40 	bl	8007e24 <HAL_I2C_SlaveRxCpltCallback>
 800a5a4:	e7d0      	b.n	800a548 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a5a6:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <I2C_Slave_STOPF+0x188>)
 800a5a8:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7fd fbed 	bl	8007d98 <HAL_I2C_ListenCpltCallback>
 800a5be:	e7e7      	b.n	800a590 <I2C_Slave_STOPF+0x154>
 800a5c0:	0800a1e1 	.word	0x0800a1e1
 800a5c4:	ffff0000 	.word	0xffff0000

0800a5c8 <HAL_I2C_EV_IRQHandler>:
{
 800a5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ca:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a5cc:	6802      	ldr	r2, [r0, #0]
 800a5ce:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a5d0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a5d2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a5d6:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a5d8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800a5dc:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a5de:	2b10      	cmp	r3, #16
 800a5e0:	d013      	beq.n	800a60a <HAL_I2C_EV_IRQHandler+0x42>
 800a5e2:	2b40      	cmp	r3, #64	; 0x40
 800a5e4:	d011      	beq.n	800a60a <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a5e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d07a      	beq.n	800a6e2 <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a5ec:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 800a5ee:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5f0:	f013 0f02 	tst.w	r3, #2
 800a5f4:	d078      	beq.n	800a6e8 <HAL_I2C_EV_IRQHandler+0x120>
 800a5f6:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a5fa:	d075      	beq.n	800a6e8 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a5fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5fe:	b103      	cbz	r3, 800a602 <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a600:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a602:	4620      	mov	r0, r4
 800a604:	f7ff fb2e 	bl	8009c64 <I2C_Slave_ADDR>
}
 800a608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a60a:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a60e:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a610:	f011 0701 	ands.w	r7, r1, #1
 800a614:	d105      	bne.n	800a622 <HAL_I2C_EV_IRQHandler+0x5a>
 800a616:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 800a61a:	d0f5      	beq.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
 800a61c:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 800a620:	d0f2      	beq.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a622:	b117      	cbz	r7, 800a62a <HAL_I2C_EV_IRQHandler+0x62>
 800a624:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a628:	d129      	bne.n	800a67e <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a62a:	f011 0f08 	tst.w	r1, #8
 800a62e:	d002      	beq.n	800a636 <HAL_I2C_EV_IRQHandler+0x6e>
 800a630:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a634:	d12a      	bne.n	800a68c <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a636:	f011 0f02 	tst.w	r1, #2
 800a63a:	d002      	beq.n	800a642 <HAL_I2C_EV_IRQHandler+0x7a>
 800a63c:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a640:	d128      	bne.n	800a694 <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a642:	f01c 0f04 	tst.w	ip, #4
 800a646:	d031      	beq.n	800a6ac <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a648:	6852      	ldr	r2, [r2, #4]
 800a64a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a64e:	d1db      	bne.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a650:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a654:	d005      	beq.n	800a662 <HAL_I2C_EV_IRQHandler+0x9a>
 800a656:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800a65a:	d002      	beq.n	800a662 <HAL_I2C_EV_IRQHandler+0x9a>
 800a65c:	f011 0f04 	tst.w	r1, #4
 800a660:	d01c      	beq.n	800a69c <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a662:	f011 0f04 	tst.w	r1, #4
 800a666:	d0cf      	beq.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
 800a668:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a66c:	d0cc      	beq.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a66e:	2821      	cmp	r0, #33	; 0x21
 800a670:	d018      	beq.n	800a6a4 <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a672:	2b40      	cmp	r3, #64	; 0x40
 800a674:	d1c8      	bne.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a676:	4620      	mov	r0, r4
 800a678:	f7ff fbc2 	bl	8009e00 <I2C_MemoryTransmit_TXE_BTF>
 800a67c:	e7c4      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 800a67e:	4620      	mov	r0, r4
 800a680:	f7fe feb7 	bl	80093f2 <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 800a684:	4620      	mov	r0, r4
 800a686:	f7fe fcd4 	bl	8009032 <I2C_Master_SB>
 800a68a:	e7bd      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7fe fd24 	bl	80090da <I2C_Master_ADD10>
 800a692:	e7b9      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 800a694:	4620      	mov	r0, r4
 800a696:	f7fe fd35 	bl	8009104 <I2C_Master_ADDR>
 800a69a:	e7b5      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff fc11 	bl	8009ec4 <I2C_MasterTransmit_TXE>
 800a6a2:	e7b1      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f7ff fb5c 	bl	8009d62 <I2C_MasterTransmit_BTF>
 800a6aa:	e7ad      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a6ac:	6853      	ldr	r3, [r2, #4]
 800a6ae:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a6b2:	d1a9      	bne.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a6b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a6b8:	d005      	beq.n	800a6c6 <HAL_I2C_EV_IRQHandler+0xfe>
 800a6ba:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800a6be:	d002      	beq.n	800a6c6 <HAL_I2C_EV_IRQHandler+0xfe>
 800a6c0:	f011 0f04 	tst.w	r1, #4
 800a6c4:	d009      	beq.n	800a6da <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6c6:	f011 0f04 	tst.w	r1, #4
 800a6ca:	d09d      	beq.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
 800a6cc:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a6d0:	d09a      	beq.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7ff fc5f 	bl	8009f96 <I2C_MasterReceive_BTF>
 800a6d8:	e796      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f7ff fcfb 	bl	800a0d6 <I2C_MasterReceive_RXNE>
 800a6e0:	e792      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a6e2:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a6e4:	6953      	ldr	r3, [r2, #20]
 800a6e6:	e783      	b.n	800a5f0 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6e8:	f013 0f10 	tst.w	r3, #16
 800a6ec:	d002      	beq.n	800a6f4 <HAL_I2C_EV_IRQHandler+0x12c>
 800a6ee:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a6f2:	d118      	bne.n	800a726 <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a6f4:	2821      	cmp	r0, #33	; 0x21
 800a6f6:	d01a      	beq.n	800a72e <HAL_I2C_EV_IRQHandler+0x166>
 800a6f8:	2829      	cmp	r0, #41	; 0x29
 800a6fa:	d018      	beq.n	800a72e <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a6fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a700:	d005      	beq.n	800a70e <HAL_I2C_EV_IRQHandler+0x146>
 800a702:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800a706:	d002      	beq.n	800a70e <HAL_I2C_EV_IRQHandler+0x146>
 800a708:	f013 0f04 	tst.w	r3, #4
 800a70c:	d028      	beq.n	800a760 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a70e:	f013 0f04 	tst.w	r3, #4
 800a712:	f43f af79 	beq.w	800a608 <HAL_I2C_EV_IRQHandler+0x40>
 800a716:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a71a:	f43f af75 	beq.w	800a608 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 800a71e:	4620      	mov	r0, r4
 800a720:	f7fe fe1a 	bl	8009358 <I2C_SlaveReceive_BTF>
      }
 800a724:	e770      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 800a726:	4620      	mov	r0, r4
 800a728:	f7ff fe88 	bl	800a43c <I2C_Slave_STOPF>
 800a72c:	e76c      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a72e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a732:	d005      	beq.n	800a740 <HAL_I2C_EV_IRQHandler+0x178>
 800a734:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800a738:	d002      	beq.n	800a740 <HAL_I2C_EV_IRQHandler+0x178>
 800a73a:	f013 0f04 	tst.w	r3, #4
 800a73e:	d00b      	beq.n	800a758 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a740:	f013 0f04 	tst.w	r3, #4
 800a744:	f43f af60 	beq.w	800a608 <HAL_I2C_EV_IRQHandler+0x40>
 800a748:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a74c:	f43f af5c 	beq.w	800a608 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 800a750:	4620      	mov	r0, r4
 800a752:	f7fe fdf1 	bl	8009338 <I2C_SlaveTransmit_BTF>
 800a756:	e757      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 800a758:	4620      	mov	r0, r4
 800a75a:	f7ff fa37 	bl	8009bcc <I2C_SlaveTransmit_TXE>
 800a75e:	e753      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 800a760:	4620      	mov	r0, r4
 800a762:	f7ff fa59 	bl	8009c18 <I2C_SlaveReceive_RXNE>
 800a766:	e74f      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x40>

0800a768 <HAL_I2C_ER_IRQHandler>:
{
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a76c:	6803      	ldr	r3, [r0, #0]
 800a76e:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a770:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a772:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800a776:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a778:	f415 7680 	ands.w	r6, r5, #256	; 0x100
 800a77c:	d006      	beq.n	800a78c <HAL_I2C_ER_IRQHandler+0x24>
 800a77e:	f417 7680 	ands.w	r6, r7, #256	; 0x100
 800a782:	d003      	beq.n	800a78c <HAL_I2C_ER_IRQHandler+0x24>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a784:	f46f 7180 	mvn.w	r1, #256	; 0x100
 800a788:	6159      	str	r1, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 800a78a:	2601      	movs	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a78c:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a790:	d008      	beq.n	800a7a4 <HAL_I2C_ER_IRQHandler+0x3c>
 800a792:	f417 7f80 	tst.w	r7, #256	; 0x100
 800a796:	d005      	beq.n	800a7a4 <HAL_I2C_ER_IRQHandler+0x3c>
    error |= HAL_I2C_ERROR_ARLO;
 800a798:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	f46f 7100 	mvn.w	r1, #512	; 0x200
 800a7a2:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a7a4:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800a7a8:	d019      	beq.n	800a7de <HAL_I2C_ER_IRQHandler+0x76>
 800a7aa:	f417 7f80 	tst.w	r7, #256	; 0x100
 800a7ae:	d016      	beq.n	800a7de <HAL_I2C_ER_IRQHandler+0x76>
    tmp2 = hi2c->XferCount;
 800a7b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a7b2:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 800a7b4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a7b8:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 800a7ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a7bc:	2a20      	cmp	r2, #32
 800a7be:	d01c      	beq.n	800a7fa <HAL_I2C_ER_IRQHandler+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800a7c6:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 800a7c8:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a7cc:	2a10      	cmp	r2, #16
 800a7ce:	d001      	beq.n	800a7d4 <HAL_I2C_ER_IRQHandler+0x6c>
 800a7d0:	2a40      	cmp	r2, #64	; 0x40
 800a7d2:	d104      	bne.n	800a7de <HAL_I2C_ER_IRQHandler+0x76>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7d4:	6822      	ldr	r2, [r4, #0]
 800a7d6:	6813      	ldr	r3, [r2, #0]
 800a7d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7dc:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a7de:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800a7e2:	d008      	beq.n	800a7f6 <HAL_I2C_ER_IRQHandler+0x8e>
 800a7e4:	f417 7f80 	tst.w	r7, #256	; 0x100
 800a7e8:	d005      	beq.n	800a7f6 <HAL_I2C_ER_IRQHandler+0x8e>
    error |= HAL_I2C_ERROR_OVR;
 800a7ea:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800a7f4:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 800a7f6:	b976      	cbnz	r6, 800a816 <HAL_I2C_ER_IRQHandler+0xae>
}
 800a7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a7fa:	2900      	cmp	r1, #0
 800a7fc:	d1e0      	bne.n	800a7c0 <HAL_I2C_ER_IRQHandler+0x58>
 800a7fe:	2b21      	cmp	r3, #33	; 0x21
 800a800:	d005      	beq.n	800a80e <HAL_I2C_ER_IRQHandler+0xa6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a802:	2b29      	cmp	r3, #41	; 0x29
 800a804:	d003      	beq.n	800a80e <HAL_I2C_ER_IRQHandler+0xa6>
 800a806:	2b28      	cmp	r3, #40	; 0x28
 800a808:	d1da      	bne.n	800a7c0 <HAL_I2C_ER_IRQHandler+0x58>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a80a:	2821      	cmp	r0, #33	; 0x21
 800a80c:	d1d8      	bne.n	800a7c0 <HAL_I2C_ER_IRQHandler+0x58>
      I2C_Slave_AF(hi2c);
 800a80e:	4620      	mov	r0, r4
 800a810:	f7ff fa56 	bl	8009cc0 <I2C_Slave_AF>
 800a814:	e7e3      	b.n	800a7de <HAL_I2C_ER_IRQHandler+0x76>
    hi2c->ErrorCode |= error;
 800a816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a818:	4333      	orrs	r3, r6
 800a81a:	6423      	str	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 800a81c:	4620      	mov	r0, r4
 800a81e:	f7ff fd51 	bl	800a2c4 <I2C_ITError>
}
 800a822:	e7e9      	b.n	800a7f8 <HAL_I2C_ER_IRQHandler+0x90>

0800a824 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800a824:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800a826:	4770      	bx	lr

0800a828 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a828:	6803      	ldr	r3, [r0, #0]
 800a82a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a82e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800a830:	2000      	movs	r0, #0
 800a832:	4770      	bx	lr

0800a834 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a834:	b510      	push	{r4, lr}
 800a836:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800a838:	2300      	movs	r3, #0
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	4b19      	ldr	r3, [pc, #100]	; (800a8a4 <HAL_PWREx_EnableOverDrive+0x70>)
 800a83e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a840:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a844:	641a      	str	r2, [r3, #64]	; 0x40
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a850:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <HAL_PWREx_EnableOverDrive+0x74>)
 800a852:	2201      	movs	r2, #1
 800a854:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 800a856:	f7fd fb71 	bl	8007f3c <HAL_GetTick>
 800a85a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a85c:	4b13      	ldr	r3, [pc, #76]	; (800a8ac <HAL_PWREx_EnableOverDrive+0x78>)
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a864:	d108      	bne.n	800a878 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a866:	f7fd fb69 	bl	8007f3c <HAL_GetTick>
 800a86a:	1b00      	subs	r0, r0, r4
 800a86c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a870:	d9f4      	bls.n	800a85c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800a872:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800a874:	b002      	add	sp, #8
 800a876:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a878:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <HAL_PWREx_EnableOverDrive+0x74>)
 800a87a:	2201      	movs	r2, #1
 800a87c:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 800a87e:	f7fd fb5d 	bl	8007f3c <HAL_GetTick>
 800a882:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a884:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <HAL_PWREx_EnableOverDrive+0x78>)
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a88c:	d107      	bne.n	800a89e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a88e:	f7fd fb55 	bl	8007f3c <HAL_GetTick>
 800a892:	1b00      	subs	r0, r0, r4
 800a894:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a898:	d9f4      	bls.n	800a884 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800a89a:	2003      	movs	r0, #3
 800a89c:	e7ea      	b.n	800a874 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e7e8      	b.n	800a874 <HAL_PWREx_EnableOverDrive+0x40>
 800a8a2:	bf00      	nop
 800a8a4:	40023800 	.word	0x40023800
 800a8a8:	420e0000 	.word	0x420e0000
 800a8ac:	40007000 	.word	0x40007000

0800a8b0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800a8b8:	bb00      	cbnz	r0, 800a8fc <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	4e20      	ldr	r6, [pc, #128]	; (800a940 <HAL_RCC_MCOConfig+0x90>)
 800a8c0:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800a8c2:	f042 0201 	orr.w	r2, r2, #1
 800a8c6:	6332      	str	r2, [r6, #48]	; 0x30
 800a8c8:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800a8ca:	f002 0201 	and.w	r2, r2, #1
 800a8ce:	9201      	str	r2, [sp, #4]
 800a8d0:	9a01      	ldr	r2, [sp, #4]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a8d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8d6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8d8:	2202      	movs	r2, #2
 800a8da:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8dc:	2203      	movs	r2, #3
 800a8de:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a8e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a8e4:	a903      	add	r1, sp, #12
 800a8e6:	4817      	ldr	r0, [pc, #92]	; (800a944 <HAL_RCC_MCOConfig+0x94>)
 800a8e8:	f7fe fa0a 	bl	8008d00 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a8ec:	68b3      	ldr	r3, [r6, #8]
 800a8ee:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800a8f2:	4325      	orrs	r5, r4
 800a8f4:	431d      	orrs	r5, r3
 800a8f6:	60b5      	str	r5, [r6, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800a8f8:	b008      	add	sp, #32
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	9302      	str	r3, [sp, #8]
 800a900:	4e0f      	ldr	r6, [pc, #60]	; (800a940 <HAL_RCC_MCOConfig+0x90>)
 800a902:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800a904:	f042 0204 	orr.w	r2, r2, #4
 800a908:	6332      	str	r2, [r6, #48]	; 0x30
 800a90a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800a90c:	f002 0204 	and.w	r2, r2, #4
 800a910:	9202      	str	r2, [sp, #8]
 800a912:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a914:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a918:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a91a:	2202      	movs	r2, #2
 800a91c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a91e:	2203      	movs	r2, #3
 800a920:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a922:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a924:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a926:	a903      	add	r1, sp, #12
 800a928:	4807      	ldr	r0, [pc, #28]	; (800a948 <HAL_RCC_MCOConfig+0x98>)
 800a92a:	f7fe f9e9 	bl	8008d00 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800a92e:	68b3      	ldr	r3, [r6, #8]
 800a930:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a934:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 800a938:	431c      	orrs	r4, r3
 800a93a:	60b4      	str	r4, [r6, #8]
}
 800a93c:	e7dc      	b.n	800a8f8 <HAL_RCC_MCOConfig+0x48>
 800a93e:	bf00      	nop
 800a940:	40023800 	.word	0x40023800
 800a944:	40020000 	.word	0x40020000
 800a948:	40020800 	.word	0x40020800

0800a94c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f000 809b 	beq.w	800aa88 <HAL_RCC_ClockConfig+0x13c>
{
 800a952:	b570      	push	{r4, r5, r6, lr}
 800a954:	460d      	mov	r5, r1
 800a956:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a958:	4b4f      	ldr	r3, [pc, #316]	; (800aa98 <HAL_RCC_ClockConfig+0x14c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 030f 	and.w	r3, r3, #15
 800a960:	428b      	cmp	r3, r1
 800a962:	d208      	bcs.n	800a976 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a964:	b2cb      	uxtb	r3, r1
 800a966:	4a4c      	ldr	r2, [pc, #304]	; (800aa98 <HAL_RCC_ClockConfig+0x14c>)
 800a968:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a96a:	6813      	ldr	r3, [r2, #0]
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	428b      	cmp	r3, r1
 800a972:	f040 808b 	bne.w	800aa8c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	f013 0f02 	tst.w	r3, #2
 800a97c:	d017      	beq.n	800a9ae <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a97e:	f013 0f04 	tst.w	r3, #4
 800a982:	d004      	beq.n	800a98e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a984:	4a45      	ldr	r2, [pc, #276]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800a986:	6893      	ldr	r3, [r2, #8]
 800a988:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a98c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	f013 0f08 	tst.w	r3, #8
 800a994:	d004      	beq.n	800a9a0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a996:	4a41      	ldr	r2, [pc, #260]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800a998:	6893      	ldr	r3, [r2, #8]
 800a99a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a99e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9a0:	4a3e      	ldr	r2, [pc, #248]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800a9a2:	6893      	ldr	r3, [r2, #8]
 800a9a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9a8:	68a1      	ldr	r1, [r4, #8]
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	f013 0f01 	tst.w	r3, #1
 800a9b4:	d032      	beq.n	800aa1c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9b6:	6863      	ldr	r3, [r4, #4]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d021      	beq.n	800aa00 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a9bc:	1e9a      	subs	r2, r3, #2
 800a9be:	2a01      	cmp	r2, #1
 800a9c0:	d925      	bls.n	800aa0e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9c2:	4a36      	ldr	r2, [pc, #216]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	f012 0f02 	tst.w	r2, #2
 800a9ca:	d061      	beq.n	800aa90 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9cc:	4933      	ldr	r1, [pc, #204]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800a9ce:	688a      	ldr	r2, [r1, #8]
 800a9d0:	f022 0203 	bic.w	r2, r2, #3
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a9d8:	f7fd fab0 	bl	8007f3c <HAL_GetTick>
 800a9dc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9de:	4b2f      	ldr	r3, [pc, #188]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f003 030c 	and.w	r3, r3, #12
 800a9e6:	6862      	ldr	r2, [r4, #4]
 800a9e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a9ec:	d016      	beq.n	800aa1c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9ee:	f7fd faa5 	bl	8007f3c <HAL_GetTick>
 800a9f2:	1b80      	subs	r0, r0, r6
 800a9f4:	f241 3388 	movw	r3, #5000	; 0x1388
 800a9f8:	4298      	cmp	r0, r3
 800a9fa:	d9f0      	bls.n	800a9de <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800a9fc:	2003      	movs	r0, #3
 800a9fe:	e042      	b.n	800aa86 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa00:	4a26      	ldr	r2, [pc, #152]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800aa02:	6812      	ldr	r2, [r2, #0]
 800aa04:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800aa08:	d1e0      	bne.n	800a9cc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	e03b      	b.n	800aa86 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa0e:	4a23      	ldr	r2, [pc, #140]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800aa10:	6812      	ldr	r2, [r2, #0]
 800aa12:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800aa16:	d1d9      	bne.n	800a9cc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800aa18:	2001      	movs	r0, #1
 800aa1a:	e034      	b.n	800aa86 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa1c:	4b1e      	ldr	r3, [pc, #120]	; (800aa98 <HAL_RCC_ClockConfig+0x14c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 030f 	and.w	r3, r3, #15
 800aa24:	42ab      	cmp	r3, r5
 800aa26:	d907      	bls.n	800aa38 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa28:	b2ea      	uxtb	r2, r5
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	; (800aa98 <HAL_RCC_ClockConfig+0x14c>)
 800aa2c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 030f 	and.w	r3, r3, #15
 800aa34:	42ab      	cmp	r3, r5
 800aa36:	d12d      	bne.n	800aa94 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	f013 0f04 	tst.w	r3, #4
 800aa3e:	d006      	beq.n	800aa4e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa40:	4a16      	ldr	r2, [pc, #88]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800aa42:	6893      	ldr	r3, [r2, #8]
 800aa44:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800aa48:	68e1      	ldr	r1, [r4, #12]
 800aa4a:	430b      	orrs	r3, r1
 800aa4c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f013 0f08 	tst.w	r3, #8
 800aa54:	d007      	beq.n	800aa66 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa56:	4a11      	ldr	r2, [pc, #68]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800aa58:	6893      	ldr	r3, [r2, #8]
 800aa5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800aa5e:	6921      	ldr	r1, [r4, #16]
 800aa60:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800aa64:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa66:	f000 fc05 	bl	800b274 <HAL_RCC_GetSysClockFreq>
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <HAL_RCC_ClockConfig+0x150>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800aa72:	4a0b      	ldr	r2, [pc, #44]	; (800aaa0 <HAL_RCC_ClockConfig+0x154>)
 800aa74:	5cd3      	ldrb	r3, [r2, r3]
 800aa76:	40d8      	lsrs	r0, r3
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <HAL_RCC_ClockConfig+0x158>)
 800aa7a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <HAL_RCC_ClockConfig+0x15c>)
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	f7fd fa10 	bl	8007ea4 <HAL_InitTick>
  return HAL_OK;
 800aa84:	2000      	movs	r0, #0
}
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800aa88:	2001      	movs	r0, #1
}
 800aa8a:	4770      	bx	lr
      return HAL_ERROR;
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	e7fa      	b.n	800aa86 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800aa90:	2001      	movs	r0, #1
 800aa92:	e7f8      	b.n	800aa86 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800aa94:	2001      	movs	r0, #1
 800aa96:	e7f6      	b.n	800aa86 <HAL_RCC_ClockConfig+0x13a>
 800aa98:	40023c00 	.word	0x40023c00
 800aa9c:	40023800 	.word	0x40023800
 800aaa0:	0800f484 	.word	0x0800f484
 800aaa4:	20000000 	.word	0x20000000
 800aaa8:	20000074 	.word	0x20000074

0800aaac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800aaac:	4b01      	ldr	r3, [pc, #4]	; (800aab4 <HAL_RCC_GetHCLKFreq+0x8>)
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	20000000 	.word	0x20000000

0800aab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aab8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aaba:	f7ff fff7 	bl	800aaac <HAL_RCC_GetHCLKFreq>
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800aac6:	4a03      	ldr	r2, [pc, #12]	; (800aad4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800aac8:	5cd3      	ldrb	r3, [r2, r3]
}
 800aaca:	40d8      	lsrs	r0, r3
 800aacc:	bd08      	pop	{r3, pc}
 800aace:	bf00      	nop
 800aad0:	40023800 	.word	0x40023800
 800aad4:	0800f494 	.word	0x0800f494

0800aad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aad8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aada:	f7ff ffe7 	bl	800aaac <HAL_RCC_GetHCLKFreq>
 800aade:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800aae6:	4a03      	ldr	r2, [pc, #12]	; (800aaf4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800aae8:	5cd3      	ldrb	r3, [r2, r3]
}
 800aaea:	40d8      	lsrs	r0, r3
 800aaec:	bd08      	pop	{r3, pc}
 800aaee:	bf00      	nop
 800aaf0:	40023800 	.word	0x40023800
 800aaf4:	0800f494 	.word	0x0800f494

0800aaf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aafa:	b083      	sub	sp, #12
 800aafc:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800aafe:	6806      	ldr	r6, [r0, #0]
 800ab00:	f016 0601 	ands.w	r6, r6, #1
 800ab04:	d00d      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800ab06:	4a96      	ldr	r2, [pc, #600]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab08:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ab0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ab10:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ab12:	430b      	orrs	r3, r1
 800ab14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800ab18:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 809b 	beq.w	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  uint32_t plli2sused = 0U;
 800ab20:	2600      	movs	r6, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	f013 0f02 	tst.w	r3, #2
 800ab28:	d00b      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800ab2a:	4a8d      	ldr	r2, [pc, #564]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab2c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ab30:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 800ab34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab36:	430b      	orrs	r3, r1
 800ab38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800ab3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab3e:	b903      	cbnz	r3, 800ab42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 800ab40:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ab42:	6825      	ldr	r5, [r4, #0]
 800ab44:	f015 0504 	ands.w	r5, r5, #4
 800ab48:	d00f      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab4a:	4a85      	ldr	r2, [pc, #532]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab4c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ab50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ab54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ab56:	430b      	orrs	r3, r1
 800ab58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ab5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ab5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab62:	d07a      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d07a      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  uint32_t pllsaiused = 0U;
 800ab68:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f013 0f08 	tst.w	r3, #8
 800ab70:	d00e      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ab72:	4a7b      	ldr	r2, [pc, #492]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab74:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ab78:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800ab7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab7e:	430b      	orrs	r3, r1
 800ab80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ab84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab8a:	d06a      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ab8c:	b903      	cbnz	r3, 800ab90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      pllsaiused = 1U;
 800ab8e:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	f013 0f20 	tst.w	r3, #32
 800ab96:	d166      	bne.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	f013 0f10 	tst.w	r3, #16
 800ab9e:	d004      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aba0:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800aba4:	4b6f      	ldr	r3, [pc, #444]	; (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800aba6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800abb0:	d008      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800abb2:	4a6b      	ldr	r2, [pc, #428]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abb4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800abb8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800abbc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800abbe:	430b      	orrs	r3, r1
 800abc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800abca:	d008      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800abcc:	4a64      	ldr	r2, [pc, #400]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abce:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800abd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800abd6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800abd8:	430b      	orrs	r3, r1
 800abda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	f413 7f80 	tst.w	r3, #256	; 0x100
 800abe4:	d00d      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800abe6:	4a5e      	ldr	r2, [pc, #376]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abe8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800abec:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800abf0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800abf2:	430b      	orrs	r3, r1
 800abf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800abf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800abfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abfe:	f000 809b 	beq.w	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ac08:	d008      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800ac0a:	4a55      	ldr	r2, [pc, #340]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac0c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800ac10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac14:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ac16:	430b      	orrs	r3, r1
 800ac18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800ac22:	d00c      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800ac24:	4a4e      	ldr	r2, [pc, #312]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac26:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800ac2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac2e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ac30:	430b      	orrs	r3, r1
 800ac32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800ac36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac3c:	d07e      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ac3e:	2e00      	cmp	r6, #0
 800ac40:	d17c      	bne.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac48:	d078      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800ac4a:	2d01      	cmp	r5, #1
 800ac4c:	f000 8125 	beq.w	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800ac50:	2000      	movs	r0, #0
}
 800ac52:	b003      	add	sp, #12
 800ac54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1U;
 800ac56:	2601      	movs	r6, #1
 800ac58:	e763      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 800ac5a:	2601      	movs	r6, #1
 800ac5c:	e782      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      pllsaiused = 1U;
 800ac5e:	2501      	movs	r5, #1
 800ac60:	e783      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      plli2sused = 1U;
 800ac62:	2601      	movs	r6, #1
 800ac64:	e792      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    __HAL_RCC_PWR_CLK_ENABLE();
 800ac66:	2300      	movs	r3, #0
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	4b3d      	ldr	r3, [pc, #244]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ac72:	641a      	str	r2, [r3, #64]	; 0x40
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac7a:	9301      	str	r3, [sp, #4]
 800ac7c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800ac7e:	4a3a      	ldr	r2, [pc, #232]	; (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800ac80:	6813      	ldr	r3, [r2, #0]
 800ac82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac86:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ac88:	f7fd f958 	bl	8007f3c <HAL_GetTick>
 800ac8c:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ac8e:	4b36      	ldr	r3, [pc, #216]	; (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ac96:	d106      	bne.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ac98:	f7fd f950 	bl	8007f3c <HAL_GetTick>
 800ac9c:	1bc0      	subs	r0, r0, r7
 800ac9e:	2802      	cmp	r0, #2
 800aca0:	d9f5      	bls.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x196>
        return HAL_TIMEOUT;
 800aca2:	2003      	movs	r0, #3
 800aca4:	e7d5      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aca6:	4b2e      	ldr	r3, [pc, #184]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800acaa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800acae:	d014      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800acb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800acb2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d00f      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acba:	4b29      	ldr	r3, [pc, #164]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800acc2:	492a      	ldr	r1, [pc, #168]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800acc4:	2001      	movs	r0, #1
 800acc6:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 800acca:	2000      	movs	r0, #0
 800accc:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 800acd0:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800acd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd4:	f013 0f01 	tst.w	r3, #1
 800acd8:	d112      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800acda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acdc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800ace0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800ace4:	d01d      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ace6:	4a1e      	ldr	r2, [pc, #120]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ace8:	6893      	ldr	r3, [r2, #8]
 800acea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800acee:	6093      	str	r3, [r2, #8]
 800acf0:	491b      	ldr	r1, [pc, #108]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acf2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800acf4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800acf6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800acfa:	4313      	orrs	r3, r2
 800acfc:	670b      	str	r3, [r1, #112]	; 0x70
 800acfe:	e74b      	b.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 800ad00:	f7fd f91c 	bl	8007f3c <HAL_GetTick>
 800ad04:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad06:	4b16      	ldr	r3, [pc, #88]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ad08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad0a:	f013 0f02 	tst.w	r3, #2
 800ad0e:	d1e4      	bne.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad10:	f7fd f914 	bl	8007f3c <HAL_GetTick>
 800ad14:	1bc0      	subs	r0, r0, r7
 800ad16:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad1a:	4298      	cmp	r0, r3
 800ad1c:	d9f3      	bls.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
            return HAL_TIMEOUT;
 800ad1e:	2003      	movs	r0, #3
 800ad20:	e797      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad22:	490f      	ldr	r1, [pc, #60]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ad24:	688a      	ldr	r2, [r1, #8]
 800ad26:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800ad2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad32:	4313      	orrs	r3, r2
 800ad34:	608b      	str	r3, [r1, #8]
 800ad36:	e7db      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      pllsaiused = 1U;
 800ad38:	2501      	movs	r5, #1
 800ad3a:	e762      	b.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_PLLI2S_DISABLE();
 800ad3c:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800ad42:	f7fd f8fb 	bl	8007f3c <HAL_GetTick>
 800ad46:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad48:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800ad50:	d00e      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ad52:	f7fd f8f3 	bl	8007f3c <HAL_GetTick>
 800ad56:	1b80      	subs	r0, r0, r6
 800ad58:	2802      	cmp	r0, #2
 800ad5a:	d9f5      	bls.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x250>
        return HAL_TIMEOUT;
 800ad5c:	2003      	movs	r0, #3
 800ad5e:	e778      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ad60:	40023800 	.word	0x40023800
 800ad64:	42471000 	.word	0x42471000
 800ad68:	40007000 	.word	0x40007000
 800ad6c:	42470000 	.word	0x42470000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	f013 0f01 	tst.w	r3, #1
 800ad76:	d001      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x284>
 800ad78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ad7a:	b122      	cbz	r2, 800ad86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800ad7c:	f013 0f02 	tst.w	r3, #2
 800ad80:	d015      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800ad82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad84:	b99b      	cbnz	r3, 800adae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800ad86:	4a77      	ldr	r2, [pc, #476]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ad88:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad8c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad90:	6863      	ldr	r3, [r4, #4]
 800ad92:	68a6      	ldr	r6, [r4, #8]
 800ad94:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800ad98:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800ad9c:	4303      	orrs	r3, r0
 800ad9e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800ada2:	430b      	orrs	r3, r1
 800ada4:	6961      	ldr	r1, [r4, #20]
 800ada6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800adaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	f013 0f04 	tst.w	r3, #4
 800adb4:	d003      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 800adb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800adb8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800adbc:	d006      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800adbe:	f013 0f08 	tst.w	r3, #8
 800adc2:	d020      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800adc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adca:	d11c      	bne.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800adcc:	4a65      	ldr	r2, [pc, #404]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800adce:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800add2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800add6:	6863      	ldr	r3, [r4, #4]
 800add8:	68a6      	ldr	r6, [r4, #8]
 800adda:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800adde:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800ade2:	4303      	orrs	r3, r0
 800ade4:	6920      	ldr	r0, [r4, #16]
 800ade6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800adea:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800adee:	430b      	orrs	r3, r1
 800adf0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800adf4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800adf8:	f023 031f 	bic.w	r3, r3, #31
 800adfc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800adfe:	3901      	subs	r1, #1
 800ae00:	430b      	orrs	r3, r1
 800ae02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800ae0c:	d003      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800ae0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ae10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae14:	d028      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ae1c:	d011      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ae1e:	6863      	ldr	r3, [r4, #4]
 800ae20:	68a2      	ldr	r2, [r4, #8]
 800ae22:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ae26:	68e2      	ldr	r2, [r4, #12]
 800ae28:	0852      	lsrs	r2, r2, #1
 800ae2a:	3a01      	subs	r2, #1
 800ae2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae30:	6922      	ldr	r2, [r4, #16]
 800ae32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ae36:	6962      	ldr	r2, [r4, #20]
 800ae38:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800ae3c:	4a49      	ldr	r2, [pc, #292]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ae3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800ae42:	4b49      	ldr	r3, [pc, #292]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ae44:	2201      	movs	r2, #1
 800ae46:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800ae48:	f7fd f878 	bl	8007f3c <HAL_GetTick>
 800ae4c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ae4e:	4b45      	ldr	r3, [pc, #276]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800ae56:	f47f aef8 	bne.w	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x152>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ae5a:	f7fd f86f 	bl	8007f3c <HAL_GetTick>
 800ae5e:	1b80      	subs	r0, r0, r6
 800ae60:	2802      	cmp	r0, #2
 800ae62:	d9f4      	bls.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x356>
        return HAL_TIMEOUT;
 800ae64:	2003      	movs	r0, #3
 800ae66:	e6f4      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800ae68:	483e      	ldr	r0, [pc, #248]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ae6a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ae6e:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800ae72:	3201      	adds	r2, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ae74:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800ae78:	6863      	ldr	r3, [r4, #4]
 800ae7a:	68a1      	ldr	r1, [r4, #8]
 800ae7c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800ae80:	68e1      	ldr	r1, [r4, #12]
 800ae82:	0849      	lsrs	r1, r1, #1
 800ae84:	3901      	subs	r1, #1
 800ae86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ae8a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800ae8e:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 800ae92:	4313      	orrs	r3, r2
 800ae94:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 800ae98:	e7bd      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_PLLSAI_DISABLE();
 800ae9a:	4b33      	ldr	r3, [pc, #204]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 800aea0:	f7fd f84c 	bl	8007f3c <HAL_GetTick>
 800aea4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aea6:	4b2f      	ldr	r3, [pc, #188]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800aeae:	d006      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aeb0:	f7fd f844 	bl	8007f3c <HAL_GetTick>
 800aeb4:	1b40      	subs	r0, r0, r5
 800aeb6:	2802      	cmp	r0, #2
 800aeb8:	d9f5      	bls.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        return HAL_TIMEOUT;
 800aeba:	2003      	movs	r0, #3
 800aebc:	e6c9      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	f013 0f04 	tst.w	r3, #4
 800aec4:	d001      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800aec6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800aec8:	b122      	cbz	r2, 800aed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 800aeca:	f013 0f08 	tst.w	r3, #8
 800aece:	d01a      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aed0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aed2:	b9c3      	cbnz	r3, 800af06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800aed4:	4a23      	ldr	r2, [pc, #140]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800aed6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800aeda:	69a3      	ldr	r3, [r4, #24]
 800aedc:	69e0      	ldr	r0, [r4, #28]
 800aede:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800aee2:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800aee6:	430b      	orrs	r3, r1
 800aee8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aeea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800aeee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aef2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800aef6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800aefa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aefc:	3901      	subs	r1, #1
 800aefe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800af02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	f413 7f80 	tst.w	r3, #256	; 0x100
 800af0c:	d003      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800af0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800af10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af14:	d011      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    __HAL_RCC_PLLSAI_ENABLE();
 800af16:	4b14      	ldr	r3, [pc, #80]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800af18:	2201      	movs	r2, #1
 800af1a:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 800af1c:	f7fd f80e 	bl	8007f3c <HAL_GetTick>
 800af20:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800af22:	4b10      	ldr	r3, [pc, #64]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800af2a:	d118      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x466>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800af2c:	f7fd f806 	bl	8007f3c <HAL_GetTick>
 800af30:	1b00      	subs	r0, r0, r4
 800af32:	2802      	cmp	r0, #2
 800af34:	d9f5      	bls.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        return HAL_TIMEOUT;
 800af36:	2003      	movs	r0, #3
 800af38:	e68b      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af3a:	480a      	ldr	r0, [pc, #40]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800af3c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800af40:	69a3      	ldr	r3, [r4, #24]
 800af42:	69e2      	ldr	r2, [r4, #28]
 800af44:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800af48:	6a22      	ldr	r2, [r4, #32]
 800af4a:	0852      	lsrs	r2, r2, #1
 800af4c:	3a01      	subs	r2, #1
 800af4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af52:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 800af56:	4313      	orrs	r3, r2
 800af58:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800af5c:	e7db      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  return HAL_OK;
 800af5e:	2000      	movs	r0, #0
 800af60:	e677      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800af62:	bf00      	nop
 800af64:	40023800 	.word	0x40023800
 800af68:	42470000 	.word	0x42470000

0800af6c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800af6c:	3801      	subs	r0, #1
 800af6e:	2807      	cmp	r0, #7
 800af70:	f200 8166 	bhi.w	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800af74:	e8df f010 	tbh	[pc, r0, lsl #1]
 800af78:	010500a4 	.word	0x010500a4
 800af7c:	00080164 	.word	0x00080164
 800af80:	01640164 	.word	0x01640164
 800af84:	00080164 	.word	0x00080164
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800af88:	4baf      	ldr	r3, [pc, #700]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800af8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800af8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      switch (saiclocksource)
 800af92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af96:	f000 8155 	beq.w	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800af9a:	d90d      	bls.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800af9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afa0:	d06e      	beq.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800afa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800afa6:	d132      	bne.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          frequency = EXTERNAL_CLOCK_VALUE;
          break;
        }
      case RCC_DCKCFGR_SAI2SRC: /* PLLSRC(HSE or HSI) is the clock source for SAI*/
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800afa8:	4ba7      	ldr	r3, [pc, #668]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800afb0:	f040 8152 	bne.w	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
          {
            /* In Case the PLL Source is HSI (Internal Clock) */
            frequency = (uint32_t)(HSI_VALUE);
 800afb4:	48a5      	ldr	r0, [pc, #660]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800afb6:	4770      	bx	lr
 800afb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afbc:	d035      	beq.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800afbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afc2:	d05d      	beq.n	800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800afc4:	bb0b      	cbnz	r3, 800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800afc6:	4ba0      	ldr	r3, [pc, #640]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800afce:	d123      	bne.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800afd0:	4b9d      	ldr	r3, [pc, #628]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800afd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afda:	499c      	ldr	r1, [pc, #624]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800afdc:	fbb1 f1f3 	udiv	r1, r1, r3
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800afe0:	4b99      	ldr	r3, [pc, #612]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800afe2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800afe6:	f3c2 6203 	ubfx	r2, r2, #24, #4
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800afea:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800afee:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800aff2:	fb01 f000 	mul.w	r0, r1, r0
 800aff6:	fbb0 f0f2 	udiv	r0, r0, r2
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800affa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800affe:	f3c3 2304 	ubfx	r3, r3, #8, #5
 800b002:	3301      	adds	r3, #1
          frequency = frequency/(tmpreg1);
 800b004:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800b008:	4770      	bx	lr
 800b00a:	2000      	movs	r0, #0
 800b00c:	4770      	bx	lr
 800b00e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b012:	d00a      	beq.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800b014:	2000      	movs	r0, #0
 800b016:	4770      	bx	lr
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800b018:	4b8b      	ldr	r3, [pc, #556]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b01e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b022:	498b      	ldr	r1, [pc, #556]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b024:	fbb1 f1f3 	udiv	r1, r1, r3
 800b028:	e7da      	b.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b02a:	4b87      	ldr	r3, [pc, #540]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b032:	d11c      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b034:	4b84      	ldr	r3, [pc, #528]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b03a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b03e:	4983      	ldr	r1, [pc, #524]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800b040:	fbb1 f1f3 	udiv	r1, r1, r3
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800b044:	4b80      	ldr	r3, [pc, #512]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b046:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b04a:	f3c2 6203 	ubfx	r2, r2, #24, #4
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800b04e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800b052:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b056:	fb01 f000 	mul.w	r0, r1, r0
 800b05a:	fbb0 f0f2 	udiv	r0, r0, r2
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800b05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b062:	f003 031f 	and.w	r3, r3, #31
 800b066:	3301      	adds	r3, #1
          frequency = frequency/(tmpreg1);
 800b068:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800b06c:	4770      	bx	lr
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800b06e:	4b76      	ldr	r3, [pc, #472]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b078:	4975      	ldr	r1, [pc, #468]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b07a:	fbb1 f1f3 	udiv	r1, r1, r3
 800b07e:	e7e1      	b.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b080:	4b71      	ldr	r3, [pc, #452]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b088:	d112      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b08a:	4b6f      	ldr	r3, [pc, #444]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b092:	4a6e      	ldr	r2, [pc, #440]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800b094:	fbb2 f2f3 	udiv	r2, r2, r3
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800b098:	496b      	ldr	r1, [pc, #428]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b09a:	684b      	ldr	r3, [r1, #4]
 800b09c:	f3c3 7302 	ubfx	r3, r3, #28, #3
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800b0a0:	6848      	ldr	r0, [r1, #4]
 800b0a2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b0a6:	fb02 f000 	mul.w	r0, r2, r0
 800b0aa:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800b0ae:	4770      	bx	lr
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b0b0:	4b65      	ldr	r3, [pc, #404]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0b8:	4a65      	ldr	r2, [pc, #404]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b0ba:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0be:	e7eb      	b.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
      break;
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800b0c0:	4b61      	ldr	r3, [pc, #388]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b0c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0c6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
      switch (srcclk)
 800b0ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0ce:	d038      	beq.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800b0d0:	d806      	bhi.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800b0d2:	b193      	cbz	r3, 800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 800b0d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0d8:	f040 80c0 	bne.w	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 800b0dc:	485d      	ldr	r0, [pc, #372]	; (800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800b0de:	4770      	bx	lr
 800b0e0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800b0e4:	d107      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
          break;
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b0e6:	4b58      	ldr	r3, [pc, #352]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b0ee:	f000 80b7 	beq.w	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
          {
            frequency = HSE_VALUE;
 800b0f2:	4857      	ldr	r0, [pc, #348]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b0f4:	4770      	bx	lr
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b0fa:	4b53      	ldr	r3, [pc, #332]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b102:	d015      	beq.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b104:	4b50      	ldr	r3, [pc, #320]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b106:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b10a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b10e:	4b50      	ldr	r3, [pc, #320]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b110:	fbb3 f3f2 	udiv	r3, r3, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b114:	4a4c      	ldr	r2, [pc, #304]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b116:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 800b11a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b11e:	fb03 f000 	mul.w	r0, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b122:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800b126:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800b12a:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800b12e:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b130:	4b45      	ldr	r3, [pc, #276]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b132:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b136:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b13a:	4b44      	ldr	r3, [pc, #272]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800b13c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b140:	e7e8      	b.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b142:	4b41      	ldr	r3, [pc, #260]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b14a:	d012      	beq.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b14c:	4b3e      	ldr	r3, [pc, #248]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b154:	4b3e      	ldr	r3, [pc, #248]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b156:	fbb3 f3f2 	udiv	r3, r3, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800b15a:	4a3b      	ldr	r2, [pc, #236]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b15c:	6850      	ldr	r0, [r2, #4]
 800b15e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b162:	fb03 f000 	mul.w	r0, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800b166:	6853      	ldr	r3, [r2, #4]
 800b168:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800b16c:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800b170:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b172:	4b35      	ldr	r3, [pc, #212]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b17a:	4b34      	ldr	r3, [pc, #208]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800b17c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b180:	e7eb      	b.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
      break;
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800b182:	4b31      	ldr	r3, [pc, #196]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b188:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
      switch (srcclk)
 800b18c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b190:	d036      	beq.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 800b192:	d805      	bhi.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800b194:	b183      	cbz	r3, 800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800b196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b19a:	d163      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 800b19c:	482d      	ldr	r0, [pc, #180]	; (800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800b19e:	4770      	bx	lr
 800b1a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b1a4:	d106      	bne.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          break;
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b1a6:	4b28      	ldr	r3, [pc, #160]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b1ae:	d05b      	beq.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
          {
            frequency = HSE_VALUE;
 800b1b0:	4827      	ldr	r0, [pc, #156]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b1b2:	4770      	bx	lr
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b1b8:	4b23      	ldr	r3, [pc, #140]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b1c0:	d015      	beq.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b1c2:	4b21      	ldr	r3, [pc, #132]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b1c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b1c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b1cc:	4b20      	ldr	r3, [pc, #128]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b1ce:	fbb3 f3f2 	udiv	r3, r3, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b1d2:	4a1d      	ldr	r2, [pc, #116]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b1d4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 800b1d8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b1dc:	fb03 f000 	mul.w	r0, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b1e0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800b1e4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800b1e8:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800b1ec:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b1ee:	4b16      	ldr	r3, [pc, #88]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b1f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b1f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b1f8:	4b14      	ldr	r3, [pc, #80]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800b1fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1fe:	e7e8      	b.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b200:	4b11      	ldr	r3, [pc, #68]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b208:	d012      	beq.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b20a:	4b0f      	ldr	r3, [pc, #60]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b212:	4b0f      	ldr	r3, [pc, #60]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800b214:	fbb3 f3f2 	udiv	r3, r3, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800b218:	4a0b      	ldr	r2, [pc, #44]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b21a:	6850      	ldr	r0, [r2, #4]
 800b21c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b220:	fb03 f000 	mul.w	r0, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800b224:	6853      	ldr	r3, [r2, #4]
 800b226:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800b22a:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800b22e:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b230:	4b05      	ldr	r3, [pc, #20]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b238:	4b04      	ldr	r3, [pc, #16]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800b23a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b23e:	e7eb      	b.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
  switch (PeriphClk)
 800b240:	2000      	movs	r0, #0
 800b242:	4770      	bx	lr
          frequency = EXTERNAL_CLOCK_VALUE;
 800b244:	4803      	ldr	r0, [pc, #12]	; (800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800b246:	4770      	bx	lr
 800b248:	40023800 	.word	0x40023800
 800b24c:	00f42400 	.word	0x00f42400
 800b250:	007a1200 	.word	0x007a1200
 800b254:	00bb8000 	.word	0x00bb8000
            frequency = (uint32_t)(HSE_VALUE);
 800b258:	4804      	ldr	r0, [pc, #16]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b25a:	4770      	bx	lr
          frequency = 0U;
 800b25c:	2000      	movs	r0, #0
 800b25e:	4770      	bx	lr
            frequency = HSI_VALUE;
 800b260:	4803      	ldr	r0, [pc, #12]	; (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b262:	4770      	bx	lr
          frequency = 0U;
 800b264:	2000      	movs	r0, #0
 800b266:	4770      	bx	lr
            frequency = HSI_VALUE;
 800b268:	4801      	ldr	r0, [pc, #4]	; (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
    {
       break;
    }
  }
  return frequency;
}
 800b26a:	4770      	bx	lr
 800b26c:	007a1200 	.word	0x007a1200
 800b270:	00f42400 	.word	0x00f42400

0800b274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b274:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b276:	4b60      	ldr	r3, [pc, #384]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	f003 030c 	and.w	r3, r3, #12
 800b27e:	2b08      	cmp	r3, #8
 800b280:	d007      	beq.n	800b292 <HAL_RCC_GetSysClockFreq+0x1e>
 800b282:	2b0c      	cmp	r3, #12
 800b284:	d05f      	beq.n	800b346 <HAL_RCC_GetSysClockFreq+0xd2>
 800b286:	2b04      	cmp	r3, #4
 800b288:	d001      	beq.n	800b28e <HAL_RCC_GetSysClockFreq+0x1a>
 800b28a:	485c      	ldr	r0, [pc, #368]	; (800b3fc <HAL_RCC_GetSysClockFreq+0x188>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800b28c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800b28e:	485c      	ldr	r0, [pc, #368]	; (800b400 <HAL_RCC_GetSysClockFreq+0x18c>)
 800b290:	e7fc      	b.n	800b28c <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b292:	4b59      	ldr	r3, [pc, #356]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b2a0:	d02c      	beq.n	800b2fc <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2a2:	4b55      	ldr	r3, [pc, #340]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b2a4:	6858      	ldr	r0, [r3, #4]
 800b2a6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b2aa:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800b2ae:	ebbc 0c00 	subs.w	ip, ip, r0
 800b2b2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800b2b6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800b2ba:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800b2be:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800b2c2:	ebb1 010c 	subs.w	r1, r1, ip
 800b2c6:	eb63 030e 	sbc.w	r3, r3, lr
 800b2ca:	00db      	lsls	r3, r3, #3
 800b2cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2d0:	00c9      	lsls	r1, r1, #3
 800b2d2:	eb11 0c00 	adds.w	ip, r1, r0
 800b2d6:	f143 0300 	adc.w	r3, r3, #0
 800b2da:	0259      	lsls	r1, r3, #9
 800b2dc:	2300      	movs	r3, #0
 800b2de:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800b2e2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800b2e6:	f7f5 fc7d 	bl	8000be4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b2ea:	4b43      	ldr	r3, [pc, #268]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800b2f6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800b2fa:	e7c7      	b.n	800b28c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2fc:	4b3e      	ldr	r3, [pc, #248]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b2fe:	6858      	ldr	r0, [r3, #4]
 800b300:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b304:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800b308:	ebbc 0c00 	subs.w	ip, ip, r0
 800b30c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800b310:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800b314:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800b318:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800b31c:	ebb1 010c 	subs.w	r1, r1, ip
 800b320:	eb63 030e 	sbc.w	r3, r3, lr
 800b324:	00db      	lsls	r3, r3, #3
 800b326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b32a:	00c9      	lsls	r1, r1, #3
 800b32c:	eb11 0c00 	adds.w	ip, r1, r0
 800b330:	f143 0300 	adc.w	r3, r3, #0
 800b334:	0299      	lsls	r1, r3, #10
 800b336:	2300      	movs	r3, #0
 800b338:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800b33c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800b340:	f7f5 fc50 	bl	8000be4 <__aeabi_uldivmod>
 800b344:	e7d1      	b.n	800b2ea <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b346:	4b2c      	ldr	r3, [pc, #176]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b348:	685a      	ldr	r2, [r3, #4]
 800b34a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b354:	d02a      	beq.n	800b3ac <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b356:	4b28      	ldr	r3, [pc, #160]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b358:	6858      	ldr	r0, [r3, #4]
 800b35a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b35e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800b362:	ebbc 0c00 	subs.w	ip, ip, r0
 800b366:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800b36a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800b36e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800b372:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800b376:	ebb1 010c 	subs.w	r1, r1, ip
 800b37a:	eb63 030e 	sbc.w	r3, r3, lr
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b384:	00c9      	lsls	r1, r1, #3
 800b386:	eb11 0c00 	adds.w	ip, r1, r0
 800b38a:	f143 0300 	adc.w	r3, r3, #0
 800b38e:	0259      	lsls	r1, r3, #9
 800b390:	2300      	movs	r3, #0
 800b392:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800b396:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800b39a:	f7f5 fc23 	bl	8000be4 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b39e:	4b16      	ldr	r3, [pc, #88]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 800b3a6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800b3aa:	e76f      	b.n	800b28c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3ac:	4b12      	ldr	r3, [pc, #72]	; (800b3f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800b3ae:	6858      	ldr	r0, [r3, #4]
 800b3b0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b3b4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800b3b8:	ebbc 0c00 	subs.w	ip, ip, r0
 800b3bc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800b3c0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800b3c4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800b3c8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800b3cc:	ebb1 010c 	subs.w	r1, r1, ip
 800b3d0:	eb63 030e 	sbc.w	r3, r3, lr
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3da:	00c9      	lsls	r1, r1, #3
 800b3dc:	eb11 0c00 	adds.w	ip, r1, r0
 800b3e0:	f143 0300 	adc.w	r3, r3, #0
 800b3e4:	0299      	lsls	r1, r3, #10
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800b3ec:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800b3f0:	f7f5 fbf8 	bl	8000be4 <__aeabi_uldivmod>
 800b3f4:	e7d3      	b.n	800b39e <HAL_RCC_GetSysClockFreq+0x12a>
 800b3f6:	bf00      	nop
 800b3f8:	40023800 	.word	0x40023800
 800b3fc:	00f42400 	.word	0x00f42400
 800b400:	007a1200 	.word	0x007a1200

0800b404 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b404:	2800      	cmp	r0, #0
 800b406:	f000 8205 	beq.w	800b814 <HAL_RCC_OscConfig+0x410>
{
 800b40a:	b570      	push	{r4, r5, r6, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b410:	6803      	ldr	r3, [r0, #0]
 800b412:	f013 0f01 	tst.w	r3, #1
 800b416:	d043      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b418:	4b9b      	ldr	r3, [pc, #620]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	f003 030c 	and.w	r3, r3, #12
 800b420:	2b04      	cmp	r3, #4
 800b422:	d034      	beq.n	800b48e <HAL_RCC_OscConfig+0x8a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b424:	4b98      	ldr	r3, [pc, #608]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	d029      	beq.n	800b484 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b430:	4b95      	ldr	r3, [pc, #596]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b438:	2b0c      	cmp	r3, #12
 800b43a:	d05b      	beq.n	800b4f4 <HAL_RCC_OscConfig+0xf0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b43c:	6863      	ldr	r3, [r4, #4]
 800b43e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b442:	d05d      	beq.n	800b500 <HAL_RCC_OscConfig+0xfc>
 800b444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b448:	d060      	beq.n	800b50c <HAL_RCC_OscConfig+0x108>
 800b44a:	4b8f      	ldr	r3, [pc, #572]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b45a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b45c:	6863      	ldr	r3, [r4, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d05e      	beq.n	800b520 <HAL_RCC_OscConfig+0x11c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b462:	f7fc fd6b 	bl	8007f3c <HAL_GetTick>
 800b466:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b468:	4b87      	ldr	r3, [pc, #540]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b470:	d116      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x9c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b472:	f7fc fd63 	bl	8007f3c <HAL_GetTick>
 800b476:	1b40      	subs	r0, r0, r5
 800b478:	f241 3388 	movw	r3, #5000	; 0x1388
 800b47c:	4298      	cmp	r0, r3
 800b47e:	d9f3      	bls.n	800b468 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 800b480:	2003      	movs	r0, #3
 800b482:	e1ce      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b484:	4b80      	ldr	r3, [pc, #512]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b48c:	d0d0      	beq.n	800b430 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b48e:	4b7e      	ldr	r3, [pc, #504]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b496:	d003      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x9c>
 800b498:	6863      	ldr	r3, [r4, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f000 81bc 	beq.w	800b818 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	f013 0f02 	tst.w	r3, #2
 800b4a6:	d062      	beq.n	800b56e <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b4a8:	4b77      	ldr	r3, [pc, #476]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f013 0f0c 	tst.w	r3, #12
 800b4b0:	d04c      	beq.n	800b54c <HAL_RCC_OscConfig+0x148>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b4b2:	4b75      	ldr	r3, [pc, #468]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b4ba:	2b08      	cmp	r3, #8
 800b4bc:	d041      	beq.n	800b542 <HAL_RCC_OscConfig+0x13e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4be:	4b72      	ldr	r3, [pc, #456]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b4c6:	2b0c      	cmp	r3, #12
 800b4c8:	d06b      	beq.n	800b5a2 <HAL_RCC_OscConfig+0x19e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d077      	beq.n	800b5c0 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4d0:	4b6e      	ldr	r3, [pc, #440]	; (800b68c <HAL_RCC_OscConfig+0x288>)
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4d6:	f7fc fd31 	bl	8007f3c <HAL_GetTick>
 800b4da:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4dc:	4b6a      	ldr	r3, [pc, #424]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f013 0f02 	tst.w	r3, #2
 800b4e4:	d163      	bne.n	800b5ae <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b4e6:	f7fc fd29 	bl	8007f3c <HAL_GetTick>
 800b4ea:	1b40      	subs	r0, r0, r5
 800b4ec:	2802      	cmp	r0, #2
 800b4ee:	d9f5      	bls.n	800b4dc <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 800b4f0:	2003      	movs	r0, #3
 800b4f2:	e196      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b4f4:	4b64      	ldr	r3, [pc, #400]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b4fc:	d09e      	beq.n	800b43c <HAL_RCC_OscConfig+0x38>
 800b4fe:	e7c6      	b.n	800b48e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b500:	4a61      	ldr	r2, [pc, #388]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b502:	6813      	ldr	r3, [r2, #0]
 800b504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b508:	6013      	str	r3, [r2, #0]
 800b50a:	e7a7      	b.n	800b45c <HAL_RCC_OscConfig+0x58>
 800b50c:	4b5e      	ldr	r3, [pc, #376]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	e79d      	b.n	800b45c <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 800b520:	f7fc fd0c 	bl	8007f3c <HAL_GetTick>
 800b524:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b526:	4b58      	ldr	r3, [pc, #352]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b52e:	d0b7      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b530:	f7fc fd04 	bl	8007f3c <HAL_GetTick>
 800b534:	1b40      	subs	r0, r0, r5
 800b536:	f241 3388 	movw	r3, #5000	; 0x1388
 800b53a:	4298      	cmp	r0, r3
 800b53c:	d9f3      	bls.n	800b526 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 800b53e:	2003      	movs	r0, #3
 800b540:	e16f      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b542:	4b51      	ldr	r3, [pc, #324]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b54a:	d1b8      	bne.n	800b4be <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b54c:	4b4e      	ldr	r3, [pc, #312]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f013 0f02 	tst.w	r3, #2
 800b554:	d003      	beq.n	800b55e <HAL_RCC_OscConfig+0x15a>
 800b556:	68e3      	ldr	r3, [r4, #12]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	f040 815f 	bne.w	800b81c <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b55e:	4a4a      	ldr	r2, [pc, #296]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b560:	6813      	ldr	r3, [r2, #0]
 800b562:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b566:	6921      	ldr	r1, [r4, #16]
 800b568:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b56c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	f013 0f08 	tst.w	r3, #8
 800b574:	d049      	beq.n	800b60a <HAL_RCC_OscConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b576:	6963      	ldr	r3, [r4, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d033      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x1e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b57c:	4b43      	ldr	r3, [pc, #268]	; (800b68c <HAL_RCC_OscConfig+0x288>)
 800b57e:	2201      	movs	r2, #1
 800b580:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b584:	f7fc fcda 	bl	8007f3c <HAL_GetTick>
 800b588:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b58a:	4b3f      	ldr	r3, [pc, #252]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b58c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b58e:	f013 0f02 	tst.w	r3, #2
 800b592:	d13a      	bne.n	800b60a <HAL_RCC_OscConfig+0x206>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b594:	f7fc fcd2 	bl	8007f3c <HAL_GetTick>
 800b598:	1b40      	subs	r0, r0, r5
 800b59a:	2802      	cmp	r0, #2
 800b59c:	d9f5      	bls.n	800b58a <HAL_RCC_OscConfig+0x186>
        {
          return HAL_TIMEOUT;
 800b59e:	2003      	movs	r0, #3
 800b5a0:	e13f      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b5a2:	4b39      	ldr	r3, [pc, #228]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b5aa:	d18e      	bne.n	800b4ca <HAL_RCC_OscConfig+0xc6>
 800b5ac:	e7ce      	b.n	800b54c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5ae:	4a36      	ldr	r2, [pc, #216]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b5b0:	6813      	ldr	r3, [r2, #0]
 800b5b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b5b6:	6921      	ldr	r1, [r4, #16]
 800b5b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	e7d6      	b.n	800b56e <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 800b5c0:	4b32      	ldr	r3, [pc, #200]	; (800b68c <HAL_RCC_OscConfig+0x288>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b5c6:	f7fc fcb9 	bl	8007f3c <HAL_GetTick>
 800b5ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5cc:	4b2e      	ldr	r3, [pc, #184]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f013 0f02 	tst.w	r3, #2
 800b5d4:	d0cb      	beq.n	800b56e <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5d6:	f7fc fcb1 	bl	8007f3c <HAL_GetTick>
 800b5da:	1b40      	subs	r0, r0, r5
 800b5dc:	2802      	cmp	r0, #2
 800b5de:	d9f5      	bls.n	800b5cc <HAL_RCC_OscConfig+0x1c8>
            return HAL_TIMEOUT;
 800b5e0:	2003      	movs	r0, #3
 800b5e2:	e11e      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5e4:	4b29      	ldr	r3, [pc, #164]	; (800b68c <HAL_RCC_OscConfig+0x288>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ec:	f7fc fca6 	bl	8007f3c <HAL_GetTick>
 800b5f0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5f2:	4b25      	ldr	r3, [pc, #148]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b5f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5f6:	f013 0f02 	tst.w	r3, #2
 800b5fa:	d006      	beq.n	800b60a <HAL_RCC_OscConfig+0x206>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b5fc:	f7fc fc9e 	bl	8007f3c <HAL_GetTick>
 800b600:	1b40      	subs	r0, r0, r5
 800b602:	2802      	cmp	r0, #2
 800b604:	d9f5      	bls.n	800b5f2 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
 800b606:	2003      	movs	r0, #3
 800b608:	e10b      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	f013 0f04 	tst.w	r3, #4
 800b610:	d076      	beq.n	800b700 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b612:	4b1d      	ldr	r3, [pc, #116]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b616:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800b61a:	d133      	bne.n	800b684 <HAL_RCC_OscConfig+0x280>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b61c:	2300      	movs	r3, #0
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	4b19      	ldr	r3, [pc, #100]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b624:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b628:	641a      	str	r2, [r3, #64]	; 0x40
 800b62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b634:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b636:	4b16      	ldr	r3, [pc, #88]	; (800b690 <HAL_RCC_OscConfig+0x28c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b63e:	d029      	beq.n	800b694 <HAL_RCC_OscConfig+0x290>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b640:	68a3      	ldr	r3, [r4, #8]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d03a      	beq.n	800b6bc <HAL_RCC_OscConfig+0x2b8>
 800b646:	2b05      	cmp	r3, #5
 800b648:	d03e      	beq.n	800b6c8 <HAL_RCC_OscConfig+0x2c4>
 800b64a:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b64c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b64e:	f022 0201 	bic.w	r2, r2, #1
 800b652:	671a      	str	r2, [r3, #112]	; 0x70
 800b654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b656:	f022 0204 	bic.w	r2, r2, #4
 800b65a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b65c:	68a3      	ldr	r3, [r4, #8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d03c      	beq.n	800b6dc <HAL_RCC_OscConfig+0x2d8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b662:	f7fc fc6b 	bl	8007f3c <HAL_GetTick>
 800b666:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b668:	4b07      	ldr	r3, [pc, #28]	; (800b688 <HAL_RCC_OscConfig+0x284>)
 800b66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b66c:	f013 0f02 	tst.w	r3, #2
 800b670:	d145      	bne.n	800b6fe <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b672:	f7fc fc63 	bl	8007f3c <HAL_GetTick>
 800b676:	1b80      	subs	r0, r0, r6
 800b678:	f241 3388 	movw	r3, #5000	; 0x1388
 800b67c:	4298      	cmp	r0, r3
 800b67e:	d9f3      	bls.n	800b668 <HAL_RCC_OscConfig+0x264>
        {
          return HAL_TIMEOUT;
 800b680:	2003      	movs	r0, #3
 800b682:	e0ce      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
    FlagStatus       pwrclkchanged = RESET;
 800b684:	2500      	movs	r5, #0
 800b686:	e7d6      	b.n	800b636 <HAL_RCC_OscConfig+0x232>
 800b688:	40023800 	.word	0x40023800
 800b68c:	42470000 	.word	0x42470000
 800b690:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b694:	4a6b      	ldr	r2, [pc, #428]	; (800b844 <HAL_RCC_OscConfig+0x440>)
 800b696:	6813      	ldr	r3, [r2, #0]
 800b698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b69c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800b69e:	f7fc fc4d 	bl	8007f3c <HAL_GetTick>
 800b6a2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6a4:	4b67      	ldr	r3, [pc, #412]	; (800b844 <HAL_RCC_OscConfig+0x440>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b6ac:	d1c8      	bne.n	800b640 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6ae:	f7fc fc45 	bl	8007f3c <HAL_GetTick>
 800b6b2:	1b80      	subs	r0, r0, r6
 800b6b4:	2802      	cmp	r0, #2
 800b6b6:	d9f5      	bls.n	800b6a4 <HAL_RCC_OscConfig+0x2a0>
          return HAL_TIMEOUT;
 800b6b8:	2003      	movs	r0, #3
 800b6ba:	e0b2      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6bc:	4a62      	ldr	r2, [pc, #392]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b6be:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b6c0:	f043 0301 	orr.w	r3, r3, #1
 800b6c4:	6713      	str	r3, [r2, #112]	; 0x70
 800b6c6:	e7c9      	b.n	800b65c <HAL_RCC_OscConfig+0x258>
 800b6c8:	4b5f      	ldr	r3, [pc, #380]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b6ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6cc:	f042 0204 	orr.w	r2, r2, #4
 800b6d0:	671a      	str	r2, [r3, #112]	; 0x70
 800b6d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6d4:	f042 0201 	orr.w	r2, r2, #1
 800b6d8:	671a      	str	r2, [r3, #112]	; 0x70
 800b6da:	e7bf      	b.n	800b65c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6dc:	f7fc fc2e 	bl	8007f3c <HAL_GetTick>
 800b6e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6e2:	4b59      	ldr	r3, [pc, #356]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6e6:	f013 0f02 	tst.w	r3, #2
 800b6ea:	d008      	beq.n	800b6fe <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6ec:	f7fc fc26 	bl	8007f3c <HAL_GetTick>
 800b6f0:	1b80      	subs	r0, r0, r6
 800b6f2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b6f6:	4298      	cmp	r0, r3
 800b6f8:	d9f3      	bls.n	800b6e2 <HAL_RCC_OscConfig+0x2de>
        {
          return HAL_TIMEOUT;
 800b6fa:	2003      	movs	r0, #3
 800b6fc:	e091      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b6fe:	b9ed      	cbnz	r5, 800b73c <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b700:	69a3      	ldr	r3, [r4, #24]
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 808c 	beq.w	800b820 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b708:	4a4f      	ldr	r2, [pc, #316]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b70a:	6892      	ldr	r2, [r2, #8]
 800b70c:	f002 020c 	and.w	r2, r2, #12
 800b710:	2a08      	cmp	r2, #8
 800b712:	d054      	beq.n	800b7be <HAL_RCC_OscConfig+0x3ba>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b714:	2b02      	cmp	r3, #2
 800b716:	d017      	beq.n	800b748 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b718:	4b4c      	ldr	r3, [pc, #304]	; (800b84c <HAL_RCC_OscConfig+0x448>)
 800b71a:	2200      	movs	r2, #0
 800b71c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b71e:	f7fc fc0d 	bl	8007f3c <HAL_GetTick>
 800b722:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b724:	4b48      	ldr	r3, [pc, #288]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b72c:	d045      	beq.n	800b7ba <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b72e:	f7fc fc05 	bl	8007f3c <HAL_GetTick>
 800b732:	1b00      	subs	r0, r0, r4
 800b734:	2802      	cmp	r0, #2
 800b736:	d9f5      	bls.n	800b724 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 800b738:	2003      	movs	r0, #3
 800b73a:	e072      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b73c:	4a42      	ldr	r2, [pc, #264]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b73e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b744:	6413      	str	r3, [r2, #64]	; 0x40
 800b746:	e7db      	b.n	800b700 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_DISABLE();
 800b748:	4b40      	ldr	r3, [pc, #256]	; (800b84c <HAL_RCC_OscConfig+0x448>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800b74e:	f7fc fbf5 	bl	8007f3c <HAL_GetTick>
 800b752:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b754:	4b3c      	ldr	r3, [pc, #240]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b75c:	d006      	beq.n	800b76c <HAL_RCC_OscConfig+0x368>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b75e:	f7fc fbed 	bl	8007f3c <HAL_GetTick>
 800b762:	1b40      	subs	r0, r0, r5
 800b764:	2802      	cmp	r0, #2
 800b766:	d9f5      	bls.n	800b754 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 800b768:	2003      	movs	r0, #3
 800b76a:	e05a      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b76c:	69e3      	ldr	r3, [r4, #28]
 800b76e:	6a22      	ldr	r2, [r4, #32]
 800b770:	4313      	orrs	r3, r2
 800b772:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b774:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800b778:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b77a:	0852      	lsrs	r2, r2, #1
 800b77c:	3a01      	subs	r2, #1
 800b77e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b782:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b784:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b788:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b78a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800b78e:	4a2e      	ldr	r2, [pc, #184]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b790:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800b792:	4b2e      	ldr	r3, [pc, #184]	; (800b84c <HAL_RCC_OscConfig+0x448>)
 800b794:	2201      	movs	r2, #1
 800b796:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800b798:	f7fc fbd0 	bl	8007f3c <HAL_GetTick>
 800b79c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b79e:	4b2a      	ldr	r3, [pc, #168]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b7a6:	d106      	bne.n	800b7b6 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7a8:	f7fc fbc8 	bl	8007f3c <HAL_GetTick>
 800b7ac:	1b00      	subs	r0, r0, r4
 800b7ae:	2802      	cmp	r0, #2
 800b7b0:	d9f5      	bls.n	800b79e <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 800b7b2:	2003      	movs	r0, #3
 800b7b4:	e035      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	e033      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	e031      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d031      	beq.n	800b826 <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->PLLCFGR;
 800b7c2:	4b21      	ldr	r3, [pc, #132]	; (800b848 <HAL_RCC_OscConfig+0x444>)
 800b7c4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7c6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800b7ca:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b7cc:	4291      	cmp	r1, r2
 800b7ce:	d12c      	bne.n	800b82a <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b7d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b7d4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7d6:	428a      	cmp	r2, r1
 800b7d8:	d129      	bne.n	800b82e <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b7da:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b7dc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800b7e0:	401a      	ands	r2, r3
 800b7e2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800b7e6:	d124      	bne.n	800b832 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b7e8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800b7ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b7ee:	0852      	lsrs	r2, r2, #1
 800b7f0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b7f2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800b7f6:	d11e      	bne.n	800b836 <HAL_RCC_OscConfig+0x432>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b7fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b7fe:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800b802:	d11a      	bne.n	800b83a <HAL_RCC_OscConfig+0x436>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b804:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b808:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b80a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800b80e:	d116      	bne.n	800b83e <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 800b810:	2000      	movs	r0, #0
 800b812:	e006      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
    return HAL_ERROR;
 800b814:	2001      	movs	r0, #1
}
 800b816:	4770      	bx	lr
        return HAL_ERROR;
 800b818:	2001      	movs	r0, #1
 800b81a:	e002      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
        return HAL_ERROR;
 800b81c:	2001      	movs	r0, #1
 800b81e:	e000      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
  return HAL_OK;
 800b820:	2000      	movs	r0, #0
}
 800b822:	b002      	add	sp, #8
 800b824:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800b826:	2001      	movs	r0, #1
 800b828:	e7fb      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
          return HAL_ERROR;
 800b82a:	2001      	movs	r0, #1
 800b82c:	e7f9      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
 800b82e:	2001      	movs	r0, #1
 800b830:	e7f7      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
 800b832:	2001      	movs	r0, #1
 800b834:	e7f5      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
 800b836:	2001      	movs	r0, #1
 800b838:	e7f3      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
 800b83a:	2001      	movs	r0, #1
 800b83c:	e7f1      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
 800b83e:	2001      	movs	r0, #1
 800b840:	e7ef      	b.n	800b822 <HAL_RCC_OscConfig+0x41e>
 800b842:	bf00      	nop
 800b844:	40007000 	.word	0x40007000
 800b848:	40023800 	.word	0x40023800
 800b84c:	42470000 	.word	0x42470000

0800b850 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b850:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b852:	2400      	movs	r4, #0
 800b854:	6344      	str	r4, [r0, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b856:	63c4      	str	r4, [r0, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b858:	6844      	ldr	r4, [r0, #4]
 800b85a:	b124      	cbz	r4, 800b866 <SAI_InitI2S+0x16>
 800b85c:	2c02      	cmp	r4, #2
 800b85e:	d002      	beq.n	800b866 <SAI_InitI2S+0x16>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b860:	2401      	movs	r4, #1
 800b862:	6404      	str	r4, [r0, #64]	; 0x40
 800b864:	e001      	b.n	800b86a <SAI_InitI2S+0x1a>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b866:	2400      	movs	r4, #0
 800b868:	6404      	str	r4, [r0, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b86a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800b86e:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b870:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b874:	6644      	str	r4, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 800b876:	2400      	movs	r4, #0
 800b878:	6584      	str	r4, [r0, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800b87a:	6603      	str	r3, [r0, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b87c:	f013 0f01 	tst.w	r3, #1
 800b880:	d148      	bne.n	800b914 <SAI_InitI2S+0xc4>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 800b882:	b949      	cbnz	r1, 800b898 <SAI_InitI2S+0x48>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b884:	6504      	str	r4, [r0, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b886:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800b88a:	6544      	str	r4, [r0, #84]	; 0x54
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 800b88c:	2a03      	cmp	r2, #3
 800b88e:	d843      	bhi.n	800b918 <SAI_InitI2S+0xc8>
 800b890:	e8df f002 	tbb	[pc, r2]
 800b894:	291f1608 	.word	0x291f1608
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b898:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 800b89c:	6504      	str	r4, [r0, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b89e:	2400      	movs	r4, #0
 800b8a0:	6544      	str	r4, [r0, #84]	; 0x54
 800b8a2:	e7f3      	b.n	800b88c <SAI_InitI2S+0x3c>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b8a4:	2480      	movs	r4, #128	; 0x80
 800b8a6:	6384      	str	r4, [r0, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b8a8:	085b      	lsrs	r3, r3, #1
 800b8aa:	015c      	lsls	r4, r3, #5
 800b8ac:	6444      	str	r4, [r0, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b8ae:	011b      	lsls	r3, r3, #4
 800b8b0:	6483      	str	r3, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b8b2:	2340      	movs	r3, #64	; 0x40
 800b8b4:	65c3      	str	r3, [r0, #92]	; 0x5c
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    default :
      return HAL_ERROR;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b8b6:	2902      	cmp	r1, #2
 800b8b8:	d01f      	beq.n	800b8fa <SAI_InitI2S+0xaa>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
    {
      hsai->SlotInit.FirstBitOffset = 8U;
    }
  }
  return HAL_OK;
 800b8ba:	2000      	movs	r0, #0
}
 800b8bc:	bc30      	pop	{r4, r5}
 800b8be:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b8c0:	2480      	movs	r4, #128	; 0x80
 800b8c2:	6384      	str	r4, [r0, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8c4:	085b      	lsrs	r3, r3, #1
 800b8c6:	019d      	lsls	r5, r3, #6
 800b8c8:	6445      	str	r5, [r0, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8ca:	015b      	lsls	r3, r3, #5
 800b8cc:	6483      	str	r3, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8ce:	65c4      	str	r4, [r0, #92]	; 0x5c
      break;
 800b8d0:	e7f1      	b.n	800b8b6 <SAI_InitI2S+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b8d2:	24c0      	movs	r4, #192	; 0xc0
 800b8d4:	6384      	str	r4, [r0, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8d6:	085b      	lsrs	r3, r3, #1
 800b8d8:	019c      	lsls	r4, r3, #6
 800b8da:	6444      	str	r4, [r0, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8dc:	015b      	lsls	r3, r3, #5
 800b8de:	6483      	str	r3, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8e0:	2380      	movs	r3, #128	; 0x80
 800b8e2:	65c3      	str	r3, [r0, #92]	; 0x5c
      break;
 800b8e4:	e7e7      	b.n	800b8b6 <SAI_InitI2S+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b8e6:	24e0      	movs	r4, #224	; 0xe0
 800b8e8:	6384      	str	r4, [r0, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8ea:	085b      	lsrs	r3, r3, #1
 800b8ec:	019c      	lsls	r4, r3, #6
 800b8ee:	6444      	str	r4, [r0, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8f0:	015b      	lsls	r3, r3, #5
 800b8f2:	6483      	str	r3, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8f4:	2380      	movs	r3, #128	; 0x80
 800b8f6:	65c3      	str	r3, [r0, #92]	; 0x5c
      break;
 800b8f8:	e7dd      	b.n	800b8b6 <SAI_InitI2S+0x66>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b8fa:	2a01      	cmp	r2, #1
 800b8fc:	d003      	beq.n	800b906 <SAI_InitI2S+0xb6>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b8fe:	2a02      	cmp	r2, #2
 800b900:	d004      	beq.n	800b90c <SAI_InitI2S+0xbc>
  return HAL_OK;
 800b902:	2000      	movs	r0, #0
 800b904:	e7da      	b.n	800b8bc <SAI_InitI2S+0x6c>
      hsai->SlotInit.FirstBitOffset = 16U;
 800b906:	2310      	movs	r3, #16
 800b908:	6583      	str	r3, [r0, #88]	; 0x58
 800b90a:	e7f8      	b.n	800b8fe <SAI_InitI2S+0xae>
      hsai->SlotInit.FirstBitOffset = 8U;
 800b90c:	2308      	movs	r3, #8
 800b90e:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 800b910:	2000      	movs	r0, #0
 800b912:	e7d3      	b.n	800b8bc <SAI_InitI2S+0x6c>
    return HAL_ERROR;
 800b914:	2001      	movs	r0, #1
 800b916:	e7d1      	b.n	800b8bc <SAI_InitI2S+0x6c>
  switch (datasize)
 800b918:	2001      	movs	r0, #1
 800b91a:	e7cf      	b.n	800b8bc <SAI_InitI2S+0x6c>

0800b91c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b91c:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b91e:	2400      	movs	r4, #0
 800b920:	6344      	str	r4, [r0, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b922:	63c4      	str	r4, [r0, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b924:	6844      	ldr	r4, [r0, #4]
 800b926:	b124      	cbz	r4, 800b932 <SAI_InitPCM+0x16>
 800b928:	2c02      	cmp	r4, #2
 800b92a:	d002      	beq.n	800b932 <SAI_InitPCM+0x16>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b92c:	2400      	movs	r4, #0
 800b92e:	6404      	str	r4, [r0, #64]	; 0x40
 800b930:	e001      	b.n	800b936 <SAI_InitPCM+0x1a>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b932:	2401      	movs	r4, #1
 800b934:	6404      	str	r4, [r0, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b936:	2400      	movs	r4, #0
 800b938:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b93a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800b93e:	6505      	str	r5, [r0, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b940:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800b944:	6545      	str	r5, [r0, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 800b946:	6584      	str	r4, [r0, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800b948:	6603      	str	r3, [r0, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b94a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b94e:	6644      	str	r4, [r0, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 800b950:	2904      	cmp	r1, #4
 800b952:	d007      	beq.n	800b964 <SAI_InitPCM+0x48>
    hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800b954:	210d      	movs	r1, #13
 800b956:	6481      	str	r1, [r0, #72]	; 0x48
  }

  switch (datasize)
 800b958:	2a03      	cmp	r2, #3
 800b95a:	d826      	bhi.n	800b9aa <SAI_InitPCM+0x8e>
 800b95c:	e8df f002 	tbb	[pc, r2]
 800b960:	1d150e05 	.word	0x1d150e05
    hsai->FrameInit.ActiveFrameLength = 1;
 800b964:	2101      	movs	r1, #1
 800b966:	6481      	str	r1, [r0, #72]	; 0x48
 800b968:	e7f6      	b.n	800b958 <SAI_InitPCM+0x3c>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b96a:	2280      	movs	r2, #128	; 0x80
 800b96c:	6382      	str	r2, [r0, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b96e:	011b      	lsls	r3, r3, #4
 800b970:	6443      	str	r3, [r0, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b972:	2340      	movs	r3, #64	; 0x40
 800b974:	65c3      	str	r3, [r0, #92]	; 0x5c
      break;
    default :
      return HAL_ERROR;
  }

  return HAL_OK;
 800b976:	2000      	movs	r0, #0
}
 800b978:	bc30      	pop	{r4, r5}
 800b97a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b97c:	2280      	movs	r2, #128	; 0x80
 800b97e:	6382      	str	r2, [r0, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b980:	015b      	lsls	r3, r3, #5
 800b982:	6443      	str	r3, [r0, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b984:	65c2      	str	r2, [r0, #92]	; 0x5c
  return HAL_OK;
 800b986:	2000      	movs	r0, #0
      break;
 800b988:	e7f6      	b.n	800b978 <SAI_InitPCM+0x5c>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b98a:	22c0      	movs	r2, #192	; 0xc0
 800b98c:	6382      	str	r2, [r0, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b98e:	015b      	lsls	r3, r3, #5
 800b990:	6443      	str	r3, [r0, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b992:	2380      	movs	r3, #128	; 0x80
 800b994:	65c3      	str	r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800b996:	2000      	movs	r0, #0
      break;
 800b998:	e7ee      	b.n	800b978 <SAI_InitPCM+0x5c>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b99a:	22e0      	movs	r2, #224	; 0xe0
 800b99c:	6382      	str	r2, [r0, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b99e:	015b      	lsls	r3, r3, #5
 800b9a0:	6443      	str	r3, [r0, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b9a2:	2380      	movs	r3, #128	; 0x80
 800b9a4:	65c3      	str	r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800b9a6:	2000      	movs	r0, #0
      break;
 800b9a8:	e7e6      	b.n	800b978 <SAI_InitPCM+0x5c>
  switch (datasize)
 800b9aa:	2001      	movs	r0, #1
 800b9ac:	e7e4      	b.n	800b978 <SAI_InitPCM+0x5c>

0800b9ae <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800b9ae:	2901      	cmp	r1, #1
 800b9b0:	d00a      	beq.n	800b9c8 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b9b2:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b9b4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b9b6:	2a08      	cmp	r2, #8
 800b9b8:	d008      	beq.n	800b9cc <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b9ba:	6842      	ldr	r2, [r0, #4]
 800b9bc:	3a02      	subs	r2, #2
 800b9be:	2a01      	cmp	r2, #1
 800b9c0:	d90c      	bls.n	800b9dc <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b9c2:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 800b9c6:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 800b9c8:	2309      	movs	r3, #9
 800b9ca:	e7f3      	b.n	800b9b4 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b9cc:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b9ce:	2a03      	cmp	r2, #3
 800b9d0:	d001      	beq.n	800b9d6 <SAI_InterruptFlag+0x28>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b9d2:	2a01      	cmp	r2, #1
 800b9d4:	d1f1      	bne.n	800b9ba <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 800b9d6:	f043 0310 	orr.w	r3, r3, #16
 800b9da:	e7ee      	b.n	800b9ba <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b9dc:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <SAI_Disable>:
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <SAI_Disable+0x3c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a0e      	ldr	r2, [pc, #56]	; (800ba24 <SAI_Disable+0x40>)
 800b9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ee:	0b1b      	lsrs	r3, r3, #12
 800b9f0:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b9f2:	6801      	ldr	r1, [r0, #0]
 800b9f4:	680a      	ldr	r2, [r1, #0]
 800b9f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b9fa:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	b132      	cbz	r2, 800ba10 <SAI_Disable+0x2c>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ba02:	6802      	ldr	r2, [r0, #0]
 800ba04:	6812      	ldr	r2, [r2, #0]
 800ba06:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800ba0a:	d1f7      	bne.n	800b9fc <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800ba0c:	2000      	movs	r0, #0

  return status;
}
 800ba0e:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ba10:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800ba14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba18:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      status = HAL_TIMEOUT;
 800ba1c:	2003      	movs	r0, #3
      break;
 800ba1e:	4770      	bx	lr
 800ba20:	20000000 	.word	0x20000000
 800ba24:	95cbec1b 	.word	0x95cbec1b

0800ba28 <HAL_SAI_Init>:
  if (hsai == NULL)
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	f000 80bb 	beq.w	800bba4 <HAL_SAI_Init+0x17c>
{
 800ba2e:	b538      	push	{r3, r4, r5, lr}
 800ba30:	4604      	mov	r4, r0
  if (hsai->State == HAL_SAI_STATE_RESET)
 800ba32:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ba36:	b1ab      	cbz	r3, 800ba64 <HAL_SAI_Init+0x3c>
  hsai->State = HAL_SAI_STATE_BUSY;
 800ba38:	2302      	movs	r3, #2
 800ba3a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  SAI_Disable(hsai);
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f7ff ffd0 	bl	800b9e4 <SAI_Disable>
  SAI_BlockSynchroConfig(hsai);
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 fa1b 	bl	800be80 <SAI_BlockSynchroConfig>
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ba4a:	6a23      	ldr	r3, [r4, #32]
 800ba4c:	b97b      	cbnz	r3, 800ba6e <HAL_SAI_Init+0x46>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ba4e:	6863      	ldr	r3, [r4, #4]
 800ba50:	b35b      	cbz	r3, 800baaa <HAL_SAI_Init+0x82>
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d029      	beq.n	800baaa <HAL_SAI_Init+0x82>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ba56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	f000 8099 	beq.w	800bb90 <HAL_SAI_Init+0x168>
 800ba5e:	f04f 0c00 	mov.w	ip, #0
 800ba62:	e027      	b.n	800bab4 <HAL_SAI_Init+0x8c>
    hsai->Lock = HAL_UNLOCKED;
 800ba64:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_SAI_MspInit(hsai);
 800ba68:	f7fb fe94 	bl	8007794 <HAL_SAI_MspInit>
 800ba6c:	e7e4      	b.n	800ba38 <HAL_SAI_Init+0x10>
    freq = SAI_GetInputClock(hsai);
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 fa2a 	bl	800bec8 <SAI_GetInputClock>
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800ba74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ba78:	0040      	lsls	r0, r0, #1
 800ba7a:	6a23      	ldr	r3, [r4, #32]
 800ba7c:	025b      	lsls	r3, r3, #9
 800ba7e:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800ba82:	4b49      	ldr	r3, [pc, #292]	; (800bba8 <HAL_SAI_Init+0x180>)
 800ba84:	fba3 2300 	umull	r2, r3, r3, r0
 800ba88:	08db      	lsrs	r3, r3, #3
 800ba8a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpregisterGCR % 10U) > 8U)
 800ba8c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800ba90:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800ba94:	2808      	cmp	r0, #8
 800ba96:	d901      	bls.n	800ba9c <HAL_SAI_Init+0x74>
      hsai->Init.Mckdiv += 1U;
 800ba98:	3301      	adds	r3, #1
 800ba9a:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ba9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d1d5      	bne.n	800ba4e <HAL_SAI_Init+0x26>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800baa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baa4:	085b      	lsrs	r3, r3, #1
 800baa6:	6263      	str	r3, [r4, #36]	; 0x24
 800baa8:	e7d1      	b.n	800ba4e <HAL_SAI_Init+0x26>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800baaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800baac:	2b01      	cmp	r3, #1
 800baae:	d06c      	beq.n	800bb8a <HAL_SAI_Init+0x162>
 800bab0:	f44f 7c00 	mov.w	ip, #512	; 0x200
  switch (hsai->Init.Synchro)
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d06f      	beq.n	800bb9a <HAL_SAI_Init+0x172>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d070      	beq.n	800bba0 <HAL_SAI_Init+0x178>
 800babe:	3b02      	subs	r3, #2
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d868      	bhi.n	800bb96 <HAL_SAI_Init+0x16e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bac4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bac8:	6822      	ldr	r2, [r4, #0]
 800baca:	6811      	ldr	r1, [r2, #0]
 800bacc:	4b37      	ldr	r3, [pc, #220]	; (800bbac <HAL_SAI_Init+0x184>)
 800bace:	400b      	ands	r3, r1
 800bad0:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bad2:	6821      	ldr	r1, [r4, #0]
 800bad4:	680a      	ldr	r2, [r1, #0]
 800bad6:	6863      	ldr	r3, [r4, #4]
 800bad8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800bada:	432b      	orrs	r3, r5
 800badc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800bade:	432b      	orrs	r3, r5
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bae0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800bae2:	432b      	orrs	r3, r5
 800bae4:	ea43 030c 	orr.w	r3, r3, ip
                          ckstr_bits | syncen_bits |                             \
 800bae8:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800baea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800baec:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800baee:	6920      	ldr	r0, [r4, #16]
 800baf0:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800baf2:	6960      	ldr	r0, [r4, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800baf4:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800baf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800baf8:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bafc:	4313      	orrs	r3, r2
 800bafe:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bb00:	6822      	ldr	r2, [r4, #0]
 800bb02:	6853      	ldr	r3, [r2, #4]
 800bb04:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800bb08:	f023 030f 	bic.w	r3, r3, #15
 800bb0c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bb0e:	6821      	ldr	r1, [r4, #0]
 800bb10:	684a      	ldr	r2, [r1, #4]
 800bb12:	69a3      	ldr	r3, [r4, #24]
 800bb14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bb16:	4303      	orrs	r3, r0
 800bb18:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bb1a:	4303      	orrs	r3, r0
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bb20:	6822      	ldr	r2, [r4, #0]
 800bb22:	6891      	ldr	r1, [r2, #8]
 800bb24:	4b22      	ldr	r3, [pc, #136]	; (800bbb0 <HAL_SAI_Init+0x188>)
 800bb26:	400b      	ands	r3, r1
 800bb28:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bb2a:	6820      	ldr	r0, [r4, #0]
 800bb2c:	6882      	ldr	r2, [r0, #8]
 800bb2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb30:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset     |
 800bb32:	6d61      	ldr	r1, [r4, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bb34:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 800bb36:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 800bb38:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 800bb3a:	6d21      	ldr	r1, [r4, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 800bb3c:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800bb3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb40:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 800bb42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bb46:	4313      	orrs	r3, r2
 800bb48:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800bb4a:	6822      	ldr	r2, [r4, #0]
 800bb4c:	68d3      	ldr	r3, [r2, #12]
 800bb4e:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 800bb52:	f023 030f 	bic.w	r3, r3, #15
 800bb56:	041b      	lsls	r3, r3, #16
 800bb58:	0c1b      	lsrs	r3, r3, #16
 800bb5a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800bb5c:	6820      	ldr	r0, [r4, #0]
 800bb5e:	68c2      	ldr	r2, [r0, #12]
 800bb60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb62:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb64:	430b      	orrs	r3, r1
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800bb66:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800bb68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800bb6c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bb6e:	3901      	subs	r1, #1
 800bb70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800bb74:	4313      	orrs	r3, r2
 800bb76:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hsai->State = HAL_SAI_STATE_READY;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(hsai);
 800bb84:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800bb88:	bd38      	pop	{r3, r4, r5, pc}
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bb8a:	f04f 0c00 	mov.w	ip, #0
 800bb8e:	e791      	b.n	800bab4 <HAL_SAI_Init+0x8c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bb90:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800bb94:	e78e      	b.n	800bab4 <HAL_SAI_Init+0x8c>
  switch (hsai->Init.Synchro)
 800bb96:	2000      	movs	r0, #0
 800bb98:	e796      	b.n	800bac8 <HAL_SAI_Init+0xa0>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bb9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bb9e:	e793      	b.n	800bac8 <HAL_SAI_Init+0xa0>
  switch (hsai->Init.Synchro)
 800bba0:	2000      	movs	r0, #0
 800bba2:	e791      	b.n	800bac8 <HAL_SAI_Init+0xa0>
    return HAL_ERROR;
 800bba4:	2001      	movs	r0, #1
}
 800bba6:	4770      	bx	lr
 800bba8:	cccccccd 	.word	0xcccccccd
 800bbac:	ff05c010 	.word	0xff05c010
 800bbb0:	fff88000 	.word	0xfff88000

0800bbb4 <HAL_SAI_InitProtocol>:
{
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	4604      	mov	r4, r0
  switch (protocol)
 800bbb8:	2902      	cmp	r1, #2
 800bbba:	d906      	bls.n	800bbca <HAL_SAI_InitProtocol+0x16>
 800bbbc:	1ec8      	subs	r0, r1, #3
 800bbbe:	2801      	cmp	r0, #1
 800bbc0:	d80b      	bhi.n	800bbda <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f7ff feaa 	bl	800b91c <SAI_InitPCM>
      break;
 800bbc8:	e001      	b.n	800bbce <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800bbca:	f7ff fe41 	bl	800b850 <SAI_InitI2S>
  if (status == HAL_OK)
 800bbce:	b100      	cbz	r0, 800bbd2 <HAL_SAI_InitProtocol+0x1e>
}
 800bbd0:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f7ff ff28 	bl	800ba28 <HAL_SAI_Init>
 800bbd8:	e7fa      	b.n	800bbd0 <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
 800bbda:	2001      	movs	r0, #1
 800bbdc:	e7f8      	b.n	800bbd0 <HAL_SAI_InitProtocol+0x1c>
	...

0800bbe0 <HAL_SAI_Transmit_DMA>:
{
 800bbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460f      	mov	r7, r1
 800bbe8:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800bbea:	f7fc f9a7 	bl	8007f3c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0))
 800bbee:	2f00      	cmp	r7, #0
 800bbf0:	d065      	beq.n	800bcbe <HAL_SAI_Transmit_DMA+0xde>
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	2e00      	cmp	r6, #0
 800bbf6:	d065      	beq.n	800bcc4 <HAL_SAI_Transmit_DMA+0xe4>
  if (hsai->State == HAL_SAI_STATE_READY)
 800bbf8:	f894 8081 	ldrb.w	r8, [r4, #129]	; 0x81
 800bbfc:	fa5f f888 	uxtb.w	r8, r8
 800bc00:	f1b8 0f01 	cmp.w	r8, #1
 800bc04:	d163      	bne.n	800bcce <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 800bc06:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d062      	beq.n	800bcd4 <HAL_SAI_Transmit_DMA+0xf4>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hsai->pBuffPtr = pData;
 800bc14:	66a7      	str	r7, [r4, #104]	; 0x68
    hsai->XferSize = Size;
 800bc16:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
    hsai->XferCount = Size;
 800bc1a:	f8a4 606e 	strh.w	r6, [r4, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800bc24:	2212      	movs	r2, #18
 800bc26:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800bc2a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bc2c:	492b      	ldr	r1, [pc, #172]	; (800bcdc <HAL_SAI_Transmit_DMA+0xfc>)
 800bc2e:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800bc30:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bc32:	492b      	ldr	r1, [pc, #172]	; (800bce0 <HAL_SAI_Transmit_DMA+0x100>)
 800bc34:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800bc36:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bc38:	492a      	ldr	r1, [pc, #168]	; (800bce4 <HAL_SAI_Transmit_DMA+0x104>)
 800bc3a:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800bc3c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bc3e:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800bc40:	6822      	ldr	r2, [r4, #0]
 800bc42:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 800bc46:	321c      	adds	r2, #28
 800bc48:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800bc4a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bc4c:	f7fc fd36 	bl	80086bc <HAL_DMA_Start_IT>
 800bc50:	4606      	mov	r6, r0
 800bc52:	bb18      	cbnz	r0, 800bc9c <HAL_SAI_Transmit_DMA+0xbc>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bc54:	2100      	movs	r1, #0
 800bc56:	4620      	mov	r0, r4
 800bc58:	f7ff fea9 	bl	800b9ae <SAI_InterruptFlag>
 800bc5c:	6822      	ldr	r2, [r4, #0]
 800bc5e:	6913      	ldr	r3, [r2, #16]
 800bc60:	4303      	orrs	r3, r0
 800bc62:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800bc64:	6822      	ldr	r2, [r4, #0]
 800bc66:	6813      	ldr	r3, [r2, #0]
 800bc68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc6c:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	695a      	ldr	r2, [r3, #20]
 800bc72:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 800bc76:	d115      	bne.n	800bca4 <HAL_SAI_Transmit_DMA+0xc4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800bc78:	f7fc f960 	bl	8007f3c <HAL_GetTick>
 800bc7c:	1b43      	subs	r3, r0, r5
 800bc7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc82:	d9f4      	bls.n	800bc6e <HAL_SAI_Transmit_DMA+0x8e>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bc84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bc88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(hsai);
 800bc90:	2300      	movs	r3, #0
 800bc92:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 800bc96:	f04f 0803 	mov.w	r8, #3
 800bc9a:	e015      	b.n	800bcc8 <HAL_SAI_Transmit_DMA+0xe8>
      __HAL_UNLOCK(hsai);
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      return  HAL_ERROR;
 800bca2:	e011      	b.n	800bcc8 <HAL_SAI_Transmit_DMA+0xe8>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800bcaa:	d103      	bne.n	800bcb4 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bcb2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 800bcba:	46b0      	mov	r8, r6
 800bcbc:	e004      	b.n	800bcc8 <HAL_SAI_Transmit_DMA+0xe8>
    return  HAL_ERROR;
 800bcbe:	f04f 0801 	mov.w	r8, #1
 800bcc2:	e001      	b.n	800bcc8 <HAL_SAI_Transmit_DMA+0xe8>
 800bcc4:	f04f 0801 	mov.w	r8, #1
}
 800bcc8:	4640      	mov	r0, r8
 800bcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800bcce:	f04f 0802 	mov.w	r8, #2
 800bcd2:	e7f9      	b.n	800bcc8 <HAL_SAI_Transmit_DMA+0xe8>
    __HAL_LOCK(hsai);
 800bcd4:	f04f 0802 	mov.w	r8, #2
 800bcd8:	e7f6      	b.n	800bcc8 <HAL_SAI_Transmit_DMA+0xe8>
 800bcda:	bf00      	nop
 800bcdc:	0800bdeb 	.word	0x0800bdeb
 800bce0:	0800bdaf 	.word	0x0800bdaf
 800bce4:	0800be3b 	.word	0x0800be3b

0800bce8 <HAL_SAI_Receive_DMA>:
{
 800bce8:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0))
 800bcea:	2900      	cmp	r1, #0
 800bcec:	d04e      	beq.n	800bd8c <HAL_SAI_Receive_DMA+0xa4>
 800bcee:	4604      	mov	r4, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	2a00      	cmp	r2, #0
 800bcf4:	d04c      	beq.n	800bd90 <HAL_SAI_Receive_DMA+0xa8>
  if (hsai->State == HAL_SAI_STATE_READY)
 800bcf6:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800bcfa:	b2ed      	uxtb	r5, r5
 800bcfc:	2d01      	cmp	r5, #1
 800bcfe:	d14a      	bne.n	800bd96 <HAL_SAI_Receive_DMA+0xae>
    __HAL_LOCK(hsai);
 800bd00:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
 800bd04:	2901      	cmp	r1, #1
 800bd06:	d048      	beq.n	800bd9a <HAL_SAI_Receive_DMA+0xb2>
 800bd08:	2101      	movs	r1, #1
 800bd0a:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
 800bd0e:	6683      	str	r3, [r0, #104]	; 0x68
    hsai->XferSize = Size;
 800bd10:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
    hsai->XferCount = Size;
 800bd14:	f8a0 206e 	strh.w	r2, [r0, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800bd1e:	2222      	movs	r2, #34	; 0x22
 800bd20:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800bd24:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800bd26:	491e      	ldr	r1, [pc, #120]	; (800bda0 <HAL_SAI_Receive_DMA+0xb8>)
 800bd28:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800bd2a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800bd2c:	491d      	ldr	r1, [pc, #116]	; (800bda4 <HAL_SAI_Receive_DMA+0xbc>)
 800bd2e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800bd30:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800bd32:	491d      	ldr	r1, [pc, #116]	; (800bda8 <HAL_SAI_Receive_DMA+0xc0>)
 800bd34:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 800bd36:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800bd38:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800bd3a:	6801      	ldr	r1, [r0, #0]
 800bd3c:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
 800bd40:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800bd42:	311c      	adds	r1, #28
 800bd44:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800bd46:	f7fc fcb9 	bl	80086bc <HAL_DMA_Start_IT>
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	b118      	cbz	r0, 800bd56 <HAL_SAI_Receive_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      return  HAL_ERROR;
 800bd54:	e01d      	b.n	800bd92 <HAL_SAI_Receive_DMA+0xaa>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bd56:	2100      	movs	r1, #0
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f7ff fe28 	bl	800b9ae <SAI_InterruptFlag>
 800bd5e:	6822      	ldr	r2, [r4, #0]
 800bd60:	6913      	ldr	r3, [r2, #16]
 800bd62:	4303      	orrs	r3, r0
 800bd64:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800bd66:	6822      	ldr	r2, [r4, #0]
 800bd68:	6813      	ldr	r3, [r2, #0]
 800bd6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd6e:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800bd78:	d103      	bne.n	800bd82 <HAL_SAI_Receive_DMA+0x9a>
      __HAL_SAI_ENABLE(hsai);
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bd80:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800bd82:	2300      	movs	r3, #0
 800bd84:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 800bd88:	4635      	mov	r5, r6
 800bd8a:	e002      	b.n	800bd92 <HAL_SAI_Receive_DMA+0xaa>
    return  HAL_ERROR;
 800bd8c:	2501      	movs	r5, #1
 800bd8e:	e000      	b.n	800bd92 <HAL_SAI_Receive_DMA+0xaa>
 800bd90:	2501      	movs	r5, #1
}
 800bd92:	4628      	mov	r0, r5
 800bd94:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800bd96:	2502      	movs	r5, #2
 800bd98:	e7fb      	b.n	800bd92 <HAL_SAI_Receive_DMA+0xaa>
    __HAL_LOCK(hsai);
 800bd9a:	2502      	movs	r5, #2
 800bd9c:	e7f9      	b.n	800bd92 <HAL_SAI_Receive_DMA+0xaa>
 800bd9e:	bf00      	nop
 800bda0:	0800be2f 	.word	0x0800be2f
 800bda4:	0800bdf5 	.word	0x0800bdf5
 800bda8:	0800be3b 	.word	0x0800be3b

0800bdac <HAL_SAI_TxCpltCallback>:
}
 800bdac:	4770      	bx	lr

0800bdae <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800bdae:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdb0:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bdb2:	69c3      	ldr	r3, [r0, #28]
 800bdb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdb8:	d012      	beq.n	800bde0 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0U;
 800bdba:	2100      	movs	r1, #0
 800bdbc:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800bdc0:	6822      	ldr	r2, [r4, #0]
 800bdc2:	6813      	ldr	r3, [r2, #0]
 800bdc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bdc8:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f7ff fdef 	bl	800b9ae <SAI_InterruptFlag>
 800bdd0:	6822      	ldr	r2, [r4, #0]
 800bdd2:	6913      	ldr	r3, [r2, #16]
 800bdd4:	ea23 0300 	bic.w	r3, r3, r0
 800bdd8:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800bdda:	2301      	movs	r3, #1
 800bddc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800bde0:	4620      	mov	r0, r4
 800bde2:	f7ff ffe3 	bl	800bdac <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800bde6:	bd10      	pop	{r4, pc}

0800bde8 <HAL_SAI_TxHalfCpltCallback>:
}
 800bde8:	4770      	bx	lr

0800bdea <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdea:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800bdec:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bdee:	f7ff fffb 	bl	800bde8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800bdf2:	bd08      	pop	{r3, pc}

0800bdf4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800bdf4:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdf6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bdf8:	69c3      	ldr	r3, [r0, #28]
 800bdfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdfe:	d012      	beq.n	800be26 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800be00:	6822      	ldr	r2, [r4, #0]
 800be02:	6813      	ldr	r3, [r2, #0]
 800be04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be08:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0U;
 800be0a:	2100      	movs	r1, #0
 800be0c:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800be10:	4620      	mov	r0, r4
 800be12:	f7ff fdcc 	bl	800b9ae <SAI_InterruptFlag>
 800be16:	6822      	ldr	r2, [r4, #0]
 800be18:	6913      	ldr	r3, [r2, #16]
 800be1a:	ea23 0300 	bic.w	r3, r3, r0
 800be1e:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800be20:	2301      	movs	r3, #1
 800be22:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800be26:	4620      	mov	r0, r4
 800be28:	f7fa fee6 	bl	8006bf8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800be2c:	bd10      	pop	{r4, pc}

0800be2e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be2e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800be30:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800be32:	f7fa fe6b 	bl	8006b0c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800be36:	bd08      	pop	{r3, pc}

0800be38 <HAL_SAI_ErrorCallback>:
}
 800be38:	4770      	bx	lr

0800be3a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800be3a:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be3c:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800be3e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800be42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be46:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800be4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800be4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d007      	beq.n	800be62 <SAI_DMAError+0x28>
 800be52:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800be54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be56:	2b01      	cmp	r3, #1
 800be58:	d003      	beq.n	800be62 <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800be5a:	4620      	mov	r0, r4
 800be5c:	f7ff ffec 	bl	800be38 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800be60:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800be62:	6822      	ldr	r2, [r4, #0]
 800be64:	6813      	ldr	r3, [r2, #0]
 800be66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be6a:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 800be6c:	4620      	mov	r0, r4
 800be6e:	f7ff fdb9 	bl	800b9e4 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 800be72:	2301      	movs	r3, #1
 800be74:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    hsai->XferCount = 0U;
 800be78:	2300      	movs	r3, #0
 800be7a:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800be7e:	e7ec      	b.n	800be5a <SAI_DMAError+0x20>

0800be80 <SAI_BlockSynchroConfig>:
{
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800be80:	68c3      	ldr	r3, [r0, #12]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d010      	beq.n	800bea8 <SAI_BlockSynchroConfig+0x28>
 800be86:	2b02      	cmp	r3, #2
 800be88:	d110      	bne.n	800beac <SAI_BlockSynchroConfig+0x2c>
      break;
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800be8a:	2320      	movs	r3, #32
    default:
      tmpregisterGCR = 0U;
      break;
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800be8c:	6882      	ldr	r2, [r0, #8]
 800be8e:	2a03      	cmp	r2, #3
 800be90:	d00e      	beq.n	800beb0 <SAI_BlockSynchroConfig+0x30>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800be92:	6802      	ldr	r2, [r0, #0]
 800be94:	490a      	ldr	r1, [pc, #40]	; (800bec0 <SAI_BlockSynchroConfig+0x40>)
 800be96:	428a      	cmp	r2, r1
 800be98:	d00d      	beq.n	800beb6 <SAI_BlockSynchroConfig+0x36>
 800be9a:	3120      	adds	r1, #32
 800be9c:	428a      	cmp	r2, r1
 800be9e:	d00a      	beq.n	800beb6 <SAI_BlockSynchroConfig+0x36>
  {
    SAI1->GCR = tmpregisterGCR;
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bea0:	4a08      	ldr	r2, [pc, #32]	; (800bec4 <SAI_BlockSynchroConfig+0x44>)
 800bea2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800bea6:	4770      	bx	lr
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bea8:	2310      	movs	r3, #16
 800beaa:	e7ef      	b.n	800be8c <SAI_BlockSynchroConfig+0xc>
  switch (hsai->Init.SynchroExt)
 800beac:	2300      	movs	r3, #0
 800beae:	e7ed      	b.n	800be8c <SAI_BlockSynchroConfig+0xc>
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800beb0:	f043 0301 	orr.w	r3, r3, #1
 800beb4:	e7ed      	b.n	800be92 <SAI_BlockSynchroConfig+0x12>
    SAI1->GCR = tmpregisterGCR;
 800beb6:	4a03      	ldr	r2, [pc, #12]	; (800bec4 <SAI_BlockSynchroConfig+0x44>)
 800beb8:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	40015804 	.word	0x40015804
 800bec4:	40015000 	.word	0x40015000

0800bec8 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 800bec8:	b508      	push	{r3, lr}
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800beca:	6803      	ldr	r3, [r0, #0]
 800becc:	4a06      	ldr	r2, [pc, #24]	; (800bee8 <SAI_GetInputClock+0x20>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d006      	beq.n	800bee0 <SAI_GetInputClock+0x18>
 800bed2:	3220      	adds	r2, #32
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d003      	beq.n	800bee0 <SAI_GetInputClock+0x18>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bed8:	2008      	movs	r0, #8
 800beda:	f7ff f847 	bl	800af6c <HAL_RCCEx_GetPeriphCLKFreq>
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800bede:	e002      	b.n	800bee6 <SAI_GetInputClock+0x1e>
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bee0:	2004      	movs	r0, #4
 800bee2:	f7ff f843 	bl	800af6c <HAL_RCCEx_GetPeriphCLKFreq>
}
 800bee6:	bd08      	pop	{r3, pc}
 800bee8:	40015804 	.word	0x40015804

0800beec <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800beec:	2800      	cmp	r0, #0
 800beee:	d05a      	beq.n	800bfa6 <HAL_SPI_Init+0xba>
{
 800bef0:	b510      	push	{r4, lr}
 800bef2:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bef6:	b933      	cbnz	r3, 800bf06 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bef8:	6843      	ldr	r3, [r0, #4]
 800befa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800befe:	d005      	beq.n	800bf0c <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bf00:	2300      	movs	r3, #0
 800bf02:	61c3      	str	r3, [r0, #28]
 800bf04:	e002      	b.n	800bf0c <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bf06:	2300      	movs	r3, #0
 800bf08:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bf0a:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf10:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d040      	beq.n	800bf9a <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf18:	2302      	movs	r3, #2
 800bf1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf1e:	6822      	ldr	r2, [r4, #0]
 800bf20:	6813      	ldr	r3, [r2, #0]
 800bf22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf26:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800bf2e:	68a2      	ldr	r2, [r4, #8]
 800bf30:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800bf34:	4313      	orrs	r3, r2
 800bf36:	68e2      	ldr	r2, [r4, #12]
 800bf38:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	6922      	ldr	r2, [r4, #16]
 800bf40:	f002 0202 	and.w	r2, r2, #2
 800bf44:	4313      	orrs	r3, r2
 800bf46:	6962      	ldr	r2, [r4, #20]
 800bf48:	f002 0201 	and.w	r2, r2, #1
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	69a2      	ldr	r2, [r4, #24]
 800bf50:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800bf54:	4313      	orrs	r3, r2
 800bf56:	69e2      	ldr	r2, [r4, #28]
 800bf58:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	6a22      	ldr	r2, [r4, #32]
 800bf60:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bf64:	4313      	orrs	r3, r2
 800bf66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bf68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bf6c:	6821      	ldr	r1, [r4, #0]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bf72:	8b63      	ldrh	r3, [r4, #26]
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bf7a:	f002 0210 	and.w	r2, r2, #16
 800bf7e:	6821      	ldr	r1, [r4, #0]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf84:	6822      	ldr	r2, [r4, #0]
 800bf86:	69d3      	ldr	r3, [r2, #28]
 800bf88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf8c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf8e:	2000      	movs	r0, #0
 800bf90:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bf92:	2301      	movs	r3, #1
 800bf94:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 800bf98:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800bf9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f7fb fb52 	bl	8007648 <HAL_SPI_MspInit>
 800bfa4:	e7b8      	b.n	800bf18 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800bfa6:	2001      	movs	r0, #1
}
 800bfa8:	4770      	bx	lr
	...

0800bfac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d137      	bne.n	800c026 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfb6:	2302      	movs	r3, #2
 800bfb8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bfbc:	6802      	ldr	r2, [r0, #0]
 800bfbe:	68d3      	ldr	r3, [r2, #12]
 800bfc0:	f043 0301 	orr.w	r3, r3, #1
 800bfc4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfc6:	6803      	ldr	r3, [r0, #0]
 800bfc8:	4a19      	ldr	r2, [pc, #100]	; (800c030 <HAL_TIM_Base_Start_IT+0x84>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d020      	beq.n	800c010 <HAL_TIM_Base_Start_IT+0x64>
 800bfce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfd2:	d01d      	beq.n	800c010 <HAL_TIM_Base_Start_IT+0x64>
 800bfd4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d019      	beq.n	800c010 <HAL_TIM_Base_Start_IT+0x64>
 800bfdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d015      	beq.n	800c010 <HAL_TIM_Base_Start_IT+0x64>
 800bfe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d011      	beq.n	800c010 <HAL_TIM_Base_Start_IT+0x64>
 800bfec:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d00d      	beq.n	800c010 <HAL_TIM_Base_Start_IT+0x64>
 800bff4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d009      	beq.n	800c010 <HAL_TIM_Base_Start_IT+0x64>
 800bffc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c000:	4293      	cmp	r3, r2
 800c002:	d005      	beq.n	800c010 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	f042 0201 	orr.w	r2, r2, #1
 800c00a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c00c:	2000      	movs	r0, #0
 800c00e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c010:	689a      	ldr	r2, [r3, #8]
 800c012:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c016:	2a06      	cmp	r2, #6
 800c018:	d007      	beq.n	800c02a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	f042 0201 	orr.w	r2, r2, #1
 800c020:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c022:	2000      	movs	r0, #0
 800c024:	4770      	bx	lr
    return HAL_ERROR;
 800c026:	2001      	movs	r0, #1
 800c028:	4770      	bx	lr
  return HAL_OK;
 800c02a:	2000      	movs	r0, #0
}
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	40010000 	.word	0x40010000

0800c034 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c034:	4770      	bx	lr

0800c036 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c036:	4770      	bx	lr

0800c038 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c038:	4770      	bx	lr

0800c03a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c03a:	4770      	bx	lr

0800c03c <HAL_TIM_IRQHandler>:
{
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800c040:	6803      	ldr	r3, [r0, #0]
 800c042:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c044:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c046:	f015 0f02 	tst.w	r5, #2
 800c04a:	d010      	beq.n	800c06e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c04c:	f016 0f02 	tst.w	r6, #2
 800c050:	d00d      	beq.n	800c06e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c052:	f06f 0202 	mvn.w	r2, #2
 800c056:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c058:	2301      	movs	r3, #1
 800c05a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c05c:	6803      	ldr	r3, [r0, #0]
 800c05e:	699b      	ldr	r3, [r3, #24]
 800c060:	f013 0f03 	tst.w	r3, #3
 800c064:	d05e      	beq.n	800c124 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 800c066:	f7ff ffe6 	bl	800c036 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c06a:	2300      	movs	r3, #0
 800c06c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c06e:	f015 0f04 	tst.w	r5, #4
 800c072:	d012      	beq.n	800c09a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c074:	f016 0f04 	tst.w	r6, #4
 800c078:	d00f      	beq.n	800c09a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	f06f 0204 	mvn.w	r2, #4
 800c080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c082:	2302      	movs	r3, #2
 800c084:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c08e:	d04f      	beq.n	800c130 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800c090:	4620      	mov	r0, r4
 800c092:	f7ff ffd0 	bl	800c036 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c096:	2300      	movs	r3, #0
 800c098:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c09a:	f015 0f08 	tst.w	r5, #8
 800c09e:	d012      	beq.n	800c0c6 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c0a0:	f016 0f08 	tst.w	r6, #8
 800c0a4:	d00f      	beq.n	800c0c6 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	f06f 0208 	mvn.w	r2, #8
 800c0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0ae:	2304      	movs	r3, #4
 800c0b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	f013 0f03 	tst.w	r3, #3
 800c0ba:	d040      	beq.n	800c13e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f7ff ffba 	bl	800c036 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c0c6:	f015 0f10 	tst.w	r5, #16
 800c0ca:	d012      	beq.n	800c0f2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c0cc:	f016 0f10 	tst.w	r6, #16
 800c0d0:	d00f      	beq.n	800c0f2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	f06f 0210 	mvn.w	r2, #16
 800c0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0da:	2308      	movs	r3, #8
 800c0dc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	69db      	ldr	r3, [r3, #28]
 800c0e2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c0e6:	d031      	beq.n	800c14c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f7ff ffa4 	bl	800c036 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c0f2:	f015 0f01 	tst.w	r5, #1
 800c0f6:	d002      	beq.n	800c0fe <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c0f8:	f016 0f01 	tst.w	r6, #1
 800c0fc:	d12d      	bne.n	800c15a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c0fe:	f015 0f80 	tst.w	r5, #128	; 0x80
 800c102:	d002      	beq.n	800c10a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c104:	f016 0f80 	tst.w	r6, #128	; 0x80
 800c108:	d12f      	bne.n	800c16a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c10a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c10e:	d002      	beq.n	800c116 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c110:	f016 0f40 	tst.w	r6, #64	; 0x40
 800c114:	d131      	bne.n	800c17a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c116:	f015 0f20 	tst.w	r5, #32
 800c11a:	d002      	beq.n	800c122 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c11c:	f016 0f20 	tst.w	r6, #32
 800c120:	d133      	bne.n	800c18a <HAL_TIM_IRQHandler+0x14e>
}
 800c122:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c124:	f7ff ff86 	bl	800c034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c128:	4620      	mov	r0, r4
 800c12a:	f7ff ff85 	bl	800c038 <HAL_TIM_PWM_PulseFinishedCallback>
 800c12e:	e79c      	b.n	800c06a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c130:	4620      	mov	r0, r4
 800c132:	f7ff ff7f 	bl	800c034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c136:	4620      	mov	r0, r4
 800c138:	f7ff ff7e 	bl	800c038 <HAL_TIM_PWM_PulseFinishedCallback>
 800c13c:	e7ab      	b.n	800c096 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c13e:	4620      	mov	r0, r4
 800c140:	f7ff ff78 	bl	800c034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c144:	4620      	mov	r0, r4
 800c146:	f7ff ff77 	bl	800c038 <HAL_TIM_PWM_PulseFinishedCallback>
 800c14a:	e7ba      	b.n	800c0c2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c14c:	4620      	mov	r0, r4
 800c14e:	f7ff ff71 	bl	800c034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c152:	4620      	mov	r0, r4
 800c154:	f7ff ff70 	bl	800c038 <HAL_TIM_PWM_PulseFinishedCallback>
 800c158:	e7c9      	b.n	800c0ee <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	f06f 0201 	mvn.w	r2, #1
 800c160:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c162:	4620      	mov	r0, r4
 800c164:	f7fb fc5a 	bl	8007a1c <HAL_TIM_PeriodElapsedCallback>
 800c168:	e7c9      	b.n	800c0fe <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c170:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c172:	4620      	mov	r0, r4
 800c174:	f000 f8ab 	bl	800c2ce <HAL_TIMEx_BreakCallback>
 800c178:	e7c7      	b.n	800c10a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c17a:	6823      	ldr	r3, [r4, #0]
 800c17c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c180:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c182:	4620      	mov	r0, r4
 800c184:	f7ff ff59 	bl	800c03a <HAL_TIM_TriggerCallback>
 800c188:	e7c5      	b.n	800c116 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	f06f 0220 	mvn.w	r2, #32
 800c190:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800c192:	4620      	mov	r0, r4
 800c194:	f000 f89a 	bl	800c2cc <HAL_TIMEx_CommutCallback>
}
 800c198:	e7c3      	b.n	800c122 <HAL_TIM_IRQHandler+0xe6>
	...

0800c19c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c19c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c19e:	4a34      	ldr	r2, [pc, #208]	; (800c270 <TIM_Base_SetConfig+0xd4>)
 800c1a0:	4290      	cmp	r0, r2
 800c1a2:	d012      	beq.n	800c1ca <TIM_Base_SetConfig+0x2e>
 800c1a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c1a8:	d00f      	beq.n	800c1ca <TIM_Base_SetConfig+0x2e>
 800c1aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c1ae:	4290      	cmp	r0, r2
 800c1b0:	d00b      	beq.n	800c1ca <TIM_Base_SetConfig+0x2e>
 800c1b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1b6:	4290      	cmp	r0, r2
 800c1b8:	d007      	beq.n	800c1ca <TIM_Base_SetConfig+0x2e>
 800c1ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1be:	4290      	cmp	r0, r2
 800c1c0:	d003      	beq.n	800c1ca <TIM_Base_SetConfig+0x2e>
 800c1c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c1c6:	4290      	cmp	r0, r2
 800c1c8:	d103      	bne.n	800c1d2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c1ce:	684a      	ldr	r2, [r1, #4]
 800c1d0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1d2:	4a27      	ldr	r2, [pc, #156]	; (800c270 <TIM_Base_SetConfig+0xd4>)
 800c1d4:	4290      	cmp	r0, r2
 800c1d6:	d02a      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c1d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c1dc:	d027      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c1de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c1e2:	4290      	cmp	r0, r2
 800c1e4:	d023      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c1e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1ea:	4290      	cmp	r0, r2
 800c1ec:	d01f      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c1ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1f2:	4290      	cmp	r0, r2
 800c1f4:	d01b      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c1f6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c1fa:	4290      	cmp	r0, r2
 800c1fc:	d017      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c1fe:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800c202:	4290      	cmp	r0, r2
 800c204:	d013      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c20a:	4290      	cmp	r0, r2
 800c20c:	d00f      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c20e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c212:	4290      	cmp	r0, r2
 800c214:	d00b      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c216:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800c21a:	4290      	cmp	r0, r2
 800c21c:	d007      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c21e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c222:	4290      	cmp	r0, r2
 800c224:	d003      	beq.n	800c22e <TIM_Base_SetConfig+0x92>
 800c226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c22a:	4290      	cmp	r0, r2
 800c22c:	d103      	bne.n	800c236 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c22e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c232:	68ca      	ldr	r2, [r1, #12]
 800c234:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c23a:	694a      	ldr	r2, [r1, #20]
 800c23c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800c23e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c240:	688b      	ldr	r3, [r1, #8]
 800c242:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c244:	680b      	ldr	r3, [r1, #0]
 800c246:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c248:	4b09      	ldr	r3, [pc, #36]	; (800c270 <TIM_Base_SetConfig+0xd4>)
 800c24a:	4298      	cmp	r0, r3
 800c24c:	d003      	beq.n	800c256 <TIM_Base_SetConfig+0xba>
 800c24e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c252:	4298      	cmp	r0, r3
 800c254:	d101      	bne.n	800c25a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c256:	690b      	ldr	r3, [r1, #16]
 800c258:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c25a:	2301      	movs	r3, #1
 800c25c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c25e:	6903      	ldr	r3, [r0, #16]
 800c260:	f013 0f01 	tst.w	r3, #1
 800c264:	d003      	beq.n	800c26e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c266:	6903      	ldr	r3, [r0, #16]
 800c268:	f023 0301 	bic.w	r3, r3, #1
 800c26c:	6103      	str	r3, [r0, #16]
  }
}
 800c26e:	4770      	bx	lr
 800c270:	40010000 	.word	0x40010000

0800c274 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c274:	b340      	cbz	r0, 800c2c8 <HAL_TIM_Base_Init+0x54>
{
 800c276:	b510      	push	{r4, lr}
 800c278:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c27a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c27e:	b1f3      	cbz	r3, 800c2be <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800c280:	2302      	movs	r3, #2
 800c282:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c286:	4621      	mov	r1, r4
 800c288:	f851 0b04 	ldr.w	r0, [r1], #4
 800c28c:	f7ff ff86 	bl	800c19c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c290:	2301      	movs	r3, #1
 800c292:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c296:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c29a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c29e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c2a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c2b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800c2b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c2ba:	2000      	movs	r0, #0
}
 800c2bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c2be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c2c2:	f7fb fa0f 	bl	80076e4 <HAL_TIM_Base_MspInit>
 800c2c6:	e7db      	b.n	800c280 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800c2c8:	2001      	movs	r0, #1
}
 800c2ca:	4770      	bx	lr

0800c2cc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2cc:	4770      	bx	lr

0800c2ce <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2ce:	4770      	bx	lr

0800c2d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2d4:	6802      	ldr	r2, [r0, #0]
 800c2d6:	6913      	ldr	r3, [r2, #16]
 800c2d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c2dc:	68c1      	ldr	r1, [r0, #12]
 800c2de:	430b      	orrs	r3, r1
 800c2e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c2e2:	6883      	ldr	r3, [r0, #8]
 800c2e4:	6902      	ldr	r2, [r0, #16]
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	6943      	ldr	r3, [r0, #20]
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	69c3      	ldr	r3, [r0, #28]
 800c2ee:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800c2f0:	6801      	ldr	r1, [r0, #0]
 800c2f2:	68cb      	ldr	r3, [r1, #12]
 800c2f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c2f8:	f023 030c 	bic.w	r3, r3, #12
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c300:	6802      	ldr	r2, [r0, #0]
 800c302:	6953      	ldr	r3, [r2, #20]
 800c304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c308:	6981      	ldr	r1, [r0, #24]
 800c30a:	430b      	orrs	r3, r1
 800c30c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c30e:	6803      	ldr	r3, [r0, #0]
 800c310:	4a31      	ldr	r2, [pc, #196]	; (800c3d8 <UART_SetConfig+0x108>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d006      	beq.n	800c324 <UART_SetConfig+0x54>
 800c316:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d002      	beq.n	800c324 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c31e:	f7fe fbcb 	bl	800aab8 <HAL_RCC_GetPCLK1Freq>
 800c322:	e001      	b.n	800c328 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c324:	f7fe fbd8 	bl	800aad8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c328:	69e3      	ldr	r3, [r4, #28]
 800c32a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c32e:	d029      	beq.n	800c384 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c330:	2100      	movs	r1, #0
 800c332:	1803      	adds	r3, r0, r0
 800c334:	4149      	adcs	r1, r1
 800c336:	181b      	adds	r3, r3, r0
 800c338:	f141 0100 	adc.w	r1, r1, #0
 800c33c:	00c9      	lsls	r1, r1, #3
 800c33e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	1818      	adds	r0, r3, r0
 800c346:	6863      	ldr	r3, [r4, #4]
 800c348:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c34c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800c350:	f141 0100 	adc.w	r1, r1, #0
 800c354:	f7f4 fc46 	bl	8000be4 <__aeabi_uldivmod>
 800c358:	4a20      	ldr	r2, [pc, #128]	; (800c3dc <UART_SetConfig+0x10c>)
 800c35a:	fba2 3100 	umull	r3, r1, r2, r0
 800c35e:	0949      	lsrs	r1, r1, #5
 800c360:	2364      	movs	r3, #100	; 0x64
 800c362:	fb03 0311 	mls	r3, r3, r1, r0
 800c366:	011b      	lsls	r3, r3, #4
 800c368:	3332      	adds	r3, #50	; 0x32
 800c36a:	fba2 2303 	umull	r2, r3, r2, r3
 800c36e:	095b      	lsrs	r3, r3, #5
 800c370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c374:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c378:	f003 030f 	and.w	r3, r3, #15
 800c37c:	6821      	ldr	r1, [r4, #0]
 800c37e:	4413      	add	r3, r2
 800c380:	608b      	str	r3, [r1, #8]
  }
}
 800c382:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c384:	2300      	movs	r3, #0
 800c386:	1802      	adds	r2, r0, r0
 800c388:	eb43 0103 	adc.w	r1, r3, r3
 800c38c:	1812      	adds	r2, r2, r0
 800c38e:	f141 0100 	adc.w	r1, r1, #0
 800c392:	00c9      	lsls	r1, r1, #3
 800c394:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c398:	00d2      	lsls	r2, r2, #3
 800c39a:	1810      	adds	r0, r2, r0
 800c39c:	f141 0100 	adc.w	r1, r1, #0
 800c3a0:	6862      	ldr	r2, [r4, #4]
 800c3a2:	1892      	adds	r2, r2, r2
 800c3a4:	415b      	adcs	r3, r3
 800c3a6:	f7f4 fc1d 	bl	8000be4 <__aeabi_uldivmod>
 800c3aa:	4a0c      	ldr	r2, [pc, #48]	; (800c3dc <UART_SetConfig+0x10c>)
 800c3ac:	fba2 3100 	umull	r3, r1, r2, r0
 800c3b0:	0949      	lsrs	r1, r1, #5
 800c3b2:	2364      	movs	r3, #100	; 0x64
 800c3b4:	fb03 0311 	mls	r3, r3, r1, r0
 800c3b8:	00db      	lsls	r3, r3, #3
 800c3ba:	3332      	adds	r3, #50	; 0x32
 800c3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c0:	095b      	lsrs	r3, r3, #5
 800c3c2:	005a      	lsls	r2, r3, #1
 800c3c4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800c3c8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c3cc:	f003 0307 	and.w	r3, r3, #7
 800c3d0:	6821      	ldr	r1, [r4, #0]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	608b      	str	r3, [r1, #8]
 800c3d6:	e7d4      	b.n	800c382 <UART_SetConfig+0xb2>
 800c3d8:	40011000 	.word	0x40011000
 800c3dc:	51eb851f 	.word	0x51eb851f

0800c3e0 <HAL_UART_Init>:
  if (huart == NULL)
 800c3e0:	b360      	cbz	r0, 800c43c <HAL_UART_Init+0x5c>
{
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800c3e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c3ea:	b313      	cbz	r3, 800c432 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800c3ec:	2324      	movs	r3, #36	; 0x24
 800c3ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	68d3      	ldr	r3, [r2, #12]
 800c3f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3fa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f7ff ff67 	bl	800c2d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c402:	6822      	ldr	r2, [r4, #0]
 800c404:	6913      	ldr	r3, [r2, #16]
 800c406:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800c40a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c40c:	6822      	ldr	r2, [r4, #0]
 800c40e:	6953      	ldr	r3, [r2, #20]
 800c410:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800c414:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800c416:	6822      	ldr	r2, [r4, #0]
 800c418:	68d3      	ldr	r3, [r2, #12]
 800c41a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c41e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c420:	2000      	movs	r0, #0
 800c422:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c424:	2320      	movs	r3, #32
 800c426:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c42a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c42e:	6360      	str	r0, [r4, #52]	; 0x34
}
 800c430:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800c432:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800c436:	f7fb f975 	bl	8007724 <HAL_UART_MspInit>
 800c43a:	e7d7      	b.n	800c3ec <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800c43c:	2001      	movs	r0, #1
}
 800c43e:	4770      	bx	lr

0800c440 <arm_cmplx_mult_cmplx_f32>:
 800c440:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800c444:	b4f0      	push	{r4, r5, r6, r7}
 800c446:	d073      	beq.n	800c530 <arm_cmplx_mult_cmplx_f32+0xf0>
 800c448:	f100 0620 	add.w	r6, r0, #32
 800c44c:	f101 0520 	add.w	r5, r1, #32
 800c450:	f102 0420 	add.w	r4, r2, #32
 800c454:	4667      	mov	r7, ip
 800c456:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800c45a:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800c45e:	ed15 7a08 	vldr	s14, [r5, #-32]	; 0xffffffe0
 800c462:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800c466:	ee27 6a87 	vmul.f32	s12, s15, s14
 800c46a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c46e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c472:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c476:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c47a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c47e:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800c482:	ed44 6a08 	vstr	s13, [r4, #-32]	; 0xffffffe0
 800c486:	ed55 5a05 	vldr	s11, [r5, #-20]	; 0xffffffec
 800c48a:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800c48e:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800c492:	ed56 6a05 	vldr	s13, [r6, #-20]	; 0xffffffec
 800c496:	ee27 6a87 	vmul.f32	s12, s15, s14
 800c49a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c49e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c4a2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c4a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4aa:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c4ae:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c4b2:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800c4b6:	ed55 5a03 	vldr	s11, [r5, #-12]
 800c4ba:	ed56 7a04 	vldr	s15, [r6, #-16]
 800c4be:	ed15 7a04 	vldr	s14, [r5, #-16]
 800c4c2:	ed56 6a03 	vldr	s13, [r6, #-12]
 800c4c6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800c4ca:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c4ce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c4d2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c4d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4da:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c4de:	ed44 7a03 	vstr	s15, [r4, #-12]
 800c4e2:	ed44 6a04 	vstr	s13, [r4, #-16]
 800c4e6:	ed56 7a02 	vldr	s15, [r6, #-8]
 800c4ea:	ed15 7a02 	vldr	s14, [r5, #-8]
 800c4ee:	ed56 6a01 	vldr	s13, [r6, #-4]
 800c4f2:	ed55 5a01 	vldr	s11, [r5, #-4]
 800c4f6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800c4fa:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c4fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c502:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c50a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c50e:	3f01      	subs	r7, #1
 800c510:	ed44 6a02 	vstr	s13, [r4, #-8]
 800c514:	ed44 7a01 	vstr	s15, [r4, #-4]
 800c518:	f106 0620 	add.w	r6, r6, #32
 800c51c:	f105 0520 	add.w	r5, r5, #32
 800c520:	f104 0420 	add.w	r4, r4, #32
 800c524:	d197      	bne.n	800c456 <arm_cmplx_mult_cmplx_f32+0x16>
 800c526:	ea4f 144c 	mov.w	r4, ip, lsl #5
 800c52a:	4420      	add	r0, r4
 800c52c:	4421      	add	r1, r4
 800c52e:	4422      	add	r2, r4
 800c530:	f013 0303 	ands.w	r3, r3, #3
 800c534:	d04b      	beq.n	800c5ce <arm_cmplx_mult_cmplx_f32+0x18e>
 800c536:	edd0 5a00 	vldr	s11, [r0]
 800c53a:	edd1 7a00 	vldr	s15, [r1]
 800c53e:	edd0 6a01 	vldr	s13, [r0, #4]
 800c542:	ed91 7a01 	vldr	s14, [r1, #4]
 800c546:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800c54a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c54e:	ee67 6a26 	vmul.f32	s13, s14, s13
 800c552:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c556:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c55a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c55e:	3b01      	subs	r3, #1
 800c560:	edc2 6a00 	vstr	s13, [r2]
 800c564:	edc2 7a01 	vstr	s15, [r2, #4]
 800c568:	d031      	beq.n	800c5ce <arm_cmplx_mult_cmplx_f32+0x18e>
 800c56a:	edd0 7a02 	vldr	s15, [r0, #8]
 800c56e:	ed91 7a02 	vldr	s14, [r1, #8]
 800c572:	edd0 6a03 	vldr	s13, [r0, #12]
 800c576:	edd1 5a03 	vldr	s11, [r1, #12]
 800c57a:	ee27 6a87 	vmul.f32	s12, s15, s14
 800c57e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c582:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c586:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c58a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c58e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c592:	2b01      	cmp	r3, #1
 800c594:	edc2 6a02 	vstr	s13, [r2, #8]
 800c598:	edc2 7a03 	vstr	s15, [r2, #12]
 800c59c:	d017      	beq.n	800c5ce <arm_cmplx_mult_cmplx_f32+0x18e>
 800c59e:	edd0 7a04 	vldr	s15, [r0, #16]
 800c5a2:	ed91 7a04 	vldr	s14, [r1, #16]
 800c5a6:	edd0 6a05 	vldr	s13, [r0, #20]
 800c5aa:	edd1 5a05 	vldr	s11, [r1, #20]
 800c5ae:	ee27 6a87 	vmul.f32	s12, s15, s14
 800c5b2:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c5b6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c5ba:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c5be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5c2:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c5c6:	edc2 7a05 	vstr	s15, [r2, #20]
 800c5ca:	edc2 6a04 	vstr	s13, [r2, #16]
 800c5ce:	bcf0      	pop	{r4, r5, r6, r7}
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop

0800c5d4 <arm_cmplx_mag_squared_f32>:
 800c5d4:	b470      	push	{r4, r5, r6}
 800c5d6:	0896      	lsrs	r6, r2, #2
 800c5d8:	d03e      	beq.n	800c658 <arm_cmplx_mag_squared_f32+0x84>
 800c5da:	f100 0320 	add.w	r3, r0, #32
 800c5de:	f101 0410 	add.w	r4, r1, #16
 800c5e2:	4635      	mov	r5, r6
 800c5e4:	ed53 7a08 	vldr	s15, [r3, #-32]	; 0xffffffe0
 800c5e8:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800c5ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c5f0:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c5f4:	3d01      	subs	r5, #1
 800c5f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5fa:	f103 0320 	add.w	r3, r3, #32
 800c5fe:	ed44 7a04 	vstr	s15, [r4, #-16]
 800c602:	ed53 7a0e 	vldr	s15, [r3, #-56]	; 0xffffffc8
 800c606:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
 800c60a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c60e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c612:	f104 0410 	add.w	r4, r4, #16
 800c616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c61a:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800c61e:	ed53 7a0c 	vldr	s15, [r3, #-48]	; 0xffffffd0
 800c622:	ed13 7a0b 	vldr	s14, [r3, #-44]	; 0xffffffd4
 800c626:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c62a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c62e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c632:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800c636:	ed53 7a0a 	vldr	s15, [r3, #-40]	; 0xffffffd8
 800c63a:	ed13 7a09 	vldr	s14, [r3, #-36]	; 0xffffffdc
 800c63e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c642:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c64a:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c64e:	d1c9      	bne.n	800c5e4 <arm_cmplx_mag_squared_f32+0x10>
 800c650:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800c654:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800c658:	f012 0203 	ands.w	r2, r2, #3
 800c65c:	d027      	beq.n	800c6ae <arm_cmplx_mag_squared_f32+0xda>
 800c65e:	ed90 7a00 	vldr	s14, [r0]
 800c662:	edd0 7a01 	vldr	s15, [r0, #4]
 800c666:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c66a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c66e:	3a01      	subs	r2, #1
 800c670:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c674:	edc1 7a00 	vstr	s15, [r1]
 800c678:	d019      	beq.n	800c6ae <arm_cmplx_mag_squared_f32+0xda>
 800c67a:	edd0 7a02 	vldr	s15, [r0, #8]
 800c67e:	ed90 7a03 	vldr	s14, [r0, #12]
 800c682:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c686:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c68a:	2a01      	cmp	r2, #1
 800c68c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c690:	edc1 7a01 	vstr	s15, [r1, #4]
 800c694:	d00b      	beq.n	800c6ae <arm_cmplx_mag_squared_f32+0xda>
 800c696:	edd0 7a04 	vldr	s15, [r0, #16]
 800c69a:	ed90 7a05 	vldr	s14, [r0, #20]
 800c69e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c6a2:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c6a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6aa:	edc1 7a02 	vstr	s15, [r1, #8]
 800c6ae:	bc70      	pop	{r4, r5, r6}
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop

0800c6b4 <arm_mult_f32>:
 800c6b4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800c6b8:	b4f0      	push	{r4, r5, r6, r7}
 800c6ba:	d033      	beq.n	800c724 <arm_mult_f32+0x70>
 800c6bc:	f100 0610 	add.w	r6, r0, #16
 800c6c0:	f101 0510 	add.w	r5, r1, #16
 800c6c4:	f102 0410 	add.w	r4, r2, #16
 800c6c8:	4667      	mov	r7, ip
 800c6ca:	ed15 7a04 	vldr	s14, [r5, #-16]
 800c6ce:	ed56 7a04 	vldr	s15, [r6, #-16]
 800c6d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6d6:	3f01      	subs	r7, #1
 800c6d8:	ed44 7a04 	vstr	s15, [r4, #-16]
 800c6dc:	ed15 7a03 	vldr	s14, [r5, #-12]
 800c6e0:	ed56 7a03 	vldr	s15, [r6, #-12]
 800c6e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6e8:	f106 0610 	add.w	r6, r6, #16
 800c6ec:	ed44 7a03 	vstr	s15, [r4, #-12]
 800c6f0:	ed15 7a02 	vldr	s14, [r5, #-8]
 800c6f4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800c6f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6fc:	f105 0510 	add.w	r5, r5, #16
 800c700:	ed44 7a02 	vstr	s15, [r4, #-8]
 800c704:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800c708:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800c70c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c710:	f104 0410 	add.w	r4, r4, #16
 800c714:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c718:	d1d7      	bne.n	800c6ca <arm_mult_f32+0x16>
 800c71a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800c71e:	4420      	add	r0, r4
 800c720:	4421      	add	r1, r4
 800c722:	4422      	add	r2, r4
 800c724:	f013 0303 	ands.w	r3, r3, #3
 800c728:	d01b      	beq.n	800c762 <arm_mult_f32+0xae>
 800c72a:	edd1 7a00 	vldr	s15, [r1]
 800c72e:	ed90 7a00 	vldr	s14, [r0]
 800c732:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c736:	3b01      	subs	r3, #1
 800c738:	edc2 7a00 	vstr	s15, [r2]
 800c73c:	d011      	beq.n	800c762 <arm_mult_f32+0xae>
 800c73e:	edd0 7a01 	vldr	s15, [r0, #4]
 800c742:	ed91 7a01 	vldr	s14, [r1, #4]
 800c746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	edc2 7a01 	vstr	s15, [r2, #4]
 800c750:	d007      	beq.n	800c762 <arm_mult_f32+0xae>
 800c752:	edd0 7a02 	vldr	s15, [r0, #8]
 800c756:	ed91 7a02 	vldr	s14, [r1, #8]
 800c75a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c75e:	edc2 7a02 	vstr	s15, [r2, #8]
 800c762:	bcf0      	pop	{r4, r5, r6, r7}
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop

0800c768 <arm_dot_prod_f32>:
 800c768:	b4f0      	push	{r4, r5, r6, r7}
 800c76a:	0897      	lsrs	r7, r2, #2
 800c76c:	eddf 5a29 	vldr	s11, [pc, #164]	; 800c814 <arm_dot_prod_f32+0xac>
 800c770:	d02d      	beq.n	800c7ce <arm_dot_prod_f32+0x66>
 800c772:	f100 0510 	add.w	r5, r0, #16
 800c776:	f101 0410 	add.w	r4, r1, #16
 800c77a:	463e      	mov	r6, r7
 800c77c:	ed55 6a04 	vldr	s13, [r5, #-16]
 800c780:	ed54 3a04 	vldr	s7, [r4, #-16]
 800c784:	ed15 7a03 	vldr	s14, [r5, #-12]
 800c788:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c78c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800c790:	ed54 4a02 	vldr	s9, [r4, #-8]
 800c794:	ed15 6a01 	vldr	s12, [r5, #-4]
 800c798:	ed14 5a01 	vldr	s10, [r4, #-4]
 800c79c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800c7a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c7a4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c7a8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800c7ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c7b0:	ee66 6a05 	vmul.f32	s13, s12, s10
 800c7b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7b8:	3e01      	subs	r6, #1
 800c7ba:	f105 0510 	add.w	r5, r5, #16
 800c7be:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800c7c2:	f104 0410 	add.w	r4, r4, #16
 800c7c6:	d1d9      	bne.n	800c77c <arm_dot_prod_f32+0x14>
 800c7c8:	013f      	lsls	r7, r7, #4
 800c7ca:	4438      	add	r0, r7
 800c7cc:	4439      	add	r1, r7
 800c7ce:	f012 0203 	ands.w	r2, r2, #3
 800c7d2:	d01b      	beq.n	800c80c <arm_dot_prod_f32+0xa4>
 800c7d4:	edd1 7a00 	vldr	s15, [r1]
 800c7d8:	ed90 7a00 	vldr	s14, [r0]
 800c7dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7e0:	3a01      	subs	r2, #1
 800c7e2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c7e6:	d011      	beq.n	800c80c <arm_dot_prod_f32+0xa4>
 800c7e8:	edd1 7a01 	vldr	s15, [r1, #4]
 800c7ec:	ed90 7a01 	vldr	s14, [r0, #4]
 800c7f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7f4:	2a01      	cmp	r2, #1
 800c7f6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c7fa:	d007      	beq.n	800c80c <arm_dot_prod_f32+0xa4>
 800c7fc:	edd0 7a02 	vldr	s15, [r0, #8]
 800c800:	ed91 7a02 	vldr	s14, [r1, #8]
 800c804:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c808:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c80c:	edc3 5a00 	vstr	s11, [r3]
 800c810:	bcf0      	pop	{r4, r5, r6, r7}
 800c812:	4770      	bx	lr
 800c814:	00000000 	.word	0x00000000

0800c818 <malloc>:
 800c818:	4b02      	ldr	r3, [pc, #8]	; (800c824 <malloc+0xc>)
 800c81a:	4601      	mov	r1, r0
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	f000 b823 	b.w	800c868 <_malloc_r>
 800c822:	bf00      	nop
 800c824:	200000c4 	.word	0x200000c4

0800c828 <sbrk_aligned>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	4e0e      	ldr	r6, [pc, #56]	; (800c864 <sbrk_aligned+0x3c>)
 800c82c:	460c      	mov	r4, r1
 800c82e:	6831      	ldr	r1, [r6, #0]
 800c830:	4605      	mov	r5, r0
 800c832:	b911      	cbnz	r1, 800c83a <sbrk_aligned+0x12>
 800c834:	f000 f8ac 	bl	800c990 <_sbrk_r>
 800c838:	6030      	str	r0, [r6, #0]
 800c83a:	4621      	mov	r1, r4
 800c83c:	4628      	mov	r0, r5
 800c83e:	f000 f8a7 	bl	800c990 <_sbrk_r>
 800c842:	1c43      	adds	r3, r0, #1
 800c844:	d00a      	beq.n	800c85c <sbrk_aligned+0x34>
 800c846:	1cc4      	adds	r4, r0, #3
 800c848:	f024 0403 	bic.w	r4, r4, #3
 800c84c:	42a0      	cmp	r0, r4
 800c84e:	d007      	beq.n	800c860 <sbrk_aligned+0x38>
 800c850:	1a21      	subs	r1, r4, r0
 800c852:	4628      	mov	r0, r5
 800c854:	f000 f89c 	bl	800c990 <_sbrk_r>
 800c858:	3001      	adds	r0, #1
 800c85a:	d101      	bne.n	800c860 <sbrk_aligned+0x38>
 800c85c:	f04f 34ff 	mov.w	r4, #4294967295
 800c860:	4620      	mov	r0, r4
 800c862:	bd70      	pop	{r4, r5, r6, pc}
 800c864:	200009f8 	.word	0x200009f8

0800c868 <_malloc_r>:
 800c868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	1ccd      	adds	r5, r1, #3
 800c86e:	f025 0503 	bic.w	r5, r5, #3
 800c872:	3508      	adds	r5, #8
 800c874:	2d0c      	cmp	r5, #12
 800c876:	bf38      	it	cc
 800c878:	250c      	movcc	r5, #12
 800c87a:	2d00      	cmp	r5, #0
 800c87c:	4607      	mov	r7, r0
 800c87e:	db01      	blt.n	800c884 <_malloc_r+0x1c>
 800c880:	42a9      	cmp	r1, r5
 800c882:	d905      	bls.n	800c890 <_malloc_r+0x28>
 800c884:	230c      	movs	r3, #12
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	2600      	movs	r6, #0
 800c88a:	4630      	mov	r0, r6
 800c88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c890:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c964 <_malloc_r+0xfc>
 800c894:	f000 f868 	bl	800c968 <__malloc_lock>
 800c898:	f8d8 3000 	ldr.w	r3, [r8]
 800c89c:	461c      	mov	r4, r3
 800c89e:	bb5c      	cbnz	r4, 800c8f8 <_malloc_r+0x90>
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	4638      	mov	r0, r7
 800c8a4:	f7ff ffc0 	bl	800c828 <sbrk_aligned>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	d155      	bne.n	800c95a <_malloc_r+0xf2>
 800c8ae:	f8d8 4000 	ldr.w	r4, [r8]
 800c8b2:	4626      	mov	r6, r4
 800c8b4:	2e00      	cmp	r6, #0
 800c8b6:	d145      	bne.n	800c944 <_malloc_r+0xdc>
 800c8b8:	2c00      	cmp	r4, #0
 800c8ba:	d048      	beq.n	800c94e <_malloc_r+0xe6>
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	eb04 0903 	add.w	r9, r4, r3
 800c8c6:	f000 f863 	bl	800c990 <_sbrk_r>
 800c8ca:	4581      	cmp	r9, r0
 800c8cc:	d13f      	bne.n	800c94e <_malloc_r+0xe6>
 800c8ce:	6821      	ldr	r1, [r4, #0]
 800c8d0:	1a6d      	subs	r5, r5, r1
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	f7ff ffa7 	bl	800c828 <sbrk_aligned>
 800c8da:	3001      	adds	r0, #1
 800c8dc:	d037      	beq.n	800c94e <_malloc_r+0xe6>
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	442b      	add	r3, r5
 800c8e2:	6023      	str	r3, [r4, #0]
 800c8e4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d038      	beq.n	800c95e <_malloc_r+0xf6>
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	42a2      	cmp	r2, r4
 800c8f0:	d12b      	bne.n	800c94a <_malloc_r+0xe2>
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	605a      	str	r2, [r3, #4]
 800c8f6:	e00f      	b.n	800c918 <_malloc_r+0xb0>
 800c8f8:	6822      	ldr	r2, [r4, #0]
 800c8fa:	1b52      	subs	r2, r2, r5
 800c8fc:	d41f      	bmi.n	800c93e <_malloc_r+0xd6>
 800c8fe:	2a0b      	cmp	r2, #11
 800c900:	d917      	bls.n	800c932 <_malloc_r+0xca>
 800c902:	1961      	adds	r1, r4, r5
 800c904:	42a3      	cmp	r3, r4
 800c906:	6025      	str	r5, [r4, #0]
 800c908:	bf18      	it	ne
 800c90a:	6059      	strne	r1, [r3, #4]
 800c90c:	6863      	ldr	r3, [r4, #4]
 800c90e:	bf08      	it	eq
 800c910:	f8c8 1000 	streq.w	r1, [r8]
 800c914:	5162      	str	r2, [r4, r5]
 800c916:	604b      	str	r3, [r1, #4]
 800c918:	4638      	mov	r0, r7
 800c91a:	f104 060b 	add.w	r6, r4, #11
 800c91e:	f000 f829 	bl	800c974 <__malloc_unlock>
 800c922:	f026 0607 	bic.w	r6, r6, #7
 800c926:	1d23      	adds	r3, r4, #4
 800c928:	1af2      	subs	r2, r6, r3
 800c92a:	d0ae      	beq.n	800c88a <_malloc_r+0x22>
 800c92c:	1b9b      	subs	r3, r3, r6
 800c92e:	50a3      	str	r3, [r4, r2]
 800c930:	e7ab      	b.n	800c88a <_malloc_r+0x22>
 800c932:	42a3      	cmp	r3, r4
 800c934:	6862      	ldr	r2, [r4, #4]
 800c936:	d1dd      	bne.n	800c8f4 <_malloc_r+0x8c>
 800c938:	f8c8 2000 	str.w	r2, [r8]
 800c93c:	e7ec      	b.n	800c918 <_malloc_r+0xb0>
 800c93e:	4623      	mov	r3, r4
 800c940:	6864      	ldr	r4, [r4, #4]
 800c942:	e7ac      	b.n	800c89e <_malloc_r+0x36>
 800c944:	4634      	mov	r4, r6
 800c946:	6876      	ldr	r6, [r6, #4]
 800c948:	e7b4      	b.n	800c8b4 <_malloc_r+0x4c>
 800c94a:	4613      	mov	r3, r2
 800c94c:	e7cc      	b.n	800c8e8 <_malloc_r+0x80>
 800c94e:	230c      	movs	r3, #12
 800c950:	603b      	str	r3, [r7, #0]
 800c952:	4638      	mov	r0, r7
 800c954:	f000 f80e 	bl	800c974 <__malloc_unlock>
 800c958:	e797      	b.n	800c88a <_malloc_r+0x22>
 800c95a:	6025      	str	r5, [r4, #0]
 800c95c:	e7dc      	b.n	800c918 <_malloc_r+0xb0>
 800c95e:	605b      	str	r3, [r3, #4]
 800c960:	deff      	udf	#255	; 0xff
 800c962:	bf00      	nop
 800c964:	200009f4 	.word	0x200009f4

0800c968 <__malloc_lock>:
 800c968:	4801      	ldr	r0, [pc, #4]	; (800c970 <__malloc_lock+0x8>)
 800c96a:	f000 b84b 	b.w	800ca04 <__retarget_lock_acquire_recursive>
 800c96e:	bf00      	nop
 800c970:	20000b38 	.word	0x20000b38

0800c974 <__malloc_unlock>:
 800c974:	4801      	ldr	r0, [pc, #4]	; (800c97c <__malloc_unlock+0x8>)
 800c976:	f000 b846 	b.w	800ca06 <__retarget_lock_release_recursive>
 800c97a:	bf00      	nop
 800c97c:	20000b38 	.word	0x20000b38

0800c980 <memset>:
 800c980:	4402      	add	r2, r0
 800c982:	4603      	mov	r3, r0
 800c984:	4293      	cmp	r3, r2
 800c986:	d100      	bne.n	800c98a <memset+0xa>
 800c988:	4770      	bx	lr
 800c98a:	f803 1b01 	strb.w	r1, [r3], #1
 800c98e:	e7f9      	b.n	800c984 <memset+0x4>

0800c990 <_sbrk_r>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4d06      	ldr	r5, [pc, #24]	; (800c9ac <_sbrk_r+0x1c>)
 800c994:	2300      	movs	r3, #0
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
 800c99a:	602b      	str	r3, [r5, #0]
 800c99c:	f7fa ffe6 	bl	800796c <_sbrk>
 800c9a0:	1c43      	adds	r3, r0, #1
 800c9a2:	d102      	bne.n	800c9aa <_sbrk_r+0x1a>
 800c9a4:	682b      	ldr	r3, [r5, #0]
 800c9a6:	b103      	cbz	r3, 800c9aa <_sbrk_r+0x1a>
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	bd38      	pop	{r3, r4, r5, pc}
 800c9ac:	20000b34 	.word	0x20000b34

0800c9b0 <__errno>:
 800c9b0:	4b01      	ldr	r3, [pc, #4]	; (800c9b8 <__errno+0x8>)
 800c9b2:	6818      	ldr	r0, [r3, #0]
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	200000c4 	.word	0x200000c4

0800c9bc <__libc_init_array>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	4d0d      	ldr	r5, [pc, #52]	; (800c9f4 <__libc_init_array+0x38>)
 800c9c0:	4c0d      	ldr	r4, [pc, #52]	; (800c9f8 <__libc_init_array+0x3c>)
 800c9c2:	1b64      	subs	r4, r4, r5
 800c9c4:	10a4      	asrs	r4, r4, #2
 800c9c6:	2600      	movs	r6, #0
 800c9c8:	42a6      	cmp	r6, r4
 800c9ca:	d109      	bne.n	800c9e0 <__libc_init_array+0x24>
 800c9cc:	4d0b      	ldr	r5, [pc, #44]	; (800c9fc <__libc_init_array+0x40>)
 800c9ce:	4c0c      	ldr	r4, [pc, #48]	; (800ca00 <__libc_init_array+0x44>)
 800c9d0:	f002 fd18 	bl	800f404 <_init>
 800c9d4:	1b64      	subs	r4, r4, r5
 800c9d6:	10a4      	asrs	r4, r4, #2
 800c9d8:	2600      	movs	r6, #0
 800c9da:	42a6      	cmp	r6, r4
 800c9dc:	d105      	bne.n	800c9ea <__libc_init_array+0x2e>
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
 800c9e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9e4:	4798      	blx	r3
 800c9e6:	3601      	adds	r6, #1
 800c9e8:	e7ee      	b.n	800c9c8 <__libc_init_array+0xc>
 800c9ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ee:	4798      	blx	r3
 800c9f0:	3601      	adds	r6, #1
 800c9f2:	e7f2      	b.n	800c9da <__libc_init_array+0x1e>
 800c9f4:	0800fad0 	.word	0x0800fad0
 800c9f8:	0800fad0 	.word	0x0800fad0
 800c9fc:	0800fad0 	.word	0x0800fad0
 800ca00:	0800fad4 	.word	0x0800fad4

0800ca04 <__retarget_lock_acquire_recursive>:
 800ca04:	4770      	bx	lr

0800ca06 <__retarget_lock_release_recursive>:
 800ca06:	4770      	bx	lr

0800ca08 <atan>:
 800ca08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	ec55 4b10 	vmov	r4, r5, d0
 800ca10:	4bc3      	ldr	r3, [pc, #780]	; (800cd20 <atan+0x318>)
 800ca12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca16:	429e      	cmp	r6, r3
 800ca18:	46ab      	mov	fp, r5
 800ca1a:	dd18      	ble.n	800ca4e <atan+0x46>
 800ca1c:	4bc1      	ldr	r3, [pc, #772]	; (800cd24 <atan+0x31c>)
 800ca1e:	429e      	cmp	r6, r3
 800ca20:	dc01      	bgt.n	800ca26 <atan+0x1e>
 800ca22:	d109      	bne.n	800ca38 <atan+0x30>
 800ca24:	b144      	cbz	r4, 800ca38 <atan+0x30>
 800ca26:	4622      	mov	r2, r4
 800ca28:	462b      	mov	r3, r5
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	f7f3 fbf1 	bl	8000214 <__adddf3>
 800ca32:	4604      	mov	r4, r0
 800ca34:	460d      	mov	r5, r1
 800ca36:	e006      	b.n	800ca46 <atan+0x3e>
 800ca38:	f1bb 0f00 	cmp.w	fp, #0
 800ca3c:	f300 8131 	bgt.w	800cca2 <atan+0x29a>
 800ca40:	a59b      	add	r5, pc, #620	; (adr r5, 800ccb0 <atan+0x2a8>)
 800ca42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca46:	ec45 4b10 	vmov	d0, r4, r5
 800ca4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4e:	4bb6      	ldr	r3, [pc, #728]	; (800cd28 <atan+0x320>)
 800ca50:	429e      	cmp	r6, r3
 800ca52:	dc14      	bgt.n	800ca7e <atan+0x76>
 800ca54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ca58:	429e      	cmp	r6, r3
 800ca5a:	dc0d      	bgt.n	800ca78 <atan+0x70>
 800ca5c:	a396      	add	r3, pc, #600	; (adr r3, 800ccb8 <atan+0x2b0>)
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	ee10 0a10 	vmov	r0, s0
 800ca66:	4629      	mov	r1, r5
 800ca68:	f7f3 fbd4 	bl	8000214 <__adddf3>
 800ca6c:	4baf      	ldr	r3, [pc, #700]	; (800cd2c <atan+0x324>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f7f4 f816 	bl	8000aa0 <__aeabi_dcmpgt>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d1e6      	bne.n	800ca46 <atan+0x3e>
 800ca78:	f04f 3aff 	mov.w	sl, #4294967295
 800ca7c:	e02b      	b.n	800cad6 <atan+0xce>
 800ca7e:	f000 f963 	bl	800cd48 <fabs>
 800ca82:	4bab      	ldr	r3, [pc, #684]	; (800cd30 <atan+0x328>)
 800ca84:	429e      	cmp	r6, r3
 800ca86:	ec55 4b10 	vmov	r4, r5, d0
 800ca8a:	f300 80bf 	bgt.w	800cc0c <atan+0x204>
 800ca8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ca92:	429e      	cmp	r6, r3
 800ca94:	f300 80a0 	bgt.w	800cbd8 <atan+0x1d0>
 800ca98:	ee10 2a10 	vmov	r2, s0
 800ca9c:	ee10 0a10 	vmov	r0, s0
 800caa0:	462b      	mov	r3, r5
 800caa2:	4629      	mov	r1, r5
 800caa4:	f7f3 fbb6 	bl	8000214 <__adddf3>
 800caa8:	4ba0      	ldr	r3, [pc, #640]	; (800cd2c <atan+0x324>)
 800caaa:	2200      	movs	r2, #0
 800caac:	f7f3 fbb0 	bl	8000210 <__aeabi_dsub>
 800cab0:	2200      	movs	r2, #0
 800cab2:	4606      	mov	r6, r0
 800cab4:	460f      	mov	r7, r1
 800cab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800caba:	4620      	mov	r0, r4
 800cabc:	4629      	mov	r1, r5
 800cabe:	f7f3 fba9 	bl	8000214 <__adddf3>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	4630      	mov	r0, r6
 800cac8:	4639      	mov	r1, r7
 800caca:	f7f3 fe83 	bl	80007d4 <__aeabi_ddiv>
 800cace:	f04f 0a00 	mov.w	sl, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	460d      	mov	r5, r1
 800cad6:	4622      	mov	r2, r4
 800cad8:	462b      	mov	r3, r5
 800cada:	4620      	mov	r0, r4
 800cadc:	4629      	mov	r1, r5
 800cade:	f7f3 fd4f 	bl	8000580 <__aeabi_dmul>
 800cae2:	4602      	mov	r2, r0
 800cae4:	460b      	mov	r3, r1
 800cae6:	4680      	mov	r8, r0
 800cae8:	4689      	mov	r9, r1
 800caea:	f7f3 fd49 	bl	8000580 <__aeabi_dmul>
 800caee:	a374      	add	r3, pc, #464	; (adr r3, 800ccc0 <atan+0x2b8>)
 800caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf4:	4606      	mov	r6, r0
 800caf6:	460f      	mov	r7, r1
 800caf8:	f7f3 fd42 	bl	8000580 <__aeabi_dmul>
 800cafc:	a372      	add	r3, pc, #456	; (adr r3, 800ccc8 <atan+0x2c0>)
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	f7f3 fb87 	bl	8000214 <__adddf3>
 800cb06:	4632      	mov	r2, r6
 800cb08:	463b      	mov	r3, r7
 800cb0a:	f7f3 fd39 	bl	8000580 <__aeabi_dmul>
 800cb0e:	a370      	add	r3, pc, #448	; (adr r3, 800ccd0 <atan+0x2c8>)
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	f7f3 fb7e 	bl	8000214 <__adddf3>
 800cb18:	4632      	mov	r2, r6
 800cb1a:	463b      	mov	r3, r7
 800cb1c:	f7f3 fd30 	bl	8000580 <__aeabi_dmul>
 800cb20:	a36d      	add	r3, pc, #436	; (adr r3, 800ccd8 <atan+0x2d0>)
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f7f3 fb75 	bl	8000214 <__adddf3>
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	463b      	mov	r3, r7
 800cb2e:	f7f3 fd27 	bl	8000580 <__aeabi_dmul>
 800cb32:	a36b      	add	r3, pc, #428	; (adr r3, 800cce0 <atan+0x2d8>)
 800cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb38:	f7f3 fb6c 	bl	8000214 <__adddf3>
 800cb3c:	4632      	mov	r2, r6
 800cb3e:	463b      	mov	r3, r7
 800cb40:	f7f3 fd1e 	bl	8000580 <__aeabi_dmul>
 800cb44:	a368      	add	r3, pc, #416	; (adr r3, 800cce8 <atan+0x2e0>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 fb63 	bl	8000214 <__adddf3>
 800cb4e:	4642      	mov	r2, r8
 800cb50:	464b      	mov	r3, r9
 800cb52:	f7f3 fd15 	bl	8000580 <__aeabi_dmul>
 800cb56:	a366      	add	r3, pc, #408	; (adr r3, 800ccf0 <atan+0x2e8>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	4689      	mov	r9, r1
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 fd0c 	bl	8000580 <__aeabi_dmul>
 800cb68:	a363      	add	r3, pc, #396	; (adr r3, 800ccf8 <atan+0x2f0>)
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	f7f3 fb4f 	bl	8000210 <__aeabi_dsub>
 800cb72:	4632      	mov	r2, r6
 800cb74:	463b      	mov	r3, r7
 800cb76:	f7f3 fd03 	bl	8000580 <__aeabi_dmul>
 800cb7a:	a361      	add	r3, pc, #388	; (adr r3, 800cd00 <atan+0x2f8>)
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	f7f3 fb46 	bl	8000210 <__aeabi_dsub>
 800cb84:	4632      	mov	r2, r6
 800cb86:	463b      	mov	r3, r7
 800cb88:	f7f3 fcfa 	bl	8000580 <__aeabi_dmul>
 800cb8c:	a35e      	add	r3, pc, #376	; (adr r3, 800cd08 <atan+0x300>)
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	f7f3 fb3d 	bl	8000210 <__aeabi_dsub>
 800cb96:	4632      	mov	r2, r6
 800cb98:	463b      	mov	r3, r7
 800cb9a:	f7f3 fcf1 	bl	8000580 <__aeabi_dmul>
 800cb9e:	a35c      	add	r3, pc, #368	; (adr r3, 800cd10 <atan+0x308>)
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	f7f3 fb34 	bl	8000210 <__aeabi_dsub>
 800cba8:	4632      	mov	r2, r6
 800cbaa:	463b      	mov	r3, r7
 800cbac:	f7f3 fce8 	bl	8000580 <__aeabi_dmul>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	4640      	mov	r0, r8
 800cbb6:	4649      	mov	r1, r9
 800cbb8:	f7f3 fb2c 	bl	8000214 <__adddf3>
 800cbbc:	4622      	mov	r2, r4
 800cbbe:	462b      	mov	r3, r5
 800cbc0:	f7f3 fcde 	bl	8000580 <__aeabi_dmul>
 800cbc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cbc8:	4602      	mov	r2, r0
 800cbca:	460b      	mov	r3, r1
 800cbcc:	d14b      	bne.n	800cc66 <atan+0x25e>
 800cbce:	4620      	mov	r0, r4
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	f7f3 fb1d 	bl	8000210 <__aeabi_dsub>
 800cbd6:	e72c      	b.n	800ca32 <atan+0x2a>
 800cbd8:	ee10 0a10 	vmov	r0, s0
 800cbdc:	4b53      	ldr	r3, [pc, #332]	; (800cd2c <atan+0x324>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	f7f3 fb15 	bl	8000210 <__aeabi_dsub>
 800cbe6:	4b51      	ldr	r3, [pc, #324]	; (800cd2c <atan+0x324>)
 800cbe8:	4606      	mov	r6, r0
 800cbea:	460f      	mov	r7, r1
 800cbec:	2200      	movs	r2, #0
 800cbee:	4620      	mov	r0, r4
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	f7f3 fb0f 	bl	8000214 <__adddf3>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	4639      	mov	r1, r7
 800cbfe:	f7f3 fde9 	bl	80007d4 <__aeabi_ddiv>
 800cc02:	f04f 0a01 	mov.w	sl, #1
 800cc06:	4604      	mov	r4, r0
 800cc08:	460d      	mov	r5, r1
 800cc0a:	e764      	b.n	800cad6 <atan+0xce>
 800cc0c:	4b49      	ldr	r3, [pc, #292]	; (800cd34 <atan+0x32c>)
 800cc0e:	429e      	cmp	r6, r3
 800cc10:	da1d      	bge.n	800cc4e <atan+0x246>
 800cc12:	ee10 0a10 	vmov	r0, s0
 800cc16:	4b48      	ldr	r3, [pc, #288]	; (800cd38 <atan+0x330>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f3 faf8 	bl	8000210 <__aeabi_dsub>
 800cc20:	4b45      	ldr	r3, [pc, #276]	; (800cd38 <atan+0x330>)
 800cc22:	4606      	mov	r6, r0
 800cc24:	460f      	mov	r7, r1
 800cc26:	2200      	movs	r2, #0
 800cc28:	4620      	mov	r0, r4
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f7f3 fca8 	bl	8000580 <__aeabi_dmul>
 800cc30:	4b3e      	ldr	r3, [pc, #248]	; (800cd2c <atan+0x324>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	f7f3 faee 	bl	8000214 <__adddf3>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	4639      	mov	r1, r7
 800cc40:	f7f3 fdc8 	bl	80007d4 <__aeabi_ddiv>
 800cc44:	f04f 0a02 	mov.w	sl, #2
 800cc48:	4604      	mov	r4, r0
 800cc4a:	460d      	mov	r5, r1
 800cc4c:	e743      	b.n	800cad6 <atan+0xce>
 800cc4e:	462b      	mov	r3, r5
 800cc50:	ee10 2a10 	vmov	r2, s0
 800cc54:	4939      	ldr	r1, [pc, #228]	; (800cd3c <atan+0x334>)
 800cc56:	2000      	movs	r0, #0
 800cc58:	f7f3 fdbc 	bl	80007d4 <__aeabi_ddiv>
 800cc5c:	f04f 0a03 	mov.w	sl, #3
 800cc60:	4604      	mov	r4, r0
 800cc62:	460d      	mov	r5, r1
 800cc64:	e737      	b.n	800cad6 <atan+0xce>
 800cc66:	4b36      	ldr	r3, [pc, #216]	; (800cd40 <atan+0x338>)
 800cc68:	4e36      	ldr	r6, [pc, #216]	; (800cd44 <atan+0x33c>)
 800cc6a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc72:	f7f3 facd 	bl	8000210 <__aeabi_dsub>
 800cc76:	4622      	mov	r2, r4
 800cc78:	462b      	mov	r3, r5
 800cc7a:	f7f3 fac9 	bl	8000210 <__aeabi_dsub>
 800cc7e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cc8a:	f7f3 fac1 	bl	8000210 <__aeabi_dsub>
 800cc8e:	f1bb 0f00 	cmp.w	fp, #0
 800cc92:	4604      	mov	r4, r0
 800cc94:	460d      	mov	r5, r1
 800cc96:	f6bf aed6 	bge.w	800ca46 <atan+0x3e>
 800cc9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc9e:	461d      	mov	r5, r3
 800cca0:	e6d1      	b.n	800ca46 <atan+0x3e>
 800cca2:	a51d      	add	r5, pc, #116	; (adr r5, 800cd18 <atan+0x310>)
 800cca4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cca8:	e6cd      	b.n	800ca46 <atan+0x3e>
 800ccaa:	bf00      	nop
 800ccac:	f3af 8000 	nop.w
 800ccb0:	54442d18 	.word	0x54442d18
 800ccb4:	bff921fb 	.word	0xbff921fb
 800ccb8:	8800759c 	.word	0x8800759c
 800ccbc:	7e37e43c 	.word	0x7e37e43c
 800ccc0:	e322da11 	.word	0xe322da11
 800ccc4:	3f90ad3a 	.word	0x3f90ad3a
 800ccc8:	24760deb 	.word	0x24760deb
 800cccc:	3fa97b4b 	.word	0x3fa97b4b
 800ccd0:	a0d03d51 	.word	0xa0d03d51
 800ccd4:	3fb10d66 	.word	0x3fb10d66
 800ccd8:	c54c206e 	.word	0xc54c206e
 800ccdc:	3fb745cd 	.word	0x3fb745cd
 800cce0:	920083ff 	.word	0x920083ff
 800cce4:	3fc24924 	.word	0x3fc24924
 800cce8:	5555550d 	.word	0x5555550d
 800ccec:	3fd55555 	.word	0x3fd55555
 800ccf0:	2c6a6c2f 	.word	0x2c6a6c2f
 800ccf4:	bfa2b444 	.word	0xbfa2b444
 800ccf8:	52defd9a 	.word	0x52defd9a
 800ccfc:	3fadde2d 	.word	0x3fadde2d
 800cd00:	af749a6d 	.word	0xaf749a6d
 800cd04:	3fb3b0f2 	.word	0x3fb3b0f2
 800cd08:	fe231671 	.word	0xfe231671
 800cd0c:	3fbc71c6 	.word	0x3fbc71c6
 800cd10:	9998ebc4 	.word	0x9998ebc4
 800cd14:	3fc99999 	.word	0x3fc99999
 800cd18:	54442d18 	.word	0x54442d18
 800cd1c:	3ff921fb 	.word	0x3ff921fb
 800cd20:	440fffff 	.word	0x440fffff
 800cd24:	7ff00000 	.word	0x7ff00000
 800cd28:	3fdbffff 	.word	0x3fdbffff
 800cd2c:	3ff00000 	.word	0x3ff00000
 800cd30:	3ff2ffff 	.word	0x3ff2ffff
 800cd34:	40038000 	.word	0x40038000
 800cd38:	3ff80000 	.word	0x3ff80000
 800cd3c:	bff00000 	.word	0xbff00000
 800cd40:	0800f4c8 	.word	0x0800f4c8
 800cd44:	0800f4a8 	.word	0x0800f4a8

0800cd48 <fabs>:
 800cd48:	ec51 0b10 	vmov	r0, r1, d0
 800cd4c:	ee10 2a10 	vmov	r2, s0
 800cd50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd54:	ec43 2b10 	vmov	d0, r2, r3
 800cd58:	4770      	bx	lr
 800cd5a:	0000      	movs	r0, r0
 800cd5c:	0000      	movs	r0, r0
	...

0800cd60 <sin>:
 800cd60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd62:	ec53 2b10 	vmov	r2, r3, d0
 800cd66:	4828      	ldr	r0, [pc, #160]	; (800ce08 <sin+0xa8>)
 800cd68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd6c:	4281      	cmp	r1, r0
 800cd6e:	dc07      	bgt.n	800cd80 <sin+0x20>
 800cd70:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ce00 <sin+0xa0>
 800cd74:	2000      	movs	r0, #0
 800cd76:	b005      	add	sp, #20
 800cd78:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd7c:	f000 bb50 	b.w	800d420 <__kernel_sin>
 800cd80:	4822      	ldr	r0, [pc, #136]	; (800ce0c <sin+0xac>)
 800cd82:	4281      	cmp	r1, r0
 800cd84:	dd09      	ble.n	800cd9a <sin+0x3a>
 800cd86:	ee10 0a10 	vmov	r0, s0
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	f7f3 fa40 	bl	8000210 <__aeabi_dsub>
 800cd90:	ec41 0b10 	vmov	d0, r0, r1
 800cd94:	b005      	add	sp, #20
 800cd96:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd9a:	4668      	mov	r0, sp
 800cd9c:	f000 fc00 	bl	800d5a0 <__ieee754_rem_pio2>
 800cda0:	f000 0003 	and.w	r0, r0, #3
 800cda4:	2801      	cmp	r0, #1
 800cda6:	d00c      	beq.n	800cdc2 <sin+0x62>
 800cda8:	2802      	cmp	r0, #2
 800cdaa:	d011      	beq.n	800cdd0 <sin+0x70>
 800cdac:	b9f0      	cbnz	r0, 800cdec <sin+0x8c>
 800cdae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdb2:	ed9d 0b00 	vldr	d0, [sp]
 800cdb6:	2001      	movs	r0, #1
 800cdb8:	f000 fb32 	bl	800d420 <__kernel_sin>
 800cdbc:	ec51 0b10 	vmov	r0, r1, d0
 800cdc0:	e7e6      	b.n	800cd90 <sin+0x30>
 800cdc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdc6:	ed9d 0b00 	vldr	d0, [sp]
 800cdca:	f000 fa61 	bl	800d290 <__kernel_cos>
 800cdce:	e7f5      	b.n	800cdbc <sin+0x5c>
 800cdd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdd4:	ed9d 0b00 	vldr	d0, [sp]
 800cdd8:	2001      	movs	r0, #1
 800cdda:	f000 fb21 	bl	800d420 <__kernel_sin>
 800cdde:	ec53 2b10 	vmov	r2, r3, d0
 800cde2:	ee10 0a10 	vmov	r0, s0
 800cde6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cdea:	e7d1      	b.n	800cd90 <sin+0x30>
 800cdec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdf0:	ed9d 0b00 	vldr	d0, [sp]
 800cdf4:	f000 fa4c 	bl	800d290 <__kernel_cos>
 800cdf8:	e7f1      	b.n	800cdde <sin+0x7e>
 800cdfa:	bf00      	nop
 800cdfc:	f3af 8000 	nop.w
	...
 800ce08:	3fe921fb 	.word	0x3fe921fb
 800ce0c:	7fefffff 	.word	0x7fefffff

0800ce10 <expf>:
 800ce10:	b508      	push	{r3, lr}
 800ce12:	ed2d 8b02 	vpush	{d8}
 800ce16:	eef0 8a40 	vmov.f32	s17, s0
 800ce1a:	f000 fe6d 	bl	800daf8 <__ieee754_expf>
 800ce1e:	eeb0 8a40 	vmov.f32	s16, s0
 800ce22:	eeb0 0a68 	vmov.f32	s0, s17
 800ce26:	f000 f957 	bl	800d0d8 <finitef>
 800ce2a:	b160      	cbz	r0, 800ce46 <expf+0x36>
 800ce2c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ce6c <expf+0x5c>
 800ce30:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ce34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce38:	dd0a      	ble.n	800ce50 <expf+0x40>
 800ce3a:	f7ff fdb9 	bl	800c9b0 <__errno>
 800ce3e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800ce70 <expf+0x60>
 800ce42:	2322      	movs	r3, #34	; 0x22
 800ce44:	6003      	str	r3, [r0, #0]
 800ce46:	eeb0 0a48 	vmov.f32	s0, s16
 800ce4a:	ecbd 8b02 	vpop	{d8}
 800ce4e:	bd08      	pop	{r3, pc}
 800ce50:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ce74 <expf+0x64>
 800ce54:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ce58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce5c:	d5f3      	bpl.n	800ce46 <expf+0x36>
 800ce5e:	f7ff fda7 	bl	800c9b0 <__errno>
 800ce62:	2322      	movs	r3, #34	; 0x22
 800ce64:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800ce78 <expf+0x68>
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	e7ec      	b.n	800ce46 <expf+0x36>
 800ce6c:	42b17217 	.word	0x42b17217
 800ce70:	7f800000 	.word	0x7f800000
 800ce74:	c2cff1b5 	.word	0xc2cff1b5
 800ce78:	00000000 	.word	0x00000000

0800ce7c <logf>:
 800ce7c:	b508      	push	{r3, lr}
 800ce7e:	ed2d 8b02 	vpush	{d8}
 800ce82:	eeb0 8a40 	vmov.f32	s16, s0
 800ce86:	f000 ff05 	bl	800dc94 <__ieee754_logf>
 800ce8a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ce8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce92:	d60f      	bvs.n	800ceb4 <logf+0x38>
 800ce94:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ce98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9c:	dc0a      	bgt.n	800ceb4 <logf+0x38>
 800ce9e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea6:	d108      	bne.n	800ceba <logf+0x3e>
 800cea8:	f7ff fd82 	bl	800c9b0 <__errno>
 800ceac:	2322      	movs	r3, #34	; 0x22
 800ceae:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800ced0 <logf+0x54>
 800ceb2:	6003      	str	r3, [r0, #0]
 800ceb4:	ecbd 8b02 	vpop	{d8}
 800ceb8:	bd08      	pop	{r3, pc}
 800ceba:	f7ff fd79 	bl	800c9b0 <__errno>
 800cebe:	ecbd 8b02 	vpop	{d8}
 800cec2:	2321      	movs	r3, #33	; 0x21
 800cec4:	6003      	str	r3, [r0, #0]
 800cec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ceca:	4802      	ldr	r0, [pc, #8]	; (800ced4 <logf+0x58>)
 800cecc:	f000 b912 	b.w	800d0f4 <nanf>
 800ced0:	ff800000 	.word	0xff800000
 800ced4:	0800f4e8 	.word	0x0800f4e8

0800ced8 <powf>:
 800ced8:	b508      	push	{r3, lr}
 800ceda:	ed2d 8b04 	vpush	{d8-d9}
 800cede:	eeb0 8a60 	vmov.f32	s16, s1
 800cee2:	eeb0 9a40 	vmov.f32	s18, s0
 800cee6:	f000 ffc7 	bl	800de78 <__ieee754_powf>
 800ceea:	eeb4 8a48 	vcmp.f32	s16, s16
 800ceee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef2:	eef0 8a40 	vmov.f32	s17, s0
 800cef6:	d63e      	bvs.n	800cf76 <powf+0x9e>
 800cef8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf00:	d112      	bne.n	800cf28 <powf+0x50>
 800cf02:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cf06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0a:	d039      	beq.n	800cf80 <powf+0xa8>
 800cf0c:	eeb0 0a48 	vmov.f32	s0, s16
 800cf10:	f000 f8e2 	bl	800d0d8 <finitef>
 800cf14:	b378      	cbz	r0, 800cf76 <powf+0x9e>
 800cf16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cf1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1e:	d52a      	bpl.n	800cf76 <powf+0x9e>
 800cf20:	f7ff fd46 	bl	800c9b0 <__errno>
 800cf24:	2322      	movs	r3, #34	; 0x22
 800cf26:	e014      	b.n	800cf52 <powf+0x7a>
 800cf28:	f000 f8d6 	bl	800d0d8 <finitef>
 800cf2c:	b998      	cbnz	r0, 800cf56 <powf+0x7e>
 800cf2e:	eeb0 0a49 	vmov.f32	s0, s18
 800cf32:	f000 f8d1 	bl	800d0d8 <finitef>
 800cf36:	b170      	cbz	r0, 800cf56 <powf+0x7e>
 800cf38:	eeb0 0a48 	vmov.f32	s0, s16
 800cf3c:	f000 f8cc 	bl	800d0d8 <finitef>
 800cf40:	b148      	cbz	r0, 800cf56 <powf+0x7e>
 800cf42:	eef4 8a68 	vcmp.f32	s17, s17
 800cf46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4a:	d7e9      	bvc.n	800cf20 <powf+0x48>
 800cf4c:	f7ff fd30 	bl	800c9b0 <__errno>
 800cf50:	2321      	movs	r3, #33	; 0x21
 800cf52:	6003      	str	r3, [r0, #0]
 800cf54:	e00f      	b.n	800cf76 <powf+0x9e>
 800cf56:	eef5 8a40 	vcmp.f32	s17, #0.0
 800cf5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5e:	d10a      	bne.n	800cf76 <powf+0x9e>
 800cf60:	eeb0 0a49 	vmov.f32	s0, s18
 800cf64:	f000 f8b8 	bl	800d0d8 <finitef>
 800cf68:	b128      	cbz	r0, 800cf76 <powf+0x9e>
 800cf6a:	eeb0 0a48 	vmov.f32	s0, s16
 800cf6e:	f000 f8b3 	bl	800d0d8 <finitef>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d1d4      	bne.n	800cf20 <powf+0x48>
 800cf76:	eeb0 0a68 	vmov.f32	s0, s17
 800cf7a:	ecbd 8b04 	vpop	{d8-d9}
 800cf7e:	bd08      	pop	{r3, pc}
 800cf80:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800cf84:	e7f7      	b.n	800cf76 <powf+0x9e>
	...

0800cf88 <sqrtf>:
 800cf88:	b508      	push	{r3, lr}
 800cf8a:	ed2d 8b02 	vpush	{d8}
 800cf8e:	eeb0 8a40 	vmov.f32	s16, s0
 800cf92:	f000 f8b5 	bl	800d100 <__ieee754_sqrtf>
 800cf96:	eeb4 8a48 	vcmp.f32	s16, s16
 800cf9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf9e:	d60c      	bvs.n	800cfba <sqrtf+0x32>
 800cfa0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800cfc0 <sqrtf+0x38>
 800cfa4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfac:	d505      	bpl.n	800cfba <sqrtf+0x32>
 800cfae:	f7ff fcff 	bl	800c9b0 <__errno>
 800cfb2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cfb6:	2321      	movs	r3, #33	; 0x21
 800cfb8:	6003      	str	r3, [r0, #0]
 800cfba:	ecbd 8b02 	vpop	{d8}
 800cfbe:	bd08      	pop	{r3, pc}
 800cfc0:	00000000 	.word	0x00000000

0800cfc4 <cosf>:
 800cfc4:	ee10 3a10 	vmov	r3, s0
 800cfc8:	b507      	push	{r0, r1, r2, lr}
 800cfca:	4a1e      	ldr	r2, [pc, #120]	; (800d044 <cosf+0x80>)
 800cfcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	dc06      	bgt.n	800cfe2 <cosf+0x1e>
 800cfd4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800d048 <cosf+0x84>
 800cfd8:	b003      	add	sp, #12
 800cfda:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfde:	f000 bce5 	b.w	800d9ac <__kernel_cosf>
 800cfe2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cfe6:	db04      	blt.n	800cff2 <cosf+0x2e>
 800cfe8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cfec:	b003      	add	sp, #12
 800cfee:	f85d fb04 	ldr.w	pc, [sp], #4
 800cff2:	4668      	mov	r0, sp
 800cff4:	f001 fa0a 	bl	800e40c <__ieee754_rem_pio2f>
 800cff8:	f000 0003 	and.w	r0, r0, #3
 800cffc:	2801      	cmp	r0, #1
 800cffe:	d009      	beq.n	800d014 <cosf+0x50>
 800d000:	2802      	cmp	r0, #2
 800d002:	d010      	beq.n	800d026 <cosf+0x62>
 800d004:	b9b0      	cbnz	r0, 800d034 <cosf+0x70>
 800d006:	eddd 0a01 	vldr	s1, [sp, #4]
 800d00a:	ed9d 0a00 	vldr	s0, [sp]
 800d00e:	f000 fccd 	bl	800d9ac <__kernel_cosf>
 800d012:	e7eb      	b.n	800cfec <cosf+0x28>
 800d014:	eddd 0a01 	vldr	s1, [sp, #4]
 800d018:	ed9d 0a00 	vldr	s0, [sp]
 800d01c:	f000 fd24 	bl	800da68 <__kernel_sinf>
 800d020:	eeb1 0a40 	vneg.f32	s0, s0
 800d024:	e7e2      	b.n	800cfec <cosf+0x28>
 800d026:	eddd 0a01 	vldr	s1, [sp, #4]
 800d02a:	ed9d 0a00 	vldr	s0, [sp]
 800d02e:	f000 fcbd 	bl	800d9ac <__kernel_cosf>
 800d032:	e7f5      	b.n	800d020 <cosf+0x5c>
 800d034:	eddd 0a01 	vldr	s1, [sp, #4]
 800d038:	ed9d 0a00 	vldr	s0, [sp]
 800d03c:	2001      	movs	r0, #1
 800d03e:	f000 fd13 	bl	800da68 <__kernel_sinf>
 800d042:	e7d3      	b.n	800cfec <cosf+0x28>
 800d044:	3f490fd8 	.word	0x3f490fd8
 800d048:	00000000 	.word	0x00000000

0800d04c <sinf>:
 800d04c:	ee10 3a10 	vmov	r3, s0
 800d050:	b507      	push	{r0, r1, r2, lr}
 800d052:	4a1f      	ldr	r2, [pc, #124]	; (800d0d0 <sinf+0x84>)
 800d054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d058:	4293      	cmp	r3, r2
 800d05a:	dc07      	bgt.n	800d06c <sinf+0x20>
 800d05c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800d0d4 <sinf+0x88>
 800d060:	2000      	movs	r0, #0
 800d062:	b003      	add	sp, #12
 800d064:	f85d eb04 	ldr.w	lr, [sp], #4
 800d068:	f000 bcfe 	b.w	800da68 <__kernel_sinf>
 800d06c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d070:	db04      	blt.n	800d07c <sinf+0x30>
 800d072:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d076:	b003      	add	sp, #12
 800d078:	f85d fb04 	ldr.w	pc, [sp], #4
 800d07c:	4668      	mov	r0, sp
 800d07e:	f001 f9c5 	bl	800e40c <__ieee754_rem_pio2f>
 800d082:	f000 0003 	and.w	r0, r0, #3
 800d086:	2801      	cmp	r0, #1
 800d088:	d00a      	beq.n	800d0a0 <sinf+0x54>
 800d08a:	2802      	cmp	r0, #2
 800d08c:	d00f      	beq.n	800d0ae <sinf+0x62>
 800d08e:	b9c0      	cbnz	r0, 800d0c2 <sinf+0x76>
 800d090:	eddd 0a01 	vldr	s1, [sp, #4]
 800d094:	ed9d 0a00 	vldr	s0, [sp]
 800d098:	2001      	movs	r0, #1
 800d09a:	f000 fce5 	bl	800da68 <__kernel_sinf>
 800d09e:	e7ea      	b.n	800d076 <sinf+0x2a>
 800d0a0:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0a4:	ed9d 0a00 	vldr	s0, [sp]
 800d0a8:	f000 fc80 	bl	800d9ac <__kernel_cosf>
 800d0ac:	e7e3      	b.n	800d076 <sinf+0x2a>
 800d0ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0b2:	ed9d 0a00 	vldr	s0, [sp]
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	f000 fcd6 	bl	800da68 <__kernel_sinf>
 800d0bc:	eeb1 0a40 	vneg.f32	s0, s0
 800d0c0:	e7d9      	b.n	800d076 <sinf+0x2a>
 800d0c2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0c6:	ed9d 0a00 	vldr	s0, [sp]
 800d0ca:	f000 fc6f 	bl	800d9ac <__kernel_cosf>
 800d0ce:	e7f5      	b.n	800d0bc <sinf+0x70>
 800d0d0:	3f490fd8 	.word	0x3f490fd8
 800d0d4:	00000000 	.word	0x00000000

0800d0d8 <finitef>:
 800d0d8:	b082      	sub	sp, #8
 800d0da:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d0de:	9801      	ldr	r0, [sp, #4]
 800d0e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d0e4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d0e8:	bfac      	ite	ge
 800d0ea:	2000      	movge	r0, #0
 800d0ec:	2001      	movlt	r0, #1
 800d0ee:	b002      	add	sp, #8
 800d0f0:	4770      	bx	lr
	...

0800d0f4 <nanf>:
 800d0f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d0fc <nanf+0x8>
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	7fc00000 	.word	0x7fc00000

0800d100 <__ieee754_sqrtf>:
 800d100:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d104:	4770      	bx	lr
	...

0800d108 <floor>:
 800d108:	ec51 0b10 	vmov	r0, r1, d0
 800d10c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d114:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d118:	2e13      	cmp	r6, #19
 800d11a:	ee10 5a10 	vmov	r5, s0
 800d11e:	ee10 8a10 	vmov	r8, s0
 800d122:	460c      	mov	r4, r1
 800d124:	dc31      	bgt.n	800d18a <floor+0x82>
 800d126:	2e00      	cmp	r6, #0
 800d128:	da14      	bge.n	800d154 <floor+0x4c>
 800d12a:	a333      	add	r3, pc, #204	; (adr r3, 800d1f8 <floor+0xf0>)
 800d12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d130:	f7f3 f870 	bl	8000214 <__adddf3>
 800d134:	2200      	movs	r2, #0
 800d136:	2300      	movs	r3, #0
 800d138:	f7f3 fcb2 	bl	8000aa0 <__aeabi_dcmpgt>
 800d13c:	b138      	cbz	r0, 800d14e <floor+0x46>
 800d13e:	2c00      	cmp	r4, #0
 800d140:	da53      	bge.n	800d1ea <floor+0xe2>
 800d142:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d146:	4325      	orrs	r5, r4
 800d148:	d052      	beq.n	800d1f0 <floor+0xe8>
 800d14a:	4c2d      	ldr	r4, [pc, #180]	; (800d200 <floor+0xf8>)
 800d14c:	2500      	movs	r5, #0
 800d14e:	4621      	mov	r1, r4
 800d150:	4628      	mov	r0, r5
 800d152:	e024      	b.n	800d19e <floor+0x96>
 800d154:	4f2b      	ldr	r7, [pc, #172]	; (800d204 <floor+0xfc>)
 800d156:	4137      	asrs	r7, r6
 800d158:	ea01 0307 	and.w	r3, r1, r7
 800d15c:	4303      	orrs	r3, r0
 800d15e:	d01e      	beq.n	800d19e <floor+0x96>
 800d160:	a325      	add	r3, pc, #148	; (adr r3, 800d1f8 <floor+0xf0>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	f7f3 f855 	bl	8000214 <__adddf3>
 800d16a:	2200      	movs	r2, #0
 800d16c:	2300      	movs	r3, #0
 800d16e:	f7f3 fc97 	bl	8000aa0 <__aeabi_dcmpgt>
 800d172:	2800      	cmp	r0, #0
 800d174:	d0eb      	beq.n	800d14e <floor+0x46>
 800d176:	2c00      	cmp	r4, #0
 800d178:	bfbe      	ittt	lt
 800d17a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d17e:	4133      	asrlt	r3, r6
 800d180:	18e4      	addlt	r4, r4, r3
 800d182:	ea24 0407 	bic.w	r4, r4, r7
 800d186:	2500      	movs	r5, #0
 800d188:	e7e1      	b.n	800d14e <floor+0x46>
 800d18a:	2e33      	cmp	r6, #51	; 0x33
 800d18c:	dd0b      	ble.n	800d1a6 <floor+0x9e>
 800d18e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d192:	d104      	bne.n	800d19e <floor+0x96>
 800d194:	ee10 2a10 	vmov	r2, s0
 800d198:	460b      	mov	r3, r1
 800d19a:	f7f3 f83b 	bl	8000214 <__adddf3>
 800d19e:	ec41 0b10 	vmov	d0, r0, r1
 800d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d1aa:	f04f 37ff 	mov.w	r7, #4294967295
 800d1ae:	40df      	lsrs	r7, r3
 800d1b0:	4238      	tst	r0, r7
 800d1b2:	d0f4      	beq.n	800d19e <floor+0x96>
 800d1b4:	a310      	add	r3, pc, #64	; (adr r3, 800d1f8 <floor+0xf0>)
 800d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ba:	f7f3 f82b 	bl	8000214 <__adddf3>
 800d1be:	2200      	movs	r2, #0
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f7f3 fc6d 	bl	8000aa0 <__aeabi_dcmpgt>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d0c1      	beq.n	800d14e <floor+0x46>
 800d1ca:	2c00      	cmp	r4, #0
 800d1cc:	da0a      	bge.n	800d1e4 <floor+0xdc>
 800d1ce:	2e14      	cmp	r6, #20
 800d1d0:	d101      	bne.n	800d1d6 <floor+0xce>
 800d1d2:	3401      	adds	r4, #1
 800d1d4:	e006      	b.n	800d1e4 <floor+0xdc>
 800d1d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d1da:	2301      	movs	r3, #1
 800d1dc:	40b3      	lsls	r3, r6
 800d1de:	441d      	add	r5, r3
 800d1e0:	45a8      	cmp	r8, r5
 800d1e2:	d8f6      	bhi.n	800d1d2 <floor+0xca>
 800d1e4:	ea25 0507 	bic.w	r5, r5, r7
 800d1e8:	e7b1      	b.n	800d14e <floor+0x46>
 800d1ea:	2500      	movs	r5, #0
 800d1ec:	462c      	mov	r4, r5
 800d1ee:	e7ae      	b.n	800d14e <floor+0x46>
 800d1f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d1f4:	e7ab      	b.n	800d14e <floor+0x46>
 800d1f6:	bf00      	nop
 800d1f8:	8800759c 	.word	0x8800759c
 800d1fc:	7e37e43c 	.word	0x7e37e43c
 800d200:	bff00000 	.word	0xbff00000
 800d204:	000fffff 	.word	0x000fffff

0800d208 <floorf>:
 800d208:	ee10 3a10 	vmov	r3, s0
 800d20c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d210:	3a7f      	subs	r2, #127	; 0x7f
 800d212:	2a16      	cmp	r2, #22
 800d214:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d218:	dc2a      	bgt.n	800d270 <floorf+0x68>
 800d21a:	2a00      	cmp	r2, #0
 800d21c:	da11      	bge.n	800d242 <floorf+0x3a>
 800d21e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d280 <floorf+0x78>
 800d222:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d226:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22e:	dd05      	ble.n	800d23c <floorf+0x34>
 800d230:	2b00      	cmp	r3, #0
 800d232:	da23      	bge.n	800d27c <floorf+0x74>
 800d234:	4a13      	ldr	r2, [pc, #76]	; (800d284 <floorf+0x7c>)
 800d236:	2900      	cmp	r1, #0
 800d238:	bf18      	it	ne
 800d23a:	4613      	movne	r3, r2
 800d23c:	ee00 3a10 	vmov	s0, r3
 800d240:	4770      	bx	lr
 800d242:	4911      	ldr	r1, [pc, #68]	; (800d288 <floorf+0x80>)
 800d244:	4111      	asrs	r1, r2
 800d246:	420b      	tst	r3, r1
 800d248:	d0fa      	beq.n	800d240 <floorf+0x38>
 800d24a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d280 <floorf+0x78>
 800d24e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d252:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25a:	ddef      	ble.n	800d23c <floorf+0x34>
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	bfbe      	ittt	lt
 800d260:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d264:	fa40 f202 	asrlt.w	r2, r0, r2
 800d268:	189b      	addlt	r3, r3, r2
 800d26a:	ea23 0301 	bic.w	r3, r3, r1
 800d26e:	e7e5      	b.n	800d23c <floorf+0x34>
 800d270:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d274:	d3e4      	bcc.n	800d240 <floorf+0x38>
 800d276:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d27a:	4770      	bx	lr
 800d27c:	2300      	movs	r3, #0
 800d27e:	e7dd      	b.n	800d23c <floorf+0x34>
 800d280:	7149f2ca 	.word	0x7149f2ca
 800d284:	bf800000 	.word	0xbf800000
 800d288:	007fffff 	.word	0x007fffff
 800d28c:	00000000 	.word	0x00000000

0800d290 <__kernel_cos>:
 800d290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	ec57 6b10 	vmov	r6, r7, d0
 800d298:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d29c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d2a0:	ed8d 1b00 	vstr	d1, [sp]
 800d2a4:	da07      	bge.n	800d2b6 <__kernel_cos+0x26>
 800d2a6:	ee10 0a10 	vmov	r0, s0
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	f7f3 fc02 	bl	8000ab4 <__aeabi_d2iz>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	f000 8088 	beq.w	800d3c6 <__kernel_cos+0x136>
 800d2b6:	4632      	mov	r2, r6
 800d2b8:	463b      	mov	r3, r7
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	4639      	mov	r1, r7
 800d2be:	f7f3 f95f 	bl	8000580 <__aeabi_dmul>
 800d2c2:	4b51      	ldr	r3, [pc, #324]	; (800d408 <__kernel_cos+0x178>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	460d      	mov	r5, r1
 800d2ca:	f7f3 f959 	bl	8000580 <__aeabi_dmul>
 800d2ce:	a340      	add	r3, pc, #256	; (adr r3, 800d3d0 <__kernel_cos+0x140>)
 800d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d4:	4682      	mov	sl, r0
 800d2d6:	468b      	mov	fp, r1
 800d2d8:	4620      	mov	r0, r4
 800d2da:	4629      	mov	r1, r5
 800d2dc:	f7f3 f950 	bl	8000580 <__aeabi_dmul>
 800d2e0:	a33d      	add	r3, pc, #244	; (adr r3, 800d3d8 <__kernel_cos+0x148>)
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	f7f2 ff95 	bl	8000214 <__adddf3>
 800d2ea:	4622      	mov	r2, r4
 800d2ec:	462b      	mov	r3, r5
 800d2ee:	f7f3 f947 	bl	8000580 <__aeabi_dmul>
 800d2f2:	a33b      	add	r3, pc, #236	; (adr r3, 800d3e0 <__kernel_cos+0x150>)
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	f7f2 ff8a 	bl	8000210 <__aeabi_dsub>
 800d2fc:	4622      	mov	r2, r4
 800d2fe:	462b      	mov	r3, r5
 800d300:	f7f3 f93e 	bl	8000580 <__aeabi_dmul>
 800d304:	a338      	add	r3, pc, #224	; (adr r3, 800d3e8 <__kernel_cos+0x158>)
 800d306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30a:	f7f2 ff83 	bl	8000214 <__adddf3>
 800d30e:	4622      	mov	r2, r4
 800d310:	462b      	mov	r3, r5
 800d312:	f7f3 f935 	bl	8000580 <__aeabi_dmul>
 800d316:	a336      	add	r3, pc, #216	; (adr r3, 800d3f0 <__kernel_cos+0x160>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	f7f2 ff78 	bl	8000210 <__aeabi_dsub>
 800d320:	4622      	mov	r2, r4
 800d322:	462b      	mov	r3, r5
 800d324:	f7f3 f92c 	bl	8000580 <__aeabi_dmul>
 800d328:	a333      	add	r3, pc, #204	; (adr r3, 800d3f8 <__kernel_cos+0x168>)
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	f7f2 ff71 	bl	8000214 <__adddf3>
 800d332:	4622      	mov	r2, r4
 800d334:	462b      	mov	r3, r5
 800d336:	f7f3 f923 	bl	8000580 <__aeabi_dmul>
 800d33a:	4622      	mov	r2, r4
 800d33c:	462b      	mov	r3, r5
 800d33e:	f7f3 f91f 	bl	8000580 <__aeabi_dmul>
 800d342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d346:	4604      	mov	r4, r0
 800d348:	460d      	mov	r5, r1
 800d34a:	4630      	mov	r0, r6
 800d34c:	4639      	mov	r1, r7
 800d34e:	f7f3 f917 	bl	8000580 <__aeabi_dmul>
 800d352:	460b      	mov	r3, r1
 800d354:	4602      	mov	r2, r0
 800d356:	4629      	mov	r1, r5
 800d358:	4620      	mov	r0, r4
 800d35a:	f7f2 ff59 	bl	8000210 <__aeabi_dsub>
 800d35e:	4b2b      	ldr	r3, [pc, #172]	; (800d40c <__kernel_cos+0x17c>)
 800d360:	4598      	cmp	r8, r3
 800d362:	4606      	mov	r6, r0
 800d364:	460f      	mov	r7, r1
 800d366:	dc10      	bgt.n	800d38a <__kernel_cos+0xfa>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4650      	mov	r0, sl
 800d36e:	4659      	mov	r1, fp
 800d370:	f7f2 ff4e 	bl	8000210 <__aeabi_dsub>
 800d374:	460b      	mov	r3, r1
 800d376:	4926      	ldr	r1, [pc, #152]	; (800d410 <__kernel_cos+0x180>)
 800d378:	4602      	mov	r2, r0
 800d37a:	2000      	movs	r0, #0
 800d37c:	f7f2 ff48 	bl	8000210 <__aeabi_dsub>
 800d380:	ec41 0b10 	vmov	d0, r0, r1
 800d384:	b003      	add	sp, #12
 800d386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38a:	4b22      	ldr	r3, [pc, #136]	; (800d414 <__kernel_cos+0x184>)
 800d38c:	4920      	ldr	r1, [pc, #128]	; (800d410 <__kernel_cos+0x180>)
 800d38e:	4598      	cmp	r8, r3
 800d390:	bfcc      	ite	gt
 800d392:	4d21      	ldrgt	r5, [pc, #132]	; (800d418 <__kernel_cos+0x188>)
 800d394:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d398:	2400      	movs	r4, #0
 800d39a:	4622      	mov	r2, r4
 800d39c:	462b      	mov	r3, r5
 800d39e:	2000      	movs	r0, #0
 800d3a0:	f7f2 ff36 	bl	8000210 <__aeabi_dsub>
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	4680      	mov	r8, r0
 800d3a8:	4689      	mov	r9, r1
 800d3aa:	462b      	mov	r3, r5
 800d3ac:	4650      	mov	r0, sl
 800d3ae:	4659      	mov	r1, fp
 800d3b0:	f7f2 ff2e 	bl	8000210 <__aeabi_dsub>
 800d3b4:	4632      	mov	r2, r6
 800d3b6:	463b      	mov	r3, r7
 800d3b8:	f7f2 ff2a 	bl	8000210 <__aeabi_dsub>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	e7da      	b.n	800d37c <__kernel_cos+0xec>
 800d3c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d400 <__kernel_cos+0x170>
 800d3ca:	e7db      	b.n	800d384 <__kernel_cos+0xf4>
 800d3cc:	f3af 8000 	nop.w
 800d3d0:	be8838d4 	.word	0xbe8838d4
 800d3d4:	bda8fae9 	.word	0xbda8fae9
 800d3d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d3dc:	3e21ee9e 	.word	0x3e21ee9e
 800d3e0:	809c52ad 	.word	0x809c52ad
 800d3e4:	3e927e4f 	.word	0x3e927e4f
 800d3e8:	19cb1590 	.word	0x19cb1590
 800d3ec:	3efa01a0 	.word	0x3efa01a0
 800d3f0:	16c15177 	.word	0x16c15177
 800d3f4:	3f56c16c 	.word	0x3f56c16c
 800d3f8:	5555554c 	.word	0x5555554c
 800d3fc:	3fa55555 	.word	0x3fa55555
 800d400:	00000000 	.word	0x00000000
 800d404:	3ff00000 	.word	0x3ff00000
 800d408:	3fe00000 	.word	0x3fe00000
 800d40c:	3fd33332 	.word	0x3fd33332
 800d410:	3ff00000 	.word	0x3ff00000
 800d414:	3fe90000 	.word	0x3fe90000
 800d418:	3fd20000 	.word	0x3fd20000
 800d41c:	00000000 	.word	0x00000000

0800d420 <__kernel_sin>:
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	ed2d 8b04 	vpush	{d8-d9}
 800d428:	eeb0 8a41 	vmov.f32	s16, s2
 800d42c:	eef0 8a61 	vmov.f32	s17, s3
 800d430:	ec55 4b10 	vmov	r4, r5, d0
 800d434:	b083      	sub	sp, #12
 800d436:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d43a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d43e:	9001      	str	r0, [sp, #4]
 800d440:	da06      	bge.n	800d450 <__kernel_sin+0x30>
 800d442:	ee10 0a10 	vmov	r0, s0
 800d446:	4629      	mov	r1, r5
 800d448:	f7f3 fb34 	bl	8000ab4 <__aeabi_d2iz>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d051      	beq.n	800d4f4 <__kernel_sin+0xd4>
 800d450:	4622      	mov	r2, r4
 800d452:	462b      	mov	r3, r5
 800d454:	4620      	mov	r0, r4
 800d456:	4629      	mov	r1, r5
 800d458:	f7f3 f892 	bl	8000580 <__aeabi_dmul>
 800d45c:	4682      	mov	sl, r0
 800d45e:	468b      	mov	fp, r1
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	4620      	mov	r0, r4
 800d466:	4629      	mov	r1, r5
 800d468:	f7f3 f88a 	bl	8000580 <__aeabi_dmul>
 800d46c:	a341      	add	r3, pc, #260	; (adr r3, 800d574 <__kernel_sin+0x154>)
 800d46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d472:	4680      	mov	r8, r0
 800d474:	4689      	mov	r9, r1
 800d476:	4650      	mov	r0, sl
 800d478:	4659      	mov	r1, fp
 800d47a:	f7f3 f881 	bl	8000580 <__aeabi_dmul>
 800d47e:	a33f      	add	r3, pc, #252	; (adr r3, 800d57c <__kernel_sin+0x15c>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	f7f2 fec4 	bl	8000210 <__aeabi_dsub>
 800d488:	4652      	mov	r2, sl
 800d48a:	465b      	mov	r3, fp
 800d48c:	f7f3 f878 	bl	8000580 <__aeabi_dmul>
 800d490:	a33c      	add	r3, pc, #240	; (adr r3, 800d584 <__kernel_sin+0x164>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 febd 	bl	8000214 <__adddf3>
 800d49a:	4652      	mov	r2, sl
 800d49c:	465b      	mov	r3, fp
 800d49e:	f7f3 f86f 	bl	8000580 <__aeabi_dmul>
 800d4a2:	a33a      	add	r3, pc, #232	; (adr r3, 800d58c <__kernel_sin+0x16c>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f7f2 feb2 	bl	8000210 <__aeabi_dsub>
 800d4ac:	4652      	mov	r2, sl
 800d4ae:	465b      	mov	r3, fp
 800d4b0:	f7f3 f866 	bl	8000580 <__aeabi_dmul>
 800d4b4:	a337      	add	r3, pc, #220	; (adr r3, 800d594 <__kernel_sin+0x174>)
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	f7f2 feab 	bl	8000214 <__adddf3>
 800d4be:	9b01      	ldr	r3, [sp, #4]
 800d4c0:	4606      	mov	r6, r0
 800d4c2:	460f      	mov	r7, r1
 800d4c4:	b9eb      	cbnz	r3, 800d502 <__kernel_sin+0xe2>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4650      	mov	r0, sl
 800d4cc:	4659      	mov	r1, fp
 800d4ce:	f7f3 f857 	bl	8000580 <__aeabi_dmul>
 800d4d2:	a325      	add	r3, pc, #148	; (adr r3, 800d568 <__kernel_sin+0x148>)
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	f7f2 fe9a 	bl	8000210 <__aeabi_dsub>
 800d4dc:	4642      	mov	r2, r8
 800d4de:	464b      	mov	r3, r9
 800d4e0:	f7f3 f84e 	bl	8000580 <__aeabi_dmul>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	f7f2 fe92 	bl	8000214 <__adddf3>
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	460d      	mov	r5, r1
 800d4f4:	ec45 4b10 	vmov	d0, r4, r5
 800d4f8:	b003      	add	sp, #12
 800d4fa:	ecbd 8b04 	vpop	{d8-d9}
 800d4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d502:	4b1b      	ldr	r3, [pc, #108]	; (800d570 <__kernel_sin+0x150>)
 800d504:	ec51 0b18 	vmov	r0, r1, d8
 800d508:	2200      	movs	r2, #0
 800d50a:	f7f3 f839 	bl	8000580 <__aeabi_dmul>
 800d50e:	4632      	mov	r2, r6
 800d510:	ec41 0b19 	vmov	d9, r0, r1
 800d514:	463b      	mov	r3, r7
 800d516:	4640      	mov	r0, r8
 800d518:	4649      	mov	r1, r9
 800d51a:	f7f3 f831 	bl	8000580 <__aeabi_dmul>
 800d51e:	4602      	mov	r2, r0
 800d520:	460b      	mov	r3, r1
 800d522:	ec51 0b19 	vmov	r0, r1, d9
 800d526:	f7f2 fe73 	bl	8000210 <__aeabi_dsub>
 800d52a:	4652      	mov	r2, sl
 800d52c:	465b      	mov	r3, fp
 800d52e:	f7f3 f827 	bl	8000580 <__aeabi_dmul>
 800d532:	ec53 2b18 	vmov	r2, r3, d8
 800d536:	f7f2 fe6b 	bl	8000210 <__aeabi_dsub>
 800d53a:	a30b      	add	r3, pc, #44	; (adr r3, 800d568 <__kernel_sin+0x148>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	4606      	mov	r6, r0
 800d542:	460f      	mov	r7, r1
 800d544:	4640      	mov	r0, r8
 800d546:	4649      	mov	r1, r9
 800d548:	f7f3 f81a 	bl	8000580 <__aeabi_dmul>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4630      	mov	r0, r6
 800d552:	4639      	mov	r1, r7
 800d554:	f7f2 fe5e 	bl	8000214 <__adddf3>
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	4620      	mov	r0, r4
 800d55e:	4629      	mov	r1, r5
 800d560:	f7f2 fe56 	bl	8000210 <__aeabi_dsub>
 800d564:	e7c4      	b.n	800d4f0 <__kernel_sin+0xd0>
 800d566:	bf00      	nop
 800d568:	55555549 	.word	0x55555549
 800d56c:	3fc55555 	.word	0x3fc55555
 800d570:	3fe00000 	.word	0x3fe00000
 800d574:	5acfd57c 	.word	0x5acfd57c
 800d578:	3de5d93a 	.word	0x3de5d93a
 800d57c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d580:	3e5ae5e6 	.word	0x3e5ae5e6
 800d584:	57b1fe7d 	.word	0x57b1fe7d
 800d588:	3ec71de3 	.word	0x3ec71de3
 800d58c:	19c161d5 	.word	0x19c161d5
 800d590:	3f2a01a0 	.word	0x3f2a01a0
 800d594:	1110f8a6 	.word	0x1110f8a6
 800d598:	3f811111 	.word	0x3f811111
 800d59c:	00000000 	.word	0x00000000

0800d5a0 <__ieee754_rem_pio2>:
 800d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	ed2d 8b02 	vpush	{d8}
 800d5a8:	ec55 4b10 	vmov	r4, r5, d0
 800d5ac:	4bca      	ldr	r3, [pc, #808]	; (800d8d8 <__ieee754_rem_pio2+0x338>)
 800d5ae:	b08b      	sub	sp, #44	; 0x2c
 800d5b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d5b4:	4598      	cmp	r8, r3
 800d5b6:	4682      	mov	sl, r0
 800d5b8:	9502      	str	r5, [sp, #8]
 800d5ba:	dc08      	bgt.n	800d5ce <__ieee754_rem_pio2+0x2e>
 800d5bc:	2200      	movs	r2, #0
 800d5be:	2300      	movs	r3, #0
 800d5c0:	ed80 0b00 	vstr	d0, [r0]
 800d5c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d5c8:	f04f 0b00 	mov.w	fp, #0
 800d5cc:	e028      	b.n	800d620 <__ieee754_rem_pio2+0x80>
 800d5ce:	4bc3      	ldr	r3, [pc, #780]	; (800d8dc <__ieee754_rem_pio2+0x33c>)
 800d5d0:	4598      	cmp	r8, r3
 800d5d2:	dc78      	bgt.n	800d6c6 <__ieee754_rem_pio2+0x126>
 800d5d4:	9b02      	ldr	r3, [sp, #8]
 800d5d6:	4ec2      	ldr	r6, [pc, #776]	; (800d8e0 <__ieee754_rem_pio2+0x340>)
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	ee10 0a10 	vmov	r0, s0
 800d5de:	a3b0      	add	r3, pc, #704	; (adr r3, 800d8a0 <__ieee754_rem_pio2+0x300>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	dd39      	ble.n	800d65c <__ieee754_rem_pio2+0xbc>
 800d5e8:	f7f2 fe12 	bl	8000210 <__aeabi_dsub>
 800d5ec:	45b0      	cmp	r8, r6
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	460d      	mov	r5, r1
 800d5f2:	d01b      	beq.n	800d62c <__ieee754_rem_pio2+0x8c>
 800d5f4:	a3ac      	add	r3, pc, #688	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x308>)
 800d5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fa:	f7f2 fe09 	bl	8000210 <__aeabi_dsub>
 800d5fe:	4602      	mov	r2, r0
 800d600:	460b      	mov	r3, r1
 800d602:	e9ca 2300 	strd	r2, r3, [sl]
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f2 fe01 	bl	8000210 <__aeabi_dsub>
 800d60e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x308>)
 800d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d614:	f7f2 fdfc 	bl	8000210 <__aeabi_dsub>
 800d618:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d61c:	f04f 0b01 	mov.w	fp, #1
 800d620:	4658      	mov	r0, fp
 800d622:	b00b      	add	sp, #44	; 0x2c
 800d624:	ecbd 8b02 	vpop	{d8}
 800d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d8b0 <__ieee754_rem_pio2+0x310>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	f7f2 fded 	bl	8000210 <__aeabi_dsub>
 800d636:	a3a0      	add	r3, pc, #640	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x318>)
 800d638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63c:	4604      	mov	r4, r0
 800d63e:	460d      	mov	r5, r1
 800d640:	f7f2 fde6 	bl	8000210 <__aeabi_dsub>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	e9ca 2300 	strd	r2, r3, [sl]
 800d64c:	4620      	mov	r0, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	f7f2 fdde 	bl	8000210 <__aeabi_dsub>
 800d654:	a398      	add	r3, pc, #608	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x318>)
 800d656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65a:	e7db      	b.n	800d614 <__ieee754_rem_pio2+0x74>
 800d65c:	f7f2 fdda 	bl	8000214 <__adddf3>
 800d660:	45b0      	cmp	r8, r6
 800d662:	4604      	mov	r4, r0
 800d664:	460d      	mov	r5, r1
 800d666:	d016      	beq.n	800d696 <__ieee754_rem_pio2+0xf6>
 800d668:	a38f      	add	r3, pc, #572	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x308>)
 800d66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66e:	f7f2 fdd1 	bl	8000214 <__adddf3>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	e9ca 2300 	strd	r2, r3, [sl]
 800d67a:	4620      	mov	r0, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	f7f2 fdc7 	bl	8000210 <__aeabi_dsub>
 800d682:	a389      	add	r3, pc, #548	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x308>)
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	f7f2 fdc4 	bl	8000214 <__adddf3>
 800d68c:	f04f 3bff 	mov.w	fp, #4294967295
 800d690:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d694:	e7c4      	b.n	800d620 <__ieee754_rem_pio2+0x80>
 800d696:	a386      	add	r3, pc, #536	; (adr r3, 800d8b0 <__ieee754_rem_pio2+0x310>)
 800d698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69c:	f7f2 fdba 	bl	8000214 <__adddf3>
 800d6a0:	a385      	add	r3, pc, #532	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x318>)
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	460d      	mov	r5, r1
 800d6aa:	f7f2 fdb3 	bl	8000214 <__adddf3>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	e9ca 2300 	strd	r2, r3, [sl]
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	f7f2 fda9 	bl	8000210 <__aeabi_dsub>
 800d6be:	a37e      	add	r3, pc, #504	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x318>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	e7e0      	b.n	800d688 <__ieee754_rem_pio2+0xe8>
 800d6c6:	4b87      	ldr	r3, [pc, #540]	; (800d8e4 <__ieee754_rem_pio2+0x344>)
 800d6c8:	4598      	cmp	r8, r3
 800d6ca:	f300 80d8 	bgt.w	800d87e <__ieee754_rem_pio2+0x2de>
 800d6ce:	f7ff fb3b 	bl	800cd48 <fabs>
 800d6d2:	ec55 4b10 	vmov	r4, r5, d0
 800d6d6:	ee10 0a10 	vmov	r0, s0
 800d6da:	a379      	add	r3, pc, #484	; (adr r3, 800d8c0 <__ieee754_rem_pio2+0x320>)
 800d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7f2 ff4d 	bl	8000580 <__aeabi_dmul>
 800d6e6:	4b80      	ldr	r3, [pc, #512]	; (800d8e8 <__ieee754_rem_pio2+0x348>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f7f2 fd93 	bl	8000214 <__adddf3>
 800d6ee:	f7f3 f9e1 	bl	8000ab4 <__aeabi_d2iz>
 800d6f2:	4683      	mov	fp, r0
 800d6f4:	f7f2 feda 	bl	80004ac <__aeabi_i2d>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	ec43 2b18 	vmov	d8, r2, r3
 800d700:	a367      	add	r3, pc, #412	; (adr r3, 800d8a0 <__ieee754_rem_pio2+0x300>)
 800d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d706:	f7f2 ff3b 	bl	8000580 <__aeabi_dmul>
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	4620      	mov	r0, r4
 800d710:	4629      	mov	r1, r5
 800d712:	f7f2 fd7d 	bl	8000210 <__aeabi_dsub>
 800d716:	a364      	add	r3, pc, #400	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x308>)
 800d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71c:	4606      	mov	r6, r0
 800d71e:	460f      	mov	r7, r1
 800d720:	ec51 0b18 	vmov	r0, r1, d8
 800d724:	f7f2 ff2c 	bl	8000580 <__aeabi_dmul>
 800d728:	f1bb 0f1f 	cmp.w	fp, #31
 800d72c:	4604      	mov	r4, r0
 800d72e:	460d      	mov	r5, r1
 800d730:	dc0d      	bgt.n	800d74e <__ieee754_rem_pio2+0x1ae>
 800d732:	4b6e      	ldr	r3, [pc, #440]	; (800d8ec <__ieee754_rem_pio2+0x34c>)
 800d734:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d73c:	4543      	cmp	r3, r8
 800d73e:	d006      	beq.n	800d74e <__ieee754_rem_pio2+0x1ae>
 800d740:	4622      	mov	r2, r4
 800d742:	462b      	mov	r3, r5
 800d744:	4630      	mov	r0, r6
 800d746:	4639      	mov	r1, r7
 800d748:	f7f2 fd62 	bl	8000210 <__aeabi_dsub>
 800d74c:	e00e      	b.n	800d76c <__ieee754_rem_pio2+0x1cc>
 800d74e:	462b      	mov	r3, r5
 800d750:	4622      	mov	r2, r4
 800d752:	4630      	mov	r0, r6
 800d754:	4639      	mov	r1, r7
 800d756:	f7f2 fd5b 	bl	8000210 <__aeabi_dsub>
 800d75a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d75e:	9303      	str	r3, [sp, #12]
 800d760:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d764:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d768:	2b10      	cmp	r3, #16
 800d76a:	dc02      	bgt.n	800d772 <__ieee754_rem_pio2+0x1d2>
 800d76c:	e9ca 0100 	strd	r0, r1, [sl]
 800d770:	e039      	b.n	800d7e6 <__ieee754_rem_pio2+0x246>
 800d772:	a34f      	add	r3, pc, #316	; (adr r3, 800d8b0 <__ieee754_rem_pio2+0x310>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	ec51 0b18 	vmov	r0, r1, d8
 800d77c:	f7f2 ff00 	bl	8000580 <__aeabi_dmul>
 800d780:	4604      	mov	r4, r0
 800d782:	460d      	mov	r5, r1
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	4630      	mov	r0, r6
 800d78a:	4639      	mov	r1, r7
 800d78c:	f7f2 fd40 	bl	8000210 <__aeabi_dsub>
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	4680      	mov	r8, r0
 800d796:	4689      	mov	r9, r1
 800d798:	4630      	mov	r0, r6
 800d79a:	4639      	mov	r1, r7
 800d79c:	f7f2 fd38 	bl	8000210 <__aeabi_dsub>
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	462b      	mov	r3, r5
 800d7a4:	f7f2 fd34 	bl	8000210 <__aeabi_dsub>
 800d7a8:	a343      	add	r3, pc, #268	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x318>)
 800d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	460d      	mov	r5, r1
 800d7b2:	ec51 0b18 	vmov	r0, r1, d8
 800d7b6:	f7f2 fee3 	bl	8000580 <__aeabi_dmul>
 800d7ba:	4622      	mov	r2, r4
 800d7bc:	462b      	mov	r3, r5
 800d7be:	f7f2 fd27 	bl	8000210 <__aeabi_dsub>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	460d      	mov	r5, r1
 800d7ca:	4640      	mov	r0, r8
 800d7cc:	4649      	mov	r1, r9
 800d7ce:	f7f2 fd1f 	bl	8000210 <__aeabi_dsub>
 800d7d2:	9a03      	ldr	r2, [sp, #12]
 800d7d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	2b31      	cmp	r3, #49	; 0x31
 800d7dc:	dc24      	bgt.n	800d828 <__ieee754_rem_pio2+0x288>
 800d7de:	e9ca 0100 	strd	r0, r1, [sl]
 800d7e2:	4646      	mov	r6, r8
 800d7e4:	464f      	mov	r7, r9
 800d7e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	4642      	mov	r2, r8
 800d7ee:	464b      	mov	r3, r9
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	f7f2 fd0d 	bl	8000210 <__aeabi_dsub>
 800d7f6:	462b      	mov	r3, r5
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	f7f2 fd09 	bl	8000210 <__aeabi_dsub>
 800d7fe:	9b02      	ldr	r3, [sp, #8]
 800d800:	2b00      	cmp	r3, #0
 800d802:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d806:	f6bf af0b 	bge.w	800d620 <__ieee754_rem_pio2+0x80>
 800d80a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d80e:	f8ca 3004 	str.w	r3, [sl, #4]
 800d812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d816:	f8ca 8000 	str.w	r8, [sl]
 800d81a:	f8ca 0008 	str.w	r0, [sl, #8]
 800d81e:	f8ca 300c 	str.w	r3, [sl, #12]
 800d822:	f1cb 0b00 	rsb	fp, fp, #0
 800d826:	e6fb      	b.n	800d620 <__ieee754_rem_pio2+0x80>
 800d828:	a327      	add	r3, pc, #156	; (adr r3, 800d8c8 <__ieee754_rem_pio2+0x328>)
 800d82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82e:	ec51 0b18 	vmov	r0, r1, d8
 800d832:	f7f2 fea5 	bl	8000580 <__aeabi_dmul>
 800d836:	4604      	mov	r4, r0
 800d838:	460d      	mov	r5, r1
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	4640      	mov	r0, r8
 800d840:	4649      	mov	r1, r9
 800d842:	f7f2 fce5 	bl	8000210 <__aeabi_dsub>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4606      	mov	r6, r0
 800d84c:	460f      	mov	r7, r1
 800d84e:	4640      	mov	r0, r8
 800d850:	4649      	mov	r1, r9
 800d852:	f7f2 fcdd 	bl	8000210 <__aeabi_dsub>
 800d856:	4622      	mov	r2, r4
 800d858:	462b      	mov	r3, r5
 800d85a:	f7f2 fcd9 	bl	8000210 <__aeabi_dsub>
 800d85e:	a31c      	add	r3, pc, #112	; (adr r3, 800d8d0 <__ieee754_rem_pio2+0x330>)
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	4604      	mov	r4, r0
 800d866:	460d      	mov	r5, r1
 800d868:	ec51 0b18 	vmov	r0, r1, d8
 800d86c:	f7f2 fe88 	bl	8000580 <__aeabi_dmul>
 800d870:	4622      	mov	r2, r4
 800d872:	462b      	mov	r3, r5
 800d874:	f7f2 fccc 	bl	8000210 <__aeabi_dsub>
 800d878:	4604      	mov	r4, r0
 800d87a:	460d      	mov	r5, r1
 800d87c:	e760      	b.n	800d740 <__ieee754_rem_pio2+0x1a0>
 800d87e:	4b1c      	ldr	r3, [pc, #112]	; (800d8f0 <__ieee754_rem_pio2+0x350>)
 800d880:	4598      	cmp	r8, r3
 800d882:	dd37      	ble.n	800d8f4 <__ieee754_rem_pio2+0x354>
 800d884:	ee10 2a10 	vmov	r2, s0
 800d888:	462b      	mov	r3, r5
 800d88a:	4620      	mov	r0, r4
 800d88c:	4629      	mov	r1, r5
 800d88e:	f7f2 fcbf 	bl	8000210 <__aeabi_dsub>
 800d892:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d896:	e9ca 0100 	strd	r0, r1, [sl]
 800d89a:	e695      	b.n	800d5c8 <__ieee754_rem_pio2+0x28>
 800d89c:	f3af 8000 	nop.w
 800d8a0:	54400000 	.word	0x54400000
 800d8a4:	3ff921fb 	.word	0x3ff921fb
 800d8a8:	1a626331 	.word	0x1a626331
 800d8ac:	3dd0b461 	.word	0x3dd0b461
 800d8b0:	1a600000 	.word	0x1a600000
 800d8b4:	3dd0b461 	.word	0x3dd0b461
 800d8b8:	2e037073 	.word	0x2e037073
 800d8bc:	3ba3198a 	.word	0x3ba3198a
 800d8c0:	6dc9c883 	.word	0x6dc9c883
 800d8c4:	3fe45f30 	.word	0x3fe45f30
 800d8c8:	2e000000 	.word	0x2e000000
 800d8cc:	3ba3198a 	.word	0x3ba3198a
 800d8d0:	252049c1 	.word	0x252049c1
 800d8d4:	397b839a 	.word	0x397b839a
 800d8d8:	3fe921fb 	.word	0x3fe921fb
 800d8dc:	4002d97b 	.word	0x4002d97b
 800d8e0:	3ff921fb 	.word	0x3ff921fb
 800d8e4:	413921fb 	.word	0x413921fb
 800d8e8:	3fe00000 	.word	0x3fe00000
 800d8ec:	0800f4ec 	.word	0x0800f4ec
 800d8f0:	7fefffff 	.word	0x7fefffff
 800d8f4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d8f8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d8fc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d900:	4620      	mov	r0, r4
 800d902:	460d      	mov	r5, r1
 800d904:	f7f3 f8d6 	bl	8000ab4 <__aeabi_d2iz>
 800d908:	f7f2 fdd0 	bl	80004ac <__aeabi_i2d>
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	4620      	mov	r0, r4
 800d912:	4629      	mov	r1, r5
 800d914:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d918:	f7f2 fc7a 	bl	8000210 <__aeabi_dsub>
 800d91c:	4b21      	ldr	r3, [pc, #132]	; (800d9a4 <__ieee754_rem_pio2+0x404>)
 800d91e:	2200      	movs	r2, #0
 800d920:	f7f2 fe2e 	bl	8000580 <__aeabi_dmul>
 800d924:	460d      	mov	r5, r1
 800d926:	4604      	mov	r4, r0
 800d928:	f7f3 f8c4 	bl	8000ab4 <__aeabi_d2iz>
 800d92c:	f7f2 fdbe 	bl	80004ac <__aeabi_i2d>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	4620      	mov	r0, r4
 800d936:	4629      	mov	r1, r5
 800d938:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d93c:	f7f2 fc68 	bl	8000210 <__aeabi_dsub>
 800d940:	4b18      	ldr	r3, [pc, #96]	; (800d9a4 <__ieee754_rem_pio2+0x404>)
 800d942:	2200      	movs	r2, #0
 800d944:	f7f2 fe1c 	bl	8000580 <__aeabi_dmul>
 800d948:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d94c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d950:	2703      	movs	r7, #3
 800d952:	2400      	movs	r4, #0
 800d954:	2500      	movs	r5, #0
 800d956:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800d95a:	4622      	mov	r2, r4
 800d95c:	462b      	mov	r3, r5
 800d95e:	46b9      	mov	r9, r7
 800d960:	3f01      	subs	r7, #1
 800d962:	f7f3 f875 	bl	8000a50 <__aeabi_dcmpeq>
 800d966:	2800      	cmp	r0, #0
 800d968:	d1f5      	bne.n	800d956 <__ieee754_rem_pio2+0x3b6>
 800d96a:	4b0f      	ldr	r3, [pc, #60]	; (800d9a8 <__ieee754_rem_pio2+0x408>)
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	2302      	movs	r3, #2
 800d970:	9300      	str	r3, [sp, #0]
 800d972:	4632      	mov	r2, r6
 800d974:	464b      	mov	r3, r9
 800d976:	4651      	mov	r1, sl
 800d978:	a804      	add	r0, sp, #16
 800d97a:	f000 ff05 	bl	800e788 <__kernel_rem_pio2>
 800d97e:	9b02      	ldr	r3, [sp, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	4683      	mov	fp, r0
 800d984:	f6bf ae4c 	bge.w	800d620 <__ieee754_rem_pio2+0x80>
 800d988:	e9da 2100 	ldrd	r2, r1, [sl]
 800d98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d990:	e9ca 2300 	strd	r2, r3, [sl]
 800d994:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d99c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d9a0:	e73f      	b.n	800d822 <__ieee754_rem_pio2+0x282>
 800d9a2:	bf00      	nop
 800d9a4:	41700000 	.word	0x41700000
 800d9a8:	0800f56c 	.word	0x0800f56c

0800d9ac <__kernel_cosf>:
 800d9ac:	ee10 3a10 	vmov	r3, s0
 800d9b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d9b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9bc:	da05      	bge.n	800d9ca <__kernel_cosf+0x1e>
 800d9be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d9c2:	ee17 2a90 	vmov	r2, s15
 800d9c6:	2a00      	cmp	r2, #0
 800d9c8:	d03b      	beq.n	800da42 <__kernel_cosf+0x96>
 800d9ca:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d9ce:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800da48 <__kernel_cosf+0x9c>
 800d9d2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800da4c <__kernel_cosf+0xa0>
 800d9d6:	4a1e      	ldr	r2, [pc, #120]	; (800da50 <__kernel_cosf+0xa4>)
 800d9d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800da54 <__kernel_cosf+0xa8>
 800d9e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9e6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800da58 <__kernel_cosf+0xac>
 800d9ea:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d9ee:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800da5c <__kernel_cosf+0xb0>
 800d9f2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9f6:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800da60 <__kernel_cosf+0xb4>
 800d9fa:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d9fe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800da02:	ee26 6a07 	vmul.f32	s12, s12, s14
 800da06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800da0a:	eee7 0a06 	vfma.f32	s1, s14, s12
 800da0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da12:	dc04      	bgt.n	800da1e <__kernel_cosf+0x72>
 800da14:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800da18:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800da1c:	4770      	bx	lr
 800da1e:	4a11      	ldr	r2, [pc, #68]	; (800da64 <__kernel_cosf+0xb8>)
 800da20:	4293      	cmp	r3, r2
 800da22:	bfda      	itte	le
 800da24:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800da28:	ee07 3a10 	vmovle	s14, r3
 800da2c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800da30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da34:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800da38:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800da3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800da40:	4770      	bx	lr
 800da42:	eeb0 0a66 	vmov.f32	s0, s13
 800da46:	4770      	bx	lr
 800da48:	ad47d74e 	.word	0xad47d74e
 800da4c:	310f74f6 	.word	0x310f74f6
 800da50:	3e999999 	.word	0x3e999999
 800da54:	b493f27c 	.word	0xb493f27c
 800da58:	37d00d01 	.word	0x37d00d01
 800da5c:	bab60b61 	.word	0xbab60b61
 800da60:	3d2aaaab 	.word	0x3d2aaaab
 800da64:	3f480000 	.word	0x3f480000

0800da68 <__kernel_sinf>:
 800da68:	ee10 3a10 	vmov	r3, s0
 800da6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800da74:	da04      	bge.n	800da80 <__kernel_sinf+0x18>
 800da76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800da7a:	ee17 3a90 	vmov	r3, s15
 800da7e:	b35b      	cbz	r3, 800dad8 <__kernel_sinf+0x70>
 800da80:	ee20 7a00 	vmul.f32	s14, s0, s0
 800da84:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dadc <__kernel_sinf+0x74>
 800da88:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800dae0 <__kernel_sinf+0x78>
 800da8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800da90:	eddf 7a14 	vldr	s15, [pc, #80]	; 800dae4 <__kernel_sinf+0x7c>
 800da94:	eee6 7a07 	vfma.f32	s15, s12, s14
 800da98:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800dae8 <__kernel_sinf+0x80>
 800da9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800daa0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800daec <__kernel_sinf+0x84>
 800daa4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800daa8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800daac:	b930      	cbnz	r0, 800dabc <__kernel_sinf+0x54>
 800daae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800daf0 <__kernel_sinf+0x88>
 800dab2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dab6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800daba:	4770      	bx	lr
 800dabc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dac0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dac4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dac8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dacc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800daf4 <__kernel_sinf+0x8c>
 800dad0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dad4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	2f2ec9d3 	.word	0x2f2ec9d3
 800dae0:	b2d72f34 	.word	0xb2d72f34
 800dae4:	3638ef1b 	.word	0x3638ef1b
 800dae8:	b9500d01 	.word	0xb9500d01
 800daec:	3c088889 	.word	0x3c088889
 800daf0:	be2aaaab 	.word	0xbe2aaaab
 800daf4:	3e2aaaab 	.word	0x3e2aaaab

0800daf8 <__ieee754_expf>:
 800daf8:	ee10 2a10 	vmov	r2, s0
 800dafc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800db00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800db04:	d902      	bls.n	800db0c <__ieee754_expf+0x14>
 800db06:	ee30 0a00 	vadd.f32	s0, s0, s0
 800db0a:	4770      	bx	lr
 800db0c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800db10:	d106      	bne.n	800db20 <__ieee754_expf+0x28>
 800db12:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800dc4c <__ieee754_expf+0x154>
 800db16:	2900      	cmp	r1, #0
 800db18:	bf18      	it	ne
 800db1a:	eeb0 0a67 	vmovne.f32	s0, s15
 800db1e:	4770      	bx	lr
 800db20:	484b      	ldr	r0, [pc, #300]	; (800dc50 <__ieee754_expf+0x158>)
 800db22:	4282      	cmp	r2, r0
 800db24:	dd02      	ble.n	800db2c <__ieee754_expf+0x34>
 800db26:	2000      	movs	r0, #0
 800db28:	f000 be26 	b.w	800e778 <__math_oflowf>
 800db2c:	2a00      	cmp	r2, #0
 800db2e:	da05      	bge.n	800db3c <__ieee754_expf+0x44>
 800db30:	4a48      	ldr	r2, [pc, #288]	; (800dc54 <__ieee754_expf+0x15c>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d902      	bls.n	800db3c <__ieee754_expf+0x44>
 800db36:	2000      	movs	r0, #0
 800db38:	f000 be18 	b.w	800e76c <__math_uflowf>
 800db3c:	4a46      	ldr	r2, [pc, #280]	; (800dc58 <__ieee754_expf+0x160>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800db44:	d952      	bls.n	800dbec <__ieee754_expf+0xf4>
 800db46:	4a45      	ldr	r2, [pc, #276]	; (800dc5c <__ieee754_expf+0x164>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800db4e:	d834      	bhi.n	800dbba <__ieee754_expf+0xc2>
 800db50:	4b43      	ldr	r3, [pc, #268]	; (800dc60 <__ieee754_expf+0x168>)
 800db52:	4413      	add	r3, r2
 800db54:	ed93 7a00 	vldr	s14, [r3]
 800db58:	4b42      	ldr	r3, [pc, #264]	; (800dc64 <__ieee754_expf+0x16c>)
 800db5a:	4413      	add	r3, r2
 800db5c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800db60:	f1c1 0201 	rsb	r2, r1, #1
 800db64:	edd3 7a00 	vldr	s15, [r3]
 800db68:	1a52      	subs	r2, r2, r1
 800db6a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800db6e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800db72:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800dc68 <__ieee754_expf+0x170>
 800db76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dc6c <__ieee754_expf+0x174>
 800db7a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800db7e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800dc70 <__ieee754_expf+0x178>
 800db82:	eea6 5a86 	vfma.f32	s10, s13, s12
 800db86:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dc74 <__ieee754_expf+0x17c>
 800db8a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800db8e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800dc78 <__ieee754_expf+0x180>
 800db92:	eea6 5a86 	vfma.f32	s10, s13, s12
 800db96:	eef0 6a40 	vmov.f32	s13, s0
 800db9a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800db9e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800dba2:	ee20 5a26 	vmul.f32	s10, s0, s13
 800dba6:	bb92      	cbnz	r2, 800dc0e <__ieee754_expf+0x116>
 800dba8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800dbac:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800dbb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dbb4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800dbb8:	4770      	bx	lr
 800dbba:	4b30      	ldr	r3, [pc, #192]	; (800dc7c <__ieee754_expf+0x184>)
 800dbbc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dc80 <__ieee754_expf+0x188>
 800dbc0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800dc84 <__ieee754_expf+0x18c>
 800dbc4:	4413      	add	r3, r2
 800dbc6:	edd3 7a00 	vldr	s15, [r3]
 800dbca:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dbce:	eeb0 7a40 	vmov.f32	s14, s0
 800dbd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbd6:	ee17 2a90 	vmov	r2, s15
 800dbda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbde:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800dbe2:	eddf 6a29 	vldr	s13, [pc, #164]	; 800dc88 <__ieee754_expf+0x190>
 800dbe6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbea:	e7be      	b.n	800db6a <__ieee754_expf+0x72>
 800dbec:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800dbf0:	d20b      	bcs.n	800dc0a <__ieee754_expf+0x112>
 800dbf2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800dc8c <__ieee754_expf+0x194>
 800dbf6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800dbfa:	eef4 6ae5 	vcmpe.f32	s13, s11
 800dbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc02:	dd02      	ble.n	800dc0a <__ieee754_expf+0x112>
 800dc04:	ee30 0a25 	vadd.f32	s0, s0, s11
 800dc08:	4770      	bx	lr
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	e7af      	b.n	800db6e <__ieee754_expf+0x76>
 800dc0e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800dc12:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800dc16:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800dc1a:	bfb8      	it	lt
 800dc1c:	3264      	addlt	r2, #100	; 0x64
 800dc1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dc22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc26:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800dc2a:	ee17 3a90 	vmov	r3, s15
 800dc2e:	bfab      	itete	ge
 800dc30:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800dc34:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800dc38:	ee00 3a10 	vmovge	s0, r3
 800dc3c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800dc90 <__ieee754_expf+0x198>
 800dc40:	bfbc      	itt	lt
 800dc42:	ee00 3a10 	vmovlt	s0, r3
 800dc46:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800dc4a:	4770      	bx	lr
 800dc4c:	00000000 	.word	0x00000000
 800dc50:	42b17217 	.word	0x42b17217
 800dc54:	42cff1b5 	.word	0x42cff1b5
 800dc58:	3eb17218 	.word	0x3eb17218
 800dc5c:	3f851591 	.word	0x3f851591
 800dc60:	0800f67c 	.word	0x0800f67c
 800dc64:	0800f684 	.word	0x0800f684
 800dc68:	3331bb4c 	.word	0x3331bb4c
 800dc6c:	b5ddea0e 	.word	0xb5ddea0e
 800dc70:	388ab355 	.word	0x388ab355
 800dc74:	bb360b61 	.word	0xbb360b61
 800dc78:	3e2aaaab 	.word	0x3e2aaaab
 800dc7c:	0800f674 	.word	0x0800f674
 800dc80:	3fb8aa3b 	.word	0x3fb8aa3b
 800dc84:	3f317180 	.word	0x3f317180
 800dc88:	3717f7d1 	.word	0x3717f7d1
 800dc8c:	7149f2ca 	.word	0x7149f2ca
 800dc90:	0d800000 	.word	0x0d800000

0800dc94 <__ieee754_logf>:
 800dc94:	ee10 3a10 	vmov	r3, s0
 800dc98:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800dc9c:	d106      	bne.n	800dcac <__ieee754_logf+0x18>
 800dc9e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800de38 <__ieee754_logf+0x1a4>
 800dca2:	eddf 7a66 	vldr	s15, [pc, #408]	; 800de3c <__ieee754_logf+0x1a8>
 800dca6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800dcaa:	4770      	bx	lr
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	da02      	bge.n	800dcb6 <__ieee754_logf+0x22>
 800dcb0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800dcb4:	e7f5      	b.n	800dca2 <__ieee754_logf+0xe>
 800dcb6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dcba:	db02      	blt.n	800dcc2 <__ieee754_logf+0x2e>
 800dcbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dcc0:	4770      	bx	lr
 800dcc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dcc6:	bfb8      	it	lt
 800dcc8:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 800de40 <__ieee754_logf+0x1ac>
 800dccc:	485d      	ldr	r0, [pc, #372]	; (800de44 <__ieee754_logf+0x1b0>)
 800dcce:	bfbe      	ittt	lt
 800dcd0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800dcd4:	f06f 0118 	mvnlt.w	r1, #24
 800dcd8:	ee17 3a90 	vmovlt	r3, s15
 800dcdc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800dce0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dce4:	4418      	add	r0, r3
 800dce6:	bfa8      	it	ge
 800dce8:	2100      	movge	r1, #0
 800dcea:	3a7f      	subs	r2, #127	; 0x7f
 800dcec:	440a      	add	r2, r1
 800dcee:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800dcf2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800dcf6:	4319      	orrs	r1, r3
 800dcf8:	ee00 1a10 	vmov	s0, r1
 800dcfc:	4952      	ldr	r1, [pc, #328]	; (800de48 <__ieee754_logf+0x1b4>)
 800dcfe:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800dd02:	f103 000f 	add.w	r0, r3, #15
 800dd06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dd0a:	4001      	ands	r1, r0
 800dd0c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dd10:	bb89      	cbnz	r1, 800dd76 <__ieee754_logf+0xe2>
 800dd12:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1a:	d10f      	bne.n	800dd3c <__ieee754_logf+0xa8>
 800dd1c:	2a00      	cmp	r2, #0
 800dd1e:	f000 8087 	beq.w	800de30 <__ieee754_logf+0x19c>
 800dd22:	ee07 2a90 	vmov	s15, r2
 800dd26:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800de4c <__ieee754_logf+0x1b8>
 800dd2a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800de50 <__ieee754_logf+0x1bc>
 800dd2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd32:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dd36:	eea7 0a87 	vfma.f32	s0, s15, s14
 800dd3a:	4770      	bx	lr
 800dd3c:	eddf 6a45 	vldr	s13, [pc, #276]	; 800de54 <__ieee754_logf+0x1c0>
 800dd40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dd44:	eee0 7a66 	vfms.f32	s15, s0, s13
 800dd48:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dd4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd50:	b912      	cbnz	r2, 800dd58 <__ieee754_logf+0xc4>
 800dd52:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dd56:	4770      	bx	lr
 800dd58:	ee07 2a90 	vmov	s15, r2
 800dd5c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800de4c <__ieee754_logf+0x1b8>
 800dd60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd64:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800dd68:	ee37 0a40 	vsub.f32	s0, s14, s0
 800dd6c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800de50 <__ieee754_logf+0x1bc>
 800dd70:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800dd74:	4770      	bx	lr
 800dd76:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800dd7a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800dd7e:	eddf 5a36 	vldr	s11, [pc, #216]	; 800de58 <__ieee754_logf+0x1c4>
 800dd82:	eddf 4a36 	vldr	s9, [pc, #216]	; 800de5c <__ieee754_logf+0x1c8>
 800dd86:	4936      	ldr	r1, [pc, #216]	; (800de60 <__ieee754_logf+0x1cc>)
 800dd88:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800dd8c:	4419      	add	r1, r3
 800dd8e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800dd92:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800dd96:	430b      	orrs	r3, r1
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	ee07 2a90 	vmov	s15, r2
 800dd9e:	ee26 5a06 	vmul.f32	s10, s12, s12
 800dda2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dda6:	ee25 7a05 	vmul.f32	s14, s10, s10
 800ddaa:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800de64 <__ieee754_logf+0x1d0>
 800ddae:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ddb2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800de68 <__ieee754_logf+0x1d4>
 800ddb6:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ddba:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800de6c <__ieee754_logf+0x1d8>
 800ddbe:	eee7 7a24 	vfma.f32	s15, s14, s9
 800ddc2:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800de70 <__ieee754_logf+0x1dc>
 800ddc6:	eee7 4a87 	vfma.f32	s9, s15, s14
 800ddca:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800de74 <__ieee754_logf+0x1e0>
 800ddce:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ddd2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ddd6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800ddda:	dd1a      	ble.n	800de12 <__ieee754_logf+0x17e>
 800dddc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dde0:	ee20 7a07 	vmul.f32	s14, s0, s14
 800dde4:	ee27 7a00 	vmul.f32	s14, s14, s0
 800dde8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ddec:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ddf0:	b912      	cbnz	r2, 800ddf8 <__ieee754_logf+0x164>
 800ddf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ddf6:	e7ac      	b.n	800dd52 <__ieee754_logf+0xbe>
 800ddf8:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800de4c <__ieee754_logf+0x1b8>
 800ddfc:	eee6 7a86 	vfma.f32	s15, s13, s12
 800de00:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de04:	ee37 0a40 	vsub.f32	s0, s14, s0
 800de08:	eddf 7a11 	vldr	s15, [pc, #68]	; 800de50 <__ieee754_logf+0x1bc>
 800de0c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800de10:	4770      	bx	lr
 800de12:	ee70 7a67 	vsub.f32	s15, s0, s15
 800de16:	ee67 7a86 	vmul.f32	s15, s15, s12
 800de1a:	b912      	cbnz	r2, 800de22 <__ieee754_logf+0x18e>
 800de1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800de20:	4770      	bx	lr
 800de22:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800de4c <__ieee754_logf+0x1b8>
 800de26:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800de2a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800de2e:	e7eb      	b.n	800de08 <__ieee754_logf+0x174>
 800de30:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800de3c <__ieee754_logf+0x1a8>
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	cc000000 	.word	0xcc000000
 800de3c:	00000000 	.word	0x00000000
 800de40:	4c000000 	.word	0x4c000000
 800de44:	004afb20 	.word	0x004afb20
 800de48:	007ffff0 	.word	0x007ffff0
 800de4c:	3717f7d1 	.word	0x3717f7d1
 800de50:	3f317180 	.word	0x3f317180
 800de54:	3eaaaaab 	.word	0x3eaaaaab
 800de58:	3e1cd04f 	.word	0x3e1cd04f
 800de5c:	3e178897 	.word	0x3e178897
 800de60:	ffcf5c30 	.word	0xffcf5c30
 800de64:	3e638e29 	.word	0x3e638e29
 800de68:	3ecccccd 	.word	0x3ecccccd
 800de6c:	3e3a3325 	.word	0x3e3a3325
 800de70:	3e924925 	.word	0x3e924925
 800de74:	3f2aaaab 	.word	0x3f2aaaab

0800de78 <__ieee754_powf>:
 800de78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7c:	ee10 4a90 	vmov	r4, s1
 800de80:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800de84:	ed2d 8b02 	vpush	{d8}
 800de88:	ee10 7a10 	vmov	r7, s0
 800de8c:	eeb0 8a40 	vmov.f32	s16, s0
 800de90:	eef0 8a60 	vmov.f32	s17, s1
 800de94:	d10c      	bne.n	800deb0 <__ieee754_powf+0x38>
 800de96:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800de9a:	007f      	lsls	r7, r7, #1
 800de9c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800dea0:	f240 8292 	bls.w	800e3c8 <__ieee754_powf+0x550>
 800dea4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800dea8:	ecbd 8b02 	vpop	{d8}
 800deac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800deb4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800deb8:	dcf4      	bgt.n	800dea4 <__ieee754_powf+0x2c>
 800deba:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800debe:	dd08      	ble.n	800ded2 <__ieee754_powf+0x5a>
 800dec0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800dec4:	d1ee      	bne.n	800dea4 <__ieee754_powf+0x2c>
 800dec6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800deca:	0064      	lsls	r4, r4, #1
 800decc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800ded0:	e7e6      	b.n	800dea0 <__ieee754_powf+0x28>
 800ded2:	2f00      	cmp	r7, #0
 800ded4:	da20      	bge.n	800df18 <__ieee754_powf+0xa0>
 800ded6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800deda:	da2d      	bge.n	800df38 <__ieee754_powf+0xc0>
 800dedc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800dee0:	f2c0 827b 	blt.w	800e3da <__ieee754_powf+0x562>
 800dee4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800dee8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800deec:	fa48 f603 	asr.w	r6, r8, r3
 800def0:	fa06 f303 	lsl.w	r3, r6, r3
 800def4:	4543      	cmp	r3, r8
 800def6:	f040 8270 	bne.w	800e3da <__ieee754_powf+0x562>
 800defa:	f006 0601 	and.w	r6, r6, #1
 800defe:	f1c6 0602 	rsb	r6, r6, #2
 800df02:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800df06:	d11f      	bne.n	800df48 <__ieee754_powf+0xd0>
 800df08:	2c00      	cmp	r4, #0
 800df0a:	f280 8263 	bge.w	800e3d4 <__ieee754_powf+0x55c>
 800df0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df12:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800df16:	e7c7      	b.n	800dea8 <__ieee754_powf+0x30>
 800df18:	2600      	movs	r6, #0
 800df1a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800df1e:	d1f0      	bne.n	800df02 <__ieee754_powf+0x8a>
 800df20:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800df24:	f000 8250 	beq.w	800e3c8 <__ieee754_powf+0x550>
 800df28:	dd08      	ble.n	800df3c <__ieee754_powf+0xc4>
 800df2a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e230 <__ieee754_powf+0x3b8>
 800df2e:	2c00      	cmp	r4, #0
 800df30:	bfa8      	it	ge
 800df32:	eeb0 0a68 	vmovge.f32	s0, s17
 800df36:	e7b7      	b.n	800dea8 <__ieee754_powf+0x30>
 800df38:	2602      	movs	r6, #2
 800df3a:	e7ee      	b.n	800df1a <__ieee754_powf+0xa2>
 800df3c:	2c00      	cmp	r4, #0
 800df3e:	f280 8246 	bge.w	800e3ce <__ieee754_powf+0x556>
 800df42:	eeb1 0a68 	vneg.f32	s0, s17
 800df46:	e7af      	b.n	800dea8 <__ieee754_powf+0x30>
 800df48:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800df4c:	d102      	bne.n	800df54 <__ieee754_powf+0xdc>
 800df4e:	ee28 0a08 	vmul.f32	s0, s16, s16
 800df52:	e7a9      	b.n	800dea8 <__ieee754_powf+0x30>
 800df54:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800df58:	eeb0 0a48 	vmov.f32	s0, s16
 800df5c:	d107      	bne.n	800df6e <__ieee754_powf+0xf6>
 800df5e:	2f00      	cmp	r7, #0
 800df60:	db05      	blt.n	800df6e <__ieee754_powf+0xf6>
 800df62:	ecbd 8b02 	vpop	{d8}
 800df66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df6a:	f7ff b8c9 	b.w	800d100 <__ieee754_sqrtf>
 800df6e:	f000 fb79 	bl	800e664 <fabsf>
 800df72:	b125      	cbz	r5, 800df7e <__ieee754_powf+0x106>
 800df74:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800df78:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800df7c:	d115      	bne.n	800dfaa <__ieee754_powf+0x132>
 800df7e:	2c00      	cmp	r4, #0
 800df80:	bfbc      	itt	lt
 800df82:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800df86:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800df8a:	2f00      	cmp	r7, #0
 800df8c:	da8c      	bge.n	800dea8 <__ieee754_powf+0x30>
 800df8e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800df92:	4335      	orrs	r5, r6
 800df94:	d104      	bne.n	800dfa0 <__ieee754_powf+0x128>
 800df96:	ee70 7a40 	vsub.f32	s15, s0, s0
 800df9a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800df9e:	e783      	b.n	800dea8 <__ieee754_powf+0x30>
 800dfa0:	2e01      	cmp	r6, #1
 800dfa2:	d181      	bne.n	800dea8 <__ieee754_powf+0x30>
 800dfa4:	eeb1 0a40 	vneg.f32	s0, s0
 800dfa8:	e77e      	b.n	800dea8 <__ieee754_powf+0x30>
 800dfaa:	0ff8      	lsrs	r0, r7, #31
 800dfac:	3801      	subs	r0, #1
 800dfae:	ea56 0300 	orrs.w	r3, r6, r0
 800dfb2:	d104      	bne.n	800dfbe <__ieee754_powf+0x146>
 800dfb4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800dfb8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800dfbc:	e774      	b.n	800dea8 <__ieee754_powf+0x30>
 800dfbe:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800dfc2:	dd73      	ble.n	800e0ac <__ieee754_powf+0x234>
 800dfc4:	4b9b      	ldr	r3, [pc, #620]	; (800e234 <__ieee754_powf+0x3bc>)
 800dfc6:	429d      	cmp	r5, r3
 800dfc8:	dc08      	bgt.n	800dfdc <__ieee754_powf+0x164>
 800dfca:	2c00      	cmp	r4, #0
 800dfcc:	da0b      	bge.n	800dfe6 <__ieee754_powf+0x16e>
 800dfce:	2000      	movs	r0, #0
 800dfd0:	ecbd 8b02 	vpop	{d8}
 800dfd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd8:	f000 bbce 	b.w	800e778 <__math_oflowf>
 800dfdc:	4b96      	ldr	r3, [pc, #600]	; (800e238 <__ieee754_powf+0x3c0>)
 800dfde:	429d      	cmp	r5, r3
 800dfe0:	dd08      	ble.n	800dff4 <__ieee754_powf+0x17c>
 800dfe2:	2c00      	cmp	r4, #0
 800dfe4:	dcf3      	bgt.n	800dfce <__ieee754_powf+0x156>
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	ecbd 8b02 	vpop	{d8}
 800dfec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dff0:	f000 bbbc 	b.w	800e76c <__math_uflowf>
 800dff4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dff8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dffc:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800e23c <__ieee754_powf+0x3c4>
 800e000:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e004:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e008:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e00c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e010:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e014:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e018:	eddf 7a89 	vldr	s15, [pc, #548]	; 800e240 <__ieee754_powf+0x3c8>
 800e01c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e020:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800e244 <__ieee754_powf+0x3cc>
 800e024:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e028:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800e248 <__ieee754_powf+0x3d0>
 800e02c:	eef0 6a67 	vmov.f32	s13, s15
 800e030:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e034:	ee16 3a90 	vmov	r3, s13
 800e038:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e03c:	f023 030f 	bic.w	r3, r3, #15
 800e040:	ee06 3a90 	vmov	s13, r3
 800e044:	eee0 6a47 	vfms.f32	s13, s0, s14
 800e048:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e04c:	3e01      	subs	r6, #1
 800e04e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800e052:	4306      	orrs	r6, r0
 800e054:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e058:	f024 040f 	bic.w	r4, r4, #15
 800e05c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e060:	bf08      	it	eq
 800e062:	eeb0 8a47 	vmoveq.f32	s16, s14
 800e066:	ee07 4a10 	vmov	s14, r4
 800e06a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e06e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e072:	ee07 3a90 	vmov	s15, r3
 800e076:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e07a:	ee07 4a10 	vmov	s14, r4
 800e07e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e082:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e086:	ee17 1a10 	vmov	r1, s14
 800e08a:	2900      	cmp	r1, #0
 800e08c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e090:	f340 817c 	ble.w	800e38c <__ieee754_powf+0x514>
 800e094:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e098:	f340 80f8 	ble.w	800e28c <__ieee754_powf+0x414>
 800e09c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a4:	bf4c      	ite	mi
 800e0a6:	2001      	movmi	r0, #1
 800e0a8:	2000      	movpl	r0, #0
 800e0aa:	e791      	b.n	800dfd0 <__ieee754_powf+0x158>
 800e0ac:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800e0b0:	bf01      	itttt	eq
 800e0b2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800e24c <__ieee754_powf+0x3d4>
 800e0b6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e0ba:	f06f 0317 	mvneq.w	r3, #23
 800e0be:	ee17 5a90 	vmoveq	r5, s15
 800e0c2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800e0c6:	bf18      	it	ne
 800e0c8:	2300      	movne	r3, #0
 800e0ca:	3a7f      	subs	r2, #127	; 0x7f
 800e0cc:	441a      	add	r2, r3
 800e0ce:	4b60      	ldr	r3, [pc, #384]	; (800e250 <__ieee754_powf+0x3d8>)
 800e0d0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800e0d4:	429d      	cmp	r5, r3
 800e0d6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800e0da:	dd06      	ble.n	800e0ea <__ieee754_powf+0x272>
 800e0dc:	4b5d      	ldr	r3, [pc, #372]	; (800e254 <__ieee754_powf+0x3dc>)
 800e0de:	429d      	cmp	r5, r3
 800e0e0:	f340 80a4 	ble.w	800e22c <__ieee754_powf+0x3b4>
 800e0e4:	3201      	adds	r2, #1
 800e0e6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e0ea:	2500      	movs	r5, #0
 800e0ec:	4b5a      	ldr	r3, [pc, #360]	; (800e258 <__ieee754_powf+0x3e0>)
 800e0ee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800e0f2:	ee07 1a10 	vmov	s14, r1
 800e0f6:	edd3 5a00 	vldr	s11, [r3]
 800e0fa:	4b58      	ldr	r3, [pc, #352]	; (800e25c <__ieee754_powf+0x3e4>)
 800e0fc:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e104:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e108:	1049      	asrs	r1, r1, #1
 800e10a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e10e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e112:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800e116:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e11a:	ee07 1a90 	vmov	s15, r1
 800e11e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e122:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e126:	ee15 7a10 	vmov	r7, s10
 800e12a:	401f      	ands	r7, r3
 800e12c:	ee06 7a90 	vmov	s13, r7
 800e130:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e134:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e138:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e13c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e140:	eddf 5a47 	vldr	s11, [pc, #284]	; 800e260 <__ieee754_powf+0x3e8>
 800e144:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e264 <__ieee754_powf+0x3ec>
 800e148:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e14c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e268 <__ieee754_powf+0x3f0>
 800e150:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e154:	eddf 5a39 	vldr	s11, [pc, #228]	; 800e23c <__ieee754_powf+0x3c4>
 800e158:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e15c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800e26c <__ieee754_powf+0x3f4>
 800e160:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e164:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e270 <__ieee754_powf+0x3f8>
 800e168:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e16c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e170:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e174:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e178:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e17c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800e180:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e184:	eef0 5a67 	vmov.f32	s11, s15
 800e188:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e18c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e190:	ee15 1a90 	vmov	r1, s11
 800e194:	4019      	ands	r1, r3
 800e196:	ee05 1a90 	vmov	s11, r1
 800e19a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e19e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e1a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1a6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e1aa:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e1ae:	eeb0 6a67 	vmov.f32	s12, s15
 800e1b2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e1b6:	ee16 1a10 	vmov	r1, s12
 800e1ba:	4019      	ands	r1, r3
 800e1bc:	ee07 1a10 	vmov	s14, r1
 800e1c0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e1c4:	ee06 1a10 	vmov	s12, r1
 800e1c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1cc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e274 <__ieee754_powf+0x3fc>
 800e1d0:	4929      	ldr	r1, [pc, #164]	; (800e278 <__ieee754_powf+0x400>)
 800e1d2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800e27c <__ieee754_powf+0x404>
 800e1d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1da:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e280 <__ieee754_powf+0x408>
 800e1de:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e1e2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800e1e6:	ed91 7a00 	vldr	s14, [r1]
 800e1ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1ee:	ee07 2a10 	vmov	s14, r2
 800e1f2:	eef0 6a67 	vmov.f32	s13, s15
 800e1f6:	4a23      	ldr	r2, [pc, #140]	; (800e284 <__ieee754_powf+0x40c>)
 800e1f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e1fc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e200:	ed92 5a00 	vldr	s10, [r2]
 800e204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e208:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e20c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800e210:	ee16 2a90 	vmov	r2, s13
 800e214:	4013      	ands	r3, r2
 800e216:	ee06 3a90 	vmov	s13, r3
 800e21a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e21e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e222:	eea6 7a65 	vfms.f32	s14, s12, s11
 800e226:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e22a:	e70f      	b.n	800e04c <__ieee754_powf+0x1d4>
 800e22c:	2501      	movs	r5, #1
 800e22e:	e75d      	b.n	800e0ec <__ieee754_powf+0x274>
 800e230:	00000000 	.word	0x00000000
 800e234:	3f7ffff3 	.word	0x3f7ffff3
 800e238:	3f800007 	.word	0x3f800007
 800e23c:	3eaaaaab 	.word	0x3eaaaaab
 800e240:	3fb8aa3b 	.word	0x3fb8aa3b
 800e244:	36eca570 	.word	0x36eca570
 800e248:	3fb8aa00 	.word	0x3fb8aa00
 800e24c:	4b800000 	.word	0x4b800000
 800e250:	001cc471 	.word	0x001cc471
 800e254:	005db3d6 	.word	0x005db3d6
 800e258:	0800f68c 	.word	0x0800f68c
 800e25c:	fffff000 	.word	0xfffff000
 800e260:	3e6c3255 	.word	0x3e6c3255
 800e264:	3e53f142 	.word	0x3e53f142
 800e268:	3e8ba305 	.word	0x3e8ba305
 800e26c:	3edb6db7 	.word	0x3edb6db7
 800e270:	3f19999a 	.word	0x3f19999a
 800e274:	3f76384f 	.word	0x3f76384f
 800e278:	0800f69c 	.word	0x0800f69c
 800e27c:	3f763800 	.word	0x3f763800
 800e280:	369dc3a0 	.word	0x369dc3a0
 800e284:	0800f694 	.word	0x0800f694
 800e288:	3338aa3c 	.word	0x3338aa3c
 800e28c:	f040 8093 	bne.w	800e3b6 <__ieee754_powf+0x53e>
 800e290:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e288 <__ieee754_powf+0x410>
 800e294:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e298:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e29c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a4:	f73f aefa 	bgt.w	800e09c <__ieee754_powf+0x224>
 800e2a8:	15db      	asrs	r3, r3, #23
 800e2aa:	3b7e      	subs	r3, #126	; 0x7e
 800e2ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e2b0:	4118      	asrs	r0, r3
 800e2b2:	4408      	add	r0, r1
 800e2b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e2b8:	4a49      	ldr	r2, [pc, #292]	; (800e3e0 <__ieee754_powf+0x568>)
 800e2ba:	3b7f      	subs	r3, #127	; 0x7f
 800e2bc:	411a      	asrs	r2, r3
 800e2be:	4002      	ands	r2, r0
 800e2c0:	ee07 2a10 	vmov	s14, r2
 800e2c4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800e2c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e2cc:	f1c3 0317 	rsb	r3, r3, #23
 800e2d0:	4118      	asrs	r0, r3
 800e2d2:	2900      	cmp	r1, #0
 800e2d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2d8:	bfb8      	it	lt
 800e2da:	4240      	neglt	r0, r0
 800e2dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e2e0:	eddf 6a40 	vldr	s13, [pc, #256]	; 800e3e4 <__ieee754_powf+0x56c>
 800e2e4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800e3e8 <__ieee754_powf+0x570>
 800e2e8:	ee17 3a10 	vmov	r3, s14
 800e2ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e2f0:	f023 030f 	bic.w	r3, r3, #15
 800e2f4:	ee07 3a10 	vmov	s14, r3
 800e2f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e300:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e304:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e3ec <__ieee754_powf+0x574>
 800e308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e30c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e310:	eef0 6a67 	vmov.f32	s13, s15
 800e314:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e318:	eef0 5a66 	vmov.f32	s11, s13
 800e31c:	eee7 5a46 	vfms.f32	s11, s14, s12
 800e320:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e324:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e328:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800e3f0 <__ieee754_powf+0x578>
 800e32c:	eddf 5a31 	vldr	s11, [pc, #196]	; 800e3f4 <__ieee754_powf+0x57c>
 800e330:	eea7 6a25 	vfma.f32	s12, s14, s11
 800e334:	eddf 5a30 	vldr	s11, [pc, #192]	; 800e3f8 <__ieee754_powf+0x580>
 800e338:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e33c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800e3fc <__ieee754_powf+0x584>
 800e340:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e344:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e400 <__ieee754_powf+0x588>
 800e348:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e34c:	eeb0 6a66 	vmov.f32	s12, s13
 800e350:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800e354:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e358:	ee66 5a86 	vmul.f32	s11, s13, s12
 800e35c:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e360:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800e364:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800e368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e36c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e370:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e374:	ee10 3a10 	vmov	r3, s0
 800e378:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e37c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e380:	da1f      	bge.n	800e3c2 <__ieee754_powf+0x54a>
 800e382:	f000 f977 	bl	800e674 <scalbnf>
 800e386:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e38a:	e58d      	b.n	800dea8 <__ieee754_powf+0x30>
 800e38c:	4a1d      	ldr	r2, [pc, #116]	; (800e404 <__ieee754_powf+0x58c>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	dd07      	ble.n	800e3a2 <__ieee754_powf+0x52a>
 800e392:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39a:	bf4c      	ite	mi
 800e39c:	2001      	movmi	r0, #1
 800e39e:	2000      	movpl	r0, #0
 800e3a0:	e622      	b.n	800dfe8 <__ieee754_powf+0x170>
 800e3a2:	d108      	bne.n	800e3b6 <__ieee754_powf+0x53e>
 800e3a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3a8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b0:	f6ff af7a 	blt.w	800e2a8 <__ieee754_powf+0x430>
 800e3b4:	e7ed      	b.n	800e392 <__ieee754_powf+0x51a>
 800e3b6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e3ba:	f73f af75 	bgt.w	800e2a8 <__ieee754_powf+0x430>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	e78c      	b.n	800e2dc <__ieee754_powf+0x464>
 800e3c2:	ee00 3a10 	vmov	s0, r3
 800e3c6:	e7de      	b.n	800e386 <__ieee754_powf+0x50e>
 800e3c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e3cc:	e56c      	b.n	800dea8 <__ieee754_powf+0x30>
 800e3ce:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e408 <__ieee754_powf+0x590>
 800e3d2:	e569      	b.n	800dea8 <__ieee754_powf+0x30>
 800e3d4:	eeb0 0a48 	vmov.f32	s0, s16
 800e3d8:	e566      	b.n	800dea8 <__ieee754_powf+0x30>
 800e3da:	2600      	movs	r6, #0
 800e3dc:	e591      	b.n	800df02 <__ieee754_powf+0x8a>
 800e3de:	bf00      	nop
 800e3e0:	ff800000 	.word	0xff800000
 800e3e4:	3f317218 	.word	0x3f317218
 800e3e8:	3f317200 	.word	0x3f317200
 800e3ec:	35bfbe8c 	.word	0x35bfbe8c
 800e3f0:	b5ddea0e 	.word	0xb5ddea0e
 800e3f4:	3331bb4c 	.word	0x3331bb4c
 800e3f8:	388ab355 	.word	0x388ab355
 800e3fc:	bb360b61 	.word	0xbb360b61
 800e400:	3e2aaaab 	.word	0x3e2aaaab
 800e404:	43160000 	.word	0x43160000
 800e408:	00000000 	.word	0x00000000

0800e40c <__ieee754_rem_pio2f>:
 800e40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e40e:	ee10 6a10 	vmov	r6, s0
 800e412:	4b86      	ldr	r3, [pc, #536]	; (800e62c <__ieee754_rem_pio2f+0x220>)
 800e414:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e418:	429d      	cmp	r5, r3
 800e41a:	b087      	sub	sp, #28
 800e41c:	4604      	mov	r4, r0
 800e41e:	dc05      	bgt.n	800e42c <__ieee754_rem_pio2f+0x20>
 800e420:	2300      	movs	r3, #0
 800e422:	ed80 0a00 	vstr	s0, [r0]
 800e426:	6043      	str	r3, [r0, #4]
 800e428:	2000      	movs	r0, #0
 800e42a:	e020      	b.n	800e46e <__ieee754_rem_pio2f+0x62>
 800e42c:	4b80      	ldr	r3, [pc, #512]	; (800e630 <__ieee754_rem_pio2f+0x224>)
 800e42e:	429d      	cmp	r5, r3
 800e430:	dc38      	bgt.n	800e4a4 <__ieee754_rem_pio2f+0x98>
 800e432:	2e00      	cmp	r6, #0
 800e434:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800e634 <__ieee754_rem_pio2f+0x228>
 800e438:	4b7f      	ldr	r3, [pc, #508]	; (800e638 <__ieee754_rem_pio2f+0x22c>)
 800e43a:	f025 050f 	bic.w	r5, r5, #15
 800e43e:	dd18      	ble.n	800e472 <__ieee754_rem_pio2f+0x66>
 800e440:	429d      	cmp	r5, r3
 800e442:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e446:	bf09      	itett	eq
 800e448:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800e63c <__ieee754_rem_pio2f+0x230>
 800e44c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800e640 <__ieee754_rem_pio2f+0x234>
 800e450:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e454:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800e644 <__ieee754_rem_pio2f+0x238>
 800e458:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e45c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e460:	edc0 6a00 	vstr	s13, [r0]
 800e464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e468:	edc0 7a01 	vstr	s15, [r0, #4]
 800e46c:	2001      	movs	r0, #1
 800e46e:	b007      	add	sp, #28
 800e470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e472:	429d      	cmp	r5, r3
 800e474:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e478:	bf09      	itett	eq
 800e47a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800e63c <__ieee754_rem_pio2f+0x230>
 800e47e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800e640 <__ieee754_rem_pio2f+0x234>
 800e482:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e486:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800e644 <__ieee754_rem_pio2f+0x238>
 800e48a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e48e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e492:	edc0 6a00 	vstr	s13, [r0]
 800e496:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e49a:	edc0 7a01 	vstr	s15, [r0, #4]
 800e49e:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a2:	e7e4      	b.n	800e46e <__ieee754_rem_pio2f+0x62>
 800e4a4:	4b68      	ldr	r3, [pc, #416]	; (800e648 <__ieee754_rem_pio2f+0x23c>)
 800e4a6:	429d      	cmp	r5, r3
 800e4a8:	dc71      	bgt.n	800e58e <__ieee754_rem_pio2f+0x182>
 800e4aa:	f000 f8db 	bl	800e664 <fabsf>
 800e4ae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e64c <__ieee754_rem_pio2f+0x240>
 800e4b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e4b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e4ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e4c2:	ee17 0a90 	vmov	r0, s15
 800e4c6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e634 <__ieee754_rem_pio2f+0x228>
 800e4ca:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e4ce:	281f      	cmp	r0, #31
 800e4d0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e640 <__ieee754_rem_pio2f+0x234>
 800e4d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4d8:	eeb1 6a47 	vneg.f32	s12, s14
 800e4dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e4e0:	ee16 2a90 	vmov	r2, s13
 800e4e4:	dc1c      	bgt.n	800e520 <__ieee754_rem_pio2f+0x114>
 800e4e6:	495a      	ldr	r1, [pc, #360]	; (800e650 <__ieee754_rem_pio2f+0x244>)
 800e4e8:	1e47      	subs	r7, r0, #1
 800e4ea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e4ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e4f2:	428b      	cmp	r3, r1
 800e4f4:	d014      	beq.n	800e520 <__ieee754_rem_pio2f+0x114>
 800e4f6:	6022      	str	r2, [r4, #0]
 800e4f8:	ed94 7a00 	vldr	s14, [r4]
 800e4fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e500:	2e00      	cmp	r6, #0
 800e502:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e506:	ed84 0a01 	vstr	s0, [r4, #4]
 800e50a:	dab0      	bge.n	800e46e <__ieee754_rem_pio2f+0x62>
 800e50c:	eeb1 7a47 	vneg.f32	s14, s14
 800e510:	eeb1 0a40 	vneg.f32	s0, s0
 800e514:	ed84 7a00 	vstr	s14, [r4]
 800e518:	ed84 0a01 	vstr	s0, [r4, #4]
 800e51c:	4240      	negs	r0, r0
 800e51e:	e7a6      	b.n	800e46e <__ieee754_rem_pio2f+0x62>
 800e520:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e524:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800e528:	2908      	cmp	r1, #8
 800e52a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e52e:	dde2      	ble.n	800e4f6 <__ieee754_rem_pio2f+0xea>
 800e530:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e63c <__ieee754_rem_pio2f+0x230>
 800e534:	eef0 6a40 	vmov.f32	s13, s0
 800e538:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e53c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e540:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e544:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e644 <__ieee754_rem_pio2f+0x238>
 800e548:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e54c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e550:	ee15 2a90 	vmov	r2, s11
 800e554:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e558:	1a5b      	subs	r3, r3, r1
 800e55a:	2b19      	cmp	r3, #25
 800e55c:	dc04      	bgt.n	800e568 <__ieee754_rem_pio2f+0x15c>
 800e55e:	edc4 5a00 	vstr	s11, [r4]
 800e562:	eeb0 0a66 	vmov.f32	s0, s13
 800e566:	e7c7      	b.n	800e4f8 <__ieee754_rem_pio2f+0xec>
 800e568:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e654 <__ieee754_rem_pio2f+0x248>
 800e56c:	eeb0 0a66 	vmov.f32	s0, s13
 800e570:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e574:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e578:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e658 <__ieee754_rem_pio2f+0x24c>
 800e57c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e580:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e584:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e588:	ed84 7a00 	vstr	s14, [r4]
 800e58c:	e7b4      	b.n	800e4f8 <__ieee754_rem_pio2f+0xec>
 800e58e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e592:	db06      	blt.n	800e5a2 <__ieee754_rem_pio2f+0x196>
 800e594:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e598:	edc0 7a01 	vstr	s15, [r0, #4]
 800e59c:	edc0 7a00 	vstr	s15, [r0]
 800e5a0:	e742      	b.n	800e428 <__ieee754_rem_pio2f+0x1c>
 800e5a2:	15ea      	asrs	r2, r5, #23
 800e5a4:	3a86      	subs	r2, #134	; 0x86
 800e5a6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e5aa:	ee07 3a90 	vmov	s15, r3
 800e5ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e5b2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800e65c <__ieee754_rem_pio2f+0x250>
 800e5b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e5ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5be:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e5c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e5ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e5ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5d2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e5d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5da:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e2:	edcd 7a05 	vstr	s15, [sp, #20]
 800e5e6:	d11e      	bne.n	800e626 <__ieee754_rem_pio2f+0x21a>
 800e5e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5f0:	bf14      	ite	ne
 800e5f2:	2302      	movne	r3, #2
 800e5f4:	2301      	moveq	r3, #1
 800e5f6:	491a      	ldr	r1, [pc, #104]	; (800e660 <__ieee754_rem_pio2f+0x254>)
 800e5f8:	9101      	str	r1, [sp, #4]
 800e5fa:	2102      	movs	r1, #2
 800e5fc:	9100      	str	r1, [sp, #0]
 800e5fe:	a803      	add	r0, sp, #12
 800e600:	4621      	mov	r1, r4
 800e602:	f000 fc0f 	bl	800ee24 <__kernel_rem_pio2f>
 800e606:	2e00      	cmp	r6, #0
 800e608:	f6bf af31 	bge.w	800e46e <__ieee754_rem_pio2f+0x62>
 800e60c:	edd4 7a00 	vldr	s15, [r4]
 800e610:	eef1 7a67 	vneg.f32	s15, s15
 800e614:	edc4 7a00 	vstr	s15, [r4]
 800e618:	edd4 7a01 	vldr	s15, [r4, #4]
 800e61c:	eef1 7a67 	vneg.f32	s15, s15
 800e620:	edc4 7a01 	vstr	s15, [r4, #4]
 800e624:	e77a      	b.n	800e51c <__ieee754_rem_pio2f+0x110>
 800e626:	2303      	movs	r3, #3
 800e628:	e7e5      	b.n	800e5f6 <__ieee754_rem_pio2f+0x1ea>
 800e62a:	bf00      	nop
 800e62c:	3f490fd8 	.word	0x3f490fd8
 800e630:	4016cbe3 	.word	0x4016cbe3
 800e634:	3fc90f80 	.word	0x3fc90f80
 800e638:	3fc90fd0 	.word	0x3fc90fd0
 800e63c:	37354400 	.word	0x37354400
 800e640:	37354443 	.word	0x37354443
 800e644:	2e85a308 	.word	0x2e85a308
 800e648:	43490f80 	.word	0x43490f80
 800e64c:	3f22f984 	.word	0x3f22f984
 800e650:	0800f6a4 	.word	0x0800f6a4
 800e654:	2e85a300 	.word	0x2e85a300
 800e658:	248d3132 	.word	0x248d3132
 800e65c:	43800000 	.word	0x43800000
 800e660:	0800f724 	.word	0x0800f724

0800e664 <fabsf>:
 800e664:	ee10 3a10 	vmov	r3, s0
 800e668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e66c:	ee00 3a10 	vmov	s0, r3
 800e670:	4770      	bx	lr
	...

0800e674 <scalbnf>:
 800e674:	ee10 3a10 	vmov	r3, s0
 800e678:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e67c:	d02b      	beq.n	800e6d6 <scalbnf+0x62>
 800e67e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e682:	d302      	bcc.n	800e68a <scalbnf+0x16>
 800e684:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e688:	4770      	bx	lr
 800e68a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e68e:	d123      	bne.n	800e6d8 <scalbnf+0x64>
 800e690:	4b24      	ldr	r3, [pc, #144]	; (800e724 <scalbnf+0xb0>)
 800e692:	eddf 7a25 	vldr	s15, [pc, #148]	; 800e728 <scalbnf+0xb4>
 800e696:	4298      	cmp	r0, r3
 800e698:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e69c:	db17      	blt.n	800e6ce <scalbnf+0x5a>
 800e69e:	ee10 3a10 	vmov	r3, s0
 800e6a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e6a6:	3a19      	subs	r2, #25
 800e6a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e6ac:	4288      	cmp	r0, r1
 800e6ae:	dd15      	ble.n	800e6dc <scalbnf+0x68>
 800e6b0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e72c <scalbnf+0xb8>
 800e6b4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800e730 <scalbnf+0xbc>
 800e6b8:	ee10 3a10 	vmov	r3, s0
 800e6bc:	eeb0 7a67 	vmov.f32	s14, s15
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	bfb8      	it	lt
 800e6c4:	eef0 7a66 	vmovlt.f32	s15, s13
 800e6c8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e6cc:	4770      	bx	lr
 800e6ce:	eddf 7a19 	vldr	s15, [pc, #100]	; 800e734 <scalbnf+0xc0>
 800e6d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e6d6:	4770      	bx	lr
 800e6d8:	0dd2      	lsrs	r2, r2, #23
 800e6da:	e7e5      	b.n	800e6a8 <scalbnf+0x34>
 800e6dc:	4410      	add	r0, r2
 800e6de:	28fe      	cmp	r0, #254	; 0xfe
 800e6e0:	dce6      	bgt.n	800e6b0 <scalbnf+0x3c>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	dd06      	ble.n	800e6f4 <scalbnf+0x80>
 800e6e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6ea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e6ee:	ee00 3a10 	vmov	s0, r3
 800e6f2:	4770      	bx	lr
 800e6f4:	f110 0f16 	cmn.w	r0, #22
 800e6f8:	da09      	bge.n	800e70e <scalbnf+0x9a>
 800e6fa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800e734 <scalbnf+0xc0>
 800e6fe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800e738 <scalbnf+0xc4>
 800e702:	ee10 3a10 	vmov	r3, s0
 800e706:	eeb0 7a67 	vmov.f32	s14, s15
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	e7d9      	b.n	800e6c2 <scalbnf+0x4e>
 800e70e:	3019      	adds	r0, #25
 800e710:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e714:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e718:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800e73c <scalbnf+0xc8>
 800e71c:	ee07 3a90 	vmov	s15, r3
 800e720:	e7d7      	b.n	800e6d2 <scalbnf+0x5e>
 800e722:	bf00      	nop
 800e724:	ffff3cb0 	.word	0xffff3cb0
 800e728:	4c000000 	.word	0x4c000000
 800e72c:	7149f2ca 	.word	0x7149f2ca
 800e730:	f149f2ca 	.word	0xf149f2ca
 800e734:	0da24260 	.word	0x0da24260
 800e738:	8da24260 	.word	0x8da24260
 800e73c:	33000000 	.word	0x33000000

0800e740 <with_errnof>:
 800e740:	b513      	push	{r0, r1, r4, lr}
 800e742:	4604      	mov	r4, r0
 800e744:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e748:	f7fe f932 	bl	800c9b0 <__errno>
 800e74c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e750:	6004      	str	r4, [r0, #0]
 800e752:	b002      	add	sp, #8
 800e754:	bd10      	pop	{r4, pc}

0800e756 <xflowf>:
 800e756:	b130      	cbz	r0, 800e766 <xflowf+0x10>
 800e758:	eef1 7a40 	vneg.f32	s15, s0
 800e75c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e760:	2022      	movs	r0, #34	; 0x22
 800e762:	f7ff bfed 	b.w	800e740 <with_errnof>
 800e766:	eef0 7a40 	vmov.f32	s15, s0
 800e76a:	e7f7      	b.n	800e75c <xflowf+0x6>

0800e76c <__math_uflowf>:
 800e76c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e774 <__math_uflowf+0x8>
 800e770:	f7ff bff1 	b.w	800e756 <xflowf>
 800e774:	10000000 	.word	0x10000000

0800e778 <__math_oflowf>:
 800e778:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e780 <__math_oflowf+0x8>
 800e77c:	f7ff bfeb 	b.w	800e756 <xflowf>
 800e780:	70000000 	.word	0x70000000
 800e784:	00000000 	.word	0x00000000

0800e788 <__kernel_rem_pio2>:
 800e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78c:	ed2d 8b02 	vpush	{d8}
 800e790:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e794:	f112 0f14 	cmn.w	r2, #20
 800e798:	9306      	str	r3, [sp, #24]
 800e79a:	9104      	str	r1, [sp, #16]
 800e79c:	4bc2      	ldr	r3, [pc, #776]	; (800eaa8 <__kernel_rem_pio2+0x320>)
 800e79e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e7a0:	9009      	str	r0, [sp, #36]	; 0x24
 800e7a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	9b06      	ldr	r3, [sp, #24]
 800e7aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7ae:	bfa8      	it	ge
 800e7b0:	1ed4      	subge	r4, r2, #3
 800e7b2:	9305      	str	r3, [sp, #20]
 800e7b4:	bfb2      	itee	lt
 800e7b6:	2400      	movlt	r4, #0
 800e7b8:	2318      	movge	r3, #24
 800e7ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800e7be:	f06f 0317 	mvn.w	r3, #23
 800e7c2:	fb04 3303 	mla	r3, r4, r3, r3
 800e7c6:	eb03 0a02 	add.w	sl, r3, r2
 800e7ca:	9b00      	ldr	r3, [sp, #0]
 800e7cc:	9a05      	ldr	r2, [sp, #20]
 800e7ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800ea98 <__kernel_rem_pio2+0x310>
 800e7d2:	eb03 0802 	add.w	r8, r3, r2
 800e7d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e7d8:	1aa7      	subs	r7, r4, r2
 800e7da:	ae20      	add	r6, sp, #128	; 0x80
 800e7dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e7e0:	2500      	movs	r5, #0
 800e7e2:	4545      	cmp	r5, r8
 800e7e4:	dd13      	ble.n	800e80e <__kernel_rem_pio2+0x86>
 800e7e6:	9b06      	ldr	r3, [sp, #24]
 800e7e8:	aa20      	add	r2, sp, #128	; 0x80
 800e7ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e7ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e7f2:	f04f 0800 	mov.w	r8, #0
 800e7f6:	9b00      	ldr	r3, [sp, #0]
 800e7f8:	4598      	cmp	r8, r3
 800e7fa:	dc31      	bgt.n	800e860 <__kernel_rem_pio2+0xd8>
 800e7fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ea98 <__kernel_rem_pio2+0x310>
 800e800:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e804:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e808:	462f      	mov	r7, r5
 800e80a:	2600      	movs	r6, #0
 800e80c:	e01b      	b.n	800e846 <__kernel_rem_pio2+0xbe>
 800e80e:	42ef      	cmn	r7, r5
 800e810:	d407      	bmi.n	800e822 <__kernel_rem_pio2+0x9a>
 800e812:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e816:	f7f1 fe49 	bl	80004ac <__aeabi_i2d>
 800e81a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e81e:	3501      	adds	r5, #1
 800e820:	e7df      	b.n	800e7e2 <__kernel_rem_pio2+0x5a>
 800e822:	ec51 0b18 	vmov	r0, r1, d8
 800e826:	e7f8      	b.n	800e81a <__kernel_rem_pio2+0x92>
 800e828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e82c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e830:	f7f1 fea6 	bl	8000580 <__aeabi_dmul>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e83c:	f7f1 fcea 	bl	8000214 <__adddf3>
 800e840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e844:	3601      	adds	r6, #1
 800e846:	9b05      	ldr	r3, [sp, #20]
 800e848:	429e      	cmp	r6, r3
 800e84a:	f1a7 0708 	sub.w	r7, r7, #8
 800e84e:	ddeb      	ble.n	800e828 <__kernel_rem_pio2+0xa0>
 800e850:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e854:	f108 0801 	add.w	r8, r8, #1
 800e858:	ecab 7b02 	vstmia	fp!, {d7}
 800e85c:	3508      	adds	r5, #8
 800e85e:	e7ca      	b.n	800e7f6 <__kernel_rem_pio2+0x6e>
 800e860:	9b00      	ldr	r3, [sp, #0]
 800e862:	aa0c      	add	r2, sp, #48	; 0x30
 800e864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e868:	930b      	str	r3, [sp, #44]	; 0x2c
 800e86a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e86c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e870:	9c00      	ldr	r4, [sp, #0]
 800e872:	930a      	str	r3, [sp, #40]	; 0x28
 800e874:	00e3      	lsls	r3, r4, #3
 800e876:	9308      	str	r3, [sp, #32]
 800e878:	ab98      	add	r3, sp, #608	; 0x260
 800e87a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e87e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e882:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e886:	ab70      	add	r3, sp, #448	; 0x1c0
 800e888:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e88c:	46c3      	mov	fp, r8
 800e88e:	46a1      	mov	r9, r4
 800e890:	f1b9 0f00 	cmp.w	r9, #0
 800e894:	f1a5 0508 	sub.w	r5, r5, #8
 800e898:	dc77      	bgt.n	800e98a <__kernel_rem_pio2+0x202>
 800e89a:	ec47 6b10 	vmov	d0, r6, r7
 800e89e:	4650      	mov	r0, sl
 800e8a0:	f000 fd32 	bl	800f308 <scalbn>
 800e8a4:	ec57 6b10 	vmov	r6, r7, d0
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e8ae:	ee10 0a10 	vmov	r0, s0
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	f7f1 fe64 	bl	8000580 <__aeabi_dmul>
 800e8b8:	ec41 0b10 	vmov	d0, r0, r1
 800e8bc:	f7fe fc24 	bl	800d108 <floor>
 800e8c0:	4b7a      	ldr	r3, [pc, #488]	; (800eaac <__kernel_rem_pio2+0x324>)
 800e8c2:	ec51 0b10 	vmov	r0, r1, d0
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f7f1 fe5a 	bl	8000580 <__aeabi_dmul>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	4639      	mov	r1, r7
 800e8d4:	f7f1 fc9c 	bl	8000210 <__aeabi_dsub>
 800e8d8:	460f      	mov	r7, r1
 800e8da:	4606      	mov	r6, r0
 800e8dc:	f7f2 f8ea 	bl	8000ab4 <__aeabi_d2iz>
 800e8e0:	9002      	str	r0, [sp, #8]
 800e8e2:	f7f1 fde3 	bl	80004ac <__aeabi_i2d>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	4639      	mov	r1, r7
 800e8ee:	f7f1 fc8f 	bl	8000210 <__aeabi_dsub>
 800e8f2:	f1ba 0f00 	cmp.w	sl, #0
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	460f      	mov	r7, r1
 800e8fa:	dd6d      	ble.n	800e9d8 <__kernel_rem_pio2+0x250>
 800e8fc:	1e61      	subs	r1, r4, #1
 800e8fe:	ab0c      	add	r3, sp, #48	; 0x30
 800e900:	9d02      	ldr	r5, [sp, #8]
 800e902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e906:	f1ca 0018 	rsb	r0, sl, #24
 800e90a:	fa43 f200 	asr.w	r2, r3, r0
 800e90e:	4415      	add	r5, r2
 800e910:	4082      	lsls	r2, r0
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	aa0c      	add	r2, sp, #48	; 0x30
 800e916:	9502      	str	r5, [sp, #8]
 800e918:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e91c:	f1ca 0217 	rsb	r2, sl, #23
 800e920:	fa43 fb02 	asr.w	fp, r3, r2
 800e924:	f1bb 0f00 	cmp.w	fp, #0
 800e928:	dd65      	ble.n	800e9f6 <__kernel_rem_pio2+0x26e>
 800e92a:	9b02      	ldr	r3, [sp, #8]
 800e92c:	2200      	movs	r2, #0
 800e92e:	3301      	adds	r3, #1
 800e930:	9302      	str	r3, [sp, #8]
 800e932:	4615      	mov	r5, r2
 800e934:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e938:	4294      	cmp	r4, r2
 800e93a:	f300 809f 	bgt.w	800ea7c <__kernel_rem_pio2+0x2f4>
 800e93e:	f1ba 0f00 	cmp.w	sl, #0
 800e942:	dd07      	ble.n	800e954 <__kernel_rem_pio2+0x1cc>
 800e944:	f1ba 0f01 	cmp.w	sl, #1
 800e948:	f000 80c1 	beq.w	800eace <__kernel_rem_pio2+0x346>
 800e94c:	f1ba 0f02 	cmp.w	sl, #2
 800e950:	f000 80c7 	beq.w	800eae2 <__kernel_rem_pio2+0x35a>
 800e954:	f1bb 0f02 	cmp.w	fp, #2
 800e958:	d14d      	bne.n	800e9f6 <__kernel_rem_pio2+0x26e>
 800e95a:	4632      	mov	r2, r6
 800e95c:	463b      	mov	r3, r7
 800e95e:	4954      	ldr	r1, [pc, #336]	; (800eab0 <__kernel_rem_pio2+0x328>)
 800e960:	2000      	movs	r0, #0
 800e962:	f7f1 fc55 	bl	8000210 <__aeabi_dsub>
 800e966:	4606      	mov	r6, r0
 800e968:	460f      	mov	r7, r1
 800e96a:	2d00      	cmp	r5, #0
 800e96c:	d043      	beq.n	800e9f6 <__kernel_rem_pio2+0x26e>
 800e96e:	4650      	mov	r0, sl
 800e970:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800eaa0 <__kernel_rem_pio2+0x318>
 800e974:	f000 fcc8 	bl	800f308 <scalbn>
 800e978:	4630      	mov	r0, r6
 800e97a:	4639      	mov	r1, r7
 800e97c:	ec53 2b10 	vmov	r2, r3, d0
 800e980:	f7f1 fc46 	bl	8000210 <__aeabi_dsub>
 800e984:	4606      	mov	r6, r0
 800e986:	460f      	mov	r7, r1
 800e988:	e035      	b.n	800e9f6 <__kernel_rem_pio2+0x26e>
 800e98a:	4b4a      	ldr	r3, [pc, #296]	; (800eab4 <__kernel_rem_pio2+0x32c>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	4630      	mov	r0, r6
 800e990:	4639      	mov	r1, r7
 800e992:	f7f1 fdf5 	bl	8000580 <__aeabi_dmul>
 800e996:	f7f2 f88d 	bl	8000ab4 <__aeabi_d2iz>
 800e99a:	f7f1 fd87 	bl	80004ac <__aeabi_i2d>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	ec43 2b18 	vmov	d8, r2, r3
 800e9a6:	4b44      	ldr	r3, [pc, #272]	; (800eab8 <__kernel_rem_pio2+0x330>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f7f1 fde9 	bl	8000580 <__aeabi_dmul>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	f7f1 fc2b 	bl	8000210 <__aeabi_dsub>
 800e9ba:	f7f2 f87b 	bl	8000ab4 <__aeabi_d2iz>
 800e9be:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9c2:	f84b 0b04 	str.w	r0, [fp], #4
 800e9c6:	ec51 0b18 	vmov	r0, r1, d8
 800e9ca:	f7f1 fc23 	bl	8000214 <__adddf3>
 800e9ce:	f109 39ff 	add.w	r9, r9, #4294967295
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	460f      	mov	r7, r1
 800e9d6:	e75b      	b.n	800e890 <__kernel_rem_pio2+0x108>
 800e9d8:	d106      	bne.n	800e9e8 <__kernel_rem_pio2+0x260>
 800e9da:	1e63      	subs	r3, r4, #1
 800e9dc:	aa0c      	add	r2, sp, #48	; 0x30
 800e9de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9e2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e9e6:	e79d      	b.n	800e924 <__kernel_rem_pio2+0x19c>
 800e9e8:	4b34      	ldr	r3, [pc, #208]	; (800eabc <__kernel_rem_pio2+0x334>)
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f7f2 f84e 	bl	8000a8c <__aeabi_dcmpge>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d140      	bne.n	800ea76 <__kernel_rem_pio2+0x2ee>
 800e9f4:	4683      	mov	fp, r0
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	f7f2 f827 	bl	8000a50 <__aeabi_dcmpeq>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	f000 80c1 	beq.w	800eb8a <__kernel_rem_pio2+0x402>
 800ea08:	1e65      	subs	r5, r4, #1
 800ea0a:	462b      	mov	r3, r5
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	9900      	ldr	r1, [sp, #0]
 800ea10:	428b      	cmp	r3, r1
 800ea12:	da6d      	bge.n	800eaf0 <__kernel_rem_pio2+0x368>
 800ea14:	2a00      	cmp	r2, #0
 800ea16:	f000 808a 	beq.w	800eb2e <__kernel_rem_pio2+0x3a6>
 800ea1a:	ab0c      	add	r3, sp, #48	; 0x30
 800ea1c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ea20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f000 80ae 	beq.w	800eb86 <__kernel_rem_pio2+0x3fe>
 800ea2a:	4650      	mov	r0, sl
 800ea2c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800eaa0 <__kernel_rem_pio2+0x318>
 800ea30:	f000 fc6a 	bl	800f308 <scalbn>
 800ea34:	1c6b      	adds	r3, r5, #1
 800ea36:	00da      	lsls	r2, r3, #3
 800ea38:	9205      	str	r2, [sp, #20]
 800ea3a:	ec57 6b10 	vmov	r6, r7, d0
 800ea3e:	aa70      	add	r2, sp, #448	; 0x1c0
 800ea40:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800eab4 <__kernel_rem_pio2+0x32c>
 800ea44:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ea48:	462c      	mov	r4, r5
 800ea4a:	f04f 0800 	mov.w	r8, #0
 800ea4e:	2c00      	cmp	r4, #0
 800ea50:	f280 80d4 	bge.w	800ebfc <__kernel_rem_pio2+0x474>
 800ea54:	462c      	mov	r4, r5
 800ea56:	2c00      	cmp	r4, #0
 800ea58:	f2c0 8102 	blt.w	800ec60 <__kernel_rem_pio2+0x4d8>
 800ea5c:	4b18      	ldr	r3, [pc, #96]	; (800eac0 <__kernel_rem_pio2+0x338>)
 800ea5e:	461e      	mov	r6, r3
 800ea60:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea62:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ea66:	1b2b      	subs	r3, r5, r4
 800ea68:	f04f 0900 	mov.w	r9, #0
 800ea6c:	f04f 0a00 	mov.w	sl, #0
 800ea70:	2700      	movs	r7, #0
 800ea72:	9306      	str	r3, [sp, #24]
 800ea74:	e0e6      	b.n	800ec44 <__kernel_rem_pio2+0x4bc>
 800ea76:	f04f 0b02 	mov.w	fp, #2
 800ea7a:	e756      	b.n	800e92a <__kernel_rem_pio2+0x1a2>
 800ea7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ea80:	bb05      	cbnz	r5, 800eac4 <__kernel_rem_pio2+0x33c>
 800ea82:	b123      	cbz	r3, 800ea8e <__kernel_rem_pio2+0x306>
 800ea84:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ea88:	f8c8 3000 	str.w	r3, [r8]
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	3201      	adds	r2, #1
 800ea90:	f108 0804 	add.w	r8, r8, #4
 800ea94:	461d      	mov	r5, r3
 800ea96:	e74f      	b.n	800e938 <__kernel_rem_pio2+0x1b0>
	...
 800eaa4:	3ff00000 	.word	0x3ff00000
 800eaa8:	0800fa80 	.word	0x0800fa80
 800eaac:	40200000 	.word	0x40200000
 800eab0:	3ff00000 	.word	0x3ff00000
 800eab4:	3e700000 	.word	0x3e700000
 800eab8:	41700000 	.word	0x41700000
 800eabc:	3fe00000 	.word	0x3fe00000
 800eac0:	0800fa40 	.word	0x0800fa40
 800eac4:	1acb      	subs	r3, r1, r3
 800eac6:	f8c8 3000 	str.w	r3, [r8]
 800eaca:	462b      	mov	r3, r5
 800eacc:	e7df      	b.n	800ea8e <__kernel_rem_pio2+0x306>
 800eace:	1e62      	subs	r2, r4, #1
 800ead0:	ab0c      	add	r3, sp, #48	; 0x30
 800ead2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ead6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eada:	a90c      	add	r1, sp, #48	; 0x30
 800eadc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eae0:	e738      	b.n	800e954 <__kernel_rem_pio2+0x1cc>
 800eae2:	1e62      	subs	r2, r4, #1
 800eae4:	ab0c      	add	r3, sp, #48	; 0x30
 800eae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eaee:	e7f4      	b.n	800eada <__kernel_rem_pio2+0x352>
 800eaf0:	a90c      	add	r1, sp, #48	; 0x30
 800eaf2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	430a      	orrs	r2, r1
 800eafa:	e788      	b.n	800ea0e <__kernel_rem_pio2+0x286>
 800eafc:	3301      	adds	r3, #1
 800eafe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eb02:	2900      	cmp	r1, #0
 800eb04:	d0fa      	beq.n	800eafc <__kernel_rem_pio2+0x374>
 800eb06:	9a08      	ldr	r2, [sp, #32]
 800eb08:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800eb0c:	446a      	add	r2, sp
 800eb0e:	3a98      	subs	r2, #152	; 0x98
 800eb10:	9208      	str	r2, [sp, #32]
 800eb12:	9a06      	ldr	r2, [sp, #24]
 800eb14:	a920      	add	r1, sp, #128	; 0x80
 800eb16:	18a2      	adds	r2, r4, r2
 800eb18:	18e3      	adds	r3, r4, r3
 800eb1a:	f104 0801 	add.w	r8, r4, #1
 800eb1e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800eb22:	9302      	str	r3, [sp, #8]
 800eb24:	9b02      	ldr	r3, [sp, #8]
 800eb26:	4543      	cmp	r3, r8
 800eb28:	da04      	bge.n	800eb34 <__kernel_rem_pio2+0x3ac>
 800eb2a:	461c      	mov	r4, r3
 800eb2c:	e6a2      	b.n	800e874 <__kernel_rem_pio2+0xec>
 800eb2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb30:	2301      	movs	r3, #1
 800eb32:	e7e4      	b.n	800eafe <__kernel_rem_pio2+0x376>
 800eb34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb36:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eb3a:	f7f1 fcb7 	bl	80004ac <__aeabi_i2d>
 800eb3e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb44:	46ab      	mov	fp, r5
 800eb46:	461c      	mov	r4, r3
 800eb48:	f04f 0900 	mov.w	r9, #0
 800eb4c:	2600      	movs	r6, #0
 800eb4e:	2700      	movs	r7, #0
 800eb50:	9b05      	ldr	r3, [sp, #20]
 800eb52:	4599      	cmp	r9, r3
 800eb54:	dd06      	ble.n	800eb64 <__kernel_rem_pio2+0x3dc>
 800eb56:	9b08      	ldr	r3, [sp, #32]
 800eb58:	e8e3 6702 	strd	r6, r7, [r3], #8
 800eb5c:	f108 0801 	add.w	r8, r8, #1
 800eb60:	9308      	str	r3, [sp, #32]
 800eb62:	e7df      	b.n	800eb24 <__kernel_rem_pio2+0x39c>
 800eb64:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800eb68:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800eb6c:	f7f1 fd08 	bl	8000580 <__aeabi_dmul>
 800eb70:	4602      	mov	r2, r0
 800eb72:	460b      	mov	r3, r1
 800eb74:	4630      	mov	r0, r6
 800eb76:	4639      	mov	r1, r7
 800eb78:	f7f1 fb4c 	bl	8000214 <__adddf3>
 800eb7c:	f109 0901 	add.w	r9, r9, #1
 800eb80:	4606      	mov	r6, r0
 800eb82:	460f      	mov	r7, r1
 800eb84:	e7e4      	b.n	800eb50 <__kernel_rem_pio2+0x3c8>
 800eb86:	3d01      	subs	r5, #1
 800eb88:	e747      	b.n	800ea1a <__kernel_rem_pio2+0x292>
 800eb8a:	ec47 6b10 	vmov	d0, r6, r7
 800eb8e:	f1ca 0000 	rsb	r0, sl, #0
 800eb92:	f000 fbb9 	bl	800f308 <scalbn>
 800eb96:	ec57 6b10 	vmov	r6, r7, d0
 800eb9a:	4ba0      	ldr	r3, [pc, #640]	; (800ee1c <__kernel_rem_pio2+0x694>)
 800eb9c:	ee10 0a10 	vmov	r0, s0
 800eba0:	2200      	movs	r2, #0
 800eba2:	4639      	mov	r1, r7
 800eba4:	f7f1 ff72 	bl	8000a8c <__aeabi_dcmpge>
 800eba8:	b1f8      	cbz	r0, 800ebea <__kernel_rem_pio2+0x462>
 800ebaa:	4b9d      	ldr	r3, [pc, #628]	; (800ee20 <__kernel_rem_pio2+0x698>)
 800ebac:	2200      	movs	r2, #0
 800ebae:	4630      	mov	r0, r6
 800ebb0:	4639      	mov	r1, r7
 800ebb2:	f7f1 fce5 	bl	8000580 <__aeabi_dmul>
 800ebb6:	f7f1 ff7d 	bl	8000ab4 <__aeabi_d2iz>
 800ebba:	4680      	mov	r8, r0
 800ebbc:	f7f1 fc76 	bl	80004ac <__aeabi_i2d>
 800ebc0:	4b96      	ldr	r3, [pc, #600]	; (800ee1c <__kernel_rem_pio2+0x694>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f7f1 fcdc 	bl	8000580 <__aeabi_dmul>
 800ebc8:	460b      	mov	r3, r1
 800ebca:	4602      	mov	r2, r0
 800ebcc:	4639      	mov	r1, r7
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f7f1 fb1e 	bl	8000210 <__aeabi_dsub>
 800ebd4:	f7f1 ff6e 	bl	8000ab4 <__aeabi_d2iz>
 800ebd8:	1c65      	adds	r5, r4, #1
 800ebda:	ab0c      	add	r3, sp, #48	; 0x30
 800ebdc:	f10a 0a18 	add.w	sl, sl, #24
 800ebe0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ebe4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ebe8:	e71f      	b.n	800ea2a <__kernel_rem_pio2+0x2a2>
 800ebea:	4630      	mov	r0, r6
 800ebec:	4639      	mov	r1, r7
 800ebee:	f7f1 ff61 	bl	8000ab4 <__aeabi_d2iz>
 800ebf2:	ab0c      	add	r3, sp, #48	; 0x30
 800ebf4:	4625      	mov	r5, r4
 800ebf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ebfa:	e716      	b.n	800ea2a <__kernel_rem_pio2+0x2a2>
 800ebfc:	ab0c      	add	r3, sp, #48	; 0x30
 800ebfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ec02:	f7f1 fc53 	bl	80004ac <__aeabi_i2d>
 800ec06:	4632      	mov	r2, r6
 800ec08:	463b      	mov	r3, r7
 800ec0a:	f7f1 fcb9 	bl	8000580 <__aeabi_dmul>
 800ec0e:	4642      	mov	r2, r8
 800ec10:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ec14:	464b      	mov	r3, r9
 800ec16:	4630      	mov	r0, r6
 800ec18:	4639      	mov	r1, r7
 800ec1a:	f7f1 fcb1 	bl	8000580 <__aeabi_dmul>
 800ec1e:	3c01      	subs	r4, #1
 800ec20:	4606      	mov	r6, r0
 800ec22:	460f      	mov	r7, r1
 800ec24:	e713      	b.n	800ea4e <__kernel_rem_pio2+0x2c6>
 800ec26:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ec2a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ec2e:	f7f1 fca7 	bl	8000580 <__aeabi_dmul>
 800ec32:	4602      	mov	r2, r0
 800ec34:	460b      	mov	r3, r1
 800ec36:	4648      	mov	r0, r9
 800ec38:	4651      	mov	r1, sl
 800ec3a:	f7f1 faeb 	bl	8000214 <__adddf3>
 800ec3e:	3701      	adds	r7, #1
 800ec40:	4681      	mov	r9, r0
 800ec42:	468a      	mov	sl, r1
 800ec44:	9b00      	ldr	r3, [sp, #0]
 800ec46:	429f      	cmp	r7, r3
 800ec48:	dc02      	bgt.n	800ec50 <__kernel_rem_pio2+0x4c8>
 800ec4a:	9b06      	ldr	r3, [sp, #24]
 800ec4c:	429f      	cmp	r7, r3
 800ec4e:	ddea      	ble.n	800ec26 <__kernel_rem_pio2+0x49e>
 800ec50:	9a06      	ldr	r2, [sp, #24]
 800ec52:	ab48      	add	r3, sp, #288	; 0x120
 800ec54:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ec58:	e9c6 9a00 	strd	r9, sl, [r6]
 800ec5c:	3c01      	subs	r4, #1
 800ec5e:	e6fa      	b.n	800ea56 <__kernel_rem_pio2+0x2ce>
 800ec60:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	dc0b      	bgt.n	800ec7e <__kernel_rem_pio2+0x4f6>
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	dc39      	bgt.n	800ecde <__kernel_rem_pio2+0x556>
 800ec6a:	d05d      	beq.n	800ed28 <__kernel_rem_pio2+0x5a0>
 800ec6c:	9b02      	ldr	r3, [sp, #8]
 800ec6e:	f003 0007 	and.w	r0, r3, #7
 800ec72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ec76:	ecbd 8b02 	vpop	{d8}
 800ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ec80:	2b03      	cmp	r3, #3
 800ec82:	d1f3      	bne.n	800ec6c <__kernel_rem_pio2+0x4e4>
 800ec84:	9b05      	ldr	r3, [sp, #20]
 800ec86:	9500      	str	r5, [sp, #0]
 800ec88:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ec8c:	eb0d 0403 	add.w	r4, sp, r3
 800ec90:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ec94:	46a2      	mov	sl, r4
 800ec96:	9b00      	ldr	r3, [sp, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f1aa 0a08 	sub.w	sl, sl, #8
 800ec9e:	dc69      	bgt.n	800ed74 <__kernel_rem_pio2+0x5ec>
 800eca0:	46aa      	mov	sl, r5
 800eca2:	f1ba 0f01 	cmp.w	sl, #1
 800eca6:	f1a4 0408 	sub.w	r4, r4, #8
 800ecaa:	f300 8083 	bgt.w	800edb4 <__kernel_rem_pio2+0x62c>
 800ecae:	9c05      	ldr	r4, [sp, #20]
 800ecb0:	ab48      	add	r3, sp, #288	; 0x120
 800ecb2:	441c      	add	r4, r3
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	2d01      	cmp	r5, #1
 800ecba:	f300 809a 	bgt.w	800edf2 <__kernel_rem_pio2+0x66a>
 800ecbe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ecc2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ecc6:	f1bb 0f00 	cmp.w	fp, #0
 800ecca:	f040 8098 	bne.w	800edfe <__kernel_rem_pio2+0x676>
 800ecce:	9b04      	ldr	r3, [sp, #16]
 800ecd0:	e9c3 7800 	strd	r7, r8, [r3]
 800ecd4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ecd8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ecdc:	e7c6      	b.n	800ec6c <__kernel_rem_pio2+0x4e4>
 800ecde:	9e05      	ldr	r6, [sp, #20]
 800ece0:	ab48      	add	r3, sp, #288	; 0x120
 800ece2:	441e      	add	r6, r3
 800ece4:	462c      	mov	r4, r5
 800ece6:	2000      	movs	r0, #0
 800ece8:	2100      	movs	r1, #0
 800ecea:	2c00      	cmp	r4, #0
 800ecec:	da33      	bge.n	800ed56 <__kernel_rem_pio2+0x5ce>
 800ecee:	f1bb 0f00 	cmp.w	fp, #0
 800ecf2:	d036      	beq.n	800ed62 <__kernel_rem_pio2+0x5da>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecfa:	9c04      	ldr	r4, [sp, #16]
 800ecfc:	e9c4 2300 	strd	r2, r3, [r4]
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ed08:	f7f1 fa82 	bl	8000210 <__aeabi_dsub>
 800ed0c:	ae4a      	add	r6, sp, #296	; 0x128
 800ed0e:	2401      	movs	r4, #1
 800ed10:	42a5      	cmp	r5, r4
 800ed12:	da29      	bge.n	800ed68 <__kernel_rem_pio2+0x5e0>
 800ed14:	f1bb 0f00 	cmp.w	fp, #0
 800ed18:	d002      	beq.n	800ed20 <__kernel_rem_pio2+0x598>
 800ed1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed1e:	4619      	mov	r1, r3
 800ed20:	9b04      	ldr	r3, [sp, #16]
 800ed22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ed26:	e7a1      	b.n	800ec6c <__kernel_rem_pio2+0x4e4>
 800ed28:	9c05      	ldr	r4, [sp, #20]
 800ed2a:	ab48      	add	r3, sp, #288	; 0x120
 800ed2c:	441c      	add	r4, r3
 800ed2e:	2000      	movs	r0, #0
 800ed30:	2100      	movs	r1, #0
 800ed32:	2d00      	cmp	r5, #0
 800ed34:	da09      	bge.n	800ed4a <__kernel_rem_pio2+0x5c2>
 800ed36:	f1bb 0f00 	cmp.w	fp, #0
 800ed3a:	d002      	beq.n	800ed42 <__kernel_rem_pio2+0x5ba>
 800ed3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed40:	4619      	mov	r1, r3
 800ed42:	9b04      	ldr	r3, [sp, #16]
 800ed44:	e9c3 0100 	strd	r0, r1, [r3]
 800ed48:	e790      	b.n	800ec6c <__kernel_rem_pio2+0x4e4>
 800ed4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed4e:	f7f1 fa61 	bl	8000214 <__adddf3>
 800ed52:	3d01      	subs	r5, #1
 800ed54:	e7ed      	b.n	800ed32 <__kernel_rem_pio2+0x5aa>
 800ed56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ed5a:	f7f1 fa5b 	bl	8000214 <__adddf3>
 800ed5e:	3c01      	subs	r4, #1
 800ed60:	e7c3      	b.n	800ecea <__kernel_rem_pio2+0x562>
 800ed62:	4602      	mov	r2, r0
 800ed64:	460b      	mov	r3, r1
 800ed66:	e7c8      	b.n	800ecfa <__kernel_rem_pio2+0x572>
 800ed68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ed6c:	f7f1 fa52 	bl	8000214 <__adddf3>
 800ed70:	3401      	adds	r4, #1
 800ed72:	e7cd      	b.n	800ed10 <__kernel_rem_pio2+0x588>
 800ed74:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ed7c:	9b00      	ldr	r3, [sp, #0]
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	9300      	str	r3, [sp, #0]
 800ed82:	4632      	mov	r2, r6
 800ed84:	463b      	mov	r3, r7
 800ed86:	4640      	mov	r0, r8
 800ed88:	4649      	mov	r1, r9
 800ed8a:	f7f1 fa43 	bl	8000214 <__adddf3>
 800ed8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed92:	4602      	mov	r2, r0
 800ed94:	460b      	mov	r3, r1
 800ed96:	4640      	mov	r0, r8
 800ed98:	4649      	mov	r1, r9
 800ed9a:	f7f1 fa39 	bl	8000210 <__aeabi_dsub>
 800ed9e:	4632      	mov	r2, r6
 800eda0:	463b      	mov	r3, r7
 800eda2:	f7f1 fa37 	bl	8000214 <__adddf3>
 800eda6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800edaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800edae:	ed8a 7b00 	vstr	d7, [sl]
 800edb2:	e770      	b.n	800ec96 <__kernel_rem_pio2+0x50e>
 800edb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800edb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800edbc:	4640      	mov	r0, r8
 800edbe:	4632      	mov	r2, r6
 800edc0:	463b      	mov	r3, r7
 800edc2:	4649      	mov	r1, r9
 800edc4:	f7f1 fa26 	bl	8000214 <__adddf3>
 800edc8:	e9cd 0100 	strd	r0, r1, [sp]
 800edcc:	4602      	mov	r2, r0
 800edce:	460b      	mov	r3, r1
 800edd0:	4640      	mov	r0, r8
 800edd2:	4649      	mov	r1, r9
 800edd4:	f7f1 fa1c 	bl	8000210 <__aeabi_dsub>
 800edd8:	4632      	mov	r2, r6
 800edda:	463b      	mov	r3, r7
 800eddc:	f7f1 fa1a 	bl	8000214 <__adddf3>
 800ede0:	ed9d 7b00 	vldr	d7, [sp]
 800ede4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ede8:	ed84 7b00 	vstr	d7, [r4]
 800edec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edf0:	e757      	b.n	800eca2 <__kernel_rem_pio2+0x51a>
 800edf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800edf6:	f7f1 fa0d 	bl	8000214 <__adddf3>
 800edfa:	3d01      	subs	r5, #1
 800edfc:	e75c      	b.n	800ecb8 <__kernel_rem_pio2+0x530>
 800edfe:	9b04      	ldr	r3, [sp, #16]
 800ee00:	9a04      	ldr	r2, [sp, #16]
 800ee02:	601f      	str	r7, [r3, #0]
 800ee04:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ee08:	605c      	str	r4, [r3, #4]
 800ee0a:	609d      	str	r5, [r3, #8]
 800ee0c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ee10:	60d3      	str	r3, [r2, #12]
 800ee12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee16:	6110      	str	r0, [r2, #16]
 800ee18:	6153      	str	r3, [r2, #20]
 800ee1a:	e727      	b.n	800ec6c <__kernel_rem_pio2+0x4e4>
 800ee1c:	41700000 	.word	0x41700000
 800ee20:	3e700000 	.word	0x3e700000

0800ee24 <__kernel_rem_pio2f>:
 800ee24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee28:	ed2d 8b04 	vpush	{d8-d9}
 800ee2c:	b0d9      	sub	sp, #356	; 0x164
 800ee2e:	4688      	mov	r8, r1
 800ee30:	9002      	str	r0, [sp, #8]
 800ee32:	49b8      	ldr	r1, [pc, #736]	; (800f114 <__kernel_rem_pio2f+0x2f0>)
 800ee34:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ee36:	9301      	str	r3, [sp, #4]
 800ee38:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ee3c:	9901      	ldr	r1, [sp, #4]
 800ee3e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800ee40:	f101 3bff 	add.w	fp, r1, #4294967295
 800ee44:	1d11      	adds	r1, r2, #4
 800ee46:	db25      	blt.n	800ee94 <__kernel_rem_pio2f+0x70>
 800ee48:	1ed0      	subs	r0, r2, #3
 800ee4a:	bf48      	it	mi
 800ee4c:	1d10      	addmi	r0, r2, #4
 800ee4e:	10c0      	asrs	r0, r0, #3
 800ee50:	1c45      	adds	r5, r0, #1
 800ee52:	00e9      	lsls	r1, r5, #3
 800ee54:	eba0 070b 	sub.w	r7, r0, fp
 800ee58:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800f124 <__kernel_rem_pio2f+0x300>
 800ee5c:	9103      	str	r1, [sp, #12]
 800ee5e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800ee62:	eb0a 0c0b 	add.w	ip, sl, fp
 800ee66:	ae1c      	add	r6, sp, #112	; 0x70
 800ee68:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800ee6c:	2400      	movs	r4, #0
 800ee6e:	4564      	cmp	r4, ip
 800ee70:	dd12      	ble.n	800ee98 <__kernel_rem_pio2f+0x74>
 800ee72:	9901      	ldr	r1, [sp, #4]
 800ee74:	ac1c      	add	r4, sp, #112	; 0x70
 800ee76:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800ee7a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800ee7e:	f04f 0c00 	mov.w	ip, #0
 800ee82:	45d4      	cmp	ip, sl
 800ee84:	dc27      	bgt.n	800eed6 <__kernel_rem_pio2f+0xb2>
 800ee86:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ee8a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800f124 <__kernel_rem_pio2f+0x300>
 800ee8e:	4627      	mov	r7, r4
 800ee90:	2600      	movs	r6, #0
 800ee92:	e016      	b.n	800eec2 <__kernel_rem_pio2f+0x9e>
 800ee94:	2000      	movs	r0, #0
 800ee96:	e7db      	b.n	800ee50 <__kernel_rem_pio2f+0x2c>
 800ee98:	42e7      	cmn	r7, r4
 800ee9a:	bf5d      	ittte	pl
 800ee9c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800eea0:	ee07 1a90 	vmovpl	s15, r1
 800eea4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800eea8:	eef0 7a47 	vmovmi.f32	s15, s14
 800eeac:	ece6 7a01 	vstmia	r6!, {s15}
 800eeb0:	3401      	adds	r4, #1
 800eeb2:	e7dc      	b.n	800ee6e <__kernel_rem_pio2f+0x4a>
 800eeb4:	ecfe 6a01 	vldmia	lr!, {s13}
 800eeb8:	ed97 7a00 	vldr	s14, [r7]
 800eebc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800eec0:	3601      	adds	r6, #1
 800eec2:	455e      	cmp	r6, fp
 800eec4:	f1a7 0704 	sub.w	r7, r7, #4
 800eec8:	ddf4      	ble.n	800eeb4 <__kernel_rem_pio2f+0x90>
 800eeca:	ece9 7a01 	vstmia	r9!, {s15}
 800eece:	f10c 0c01 	add.w	ip, ip, #1
 800eed2:	3404      	adds	r4, #4
 800eed4:	e7d5      	b.n	800ee82 <__kernel_rem_pio2f+0x5e>
 800eed6:	a908      	add	r1, sp, #32
 800eed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eedc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800eee0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800f120 <__kernel_rem_pio2f+0x2fc>
 800eee4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800f11c <__kernel_rem_pio2f+0x2f8>
 800eee8:	9105      	str	r1, [sp, #20]
 800eeea:	9304      	str	r3, [sp, #16]
 800eeec:	4656      	mov	r6, sl
 800eeee:	00b3      	lsls	r3, r6, #2
 800eef0:	9306      	str	r3, [sp, #24]
 800eef2:	ab58      	add	r3, sp, #352	; 0x160
 800eef4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800eef8:	ac08      	add	r4, sp, #32
 800eefa:	ab44      	add	r3, sp, #272	; 0x110
 800eefc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ef00:	46a4      	mov	ip, r4
 800ef02:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ef06:	4637      	mov	r7, r6
 800ef08:	2f00      	cmp	r7, #0
 800ef0a:	f1a0 0004 	sub.w	r0, r0, #4
 800ef0e:	dc4a      	bgt.n	800efa6 <__kernel_rem_pio2f+0x182>
 800ef10:	4628      	mov	r0, r5
 800ef12:	9207      	str	r2, [sp, #28]
 800ef14:	f7ff fbae 	bl	800e674 <scalbnf>
 800ef18:	eeb0 8a40 	vmov.f32	s16, s0
 800ef1c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ef20:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ef24:	f7fe f970 	bl	800d208 <floorf>
 800ef28:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ef2c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ef30:	2d00      	cmp	r5, #0
 800ef32:	9a07      	ldr	r2, [sp, #28]
 800ef34:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ef38:	ee17 9a90 	vmov	r9, s15
 800ef3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef40:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ef44:	dd41      	ble.n	800efca <__kernel_rem_pio2f+0x1a6>
 800ef46:	f106 3cff 	add.w	ip, r6, #4294967295
 800ef4a:	ab08      	add	r3, sp, #32
 800ef4c:	f1c5 0e08 	rsb	lr, r5, #8
 800ef50:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800ef54:	fa47 f00e 	asr.w	r0, r7, lr
 800ef58:	4481      	add	r9, r0
 800ef5a:	fa00 f00e 	lsl.w	r0, r0, lr
 800ef5e:	1a3f      	subs	r7, r7, r0
 800ef60:	f1c5 0007 	rsb	r0, r5, #7
 800ef64:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800ef68:	4107      	asrs	r7, r0
 800ef6a:	2f00      	cmp	r7, #0
 800ef6c:	dd3c      	ble.n	800efe8 <__kernel_rem_pio2f+0x1c4>
 800ef6e:	f04f 0e00 	mov.w	lr, #0
 800ef72:	f109 0901 	add.w	r9, r9, #1
 800ef76:	4671      	mov	r1, lr
 800ef78:	4576      	cmp	r6, lr
 800ef7a:	dc67      	bgt.n	800f04c <__kernel_rem_pio2f+0x228>
 800ef7c:	2d00      	cmp	r5, #0
 800ef7e:	dd03      	ble.n	800ef88 <__kernel_rem_pio2f+0x164>
 800ef80:	2d01      	cmp	r5, #1
 800ef82:	d074      	beq.n	800f06e <__kernel_rem_pio2f+0x24a>
 800ef84:	2d02      	cmp	r5, #2
 800ef86:	d07b      	beq.n	800f080 <__kernel_rem_pio2f+0x25c>
 800ef88:	2f02      	cmp	r7, #2
 800ef8a:	d12d      	bne.n	800efe8 <__kernel_rem_pio2f+0x1c4>
 800ef8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef90:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ef94:	b341      	cbz	r1, 800efe8 <__kernel_rem_pio2f+0x1c4>
 800ef96:	4628      	mov	r0, r5
 800ef98:	9207      	str	r2, [sp, #28]
 800ef9a:	f7ff fb6b 	bl	800e674 <scalbnf>
 800ef9e:	9a07      	ldr	r2, [sp, #28]
 800efa0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800efa4:	e020      	b.n	800efe8 <__kernel_rem_pio2f+0x1c4>
 800efa6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800efaa:	3f01      	subs	r7, #1
 800efac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800efb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efb4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800efb8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800efbc:	ecac 0a01 	vstmia	ip!, {s0}
 800efc0:	ed90 0a00 	vldr	s0, [r0]
 800efc4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800efc8:	e79e      	b.n	800ef08 <__kernel_rem_pio2f+0xe4>
 800efca:	d105      	bne.n	800efd8 <__kernel_rem_pio2f+0x1b4>
 800efcc:	1e70      	subs	r0, r6, #1
 800efce:	ab08      	add	r3, sp, #32
 800efd0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800efd4:	11ff      	asrs	r7, r7, #7
 800efd6:	e7c8      	b.n	800ef6a <__kernel_rem_pio2f+0x146>
 800efd8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800efdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800efe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe4:	da30      	bge.n	800f048 <__kernel_rem_pio2f+0x224>
 800efe6:	2700      	movs	r7, #0
 800efe8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800efec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff0:	f040 809a 	bne.w	800f128 <__kernel_rem_pio2f+0x304>
 800eff4:	1e74      	subs	r4, r6, #1
 800eff6:	46a4      	mov	ip, r4
 800eff8:	2100      	movs	r1, #0
 800effa:	45d4      	cmp	ip, sl
 800effc:	da47      	bge.n	800f08e <__kernel_rem_pio2f+0x26a>
 800effe:	2900      	cmp	r1, #0
 800f000:	d063      	beq.n	800f0ca <__kernel_rem_pio2f+0x2a6>
 800f002:	ab08      	add	r3, sp, #32
 800f004:	3d08      	subs	r5, #8
 800f006:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d07f      	beq.n	800f10e <__kernel_rem_pio2f+0x2ea>
 800f00e:	4628      	mov	r0, r5
 800f010:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f014:	f7ff fb2e 	bl	800e674 <scalbnf>
 800f018:	1c63      	adds	r3, r4, #1
 800f01a:	aa44      	add	r2, sp, #272	; 0x110
 800f01c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800f120 <__kernel_rem_pio2f+0x2fc>
 800f020:	0099      	lsls	r1, r3, #2
 800f022:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f026:	4623      	mov	r3, r4
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f280 80ad 	bge.w	800f188 <__kernel_rem_pio2f+0x364>
 800f02e:	4623      	mov	r3, r4
 800f030:	2b00      	cmp	r3, #0
 800f032:	f2c0 80cb 	blt.w	800f1cc <__kernel_rem_pio2f+0x3a8>
 800f036:	aa44      	add	r2, sp, #272	; 0x110
 800f038:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f03c:	4e36      	ldr	r6, [pc, #216]	; (800f118 <__kernel_rem_pio2f+0x2f4>)
 800f03e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f124 <__kernel_rem_pio2f+0x300>
 800f042:	2000      	movs	r0, #0
 800f044:	1ae2      	subs	r2, r4, r3
 800f046:	e0b6      	b.n	800f1b6 <__kernel_rem_pio2f+0x392>
 800f048:	2702      	movs	r7, #2
 800f04a:	e790      	b.n	800ef6e <__kernel_rem_pio2f+0x14a>
 800f04c:	6820      	ldr	r0, [r4, #0]
 800f04e:	b949      	cbnz	r1, 800f064 <__kernel_rem_pio2f+0x240>
 800f050:	b118      	cbz	r0, 800f05a <__kernel_rem_pio2f+0x236>
 800f052:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800f056:	6020      	str	r0, [r4, #0]
 800f058:	2001      	movs	r0, #1
 800f05a:	f10e 0e01 	add.w	lr, lr, #1
 800f05e:	3404      	adds	r4, #4
 800f060:	4601      	mov	r1, r0
 800f062:	e789      	b.n	800ef78 <__kernel_rem_pio2f+0x154>
 800f064:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800f068:	6020      	str	r0, [r4, #0]
 800f06a:	4608      	mov	r0, r1
 800f06c:	e7f5      	b.n	800f05a <__kernel_rem_pio2f+0x236>
 800f06e:	1e74      	subs	r4, r6, #1
 800f070:	ab08      	add	r3, sp, #32
 800f072:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f076:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f07a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f07e:	e783      	b.n	800ef88 <__kernel_rem_pio2f+0x164>
 800f080:	1e74      	subs	r4, r6, #1
 800f082:	ab08      	add	r3, sp, #32
 800f084:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f088:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800f08c:	e7f5      	b.n	800f07a <__kernel_rem_pio2f+0x256>
 800f08e:	ab08      	add	r3, sp, #32
 800f090:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800f094:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f098:	4301      	orrs	r1, r0
 800f09a:	e7ae      	b.n	800effa <__kernel_rem_pio2f+0x1d6>
 800f09c:	3001      	adds	r0, #1
 800f09e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800f0a2:	2f00      	cmp	r7, #0
 800f0a4:	d0fa      	beq.n	800f09c <__kernel_rem_pio2f+0x278>
 800f0a6:	9b06      	ldr	r3, [sp, #24]
 800f0a8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800f0ac:	eb0d 0403 	add.w	r4, sp, r3
 800f0b0:	9b01      	ldr	r3, [sp, #4]
 800f0b2:	18f7      	adds	r7, r6, r3
 800f0b4:	ab1c      	add	r3, sp, #112	; 0x70
 800f0b6:	f106 0c01 	add.w	ip, r6, #1
 800f0ba:	3c4c      	subs	r4, #76	; 0x4c
 800f0bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f0c0:	4430      	add	r0, r6
 800f0c2:	4560      	cmp	r0, ip
 800f0c4:	da04      	bge.n	800f0d0 <__kernel_rem_pio2f+0x2ac>
 800f0c6:	4606      	mov	r6, r0
 800f0c8:	e711      	b.n	800eeee <__kernel_rem_pio2f+0xca>
 800f0ca:	9c05      	ldr	r4, [sp, #20]
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	e7e6      	b.n	800f09e <__kernel_rem_pio2f+0x27a>
 800f0d0:	9b04      	ldr	r3, [sp, #16]
 800f0d2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f0d6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800f0da:	9306      	str	r3, [sp, #24]
 800f0dc:	ee07 3a90 	vmov	s15, r3
 800f0e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0e4:	2600      	movs	r6, #0
 800f0e6:	ece7 7a01 	vstmia	r7!, {s15}
 800f0ea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f124 <__kernel_rem_pio2f+0x300>
 800f0ee:	46b9      	mov	r9, r7
 800f0f0:	455e      	cmp	r6, fp
 800f0f2:	dd04      	ble.n	800f0fe <__kernel_rem_pio2f+0x2da>
 800f0f4:	ece4 7a01 	vstmia	r4!, {s15}
 800f0f8:	f10c 0c01 	add.w	ip, ip, #1
 800f0fc:	e7e1      	b.n	800f0c2 <__kernel_rem_pio2f+0x29e>
 800f0fe:	ecfe 6a01 	vldmia	lr!, {s13}
 800f102:	ed39 7a01 	vldmdb	r9!, {s14}
 800f106:	3601      	adds	r6, #1
 800f108:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f10c:	e7f0      	b.n	800f0f0 <__kernel_rem_pio2f+0x2cc>
 800f10e:	3c01      	subs	r4, #1
 800f110:	e777      	b.n	800f002 <__kernel_rem_pio2f+0x1de>
 800f112:	bf00      	nop
 800f114:	0800fabc 	.word	0x0800fabc
 800f118:	0800fa90 	.word	0x0800fa90
 800f11c:	43800000 	.word	0x43800000
 800f120:	3b800000 	.word	0x3b800000
 800f124:	00000000 	.word	0x00000000
 800f128:	9b03      	ldr	r3, [sp, #12]
 800f12a:	eeb0 0a48 	vmov.f32	s0, s16
 800f12e:	1a98      	subs	r0, r3, r2
 800f130:	f7ff faa0 	bl	800e674 <scalbnf>
 800f134:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800f11c <__kernel_rem_pio2f+0x2f8>
 800f138:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f140:	db19      	blt.n	800f176 <__kernel_rem_pio2f+0x352>
 800f142:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f120 <__kernel_rem_pio2f+0x2fc>
 800f146:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f14a:	aa08      	add	r2, sp, #32
 800f14c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f150:	1c74      	adds	r4, r6, #1
 800f152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f156:	3508      	adds	r5, #8
 800f158:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f15c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f160:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f164:	ee10 3a10 	vmov	r3, s0
 800f168:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f16c:	ee17 3a90 	vmov	r3, s15
 800f170:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f174:	e74b      	b.n	800f00e <__kernel_rem_pio2f+0x1ea>
 800f176:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f17a:	aa08      	add	r2, sp, #32
 800f17c:	ee10 3a10 	vmov	r3, s0
 800f180:	4634      	mov	r4, r6
 800f182:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f186:	e742      	b.n	800f00e <__kernel_rem_pio2f+0x1ea>
 800f188:	a808      	add	r0, sp, #32
 800f18a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f18e:	9001      	str	r0, [sp, #4]
 800f190:	ee07 0a90 	vmov	s15, r0
 800f194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f198:	3b01      	subs	r3, #1
 800f19a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f19e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f1a2:	ed62 7a01 	vstmdb	r2!, {s15}
 800f1a6:	e73f      	b.n	800f028 <__kernel_rem_pio2f+0x204>
 800f1a8:	ecf6 6a01 	vldmia	r6!, {s13}
 800f1ac:	ecb5 7a01 	vldmia	r5!, {s14}
 800f1b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	4550      	cmp	r0, sl
 800f1b8:	dc01      	bgt.n	800f1be <__kernel_rem_pio2f+0x39a>
 800f1ba:	4290      	cmp	r0, r2
 800f1bc:	ddf4      	ble.n	800f1a8 <__kernel_rem_pio2f+0x384>
 800f1be:	a858      	add	r0, sp, #352	; 0x160
 800f1c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f1c4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	e731      	b.n	800f030 <__kernel_rem_pio2f+0x20c>
 800f1cc:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f1ce:	2b02      	cmp	r3, #2
 800f1d0:	dc09      	bgt.n	800f1e6 <__kernel_rem_pio2f+0x3c2>
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	dc2b      	bgt.n	800f22e <__kernel_rem_pio2f+0x40a>
 800f1d6:	d044      	beq.n	800f262 <__kernel_rem_pio2f+0x43e>
 800f1d8:	f009 0007 	and.w	r0, r9, #7
 800f1dc:	b059      	add	sp, #356	; 0x164
 800f1de:	ecbd 8b04 	vpop	{d8-d9}
 800f1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f1e8:	2b03      	cmp	r3, #3
 800f1ea:	d1f5      	bne.n	800f1d8 <__kernel_rem_pio2f+0x3b4>
 800f1ec:	aa30      	add	r2, sp, #192	; 0xc0
 800f1ee:	1f0b      	subs	r3, r1, #4
 800f1f0:	4413      	add	r3, r2
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	f1a2 0204 	sub.w	r2, r2, #4
 800f1fc:	dc52      	bgt.n	800f2a4 <__kernel_rem_pio2f+0x480>
 800f1fe:	4622      	mov	r2, r4
 800f200:	2a01      	cmp	r2, #1
 800f202:	f1a3 0304 	sub.w	r3, r3, #4
 800f206:	dc5d      	bgt.n	800f2c4 <__kernel_rem_pio2f+0x4a0>
 800f208:	ab30      	add	r3, sp, #192	; 0xc0
 800f20a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f124 <__kernel_rem_pio2f+0x300>
 800f20e:	440b      	add	r3, r1
 800f210:	2c01      	cmp	r4, #1
 800f212:	dc67      	bgt.n	800f2e4 <__kernel_rem_pio2f+0x4c0>
 800f214:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f218:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800f21c:	2f00      	cmp	r7, #0
 800f21e:	d167      	bne.n	800f2f0 <__kernel_rem_pio2f+0x4cc>
 800f220:	edc8 6a00 	vstr	s13, [r8]
 800f224:	ed88 7a01 	vstr	s14, [r8, #4]
 800f228:	edc8 7a02 	vstr	s15, [r8, #8]
 800f22c:	e7d4      	b.n	800f1d8 <__kernel_rem_pio2f+0x3b4>
 800f22e:	ab30      	add	r3, sp, #192	; 0xc0
 800f230:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800f124 <__kernel_rem_pio2f+0x300>
 800f234:	440b      	add	r3, r1
 800f236:	4622      	mov	r2, r4
 800f238:	2a00      	cmp	r2, #0
 800f23a:	da24      	bge.n	800f286 <__kernel_rem_pio2f+0x462>
 800f23c:	b34f      	cbz	r7, 800f292 <__kernel_rem_pio2f+0x46e>
 800f23e:	eef1 7a47 	vneg.f32	s15, s14
 800f242:	edc8 7a00 	vstr	s15, [r8]
 800f246:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800f24a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f24e:	aa31      	add	r2, sp, #196	; 0xc4
 800f250:	2301      	movs	r3, #1
 800f252:	429c      	cmp	r4, r3
 800f254:	da20      	bge.n	800f298 <__kernel_rem_pio2f+0x474>
 800f256:	b10f      	cbz	r7, 800f25c <__kernel_rem_pio2f+0x438>
 800f258:	eef1 7a67 	vneg.f32	s15, s15
 800f25c:	edc8 7a01 	vstr	s15, [r8, #4]
 800f260:	e7ba      	b.n	800f1d8 <__kernel_rem_pio2f+0x3b4>
 800f262:	ab30      	add	r3, sp, #192	; 0xc0
 800f264:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800f124 <__kernel_rem_pio2f+0x300>
 800f268:	440b      	add	r3, r1
 800f26a:	2c00      	cmp	r4, #0
 800f26c:	da05      	bge.n	800f27a <__kernel_rem_pio2f+0x456>
 800f26e:	b10f      	cbz	r7, 800f274 <__kernel_rem_pio2f+0x450>
 800f270:	eef1 7a67 	vneg.f32	s15, s15
 800f274:	edc8 7a00 	vstr	s15, [r8]
 800f278:	e7ae      	b.n	800f1d8 <__kernel_rem_pio2f+0x3b4>
 800f27a:	ed33 7a01 	vldmdb	r3!, {s14}
 800f27e:	3c01      	subs	r4, #1
 800f280:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f284:	e7f1      	b.n	800f26a <__kernel_rem_pio2f+0x446>
 800f286:	ed73 7a01 	vldmdb	r3!, {s15}
 800f28a:	3a01      	subs	r2, #1
 800f28c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f290:	e7d2      	b.n	800f238 <__kernel_rem_pio2f+0x414>
 800f292:	eef0 7a47 	vmov.f32	s15, s14
 800f296:	e7d4      	b.n	800f242 <__kernel_rem_pio2f+0x41e>
 800f298:	ecb2 7a01 	vldmia	r2!, {s14}
 800f29c:	3301      	adds	r3, #1
 800f29e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f2a2:	e7d6      	b.n	800f252 <__kernel_rem_pio2f+0x42e>
 800f2a4:	edd2 7a00 	vldr	s15, [r2]
 800f2a8:	edd2 6a01 	vldr	s13, [r2, #4]
 800f2ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f2b0:	3801      	subs	r0, #1
 800f2b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f2b6:	ed82 7a00 	vstr	s14, [r2]
 800f2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2be:	edc2 7a01 	vstr	s15, [r2, #4]
 800f2c2:	e798      	b.n	800f1f6 <__kernel_rem_pio2f+0x3d2>
 800f2c4:	edd3 7a00 	vldr	s15, [r3]
 800f2c8:	edd3 6a01 	vldr	s13, [r3, #4]
 800f2cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f2d0:	3a01      	subs	r2, #1
 800f2d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f2d6:	ed83 7a00 	vstr	s14, [r3]
 800f2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2de:	edc3 7a01 	vstr	s15, [r3, #4]
 800f2e2:	e78d      	b.n	800f200 <__kernel_rem_pio2f+0x3dc>
 800f2e4:	ed33 7a01 	vldmdb	r3!, {s14}
 800f2e8:	3c01      	subs	r4, #1
 800f2ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f2ee:	e78f      	b.n	800f210 <__kernel_rem_pio2f+0x3ec>
 800f2f0:	eef1 6a66 	vneg.f32	s13, s13
 800f2f4:	eeb1 7a47 	vneg.f32	s14, s14
 800f2f8:	edc8 6a00 	vstr	s13, [r8]
 800f2fc:	ed88 7a01 	vstr	s14, [r8, #4]
 800f300:	eef1 7a67 	vneg.f32	s15, s15
 800f304:	e790      	b.n	800f228 <__kernel_rem_pio2f+0x404>
 800f306:	bf00      	nop

0800f308 <scalbn>:
 800f308:	b570      	push	{r4, r5, r6, lr}
 800f30a:	ec55 4b10 	vmov	r4, r5, d0
 800f30e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f312:	4606      	mov	r6, r0
 800f314:	462b      	mov	r3, r5
 800f316:	b999      	cbnz	r1, 800f340 <scalbn+0x38>
 800f318:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f31c:	4323      	orrs	r3, r4
 800f31e:	d03f      	beq.n	800f3a0 <scalbn+0x98>
 800f320:	4b35      	ldr	r3, [pc, #212]	; (800f3f8 <scalbn+0xf0>)
 800f322:	4629      	mov	r1, r5
 800f324:	ee10 0a10 	vmov	r0, s0
 800f328:	2200      	movs	r2, #0
 800f32a:	f7f1 f929 	bl	8000580 <__aeabi_dmul>
 800f32e:	4b33      	ldr	r3, [pc, #204]	; (800f3fc <scalbn+0xf4>)
 800f330:	429e      	cmp	r6, r3
 800f332:	4604      	mov	r4, r0
 800f334:	460d      	mov	r5, r1
 800f336:	da10      	bge.n	800f35a <scalbn+0x52>
 800f338:	a327      	add	r3, pc, #156	; (adr r3, 800f3d8 <scalbn+0xd0>)
 800f33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33e:	e01f      	b.n	800f380 <scalbn+0x78>
 800f340:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f344:	4291      	cmp	r1, r2
 800f346:	d10c      	bne.n	800f362 <scalbn+0x5a>
 800f348:	ee10 2a10 	vmov	r2, s0
 800f34c:	4620      	mov	r0, r4
 800f34e:	4629      	mov	r1, r5
 800f350:	f7f0 ff60 	bl	8000214 <__adddf3>
 800f354:	4604      	mov	r4, r0
 800f356:	460d      	mov	r5, r1
 800f358:	e022      	b.n	800f3a0 <scalbn+0x98>
 800f35a:	460b      	mov	r3, r1
 800f35c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f360:	3936      	subs	r1, #54	; 0x36
 800f362:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f366:	4296      	cmp	r6, r2
 800f368:	dd0d      	ble.n	800f386 <scalbn+0x7e>
 800f36a:	2d00      	cmp	r5, #0
 800f36c:	a11c      	add	r1, pc, #112	; (adr r1, 800f3e0 <scalbn+0xd8>)
 800f36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f372:	da02      	bge.n	800f37a <scalbn+0x72>
 800f374:	a11c      	add	r1, pc, #112	; (adr r1, 800f3e8 <scalbn+0xe0>)
 800f376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f37a:	a319      	add	r3, pc, #100	; (adr r3, 800f3e0 <scalbn+0xd8>)
 800f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f380:	f7f1 f8fe 	bl	8000580 <__aeabi_dmul>
 800f384:	e7e6      	b.n	800f354 <scalbn+0x4c>
 800f386:	1872      	adds	r2, r6, r1
 800f388:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f38c:	428a      	cmp	r2, r1
 800f38e:	dcec      	bgt.n	800f36a <scalbn+0x62>
 800f390:	2a00      	cmp	r2, #0
 800f392:	dd08      	ble.n	800f3a6 <scalbn+0x9e>
 800f394:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f398:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f39c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f3a0:	ec45 4b10 	vmov	d0, r4, r5
 800f3a4:	bd70      	pop	{r4, r5, r6, pc}
 800f3a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f3aa:	da08      	bge.n	800f3be <scalbn+0xb6>
 800f3ac:	2d00      	cmp	r5, #0
 800f3ae:	a10a      	add	r1, pc, #40	; (adr r1, 800f3d8 <scalbn+0xd0>)
 800f3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3b4:	dac0      	bge.n	800f338 <scalbn+0x30>
 800f3b6:	a10e      	add	r1, pc, #56	; (adr r1, 800f3f0 <scalbn+0xe8>)
 800f3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3bc:	e7bc      	b.n	800f338 <scalbn+0x30>
 800f3be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f3c2:	3236      	adds	r2, #54	; 0x36
 800f3c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f3c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	4b0c      	ldr	r3, [pc, #48]	; (800f400 <scalbn+0xf8>)
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	e7d5      	b.n	800f380 <scalbn+0x78>
 800f3d4:	f3af 8000 	nop.w
 800f3d8:	c2f8f359 	.word	0xc2f8f359
 800f3dc:	01a56e1f 	.word	0x01a56e1f
 800f3e0:	8800759c 	.word	0x8800759c
 800f3e4:	7e37e43c 	.word	0x7e37e43c
 800f3e8:	8800759c 	.word	0x8800759c
 800f3ec:	fe37e43c 	.word	0xfe37e43c
 800f3f0:	c2f8f359 	.word	0xc2f8f359
 800f3f4:	81a56e1f 	.word	0x81a56e1f
 800f3f8:	43500000 	.word	0x43500000
 800f3fc:	ffff3cb0 	.word	0xffff3cb0
 800f400:	3c900000 	.word	0x3c900000

0800f404 <_init>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	bf00      	nop
 800f408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f40a:	bc08      	pop	{r3}
 800f40c:	469e      	mov	lr, r3
 800f40e:	4770      	bx	lr

0800f410 <_fini>:
 800f410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f412:	bf00      	nop
 800f414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f416:	bc08      	pop	{r3}
 800f418:	469e      	mov	lr, r3
 800f41a:	4770      	bx	lr
